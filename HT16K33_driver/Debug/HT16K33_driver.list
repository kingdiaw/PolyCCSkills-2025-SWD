
HT16K33_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e54  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08005f14  08005f14  00006f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006058  08006058  00008070  2**0
                  CONTENTS
  4 .ARM          00000008  08006058  08006058  00007058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006060  08006060  00008070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006060  08006060  00007060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006064  08006064  00007064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08006068  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000340  20000070  080060d8  00008070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003b0  080060d8  000083b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010e83  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000280d  00000000  00000000  00018f1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001010  00000000  00000000  0001b728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c84  00000000  00000000  0001c738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015e84  00000000  00000000  0001d3bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014367  00000000  00000000  00033240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082479  00000000  00000000  000475a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c9a20  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000415c  00000000  00000000  000c9a64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000cdbc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005efc 	.word	0x08005efc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08005efc 	.word	0x08005efc

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	@ (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	@ (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			@ (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f834 	bl	80002d0 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			@ (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4699      	mov	r9, r3
 800027a:	0c03      	lsrs	r3, r0, #16
 800027c:	469c      	mov	ip, r3
 800027e:	0413      	lsls	r3, r2, #16
 8000280:	4647      	mov	r7, r8
 8000282:	0c1b      	lsrs	r3, r3, #16
 8000284:	001d      	movs	r5, r3
 8000286:	000e      	movs	r6, r1
 8000288:	4661      	mov	r1, ip
 800028a:	0404      	lsls	r4, r0, #16
 800028c:	0c24      	lsrs	r4, r4, #16
 800028e:	b580      	push	{r7, lr}
 8000290:	0007      	movs	r7, r0
 8000292:	0c10      	lsrs	r0, r2, #16
 8000294:	434b      	muls	r3, r1
 8000296:	4365      	muls	r5, r4
 8000298:	4341      	muls	r1, r0
 800029a:	4360      	muls	r0, r4
 800029c:	0c2c      	lsrs	r4, r5, #16
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	1824      	adds	r4, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	42a3      	cmp	r3, r4
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	@ 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4356      	muls	r6, r2
 80002b6:	0c23      	lsrs	r3, r4, #16
 80002b8:	042d      	lsls	r5, r5, #16
 80002ba:	0c2d      	lsrs	r5, r5, #16
 80002bc:	1989      	adds	r1, r1, r6
 80002be:	4463      	add	r3, ip
 80002c0:	0424      	lsls	r4, r4, #16
 80002c2:	1960      	adds	r0, r4, r5
 80002c4:	18c9      	adds	r1, r1, r3
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			@ (mov r8, r8)

080002d0 <__udivmoddi4>:
 80002d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d2:	4657      	mov	r7, sl
 80002d4:	464e      	mov	r6, r9
 80002d6:	4645      	mov	r5, r8
 80002d8:	46de      	mov	lr, fp
 80002da:	b5e0      	push	{r5, r6, r7, lr}
 80002dc:	0004      	movs	r4, r0
 80002de:	000d      	movs	r5, r1
 80002e0:	4692      	mov	sl, r2
 80002e2:	4699      	mov	r9, r3
 80002e4:	b083      	sub	sp, #12
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d830      	bhi.n	800034c <__udivmoddi4+0x7c>
 80002ea:	d02d      	beq.n	8000348 <__udivmoddi4+0x78>
 80002ec:	4649      	mov	r1, r9
 80002ee:	4650      	mov	r0, sl
 80002f0:	f000 f8ba 	bl	8000468 <__clzdi2>
 80002f4:	0029      	movs	r1, r5
 80002f6:	0006      	movs	r6, r0
 80002f8:	0020      	movs	r0, r4
 80002fa:	f000 f8b5 	bl	8000468 <__clzdi2>
 80002fe:	1a33      	subs	r3, r6, r0
 8000300:	4698      	mov	r8, r3
 8000302:	3b20      	subs	r3, #32
 8000304:	d434      	bmi.n	8000370 <__udivmoddi4+0xa0>
 8000306:	469b      	mov	fp, r3
 8000308:	4653      	mov	r3, sl
 800030a:	465a      	mov	r2, fp
 800030c:	4093      	lsls	r3, r2
 800030e:	4642      	mov	r2, r8
 8000310:	001f      	movs	r7, r3
 8000312:	4653      	mov	r3, sl
 8000314:	4093      	lsls	r3, r2
 8000316:	001e      	movs	r6, r3
 8000318:	42af      	cmp	r7, r5
 800031a:	d83b      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800031c:	42af      	cmp	r7, r5
 800031e:	d100      	bne.n	8000322 <__udivmoddi4+0x52>
 8000320:	e079      	b.n	8000416 <__udivmoddi4+0x146>
 8000322:	465b      	mov	r3, fp
 8000324:	1ba4      	subs	r4, r4, r6
 8000326:	41bd      	sbcs	r5, r7
 8000328:	2b00      	cmp	r3, #0
 800032a:	da00      	bge.n	800032e <__udivmoddi4+0x5e>
 800032c:	e076      	b.n	800041c <__udivmoddi4+0x14c>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	2301      	movs	r3, #1
 8000338:	465a      	mov	r2, fp
 800033a:	4093      	lsls	r3, r2
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2301      	movs	r3, #1
 8000340:	4642      	mov	r2, r8
 8000342:	4093      	lsls	r3, r2
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	e029      	b.n	800039c <__udivmoddi4+0xcc>
 8000348:	4282      	cmp	r2, r0
 800034a:	d9cf      	bls.n	80002ec <__udivmoddi4+0x1c>
 800034c:	2200      	movs	r2, #0
 800034e:	2300      	movs	r3, #0
 8000350:	9200      	str	r2, [sp, #0]
 8000352:	9301      	str	r3, [sp, #4]
 8000354:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <__udivmoddi4+0x8e>
 800035a:	601c      	str	r4, [r3, #0]
 800035c:	605d      	str	r5, [r3, #4]
 800035e:	9800      	ldr	r0, [sp, #0]
 8000360:	9901      	ldr	r1, [sp, #4]
 8000362:	b003      	add	sp, #12
 8000364:	bcf0      	pop	{r4, r5, r6, r7}
 8000366:	46bb      	mov	fp, r7
 8000368:	46b2      	mov	sl, r6
 800036a:	46a9      	mov	r9, r5
 800036c:	46a0      	mov	r8, r4
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000370:	4642      	mov	r2, r8
 8000372:	469b      	mov	fp, r3
 8000374:	2320      	movs	r3, #32
 8000376:	1a9b      	subs	r3, r3, r2
 8000378:	4652      	mov	r2, sl
 800037a:	40da      	lsrs	r2, r3
 800037c:	4641      	mov	r1, r8
 800037e:	0013      	movs	r3, r2
 8000380:	464a      	mov	r2, r9
 8000382:	408a      	lsls	r2, r1
 8000384:	0017      	movs	r7, r2
 8000386:	4642      	mov	r2, r8
 8000388:	431f      	orrs	r7, r3
 800038a:	4653      	mov	r3, sl
 800038c:	4093      	lsls	r3, r2
 800038e:	001e      	movs	r6, r3
 8000390:	42af      	cmp	r7, r5
 8000392:	d9c3      	bls.n	800031c <__udivmoddi4+0x4c>
 8000394:	2200      	movs	r2, #0
 8000396:	2300      	movs	r3, #0
 8000398:	9200      	str	r2, [sp, #0]
 800039a:	9301      	str	r3, [sp, #4]
 800039c:	4643      	mov	r3, r8
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d0d8      	beq.n	8000354 <__udivmoddi4+0x84>
 80003a2:	07fb      	lsls	r3, r7, #31
 80003a4:	0872      	lsrs	r2, r6, #1
 80003a6:	431a      	orrs	r2, r3
 80003a8:	4646      	mov	r6, r8
 80003aa:	087b      	lsrs	r3, r7, #1
 80003ac:	e00e      	b.n	80003cc <__udivmoddi4+0xfc>
 80003ae:	42ab      	cmp	r3, r5
 80003b0:	d101      	bne.n	80003b6 <__udivmoddi4+0xe6>
 80003b2:	42a2      	cmp	r2, r4
 80003b4:	d80c      	bhi.n	80003d0 <__udivmoddi4+0x100>
 80003b6:	1aa4      	subs	r4, r4, r2
 80003b8:	419d      	sbcs	r5, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2100      	movs	r1, #0
 80003c2:	3e01      	subs	r6, #1
 80003c4:	1824      	adds	r4, r4, r0
 80003c6:	414d      	adcs	r5, r1
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d006      	beq.n	80003da <__udivmoddi4+0x10a>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d9ee      	bls.n	80003ae <__udivmoddi4+0xde>
 80003d0:	3e01      	subs	r6, #1
 80003d2:	1924      	adds	r4, r4, r4
 80003d4:	416d      	adcs	r5, r5
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d1f8      	bne.n	80003cc <__udivmoddi4+0xfc>
 80003da:	9800      	ldr	r0, [sp, #0]
 80003dc:	9901      	ldr	r1, [sp, #4]
 80003de:	465b      	mov	r3, fp
 80003e0:	1900      	adds	r0, r0, r4
 80003e2:	4169      	adcs	r1, r5
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db24      	blt.n	8000432 <__udivmoddi4+0x162>
 80003e8:	002b      	movs	r3, r5
 80003ea:	465a      	mov	r2, fp
 80003ec:	4644      	mov	r4, r8
 80003ee:	40d3      	lsrs	r3, r2
 80003f0:	002a      	movs	r2, r5
 80003f2:	40e2      	lsrs	r2, r4
 80003f4:	001c      	movs	r4, r3
 80003f6:	465b      	mov	r3, fp
 80003f8:	0015      	movs	r5, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	db2a      	blt.n	8000454 <__udivmoddi4+0x184>
 80003fe:	0026      	movs	r6, r4
 8000400:	409e      	lsls	r6, r3
 8000402:	0033      	movs	r3, r6
 8000404:	0026      	movs	r6, r4
 8000406:	4647      	mov	r7, r8
 8000408:	40be      	lsls	r6, r7
 800040a:	0032      	movs	r2, r6
 800040c:	1a80      	subs	r0, r0, r2
 800040e:	4199      	sbcs	r1, r3
 8000410:	9000      	str	r0, [sp, #0]
 8000412:	9101      	str	r1, [sp, #4]
 8000414:	e79e      	b.n	8000354 <__udivmoddi4+0x84>
 8000416:	42a3      	cmp	r3, r4
 8000418:	d8bc      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800041a:	e782      	b.n	8000322 <__udivmoddi4+0x52>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	2100      	movs	r1, #0
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	2200      	movs	r2, #0
 8000426:	9100      	str	r1, [sp, #0]
 8000428:	9201      	str	r2, [sp, #4]
 800042a:	2201      	movs	r2, #1
 800042c:	40da      	lsrs	r2, r3
 800042e:	9201      	str	r2, [sp, #4]
 8000430:	e785      	b.n	800033e <__udivmoddi4+0x6e>
 8000432:	4642      	mov	r2, r8
 8000434:	2320      	movs	r3, #32
 8000436:	1a9b      	subs	r3, r3, r2
 8000438:	002a      	movs	r2, r5
 800043a:	4646      	mov	r6, r8
 800043c:	409a      	lsls	r2, r3
 800043e:	0023      	movs	r3, r4
 8000440:	40f3      	lsrs	r3, r6
 8000442:	4644      	mov	r4, r8
 8000444:	4313      	orrs	r3, r2
 8000446:	002a      	movs	r2, r5
 8000448:	40e2      	lsrs	r2, r4
 800044a:	001c      	movs	r4, r3
 800044c:	465b      	mov	r3, fp
 800044e:	0015      	movs	r5, r2
 8000450:	2b00      	cmp	r3, #0
 8000452:	dad4      	bge.n	80003fe <__udivmoddi4+0x12e>
 8000454:	4642      	mov	r2, r8
 8000456:	002f      	movs	r7, r5
 8000458:	2320      	movs	r3, #32
 800045a:	0026      	movs	r6, r4
 800045c:	4097      	lsls	r7, r2
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	40de      	lsrs	r6, r3
 8000462:	003b      	movs	r3, r7
 8000464:	4333      	orrs	r3, r6
 8000466:	e7cd      	b.n	8000404 <__udivmoddi4+0x134>

08000468 <__clzdi2>:
 8000468:	b510      	push	{r4, lr}
 800046a:	2900      	cmp	r1, #0
 800046c:	d103      	bne.n	8000476 <__clzdi2+0xe>
 800046e:	f000 f807 	bl	8000480 <__clzsi2>
 8000472:	3020      	adds	r0, #32
 8000474:	e002      	b.n	800047c <__clzdi2+0x14>
 8000476:	0008      	movs	r0, r1
 8000478:	f000 f802 	bl	8000480 <__clzsi2>
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__clzsi2>:
 8000480:	211c      	movs	r1, #28
 8000482:	2301      	movs	r3, #1
 8000484:	041b      	lsls	r3, r3, #16
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0xe>
 800048a:	0c00      	lsrs	r0, r0, #16
 800048c:	3910      	subs	r1, #16
 800048e:	0a1b      	lsrs	r3, r3, #8
 8000490:	4298      	cmp	r0, r3
 8000492:	d301      	bcc.n	8000498 <__clzsi2+0x18>
 8000494:	0a00      	lsrs	r0, r0, #8
 8000496:	3908      	subs	r1, #8
 8000498:	091b      	lsrs	r3, r3, #4
 800049a:	4298      	cmp	r0, r3
 800049c:	d301      	bcc.n	80004a2 <__clzsi2+0x22>
 800049e:	0900      	lsrs	r0, r0, #4
 80004a0:	3904      	subs	r1, #4
 80004a2:	a202      	add	r2, pc, #8	@ (adr r2, 80004ac <__clzsi2+0x2c>)
 80004a4:	5c10      	ldrb	r0, [r2, r0]
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	4770      	bx	lr
 80004aa:	46c0      	nop			@ (mov r8, r8)
 80004ac:	02020304 	.word	0x02020304
 80004b0:	01010101 	.word	0x01010101
	...

080004bc <TM1651_Init>:
 80004bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004be:	b08b      	sub	sp, #44	@ 0x2c
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	60f8      	str	r0, [r7, #12]
 80004c4:	60b9      	str	r1, [r7, #8]
 80004c6:	603b      	str	r3, [r7, #0]
 80004c8:	1dbb      	adds	r3, r7, #6
 80004ca:	801a      	strh	r2, [r3, #0]
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	68ba      	ldr	r2, [r7, #8]
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	1dba      	adds	r2, r7, #6
 80004d6:	8812      	ldrh	r2, [r2, #0]
 80004d8:	809a      	strh	r2, [r3, #4]
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	683a      	ldr	r2, [r7, #0]
 80004de:	609a      	str	r2, [r3, #8]
 80004e0:	68fa      	ldr	r2, [r7, #12]
 80004e2:	2530      	movs	r5, #48	@ 0x30
 80004e4:	2608      	movs	r6, #8
 80004e6:	19ab      	adds	r3, r5, r6
 80004e8:	2108      	movs	r1, #8
 80004ea:	468c      	mov	ip, r1
 80004ec:	44bc      	add	ip, r7
 80004ee:	4463      	add	r3, ip
 80004f0:	881b      	ldrh	r3, [r3, #0]
 80004f2:	8193      	strh	r3, [r2, #12]
 80004f4:	2414      	movs	r4, #20
 80004f6:	193b      	adds	r3, r7, r4
 80004f8:	0018      	movs	r0, r3
 80004fa:	2314      	movs	r3, #20
 80004fc:	001a      	movs	r2, r3
 80004fe:	2100      	movs	r1, #0
 8000500:	f004 ff5a 	bl	80053b8 <memset>
 8000504:	1dba      	adds	r2, r7, #6
 8000506:	19ab      	adds	r3, r5, r6
 8000508:	2108      	movs	r1, #8
 800050a:	468c      	mov	ip, r1
 800050c:	44bc      	add	ip, r7
 800050e:	4463      	add	r3, ip
 8000510:	8812      	ldrh	r2, [r2, #0]
 8000512:	881b      	ldrh	r3, [r3, #0]
 8000514:	4313      	orrs	r3, r2
 8000516:	b29b      	uxth	r3, r3
 8000518:	001a      	movs	r2, r3
 800051a:	0021      	movs	r1, r4
 800051c:	187b      	adds	r3, r7, r1
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	187b      	adds	r3, r7, r1
 8000522:	2201      	movs	r2, #1
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	187b      	adds	r3, r7, r1
 8000528:	2200      	movs	r2, #0
 800052a:	609a      	str	r2, [r3, #8]
 800052c:	187b      	adds	r3, r7, r1
 800052e:	2200      	movs	r2, #0
 8000530:	60da      	str	r2, [r3, #12]
 8000532:	187a      	adds	r2, r7, r1
 8000534:	68bb      	ldr	r3, [r7, #8]
 8000536:	0011      	movs	r1, r2
 8000538:	0018      	movs	r0, r3
 800053a:	f001 fcfd 	bl	8001f38 <HAL_GPIO_Init>
 800053e:	68f8      	ldr	r0, [r7, #12]
 8000540:	23c0      	movs	r3, #192	@ 0xc0
 8000542:	2240      	movs	r2, #64	@ 0x40
 8000544:	2102      	movs	r1, #2
 8000546:	f000 f9a3 	bl	8000890 <TM1651_Set>
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	0018      	movs	r0, r3
 800054e:	f000 f98d 	bl	800086c <TM1651_ClearDisplay>
 8000552:	46c0      	nop			@ (mov r8, r8)
 8000554:	46bd      	mov	sp, r7
 8000556:	b00b      	add	sp, #44	@ 0x2c
 8000558:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800055a <TM1651_WriteByte>:
 800055a:	b5b0      	push	{r4, r5, r7, lr}
 800055c:	b088      	sub	sp, #32
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
 8000562:	000a      	movs	r2, r1
 8000564:	1cfb      	adds	r3, r7, #3
 8000566:	701a      	strb	r2, [r3, #0]
 8000568:	231f      	movs	r3, #31
 800056a:	18fb      	adds	r3, r7, r3
 800056c:	1cfa      	adds	r2, r7, #3
 800056e:	7812      	ldrb	r2, [r2, #0]
 8000570:	701a      	strb	r2, [r3, #0]
 8000572:	231e      	movs	r3, #30
 8000574:	18fb      	adds	r3, r7, r3
 8000576:	2200      	movs	r2, #0
 8000578:	701a      	strb	r2, [r3, #0]
 800057a:	e038      	b.n	80005ee <TM1651_WriteByte+0x94>
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	6818      	ldr	r0, [r3, #0]
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	889b      	ldrh	r3, [r3, #4]
 8000584:	2200      	movs	r2, #0
 8000586:	0019      	movs	r1, r3
 8000588:	f001 fe69 	bl	800225e <HAL_GPIO_WritePin>
 800058c:	f000 f9a2 	bl	80008d4 <TM1651_BitDelay>
 8000590:	231f      	movs	r3, #31
 8000592:	18fb      	adds	r3, r7, r3
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	2201      	movs	r2, #1
 8000598:	4013      	ands	r3, r2
 800059a:	d008      	beq.n	80005ae <TM1651_WriteByte+0x54>
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	6898      	ldr	r0, [r3, #8]
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	899b      	ldrh	r3, [r3, #12]
 80005a4:	2201      	movs	r2, #1
 80005a6:	0019      	movs	r1, r3
 80005a8:	f001 fe59 	bl	800225e <HAL_GPIO_WritePin>
 80005ac:	e007      	b.n	80005be <TM1651_WriteByte+0x64>
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	6898      	ldr	r0, [r3, #8]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	899b      	ldrh	r3, [r3, #12]
 80005b6:	2200      	movs	r2, #0
 80005b8:	0019      	movs	r1, r3
 80005ba:	f001 fe50 	bl	800225e <HAL_GPIO_WritePin>
 80005be:	f000 f989 	bl	80008d4 <TM1651_BitDelay>
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	6818      	ldr	r0, [r3, #0]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	889b      	ldrh	r3, [r3, #4]
 80005ca:	2201      	movs	r2, #1
 80005cc:	0019      	movs	r1, r3
 80005ce:	f001 fe46 	bl	800225e <HAL_GPIO_WritePin>
 80005d2:	f000 f97f 	bl	80008d4 <TM1651_BitDelay>
 80005d6:	221f      	movs	r2, #31
 80005d8:	18bb      	adds	r3, r7, r2
 80005da:	18ba      	adds	r2, r7, r2
 80005dc:	7812      	ldrb	r2, [r2, #0]
 80005de:	0852      	lsrs	r2, r2, #1
 80005e0:	701a      	strb	r2, [r3, #0]
 80005e2:	211e      	movs	r1, #30
 80005e4:	187b      	adds	r3, r7, r1
 80005e6:	781a      	ldrb	r2, [r3, #0]
 80005e8:	187b      	adds	r3, r7, r1
 80005ea:	3201      	adds	r2, #1
 80005ec:	701a      	strb	r2, [r3, #0]
 80005ee:	231e      	movs	r3, #30
 80005f0:	18fb      	adds	r3, r7, r3
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b07      	cmp	r3, #7
 80005f6:	d9c1      	bls.n	800057c <TM1651_WriteByte+0x22>
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	6818      	ldr	r0, [r3, #0]
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	889b      	ldrh	r3, [r3, #4]
 8000600:	2200      	movs	r2, #0
 8000602:	0019      	movs	r1, r3
 8000604:	f001 fe2b 	bl	800225e <HAL_GPIO_WritePin>
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	6898      	ldr	r0, [r3, #8]
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	899b      	ldrh	r3, [r3, #12]
 8000610:	2201      	movs	r2, #1
 8000612:	0019      	movs	r1, r3
 8000614:	f001 fe23 	bl	800225e <HAL_GPIO_WritePin>
 8000618:	f000 f95c 	bl	80008d4 <TM1651_BitDelay>
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	6818      	ldr	r0, [r3, #0]
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	889b      	ldrh	r3, [r3, #4]
 8000624:	2201      	movs	r2, #1
 8000626:	0019      	movs	r1, r3
 8000628:	f001 fe19 	bl	800225e <HAL_GPIO_WritePin>
 800062c:	f000 f952 	bl	80008d4 <TM1651_BitDelay>
 8000630:	2408      	movs	r4, #8
 8000632:	193b      	adds	r3, r7, r4
 8000634:	0018      	movs	r0, r3
 8000636:	2314      	movs	r3, #20
 8000638:	001a      	movs	r2, r3
 800063a:	2100      	movs	r1, #0
 800063c:	f004 febc 	bl	80053b8 <memset>
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	899b      	ldrh	r3, [r3, #12]
 8000644:	001a      	movs	r2, r3
 8000646:	0025      	movs	r5, r4
 8000648:	197b      	adds	r3, r7, r5
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	197b      	adds	r3, r7, r5
 800064e:	2200      	movs	r2, #0
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	197b      	adds	r3, r7, r5
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	689b      	ldr	r3, [r3, #8]
 800065c:	197a      	adds	r2, r7, r5
 800065e:	0011      	movs	r1, r2
 8000660:	0018      	movs	r0, r3
 8000662:	f001 fc69 	bl	8001f38 <HAL_GPIO_Init>
 8000666:	f000 f935 	bl	80008d4 <TM1651_BitDelay>
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	689a      	ldr	r2, [r3, #8]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	899b      	ldrh	r3, [r3, #12]
 8000672:	211d      	movs	r1, #29
 8000674:	187c      	adds	r4, r7, r1
 8000676:	0019      	movs	r1, r3
 8000678:	0010      	movs	r0, r2
 800067a:	f001 fdd3 	bl	8002224 <HAL_GPIO_ReadPin>
 800067e:	0003      	movs	r3, r0
 8000680:	7023      	strb	r3, [r4, #0]
 8000682:	197b      	adds	r3, r7, r5
 8000684:	2201      	movs	r2, #1
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	689b      	ldr	r3, [r3, #8]
 800068c:	197a      	adds	r2, r7, r5
 800068e:	0011      	movs	r1, r2
 8000690:	0018      	movs	r0, r3
 8000692:	f001 fc51 	bl	8001f38 <HAL_GPIO_Init>
 8000696:	f000 f91d 	bl	80008d4 <TM1651_BitDelay>
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	6818      	ldr	r0, [r3, #0]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	889b      	ldrh	r3, [r3, #4]
 80006a2:	2200      	movs	r2, #0
 80006a4:	0019      	movs	r1, r3
 80006a6:	f001 fdda 	bl	800225e <HAL_GPIO_WritePin>
 80006aa:	f000 f913 	bl	80008d4 <TM1651_BitDelay>
 80006ae:	46c0      	nop			@ (mov r8, r8)
 80006b0:	46bd      	mov	sp, r7
 80006b2:	b008      	add	sp, #32
 80006b4:	bdb0      	pop	{r4, r5, r7, pc}

080006b6 <TM1651_Start>:
 80006b6:	b580      	push	{r7, lr}
 80006b8:	b082      	sub	sp, #8
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	6078      	str	r0, [r7, #4]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	6898      	ldr	r0, [r3, #8]
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	899b      	ldrh	r3, [r3, #12]
 80006c6:	2200      	movs	r2, #0
 80006c8:	0019      	movs	r1, r3
 80006ca:	f001 fdc8 	bl	800225e <HAL_GPIO_WritePin>
 80006ce:	f000 f901 	bl	80008d4 <TM1651_BitDelay>
 80006d2:	46c0      	nop			@ (mov r8, r8)
 80006d4:	46bd      	mov	sp, r7
 80006d6:	b002      	add	sp, #8
 80006d8:	bd80      	pop	{r7, pc}

080006da <TM1651_Stop>:
 80006da:	b580      	push	{r7, lr}
 80006dc:	b082      	sub	sp, #8
 80006de:	af00      	add	r7, sp, #0
 80006e0:	6078      	str	r0, [r7, #4]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	6898      	ldr	r0, [r3, #8]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	899b      	ldrh	r3, [r3, #12]
 80006ea:	2200      	movs	r2, #0
 80006ec:	0019      	movs	r1, r3
 80006ee:	f001 fdb6 	bl	800225e <HAL_GPIO_WritePin>
 80006f2:	f000 f8ef 	bl	80008d4 <TM1651_BitDelay>
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	6818      	ldr	r0, [r3, #0]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	889b      	ldrh	r3, [r3, #4]
 80006fe:	2201      	movs	r2, #1
 8000700:	0019      	movs	r1, r3
 8000702:	f001 fdac 	bl	800225e <HAL_GPIO_WritePin>
 8000706:	f000 f8e5 	bl	80008d4 <TM1651_BitDelay>
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	6898      	ldr	r0, [r3, #8]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	899b      	ldrh	r3, [r3, #12]
 8000712:	2201      	movs	r2, #1
 8000714:	0019      	movs	r1, r3
 8000716:	f001 fda2 	bl	800225e <HAL_GPIO_WritePin>
 800071a:	f000 f8db 	bl	80008d4 <TM1651_BitDelay>
 800071e:	46c0      	nop			@ (mov r8, r8)
 8000720:	46bd      	mov	sp, r7
 8000722:	b002      	add	sp, #8
 8000724:	bd80      	pop	{r7, pc}
	...

08000728 <TM1651_DisplayLevel>:
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	000a      	movs	r2, r1
 8000732:	1cfb      	adds	r3, r7, #3
 8000734:	701a      	strb	r2, [r3, #0]
 8000736:	1cfb      	adds	r3, r7, #3
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	2b07      	cmp	r3, #7
 800073c:	d835      	bhi.n	80007aa <TM1651_DisplayLevel+0x82>
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	0018      	movs	r0, r3
 8000742:	f7ff ffb8 	bl	80006b6 <TM1651_Start>
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	2144      	movs	r1, #68	@ 0x44
 800074a:	0018      	movs	r0, r3
 800074c:	f7ff ff05 	bl	800055a <TM1651_WriteByte>
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	0018      	movs	r0, r3
 8000754:	f7ff ffc1 	bl	80006da <TM1651_Stop>
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	0018      	movs	r0, r3
 800075c:	f7ff ffab 	bl	80006b6 <TM1651_Start>
 8000760:	2340      	movs	r3, #64	@ 0x40
 8000762:	425a      	negs	r2, r3
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	0011      	movs	r1, r2
 8000768:	0018      	movs	r0, r3
 800076a:	f7ff fef6 	bl	800055a <TM1651_WriteByte>
 800076e:	1cfb      	adds	r3, r7, #3
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	4a10      	ldr	r2, [pc, #64]	@ (80007b4 <TM1651_DisplayLevel+0x8c>)
 8000774:	56d2      	ldrsb	r2, [r2, r3]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	0011      	movs	r1, r2
 800077a:	0018      	movs	r0, r3
 800077c:	f7ff feed 	bl	800055a <TM1651_WriteByte>
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	0018      	movs	r0, r3
 8000784:	f7ff ffa9 	bl	80006da <TM1651_Stop>
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	0018      	movs	r0, r3
 800078c:	f7ff ff93 	bl	80006b6 <TM1651_Start>
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	7c1b      	ldrb	r3, [r3, #16]
 8000794:	b25a      	sxtb	r2, r3
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	0011      	movs	r1, r2
 800079a:	0018      	movs	r0, r3
 800079c:	f7ff fedd 	bl	800055a <TM1651_WriteByte>
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	0018      	movs	r0, r3
 80007a4:	f7ff ff99 	bl	80006da <TM1651_Stop>
 80007a8:	e000      	b.n	80007ac <TM1651_DisplayLevel+0x84>
 80007aa:	46c0      	nop			@ (mov r8, r8)
 80007ac:	46bd      	mov	sp, r7
 80007ae:	b002      	add	sp, #8
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	46c0      	nop			@ (mov r8, r8)
 80007b4:	20000000 	.word	0x20000000

080007b8 <TM1651_Frame>:
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	000a      	movs	r2, r1
 80007c2:	1cfb      	adds	r3, r7, #3
 80007c4:	701a      	strb	r2, [r3, #0]
 80007c6:	1cfb      	adds	r3, r7, #3
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <TM1651_Frame+0x1a>
 80007ce:	2240      	movs	r2, #64	@ 0x40
 80007d0:	e000      	b.n	80007d4 <TM1651_Frame+0x1c>
 80007d2:	2200      	movs	r2, #0
 80007d4:	230e      	movs	r3, #14
 80007d6:	18fb      	adds	r3, r7, r3
 80007d8:	701a      	strb	r2, [r3, #0]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	0018      	movs	r0, r3
 80007de:	f7ff ff6a 	bl	80006b6 <TM1651_Start>
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2140      	movs	r1, #64	@ 0x40
 80007e6:	0018      	movs	r0, r3
 80007e8:	f7ff feb7 	bl	800055a <TM1651_WriteByte>
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	0018      	movs	r0, r3
 80007f0:	f7ff ff73 	bl	80006da <TM1651_Stop>
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	0018      	movs	r0, r3
 80007f8:	f7ff ff5d 	bl	80006b6 <TM1651_Start>
 80007fc:	233f      	movs	r3, #63	@ 0x3f
 80007fe:	425a      	negs	r2, r3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	0011      	movs	r1, r2
 8000804:	0018      	movs	r0, r3
 8000806:	f7ff fea8 	bl	800055a <TM1651_WriteByte>
 800080a:	230f      	movs	r3, #15
 800080c:	18fb      	adds	r3, r7, r3
 800080e:	2200      	movs	r2, #0
 8000810:	701a      	strb	r2, [r3, #0]
 8000812:	e00e      	b.n	8000832 <TM1651_Frame+0x7a>
 8000814:	230e      	movs	r3, #14
 8000816:	18fb      	adds	r3, r7, r3
 8000818:	2200      	movs	r2, #0
 800081a:	569a      	ldrsb	r2, [r3, r2]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	0011      	movs	r1, r2
 8000820:	0018      	movs	r0, r3
 8000822:	f7ff fe9a 	bl	800055a <TM1651_WriteByte>
 8000826:	210f      	movs	r1, #15
 8000828:	187b      	adds	r3, r7, r1
 800082a:	781a      	ldrb	r2, [r3, #0]
 800082c:	187b      	adds	r3, r7, r1
 800082e:	3201      	adds	r2, #1
 8000830:	701a      	strb	r2, [r3, #0]
 8000832:	230f      	movs	r3, #15
 8000834:	18fb      	adds	r3, r7, r3
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	2b02      	cmp	r3, #2
 800083a:	d9eb      	bls.n	8000814 <TM1651_Frame+0x5c>
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	0018      	movs	r0, r3
 8000840:	f7ff ff4b 	bl	80006da <TM1651_Stop>
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	0018      	movs	r0, r3
 8000848:	f7ff ff35 	bl	80006b6 <TM1651_Start>
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	7c1b      	ldrb	r3, [r3, #16]
 8000850:	b25a      	sxtb	r2, r3
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	0011      	movs	r1, r2
 8000856:	0018      	movs	r0, r3
 8000858:	f7ff fe7f 	bl	800055a <TM1651_WriteByte>
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	0018      	movs	r0, r3
 8000860:	f7ff ff3b 	bl	80006da <TM1651_Stop>
 8000864:	46c0      	nop			@ (mov r8, r8)
 8000866:	46bd      	mov	sp, r7
 8000868:	b004      	add	sp, #16
 800086a:	bd80      	pop	{r7, pc}

0800086c <TM1651_ClearDisplay>:
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2100      	movs	r1, #0
 8000878:	0018      	movs	r0, r3
 800087a:	f7ff ff55 	bl	8000728 <TM1651_DisplayLevel>
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2100      	movs	r1, #0
 8000882:	0018      	movs	r0, r3
 8000884:	f7ff ff98 	bl	80007b8 <TM1651_Frame>
 8000888:	46c0      	nop			@ (mov r8, r8)
 800088a:	46bd      	mov	sp, r7
 800088c:	b002      	add	sp, #8
 800088e:	bd80      	pop	{r7, pc}

08000890 <TM1651_Set>:
 8000890:	b590      	push	{r4, r7, lr}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	000c      	movs	r4, r1
 800089a:	0010      	movs	r0, r2
 800089c:	0019      	movs	r1, r3
 800089e:	1cfb      	adds	r3, r7, #3
 80008a0:	1c22      	adds	r2, r4, #0
 80008a2:	701a      	strb	r2, [r3, #0]
 80008a4:	1cbb      	adds	r3, r7, #2
 80008a6:	1c02      	adds	r2, r0, #0
 80008a8:	701a      	strb	r2, [r3, #0]
 80008aa:	1c7b      	adds	r3, r7, #1
 80008ac:	1c0a      	adds	r2, r1, #0
 80008ae:	701a      	strb	r2, [r3, #0]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	1cba      	adds	r2, r7, #2
 80008b4:	7812      	ldrb	r2, [r2, #0]
 80008b6:	739a      	strb	r2, [r3, #14]
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	1c7a      	adds	r2, r7, #1
 80008bc:	7812      	ldrb	r2, [r2, #0]
 80008be:	73da      	strb	r2, [r3, #15]
 80008c0:	1cfb      	adds	r3, r7, #3
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	3b78      	subs	r3, #120	@ 0x78
 80008c6:	b2da      	uxtb	r2, r3
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	741a      	strb	r2, [r3, #16]
 80008cc:	46c0      	nop			@ (mov r8, r8)
 80008ce:	46bd      	mov	sp, r7
 80008d0:	b003      	add	sp, #12
 80008d2:	bd90      	pop	{r4, r7, pc}

080008d4 <TM1651_BitDelay>:
 80008d4:	b590      	push	{r4, r7, lr}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4b12      	ldr	r3, [pc, #72]	@ (8000924 <TM1651_BitDelay+0x50>)
 80008dc:	689b      	ldr	r3, [r3, #8]
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	4b11      	ldr	r3, [pc, #68]	@ (8000928 <TM1651_BitDelay+0x54>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4911      	ldr	r1, [pc, #68]	@ (800092c <TM1651_BitDelay+0x58>)
 80008e6:	0018      	movs	r0, r3
 80008e8:	f7ff fc18 	bl	800011c <__udivsi3>
 80008ec:	0003      	movs	r3, r0
 80008ee:	001a      	movs	r2, r3
 80008f0:	2332      	movs	r3, #50	@ 0x32
 80008f2:	4353      	muls	r3, r2
 80008f4:	001c      	movs	r4, r3
 80008f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000928 <TM1651_BitDelay+0x54>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	490c      	ldr	r1, [pc, #48]	@ (800092c <TM1651_BitDelay+0x58>)
 80008fc:	0018      	movs	r0, r3
 80008fe:	f7ff fc0d 	bl	800011c <__udivsi3>
 8000902:	0003      	movs	r3, r0
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	1ae3      	subs	r3, r4, r3
 8000908:	603b      	str	r3, [r7, #0]
 800090a:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <TM1651_BitDelay+0x50>)
 800090c:	689b      	ldr	r3, [r3, #8]
 800090e:	687a      	ldr	r2, [r7, #4]
 8000910:	1ad3      	subs	r3, r2, r3
 8000912:	683a      	ldr	r2, [r7, #0]
 8000914:	429a      	cmp	r2, r3
 8000916:	d8f8      	bhi.n	800090a <TM1651_BitDelay+0x36>
 8000918:	46c0      	nop			@ (mov r8, r8)
 800091a:	46c0      	nop			@ (mov r8, r8)
 800091c:	46bd      	mov	sp, r7
 800091e:	b003      	add	sp, #12
 8000920:	bd90      	pop	{r4, r7, pc}
 8000922:	46c0      	nop			@ (mov r8, r8)
 8000924:	e000e010 	.word	0xe000e010
 8000928:	20000008 	.word	0x20000008
 800092c:	000f4240 	.word	0x000f4240

08000930 <HT16K33_Init>:
 8000930:	b580      	push	{r7, lr}
 8000932:	b086      	sub	sp, #24
 8000934:	af02      	add	r7, sp, #8
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	6039      	str	r1, [r7, #0]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	683a      	ldr	r2, [r7, #0]
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	210c      	movs	r1, #12
 8000942:	187b      	adds	r3, r7, r1
 8000944:	4a13      	ldr	r2, [pc, #76]	@ (8000994 <HT16K33_Init+0x64>)
 8000946:	7812      	ldrb	r2, [r2, #0]
 8000948:	701a      	strb	r2, [r3, #0]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	6818      	ldr	r0, [r3, #0]
 800094e:	187a      	adds	r2, r7, r1
 8000950:	2301      	movs	r3, #1
 8000952:	425b      	negs	r3, r3
 8000954:	9300      	str	r3, [sp, #0]
 8000956:	2301      	movs	r3, #1
 8000958:	21e0      	movs	r1, #224	@ 0xe0
 800095a:	f001 fd6b 	bl	8002434 <HAL_I2C_Master_Transmit>
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	0018      	movs	r0, r3
 8000962:	f000 f889 	bl	8000a78 <HT16K33_Clear>
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	0018      	movs	r0, r3
 800096a:	f000 f8a6 	bl	8000aba <HT16K33_WriteDisplay>
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	2100      	movs	r1, #0
 8000972:	0018      	movs	r0, r3
 8000974:	f000 f858 	bl	8000a28 <HT16K33_BlinkRate>
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	210f      	movs	r1, #15
 800097c:	0018      	movs	r0, r3
 800097e:	f000 f82e 	bl	80009de <HT16K33_SetBrightness>
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2101      	movs	r1, #1
 8000986:	0018      	movs	r0, r3
 8000988:	f000 f806 	bl	8000998 <HT16K33_SetDisplayState>
 800098c:	46c0      	nop			@ (mov r8, r8)
 800098e:	46bd      	mov	sp, r7
 8000990:	b004      	add	sp, #16
 8000992:	bd80      	pop	{r7, pc}
 8000994:	08005f14 	.word	0x08005f14

08000998 <HT16K33_SetDisplayState>:
 8000998:	b580      	push	{r7, lr}
 800099a:	b086      	sub	sp, #24
 800099c:	af02      	add	r7, sp, #8
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	000a      	movs	r2, r1
 80009a2:	1cfb      	adds	r3, r7, #3
 80009a4:	701a      	strb	r2, [r3, #0]
 80009a6:	1cfb      	adds	r3, r7, #3
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d004      	beq.n	80009b8 <HT16K33_SetDisplayState+0x20>
 80009ae:	230f      	movs	r3, #15
 80009b0:	18fb      	adds	r3, r7, r3
 80009b2:	2281      	movs	r2, #129	@ 0x81
 80009b4:	701a      	strb	r2, [r3, #0]
 80009b6:	e003      	b.n	80009c0 <HT16K33_SetDisplayState+0x28>
 80009b8:	230f      	movs	r3, #15
 80009ba:	18fb      	adds	r3, r7, r3
 80009bc:	2280      	movs	r2, #128	@ 0x80
 80009be:	701a      	strb	r2, [r3, #0]
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	6818      	ldr	r0, [r3, #0]
 80009c4:	230f      	movs	r3, #15
 80009c6:	18fa      	adds	r2, r7, r3
 80009c8:	2301      	movs	r3, #1
 80009ca:	425b      	negs	r3, r3
 80009cc:	9300      	str	r3, [sp, #0]
 80009ce:	2301      	movs	r3, #1
 80009d0:	21e0      	movs	r1, #224	@ 0xe0
 80009d2:	f001 fd2f 	bl	8002434 <HAL_I2C_Master_Transmit>
 80009d6:	46c0      	nop			@ (mov r8, r8)
 80009d8:	46bd      	mov	sp, r7
 80009da:	b004      	add	sp, #16
 80009dc:	bd80      	pop	{r7, pc}

080009de <HT16K33_SetBrightness>:
 80009de:	b580      	push	{r7, lr}
 80009e0:	b086      	sub	sp, #24
 80009e2:	af02      	add	r7, sp, #8
 80009e4:	6078      	str	r0, [r7, #4]
 80009e6:	000a      	movs	r2, r1
 80009e8:	1cfb      	adds	r3, r7, #3
 80009ea:	701a      	strb	r2, [r3, #0]
 80009ec:	1cfb      	adds	r3, r7, #3
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	2b0f      	cmp	r3, #15
 80009f2:	d902      	bls.n	80009fa <HT16K33_SetBrightness+0x1c>
 80009f4:	1cfb      	adds	r3, r7, #3
 80009f6:	220f      	movs	r2, #15
 80009f8:	701a      	strb	r2, [r3, #0]
 80009fa:	1cfb      	adds	r3, r7, #3
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	2220      	movs	r2, #32
 8000a00:	4252      	negs	r2, r2
 8000a02:	4313      	orrs	r3, r2
 8000a04:	b2da      	uxtb	r2, r3
 8000a06:	210f      	movs	r1, #15
 8000a08:	187b      	adds	r3, r7, r1
 8000a0a:	701a      	strb	r2, [r3, #0]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	6818      	ldr	r0, [r3, #0]
 8000a10:	187a      	adds	r2, r7, r1
 8000a12:	2301      	movs	r3, #1
 8000a14:	425b      	negs	r3, r3
 8000a16:	9300      	str	r3, [sp, #0]
 8000a18:	2301      	movs	r3, #1
 8000a1a:	21e0      	movs	r1, #224	@ 0xe0
 8000a1c:	f001 fd0a 	bl	8002434 <HAL_I2C_Master_Transmit>
 8000a20:	46c0      	nop			@ (mov r8, r8)
 8000a22:	46bd      	mov	sp, r7
 8000a24:	b004      	add	sp, #16
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <HT16K33_BlinkRate>:
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af02      	add	r7, sp, #8
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	000a      	movs	r2, r1
 8000a32:	1cfb      	adds	r3, r7, #3
 8000a34:	701a      	strb	r2, [r3, #0]
 8000a36:	1cfb      	adds	r3, r7, #3
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2b03      	cmp	r3, #3
 8000a3c:	d902      	bls.n	8000a44 <HT16K33_BlinkRate+0x1c>
 8000a3e:	1cfb      	adds	r3, r7, #3
 8000a40:	2200      	movs	r2, #0
 8000a42:	701a      	strb	r2, [r3, #0]
 8000a44:	1cfb      	adds	r3, r7, #3
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	005b      	lsls	r3, r3, #1
 8000a4a:	b25b      	sxtb	r3, r3
 8000a4c:	227f      	movs	r2, #127	@ 0x7f
 8000a4e:	4252      	negs	r2, r2
 8000a50:	4313      	orrs	r3, r2
 8000a52:	b25b      	sxtb	r3, r3
 8000a54:	b2da      	uxtb	r2, r3
 8000a56:	210f      	movs	r1, #15
 8000a58:	187b      	adds	r3, r7, r1
 8000a5a:	701a      	strb	r2, [r3, #0]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	6818      	ldr	r0, [r3, #0]
 8000a60:	187a      	adds	r2, r7, r1
 8000a62:	2301      	movs	r3, #1
 8000a64:	425b      	negs	r3, r3
 8000a66:	9300      	str	r3, [sp, #0]
 8000a68:	2301      	movs	r3, #1
 8000a6a:	21e0      	movs	r1, #224	@ 0xe0
 8000a6c:	f001 fce2 	bl	8002434 <HAL_I2C_Master_Transmit>
 8000a70:	46c0      	nop			@ (mov r8, r8)
 8000a72:	46bd      	mov	sp, r7
 8000a74:	b004      	add	sp, #16
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <HT16K33_Clear>:
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	230f      	movs	r3, #15
 8000a82:	18fb      	adds	r3, r7, r3
 8000a84:	2200      	movs	r2, #0
 8000a86:	701a      	strb	r2, [r3, #0]
 8000a88:	e00d      	b.n	8000aa6 <HT16K33_Clear+0x2e>
 8000a8a:	210f      	movs	r1, #15
 8000a8c:	187b      	adds	r3, r7, r1
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	687a      	ldr	r2, [r7, #4]
 8000a92:	005b      	lsls	r3, r3, #1
 8000a94:	18d3      	adds	r3, r2, r3
 8000a96:	3304      	adds	r3, #4
 8000a98:	2200      	movs	r2, #0
 8000a9a:	801a      	strh	r2, [r3, #0]
 8000a9c:	187b      	adds	r3, r7, r1
 8000a9e:	781a      	ldrb	r2, [r3, #0]
 8000aa0:	187b      	adds	r3, r7, r1
 8000aa2:	3201      	adds	r2, #1
 8000aa4:	701a      	strb	r2, [r3, #0]
 8000aa6:	230f      	movs	r3, #15
 8000aa8:	18fb      	adds	r3, r7, r3
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	2b07      	cmp	r3, #7
 8000aae:	d9ec      	bls.n	8000a8a <HT16K33_Clear+0x12>
 8000ab0:	46c0      	nop			@ (mov r8, r8)
 8000ab2:	46c0      	nop			@ (mov r8, r8)
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	b004      	add	sp, #16
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <HT16K33_WriteDisplay>:
 8000aba:	b590      	push	{r4, r7, lr}
 8000abc:	b08b      	sub	sp, #44	@ 0x2c
 8000abe:	af02      	add	r7, sp, #8
 8000ac0:	6078      	str	r0, [r7, #4]
 8000ac2:	230c      	movs	r3, #12
 8000ac4:	18fb      	adds	r3, r7, r3
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	701a      	strb	r2, [r3, #0]
 8000aca:	231f      	movs	r3, #31
 8000acc:	18fb      	adds	r3, r7, r3
 8000ace:	2200      	movs	r2, #0
 8000ad0:	701a      	strb	r2, [r3, #0]
 8000ad2:	e024      	b.n	8000b1e <HT16K33_WriteDisplay+0x64>
 8000ad4:	201f      	movs	r0, #31
 8000ad6:	183b      	adds	r3, r7, r0
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	687a      	ldr	r2, [r7, #4]
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	18d3      	adds	r3, r2, r3
 8000ae0:	3304      	adds	r3, #4
 8000ae2:	881a      	ldrh	r2, [r3, #0]
 8000ae4:	183b      	adds	r3, r7, r0
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	005b      	lsls	r3, r3, #1
 8000aea:	3301      	adds	r3, #1
 8000aec:	b2d1      	uxtb	r1, r2
 8000aee:	240c      	movs	r4, #12
 8000af0:	193a      	adds	r2, r7, r4
 8000af2:	54d1      	strb	r1, [r2, r3]
 8000af4:	183b      	adds	r3, r7, r0
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	687a      	ldr	r2, [r7, #4]
 8000afa:	005b      	lsls	r3, r3, #1
 8000afc:	18d3      	adds	r3, r2, r3
 8000afe:	3304      	adds	r3, #4
 8000b00:	881b      	ldrh	r3, [r3, #0]
 8000b02:	0a1b      	lsrs	r3, r3, #8
 8000b04:	b29a      	uxth	r2, r3
 8000b06:	183b      	adds	r3, r7, r0
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	005b      	lsls	r3, r3, #1
 8000b0e:	b2d1      	uxtb	r1, r2
 8000b10:	193a      	adds	r2, r7, r4
 8000b12:	54d1      	strb	r1, [r2, r3]
 8000b14:	183b      	adds	r3, r7, r0
 8000b16:	781a      	ldrb	r2, [r3, #0]
 8000b18:	183b      	adds	r3, r7, r0
 8000b1a:	3201      	adds	r2, #1
 8000b1c:	701a      	strb	r2, [r3, #0]
 8000b1e:	231f      	movs	r3, #31
 8000b20:	18fb      	adds	r3, r7, r3
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	2b07      	cmp	r3, #7
 8000b26:	d9d5      	bls.n	8000ad4 <HT16K33_WriteDisplay+0x1a>
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6818      	ldr	r0, [r3, #0]
 8000b2c:	230c      	movs	r3, #12
 8000b2e:	18fa      	adds	r2, r7, r3
 8000b30:	2301      	movs	r3, #1
 8000b32:	425b      	negs	r3, r3
 8000b34:	9300      	str	r3, [sp, #0]
 8000b36:	2311      	movs	r3, #17
 8000b38:	21e0      	movs	r1, #224	@ 0xe0
 8000b3a:	f001 fc7b 	bl	8002434 <HAL_I2C_Master_Transmit>
 8000b3e:	46c0      	nop			@ (mov r8, r8)
 8000b40:	46bd      	mov	sp, r7
 8000b42:	b009      	add	sp, #36	@ 0x24
 8000b44:	bd90      	pop	{r4, r7, pc}

08000b46 <HT16K33_DrawPixel>:
 8000b46:	b590      	push	{r4, r7, lr}
 8000b48:	b083      	sub	sp, #12
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
 8000b4e:	000c      	movs	r4, r1
 8000b50:	0010      	movs	r0, r2
 8000b52:	0019      	movs	r1, r3
 8000b54:	1cfb      	adds	r3, r7, #3
 8000b56:	1c22      	adds	r2, r4, #0
 8000b58:	701a      	strb	r2, [r3, #0]
 8000b5a:	1cbb      	adds	r3, r7, #2
 8000b5c:	1c02      	adds	r2, r0, #0
 8000b5e:	701a      	strb	r2, [r3, #0]
 8000b60:	1c7b      	adds	r3, r7, #1
 8000b62:	1c0a      	adds	r2, r1, #0
 8000b64:	701a      	strb	r2, [r3, #0]
 8000b66:	1cfb      	adds	r3, r7, #3
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	2b0f      	cmp	r3, #15
 8000b6c:	d83d      	bhi.n	8000bea <HT16K33_DrawPixel+0xa4>
 8000b6e:	1cbb      	adds	r3, r7, #2
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	2b07      	cmp	r3, #7
 8000b74:	d839      	bhi.n	8000bea <HT16K33_DrawPixel+0xa4>
 8000b76:	1c7b      	adds	r3, r7, #1
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d019      	beq.n	8000bb2 <HT16K33_DrawPixel+0x6c>
 8000b7e:	1cbb      	adds	r3, r7, #2
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	687a      	ldr	r2, [r7, #4]
 8000b84:	005b      	lsls	r3, r3, #1
 8000b86:	18d3      	adds	r3, r2, r3
 8000b88:	3304      	adds	r3, #4
 8000b8a:	881b      	ldrh	r3, [r3, #0]
 8000b8c:	b21a      	sxth	r2, r3
 8000b8e:	1cfb      	adds	r3, r7, #3
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	2101      	movs	r1, #1
 8000b94:	4099      	lsls	r1, r3
 8000b96:	000b      	movs	r3, r1
 8000b98:	b21b      	sxth	r3, r3
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	b21a      	sxth	r2, r3
 8000b9e:	1cbb      	adds	r3, r7, #2
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	b291      	uxth	r1, r2
 8000ba4:	687a      	ldr	r2, [r7, #4]
 8000ba6:	005b      	lsls	r3, r3, #1
 8000ba8:	18d3      	adds	r3, r2, r3
 8000baa:	3304      	adds	r3, #4
 8000bac:	1c0a      	adds	r2, r1, #0
 8000bae:	801a      	strh	r2, [r3, #0]
 8000bb0:	e01c      	b.n	8000bec <HT16K33_DrawPixel+0xa6>
 8000bb2:	1cbb      	adds	r3, r7, #2
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	18d3      	adds	r3, r2, r3
 8000bbc:	3304      	adds	r3, #4
 8000bbe:	881b      	ldrh	r3, [r3, #0]
 8000bc0:	b21b      	sxth	r3, r3
 8000bc2:	1cfa      	adds	r2, r7, #3
 8000bc4:	7812      	ldrb	r2, [r2, #0]
 8000bc6:	2101      	movs	r1, #1
 8000bc8:	4091      	lsls	r1, r2
 8000bca:	000a      	movs	r2, r1
 8000bcc:	b212      	sxth	r2, r2
 8000bce:	43d2      	mvns	r2, r2
 8000bd0:	b212      	sxth	r2, r2
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	b21a      	sxth	r2, r3
 8000bd6:	1cbb      	adds	r3, r7, #2
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	b291      	uxth	r1, r2
 8000bdc:	687a      	ldr	r2, [r7, #4]
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	18d3      	adds	r3, r2, r3
 8000be2:	3304      	adds	r3, #4
 8000be4:	1c0a      	adds	r2, r1, #0
 8000be6:	801a      	strh	r2, [r3, #0]
 8000be8:	e000      	b.n	8000bec <HT16K33_DrawPixel+0xa6>
 8000bea:	46c0      	nop			@ (mov r8, r8)
 8000bec:	46bd      	mov	sp, r7
 8000bee:	b003      	add	sp, #12
 8000bf0:	bd90      	pop	{r4, r7, pc}
	...

08000bf4 <__io_putchar>:
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	425b      	negs	r3, r3
 8000c00:	1d39      	adds	r1, r7, #4
 8000c02:	4804      	ldr	r0, [pc, #16]	@ (8000c14 <__io_putchar+0x20>)
 8000c04:	2201      	movs	r2, #1
 8000c06:	f003 fc69 	bl	80044dc <HAL_UART_Transmit>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	b002      	add	sp, #8
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	200001b0 	.word	0x200001b0

08000c18 <DisplayBitmapWithRotate>:
 8000c18:	b590      	push	{r4, r7, lr}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	000a      	movs	r2, r1
 8000c22:	1cfb      	adds	r3, r7, #3
 8000c24:	701a      	strb	r2, [r3, #0]
 8000c26:	1cfb      	adds	r3, r7, #3
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	b25b      	sxtb	r3, r3
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d10e      	bne.n	8000c4e <DisplayBitmapWithRotate+0x36>
 8000c30:	4b33      	ldr	r3, [pc, #204]	@ (8000d00 <DisplayBitmapWithRotate+0xe8>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	3301      	adds	r3, #1
 8000c36:	4a33      	ldr	r2, [pc, #204]	@ (8000d04 <DisplayBitmapWithRotate+0xec>)
 8000c38:	4013      	ands	r3, r2
 8000c3a:	d504      	bpl.n	8000c46 <DisplayBitmapWithRotate+0x2e>
 8000c3c:	3b01      	subs	r3, #1
 8000c3e:	2210      	movs	r2, #16
 8000c40:	4252      	negs	r2, r2
 8000c42:	4313      	orrs	r3, r2
 8000c44:	3301      	adds	r3, #1
 8000c46:	b2da      	uxtb	r2, r3
 8000c48:	4b2d      	ldr	r3, [pc, #180]	@ (8000d00 <DisplayBitmapWithRotate+0xe8>)
 8000c4a:	701a      	strb	r2, [r3, #0]
 8000c4c:	e012      	b.n	8000c74 <DisplayBitmapWithRotate+0x5c>
 8000c4e:	1cfb      	adds	r3, r7, #3
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	b25b      	sxtb	r3, r3
 8000c54:	3301      	adds	r3, #1
 8000c56:	d10d      	bne.n	8000c74 <DisplayBitmapWithRotate+0x5c>
 8000c58:	4b29      	ldr	r3, [pc, #164]	@ (8000d00 <DisplayBitmapWithRotate+0xe8>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	330f      	adds	r3, #15
 8000c5e:	4a29      	ldr	r2, [pc, #164]	@ (8000d04 <DisplayBitmapWithRotate+0xec>)
 8000c60:	4013      	ands	r3, r2
 8000c62:	d504      	bpl.n	8000c6e <DisplayBitmapWithRotate+0x56>
 8000c64:	3b01      	subs	r3, #1
 8000c66:	2210      	movs	r2, #16
 8000c68:	4252      	negs	r2, r2
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	b2da      	uxtb	r2, r3
 8000c70:	4b23      	ldr	r3, [pc, #140]	@ (8000d00 <DisplayBitmapWithRotate+0xe8>)
 8000c72:	701a      	strb	r2, [r3, #0]
 8000c74:	230f      	movs	r3, #15
 8000c76:	18fb      	adds	r3, r7, r3
 8000c78:	2200      	movs	r2, #0
 8000c7a:	701a      	strb	r2, [r3, #0]
 8000c7c:	e033      	b.n	8000ce6 <DisplayBitmapWithRotate+0xce>
 8000c7e:	230f      	movs	r3, #15
 8000c80:	18fb      	adds	r3, r7, r3
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	687a      	ldr	r2, [r7, #4]
 8000c86:	18d3      	adds	r3, r2, r3
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	001a      	movs	r2, r3
 8000c8c:	240c      	movs	r4, #12
 8000c8e:	193b      	adds	r3, r7, r4
 8000c90:	0112      	lsls	r2, r2, #4
 8000c92:	801a      	strh	r2, [r3, #0]
 8000c94:	1cfb      	adds	r3, r7, #3
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	b25b      	sxtb	r3, r3
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d013      	beq.n	8000cc6 <DisplayBitmapWithRotate+0xae>
 8000c9e:	193b      	adds	r3, r7, r4
 8000ca0:	881b      	ldrh	r3, [r3, #0]
 8000ca2:	4a17      	ldr	r2, [pc, #92]	@ (8000d00 <DisplayBitmapWithRotate+0xe8>)
 8000ca4:	7812      	ldrb	r2, [r2, #0]
 8000ca6:	4093      	lsls	r3, r2
 8000ca8:	b21a      	sxth	r2, r3
 8000caa:	193b      	adds	r3, r7, r4
 8000cac:	8819      	ldrh	r1, [r3, #0]
 8000cae:	4b14      	ldr	r3, [pc, #80]	@ (8000d00 <DisplayBitmapWithRotate+0xe8>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	2310      	movs	r3, #16
 8000cb6:	1a1b      	subs	r3, r3, r0
 8000cb8:	4119      	asrs	r1, r3
 8000cba:	000b      	movs	r3, r1
 8000cbc:	b21b      	sxth	r3, r3
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	b21a      	sxth	r2, r3
 8000cc2:	193b      	adds	r3, r7, r4
 8000cc4:	801a      	strh	r2, [r3, #0]
 8000cc6:	210f      	movs	r1, #15
 8000cc8:	187b      	adds	r3, r7, r1
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	4a0e      	ldr	r2, [pc, #56]	@ (8000d08 <DisplayBitmapWithRotate+0xf0>)
 8000cce:	005b      	lsls	r3, r3, #1
 8000cd0:	18d3      	adds	r3, r2, r3
 8000cd2:	3304      	adds	r3, #4
 8000cd4:	220c      	movs	r2, #12
 8000cd6:	18ba      	adds	r2, r7, r2
 8000cd8:	8812      	ldrh	r2, [r2, #0]
 8000cda:	801a      	strh	r2, [r3, #0]
 8000cdc:	187b      	adds	r3, r7, r1
 8000cde:	781a      	ldrb	r2, [r3, #0]
 8000ce0:	187b      	adds	r3, r7, r1
 8000ce2:	3201      	adds	r2, #1
 8000ce4:	701a      	strb	r2, [r3, #0]
 8000ce6:	230f      	movs	r3, #15
 8000ce8:	18fb      	adds	r3, r7, r3
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	2b07      	cmp	r3, #7
 8000cee:	d9c6      	bls.n	8000c7e <DisplayBitmapWithRotate+0x66>
 8000cf0:	4b05      	ldr	r3, [pc, #20]	@ (8000d08 <DisplayBitmapWithRotate+0xf0>)
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f7ff fee1 	bl	8000aba <HT16K33_WriteDisplay>
 8000cf8:	46c0      	nop			@ (mov r8, r8)
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	b005      	add	sp, #20
 8000cfe:	bd90      	pop	{r4, r7, pc}
 8000d00:	20000255 	.word	0x20000255
 8000d04:	8000000f 	.word	0x8000000f
 8000d08:	200000c0 	.word	0x200000c0

08000d0c <main>:
 8000d0c:	b590      	push	{r4, r7, lr}
 8000d0e:	b087      	sub	sp, #28
 8000d10:	af04      	add	r7, sp, #16
 8000d12:	f000 fe9d 	bl	8001a50 <HAL_Init>
 8000d16:	f000 f969 	bl	8000fec <SystemClock_Config>
 8000d1a:	f000 faef 	bl	80012fc <MX_GPIO_Init>
 8000d1e:	f000 facf 	bl	80012c0 <MX_DMA_Init>
 8000d22:	f000 fa9d 	bl	8001260 <MX_USART2_UART_Init>
 8000d26:	f000 f9d5 	bl	80010d4 <MX_I2C1_Init>
 8000d2a:	f000 fa13 	bl	8001154 <MX_TIM2_Init>
 8000d2e:	4c98      	ldr	r4, [pc, #608]	@ (8000f90 <main+0x284>)
 8000d30:	2380      	movs	r3, #128	@ 0x80
 8000d32:	00da      	lsls	r2, r3, #3
 8000d34:	23a0      	movs	r3, #160	@ 0xa0
 8000d36:	05d9      	lsls	r1, r3, #23
 8000d38:	4896      	ldr	r0, [pc, #600]	@ (8000f94 <main+0x288>)
 8000d3a:	2320      	movs	r3, #32
 8000d3c:	9302      	str	r3, [sp, #8]
 8000d3e:	4b94      	ldr	r3, [pc, #592]	@ (8000f90 <main+0x284>)
 8000d40:	9301      	str	r3, [sp, #4]
 8000d42:	2308      	movs	r3, #8
 8000d44:	9300      	str	r3, [sp, #0]
 8000d46:	0023      	movs	r3, r4
 8000d48:	f000 fbce 	bl	80014e8 <RotaryEncoder_Init>
 8000d4c:	4b92      	ldr	r3, [pc, #584]	@ (8000f98 <main+0x28c>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	701a      	strb	r2, [r3, #0]
 8000d52:	23a0      	movs	r3, #160	@ 0xa0
 8000d54:	05db      	lsls	r3, r3, #23
 8000d56:	22a0      	movs	r2, #160	@ 0xa0
 8000d58:	05d1      	lsls	r1, r2, #23
 8000d5a:	4890      	ldr	r0, [pc, #576]	@ (8000f9c <main+0x290>)
 8000d5c:	2280      	movs	r2, #128	@ 0x80
 8000d5e:	9200      	str	r2, [sp, #0]
 8000d60:	2240      	movs	r2, #64	@ 0x40
 8000d62:	f7ff fbab 	bl	80004bc <TM1651_Init>
 8000d66:	4b8d      	ldr	r3, [pc, #564]	@ (8000f9c <main+0x290>)
 8000d68:	2101      	movs	r1, #1
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	f7ff fcdc 	bl	8000728 <TM1651_DisplayLevel>
 8000d70:	4a8b      	ldr	r2, [pc, #556]	@ (8000fa0 <main+0x294>)
 8000d72:	4b8c      	ldr	r3, [pc, #560]	@ (8000fa4 <main+0x298>)
 8000d74:	0011      	movs	r1, r2
 8000d76:	0018      	movs	r0, r3
 8000d78:	f7ff fdda 	bl	8000930 <HT16K33_Init>
 8000d7c:	1dfb      	adds	r3, r7, #7
 8000d7e:	2200      	movs	r2, #0
 8000d80:	701a      	strb	r2, [r3, #0]
 8000d82:	e00c      	b.n	8000d9e <main+0x92>
 8000d84:	1dfb      	adds	r3, r7, #7
 8000d86:	781a      	ldrb	r2, [r3, #0]
 8000d88:	1dfb      	adds	r3, r7, #7
 8000d8a:	7819      	ldrb	r1, [r3, #0]
 8000d8c:	4885      	ldr	r0, [pc, #532]	@ (8000fa4 <main+0x298>)
 8000d8e:	2301      	movs	r3, #1
 8000d90:	f7ff fed9 	bl	8000b46 <HT16K33_DrawPixel>
 8000d94:	1dfb      	adds	r3, r7, #7
 8000d96:	781a      	ldrb	r2, [r3, #0]
 8000d98:	1dfb      	adds	r3, r7, #7
 8000d9a:	3201      	adds	r2, #1
 8000d9c:	701a      	strb	r2, [r3, #0]
 8000d9e:	1dfb      	adds	r3, r7, #7
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	2b07      	cmp	r3, #7
 8000da4:	d9ee      	bls.n	8000d84 <main+0x78>
 8000da6:	4b7f      	ldr	r3, [pc, #508]	@ (8000fa4 <main+0x298>)
 8000da8:	0018      	movs	r0, r3
 8000daa:	f7ff fe86 	bl	8000aba <HT16K33_WriteDisplay>
 8000dae:	f000 feb5 	bl	8001b1c <HAL_GetTick>
 8000db2:	0002      	movs	r2, r0
 8000db4:	4b7c      	ldr	r3, [pc, #496]	@ (8000fa8 <main+0x29c>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d908      	bls.n	8000dce <main+0xc2>
 8000dbc:	f000 feae 	bl	8001b1c <HAL_GetTick>
 8000dc0:	0003      	movs	r3, r0
 8000dc2:	4a7a      	ldr	r2, [pc, #488]	@ (8000fac <main+0x2a0>)
 8000dc4:	189a      	adds	r2, r3, r2
 8000dc6:	4b78      	ldr	r3, [pc, #480]	@ (8000fa8 <main+0x29c>)
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	f000 fb43 	bl	8001454 <I2C_Scan>
 8000dce:	f000 fea5 	bl	8001b1c <HAL_GetTick>
 8000dd2:	0002      	movs	r2, r0
 8000dd4:	4b76      	ldr	r3, [pc, #472]	@ (8000fb0 <main+0x2a4>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d967      	bls.n	8000eac <main+0x1a0>
 8000ddc:	f000 fe9e 	bl	8001b1c <HAL_GetTick>
 8000de0:	0003      	movs	r3, r0
 8000de2:	3332      	adds	r3, #50	@ 0x32
 8000de4:	001a      	movs	r2, r3
 8000de6:	4b72      	ldr	r3, [pc, #456]	@ (8000fb0 <main+0x2a4>)
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	4b6a      	ldr	r3, [pc, #424]	@ (8000f94 <main+0x288>)
 8000dec:	0018      	movs	r0, r3
 8000dee:	f000 fbe2 	bl	80015b6 <RotaryEncoder_ReadSwitch>
 8000df2:	0003      	movs	r3, r0
 8000df4:	001a      	movs	r2, r3
 8000df6:	4b6f      	ldr	r3, [pc, #444]	@ (8000fb4 <main+0x2a8>)
 8000df8:	701a      	strb	r2, [r3, #0]
 8000dfa:	4b6f      	ldr	r3, [pc, #444]	@ (8000fb8 <main+0x2ac>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d107      	bne.n	8000e12 <main+0x106>
 8000e02:	4b6c      	ldr	r3, [pc, #432]	@ (8000fb4 <main+0x2a8>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d103      	bne.n	8000e12 <main+0x106>
 8000e0a:	4b6c      	ldr	r3, [pc, #432]	@ (8000fbc <main+0x2b0>)
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	f004 f9dd 	bl	80051cc <puts>
 8000e12:	4b68      	ldr	r3, [pc, #416]	@ (8000fb4 <main+0x2a8>)
 8000e14:	781a      	ldrb	r2, [r3, #0]
 8000e16:	4b68      	ldr	r3, [pc, #416]	@ (8000fb8 <main+0x2ac>)
 8000e18:	701a      	strb	r2, [r3, #0]
 8000e1a:	4b5e      	ldr	r3, [pc, #376]	@ (8000f94 <main+0x288>)
 8000e1c:	7f1b      	ldrb	r3, [r3, #28]
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d043      	beq.n	8000eac <main+0x1a0>
 8000e24:	4b5b      	ldr	r3, [pc, #364]	@ (8000f94 <main+0x288>)
 8000e26:	7f1b      	ldrb	r3, [r3, #28]
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d101      	bne.n	8000e32 <main+0x126>
 8000e2e:	4b64      	ldr	r3, [pc, #400]	@ (8000fc0 <main+0x2b4>)
 8000e30:	e000      	b.n	8000e34 <main+0x128>
 8000e32:	4b64      	ldr	r3, [pc, #400]	@ (8000fc4 <main+0x2b8>)
 8000e34:	4a64      	ldr	r2, [pc, #400]	@ (8000fc8 <main+0x2bc>)
 8000e36:	0019      	movs	r1, r3
 8000e38:	0010      	movs	r0, r2
 8000e3a:	f004 f961 	bl	8005100 <iprintf>
 8000e3e:	4b55      	ldr	r3, [pc, #340]	@ (8000f94 <main+0x288>)
 8000e40:	7f1b      	ldrb	r3, [r3, #28]
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d114      	bne.n	8000e72 <main+0x166>
 8000e48:	4b53      	ldr	r3, [pc, #332]	@ (8000f98 <main+0x28c>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	b25b      	sxtb	r3, r3
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	3301      	adds	r3, #1
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	b25a      	sxtb	r2, r3
 8000e56:	4b50      	ldr	r3, [pc, #320]	@ (8000f98 <main+0x28c>)
 8000e58:	701a      	strb	r2, [r3, #0]
 8000e5a:	4b4f      	ldr	r3, [pc, #316]	@ (8000f98 <main+0x28c>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	b25b      	sxtb	r3, r3
 8000e60:	2b05      	cmp	r3, #5
 8000e62:	dd02      	ble.n	8000e6a <main+0x15e>
 8000e64:	4b4c      	ldr	r3, [pc, #304]	@ (8000f98 <main+0x28c>)
 8000e66:	2205      	movs	r2, #5
 8000e68:	701a      	strb	r2, [r3, #0]
 8000e6a:	4b4a      	ldr	r3, [pc, #296]	@ (8000f94 <main+0x288>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	771a      	strb	r2, [r3, #28]
 8000e70:	e013      	b.n	8000e9a <main+0x18e>
 8000e72:	4b49      	ldr	r3, [pc, #292]	@ (8000f98 <main+0x28c>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	b25b      	sxtb	r3, r3
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	b25a      	sxtb	r2, r3
 8000e80:	4b45      	ldr	r3, [pc, #276]	@ (8000f98 <main+0x28c>)
 8000e82:	701a      	strb	r2, [r3, #0]
 8000e84:	4b44      	ldr	r3, [pc, #272]	@ (8000f98 <main+0x28c>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	b25b      	sxtb	r3, r3
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	da02      	bge.n	8000e94 <main+0x188>
 8000e8e:	4b42      	ldr	r3, [pc, #264]	@ (8000f98 <main+0x28c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	701a      	strb	r2, [r3, #0]
 8000e94:	4b3f      	ldr	r3, [pc, #252]	@ (8000f94 <main+0x288>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	771a      	strb	r2, [r3, #28]
 8000e9a:	4b3f      	ldr	r3, [pc, #252]	@ (8000f98 <main+0x28c>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	b25b      	sxtb	r3, r3
 8000ea0:	001a      	movs	r2, r3
 8000ea2:	4b4a      	ldr	r3, [pc, #296]	@ (8000fcc <main+0x2c0>)
 8000ea4:	0011      	movs	r1, r2
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	f004 f92a 	bl	8005100 <iprintf>
 8000eac:	f000 fe36 	bl	8001b1c <HAL_GetTick>
 8000eb0:	0002      	movs	r2, r0
 8000eb2:	4b47      	ldr	r3, [pc, #284]	@ (8000fd0 <main+0x2c4>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	d907      	bls.n	8000eca <main+0x1be>
 8000eba:	f000 fe2f 	bl	8001b1c <HAL_GetTick>
 8000ebe:	0003      	movs	r3, r0
 8000ec0:	22fa      	movs	r2, #250	@ 0xfa
 8000ec2:	0092      	lsls	r2, r2, #2
 8000ec4:	189a      	adds	r2, r3, r2
 8000ec6:	4b42      	ldr	r3, [pc, #264]	@ (8000fd0 <main+0x2c4>)
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	f000 fe27 	bl	8001b1c <HAL_GetTick>
 8000ece:	0002      	movs	r2, r0
 8000ed0:	4b40      	ldr	r3, [pc, #256]	@ (8000fd4 <main+0x2c8>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d90c      	bls.n	8000ef2 <main+0x1e6>
 8000ed8:	f000 fe20 	bl	8001b1c <HAL_GetTick>
 8000edc:	0003      	movs	r3, r0
 8000ede:	33c8      	adds	r3, #200	@ 0xc8
 8000ee0:	001a      	movs	r2, r3
 8000ee2:	4b3c      	ldr	r3, [pc, #240]	@ (8000fd4 <main+0x2c8>)
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	23a0      	movs	r3, #160	@ 0xa0
 8000ee8:	05db      	lsls	r3, r3, #23
 8000eea:	2120      	movs	r1, #32
 8000eec:	0018      	movs	r0, r3
 8000eee:	f001 f9d3 	bl	8002298 <HAL_GPIO_TogglePin>
 8000ef2:	f000 fe13 	bl	8001b1c <HAL_GetTick>
 8000ef6:	0002      	movs	r2, r0
 8000ef8:	4b37      	ldr	r3, [pc, #220]	@ (8000fd8 <main+0x2cc>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d91b      	bls.n	8000f38 <main+0x22c>
 8000f00:	f000 fe0c 	bl	8001b1c <HAL_GetTick>
 8000f04:	0003      	movs	r3, r0
 8000f06:	22fa      	movs	r2, #250	@ 0xfa
 8000f08:	0092      	lsls	r2, r2, #2
 8000f0a:	189a      	adds	r2, r3, r2
 8000f0c:	4b32      	ldr	r3, [pc, #200]	@ (8000fd8 <main+0x2cc>)
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	4b32      	ldr	r3, [pc, #200]	@ (8000fdc <main+0x2d0>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	3301      	adds	r3, #1
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	4b30      	ldr	r3, [pc, #192]	@ (8000fdc <main+0x2d0>)
 8000f1a:	701a      	strb	r2, [r3, #0]
 8000f1c:	4b2f      	ldr	r3, [pc, #188]	@ (8000fdc <main+0x2d0>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	2b07      	cmp	r3, #7
 8000f22:	d902      	bls.n	8000f2a <main+0x21e>
 8000f24:	4b2d      	ldr	r3, [pc, #180]	@ (8000fdc <main+0x2d0>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	701a      	strb	r2, [r3, #0]
 8000f2a:	4b2c      	ldr	r3, [pc, #176]	@ (8000fdc <main+0x2d0>)
 8000f2c:	781a      	ldrb	r2, [r3, #0]
 8000f2e:	4b1b      	ldr	r3, [pc, #108]	@ (8000f9c <main+0x290>)
 8000f30:	0011      	movs	r1, r2
 8000f32:	0018      	movs	r0, r3
 8000f34:	f7ff fbf8 	bl	8000728 <TM1651_DisplayLevel>
 8000f38:	f000 fdf0 	bl	8001b1c <HAL_GetTick>
 8000f3c:	0002      	movs	r2, r0
 8000f3e:	4b28      	ldr	r3, [pc, #160]	@ (8000fe0 <main+0x2d4>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	429a      	cmp	r2, r3
 8000f44:	d800      	bhi.n	8000f48 <main+0x23c>
 8000f46:	e732      	b.n	8000dae <main+0xa2>
 8000f48:	f000 fde8 	bl	8001b1c <HAL_GetTick>
 8000f4c:	0003      	movs	r3, r0
 8000f4e:	33c8      	adds	r3, #200	@ 0xc8
 8000f50:	001a      	movs	r2, r3
 8000f52:	4b23      	ldr	r3, [pc, #140]	@ (8000fe0 <main+0x2d4>)
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	4b23      	ldr	r3, [pc, #140]	@ (8000fe4 <main+0x2d8>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	b2da      	uxtb	r2, r3
 8000f5e:	4b21      	ldr	r3, [pc, #132]	@ (8000fe4 <main+0x2d8>)
 8000f60:	701a      	strb	r2, [r3, #0]
 8000f62:	4b20      	ldr	r3, [pc, #128]	@ (8000fe4 <main+0x2d8>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	2b10      	cmp	r3, #16
 8000f68:	d902      	bls.n	8000f70 <main+0x264>
 8000f6a:	4b1e      	ldr	r3, [pc, #120]	@ (8000fe4 <main+0x2d8>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	701a      	strb	r2, [r3, #0]
 8000f70:	4b09      	ldr	r3, [pc, #36]	@ (8000f98 <main+0x28c>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	b25b      	sxtb	r3, r3
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	dd01      	ble.n	8000f7e <main+0x272>
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e001      	b.n	8000f82 <main+0x276>
 8000f7e:	2301      	movs	r3, #1
 8000f80:	425b      	negs	r3, r3
 8000f82:	4a19      	ldr	r2, [pc, #100]	@ (8000fe8 <main+0x2dc>)
 8000f84:	0019      	movs	r1, r3
 8000f86:	0010      	movs	r0, r2
 8000f88:	f7ff fe46 	bl	8000c18 <DisplayBitmapWithRotate>
 8000f8c:	e70f      	b.n	8000dae <main+0xa2>
 8000f8e:	46c0      	nop			@ (mov r8, r8)
 8000f90:	50000400 	.word	0x50000400
 8000f94:	2000008c 	.word	0x2000008c
 8000f98:	20000238 	.word	0x20000238
 8000f9c:	200000ac 	.word	0x200000ac
 8000fa0:	200000d4 	.word	0x200000d4
 8000fa4:	200000c0 	.word	0x200000c0
 8000fa8:	2000023c 	.word	0x2000023c
 8000fac:	00001388 	.word	0x00001388
 8000fb0:	20000240 	.word	0x20000240
 8000fb4:	20000239 	.word	0x20000239
 8000fb8:	2000023a 	.word	0x2000023a
 8000fbc:	08005f18 	.word	0x08005f18
 8000fc0:	08005f28 	.word	0x08005f28
 8000fc4:	08005f2c 	.word	0x08005f2c
 8000fc8:	08005f30 	.word	0x08005f30
 8000fcc:	08005f48 	.word	0x08005f48
 8000fd0:	20000244 	.word	0x20000244
 8000fd4:	20000248 	.word	0x20000248
 8000fd8:	2000024c 	.word	0x2000024c
 8000fdc:	20000254 	.word	0x20000254
 8000fe0:	20000250 	.word	0x20000250
 8000fe4:	20000256 	.word	0x20000256
 8000fe8:	08005fb0 	.word	0x08005fb0

08000fec <SystemClock_Config>:
 8000fec:	b590      	push	{r4, r7, lr}
 8000fee:	b09d      	sub	sp, #116	@ 0x74
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	2438      	movs	r4, #56	@ 0x38
 8000ff4:	193b      	adds	r3, r7, r4
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	2338      	movs	r3, #56	@ 0x38
 8000ffa:	001a      	movs	r2, r3
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	f004 f9db 	bl	80053b8 <memset>
 8001002:	2324      	movs	r3, #36	@ 0x24
 8001004:	18fb      	adds	r3, r7, r3
 8001006:	0018      	movs	r0, r3
 8001008:	2314      	movs	r3, #20
 800100a:	001a      	movs	r2, r3
 800100c:	2100      	movs	r1, #0
 800100e:	f004 f9d3 	bl	80053b8 <memset>
 8001012:	003b      	movs	r3, r7
 8001014:	0018      	movs	r0, r3
 8001016:	2324      	movs	r3, #36	@ 0x24
 8001018:	001a      	movs	r2, r3
 800101a:	2100      	movs	r1, #0
 800101c:	f004 f9cc 	bl	80053b8 <memset>
 8001020:	4b2a      	ldr	r3, [pc, #168]	@ (80010cc <SystemClock_Config+0xe0>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a2a      	ldr	r2, [pc, #168]	@ (80010d0 <SystemClock_Config+0xe4>)
 8001026:	401a      	ands	r2, r3
 8001028:	4b28      	ldr	r3, [pc, #160]	@ (80010cc <SystemClock_Config+0xe0>)
 800102a:	2180      	movs	r1, #128	@ 0x80
 800102c:	0109      	lsls	r1, r1, #4
 800102e:	430a      	orrs	r2, r1
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	0021      	movs	r1, r4
 8001034:	187b      	adds	r3, r7, r1
 8001036:	2202      	movs	r2, #2
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	187b      	adds	r3, r7, r1
 800103c:	2201      	movs	r2, #1
 800103e:	60da      	str	r2, [r3, #12]
 8001040:	187b      	adds	r3, r7, r1
 8001042:	2210      	movs	r2, #16
 8001044:	611a      	str	r2, [r3, #16]
 8001046:	187b      	adds	r3, r7, r1
 8001048:	2202      	movs	r2, #2
 800104a:	629a      	str	r2, [r3, #40]	@ 0x28
 800104c:	187b      	adds	r3, r7, r1
 800104e:	2200      	movs	r2, #0
 8001050:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001052:	187b      	adds	r3, r7, r1
 8001054:	2200      	movs	r2, #0
 8001056:	631a      	str	r2, [r3, #48]	@ 0x30
 8001058:	187b      	adds	r3, r7, r1
 800105a:	2280      	movs	r2, #128	@ 0x80
 800105c:	03d2      	lsls	r2, r2, #15
 800105e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001060:	187b      	adds	r3, r7, r1
 8001062:	0018      	movs	r0, r3
 8001064:	f001 fdb2 	bl	8002bcc <HAL_RCC_OscConfig>
 8001068:	1e03      	subs	r3, r0, #0
 800106a:	d001      	beq.n	8001070 <SystemClock_Config+0x84>
 800106c:	f000 fa36 	bl	80014dc <Error_Handler>
 8001070:	2124      	movs	r1, #36	@ 0x24
 8001072:	187b      	adds	r3, r7, r1
 8001074:	220f      	movs	r2, #15
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	187b      	adds	r3, r7, r1
 800107a:	2203      	movs	r2, #3
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	187b      	adds	r3, r7, r1
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	187b      	adds	r3, r7, r1
 8001086:	2200      	movs	r2, #0
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	187b      	adds	r3, r7, r1
 800108c:	2200      	movs	r2, #0
 800108e:	611a      	str	r2, [r3, #16]
 8001090:	187b      	adds	r3, r7, r1
 8001092:	2101      	movs	r1, #1
 8001094:	0018      	movs	r0, r3
 8001096:	f002 f95d 	bl	8003354 <HAL_RCC_ClockConfig>
 800109a:	1e03      	subs	r3, r0, #0
 800109c:	d001      	beq.n	80010a2 <SystemClock_Config+0xb6>
 800109e:	f000 fa1d 	bl	80014dc <Error_Handler>
 80010a2:	003b      	movs	r3, r7
 80010a4:	220a      	movs	r2, #10
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	003b      	movs	r3, r7
 80010aa:	2200      	movs	r2, #0
 80010ac:	611a      	str	r2, [r3, #16]
 80010ae:	003b      	movs	r3, r7
 80010b0:	2200      	movs	r2, #0
 80010b2:	619a      	str	r2, [r3, #24]
 80010b4:	003b      	movs	r3, r7
 80010b6:	0018      	movs	r0, r3
 80010b8:	f002 fb70 	bl	800379c <HAL_RCCEx_PeriphCLKConfig>
 80010bc:	1e03      	subs	r3, r0, #0
 80010be:	d001      	beq.n	80010c4 <SystemClock_Config+0xd8>
 80010c0:	f000 fa0c 	bl	80014dc <Error_Handler>
 80010c4:	46c0      	nop			@ (mov r8, r8)
 80010c6:	46bd      	mov	sp, r7
 80010c8:	b01d      	add	sp, #116	@ 0x74
 80010ca:	bd90      	pop	{r4, r7, pc}
 80010cc:	40007000 	.word	0x40007000
 80010d0:	ffffe7ff 	.word	0xffffe7ff

080010d4 <MX_I2C1_Init>:
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001148 <MX_I2C1_Init+0x74>)
 80010da:	4a1c      	ldr	r2, [pc, #112]	@ (800114c <MX_I2C1_Init+0x78>)
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	4b1a      	ldr	r3, [pc, #104]	@ (8001148 <MX_I2C1_Init+0x74>)
 80010e0:	4a1b      	ldr	r2, [pc, #108]	@ (8001150 <MX_I2C1_Init+0x7c>)
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	4b18      	ldr	r3, [pc, #96]	@ (8001148 <MX_I2C1_Init+0x74>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
 80010ea:	4b17      	ldr	r3, [pc, #92]	@ (8001148 <MX_I2C1_Init+0x74>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	60da      	str	r2, [r3, #12]
 80010f0:	4b15      	ldr	r3, [pc, #84]	@ (8001148 <MX_I2C1_Init+0x74>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	611a      	str	r2, [r3, #16]
 80010f6:	4b14      	ldr	r3, [pc, #80]	@ (8001148 <MX_I2C1_Init+0x74>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	615a      	str	r2, [r3, #20]
 80010fc:	4b12      	ldr	r3, [pc, #72]	@ (8001148 <MX_I2C1_Init+0x74>)
 80010fe:	2200      	movs	r2, #0
 8001100:	619a      	str	r2, [r3, #24]
 8001102:	4b11      	ldr	r3, [pc, #68]	@ (8001148 <MX_I2C1_Init+0x74>)
 8001104:	2200      	movs	r2, #0
 8001106:	61da      	str	r2, [r3, #28]
 8001108:	4b0f      	ldr	r3, [pc, #60]	@ (8001148 <MX_I2C1_Init+0x74>)
 800110a:	2200      	movs	r2, #0
 800110c:	621a      	str	r2, [r3, #32]
 800110e:	4b0e      	ldr	r3, [pc, #56]	@ (8001148 <MX_I2C1_Init+0x74>)
 8001110:	0018      	movs	r0, r3
 8001112:	f001 f8f9 	bl	8002308 <HAL_I2C_Init>
 8001116:	1e03      	subs	r3, r0, #0
 8001118:	d001      	beq.n	800111e <MX_I2C1_Init+0x4a>
 800111a:	f000 f9df 	bl	80014dc <Error_Handler>
 800111e:	4b0a      	ldr	r3, [pc, #40]	@ (8001148 <MX_I2C1_Init+0x74>)
 8001120:	2100      	movs	r1, #0
 8001122:	0018      	movs	r0, r3
 8001124:	f001 fcba 	bl	8002a9c <HAL_I2CEx_ConfigAnalogFilter>
 8001128:	1e03      	subs	r3, r0, #0
 800112a:	d001      	beq.n	8001130 <MX_I2C1_Init+0x5c>
 800112c:	f000 f9d6 	bl	80014dc <Error_Handler>
 8001130:	4b05      	ldr	r3, [pc, #20]	@ (8001148 <MX_I2C1_Init+0x74>)
 8001132:	2100      	movs	r1, #0
 8001134:	0018      	movs	r0, r3
 8001136:	f001 fcfd 	bl	8002b34 <HAL_I2CEx_ConfigDigitalFilter>
 800113a:	1e03      	subs	r3, r0, #0
 800113c:	d001      	beq.n	8001142 <MX_I2C1_Init+0x6e>
 800113e:	f000 f9cd 	bl	80014dc <Error_Handler>
 8001142:	46c0      	nop			@ (mov r8, r8)
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	200000d4 	.word	0x200000d4
 800114c:	40005400 	.word	0x40005400
 8001150:	00805c87 	.word	0x00805c87

08001154 <MX_TIM2_Init>:
 8001154:	b580      	push	{r7, lr}
 8001156:	b08a      	sub	sp, #40	@ 0x28
 8001158:	af00      	add	r7, sp, #0
 800115a:	2318      	movs	r3, #24
 800115c:	18fb      	adds	r3, r7, r3
 800115e:	0018      	movs	r0, r3
 8001160:	2310      	movs	r3, #16
 8001162:	001a      	movs	r2, r3
 8001164:	2100      	movs	r1, #0
 8001166:	f004 f927 	bl	80053b8 <memset>
 800116a:	2310      	movs	r3, #16
 800116c:	18fb      	adds	r3, r7, r3
 800116e:	0018      	movs	r0, r3
 8001170:	2308      	movs	r3, #8
 8001172:	001a      	movs	r2, r3
 8001174:	2100      	movs	r1, #0
 8001176:	f004 f91f 	bl	80053b8 <memset>
 800117a:	003b      	movs	r3, r7
 800117c:	0018      	movs	r0, r3
 800117e:	2310      	movs	r3, #16
 8001180:	001a      	movs	r2, r3
 8001182:	2100      	movs	r1, #0
 8001184:	f004 f918 	bl	80053b8 <memset>
 8001188:	4b34      	ldr	r3, [pc, #208]	@ (800125c <MX_TIM2_Init+0x108>)
 800118a:	2280      	movs	r2, #128	@ 0x80
 800118c:	05d2      	lsls	r2, r2, #23
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	4b32      	ldr	r3, [pc, #200]	@ (800125c <MX_TIM2_Init+0x108>)
 8001192:	2200      	movs	r2, #0
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	4b31      	ldr	r3, [pc, #196]	@ (800125c <MX_TIM2_Init+0x108>)
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	4b2f      	ldr	r3, [pc, #188]	@ (800125c <MX_TIM2_Init+0x108>)
 800119e:	221d      	movs	r2, #29
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	4b2e      	ldr	r3, [pc, #184]	@ (800125c <MX_TIM2_Init+0x108>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	611a      	str	r2, [r3, #16]
 80011a8:	4b2c      	ldr	r3, [pc, #176]	@ (800125c <MX_TIM2_Init+0x108>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	615a      	str	r2, [r3, #20]
 80011ae:	4b2b      	ldr	r3, [pc, #172]	@ (800125c <MX_TIM2_Init+0x108>)
 80011b0:	0018      	movs	r0, r3
 80011b2:	f002 fc81 	bl	8003ab8 <HAL_TIM_Base_Init>
 80011b6:	1e03      	subs	r3, r0, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM2_Init+0x6a>
 80011ba:	f000 f98f 	bl	80014dc <Error_Handler>
 80011be:	2118      	movs	r1, #24
 80011c0:	187b      	adds	r3, r7, r1
 80011c2:	2280      	movs	r2, #128	@ 0x80
 80011c4:	0152      	lsls	r2, r2, #5
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	187a      	adds	r2, r7, r1
 80011ca:	4b24      	ldr	r3, [pc, #144]	@ (800125c <MX_TIM2_Init+0x108>)
 80011cc:	0011      	movs	r1, r2
 80011ce:	0018      	movs	r0, r3
 80011d0:	f002 fe12 	bl	8003df8 <HAL_TIM_ConfigClockSource>
 80011d4:	1e03      	subs	r3, r0, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM2_Init+0x88>
 80011d8:	f000 f980 	bl	80014dc <Error_Handler>
 80011dc:	4b1f      	ldr	r3, [pc, #124]	@ (800125c <MX_TIM2_Init+0x108>)
 80011de:	0018      	movs	r0, r3
 80011e0:	f002 fcaa 	bl	8003b38 <HAL_TIM_PWM_Init>
 80011e4:	1e03      	subs	r3, r0, #0
 80011e6:	d001      	beq.n	80011ec <MX_TIM2_Init+0x98>
 80011e8:	f000 f978 	bl	80014dc <Error_Handler>
 80011ec:	4b1b      	ldr	r3, [pc, #108]	@ (800125c <MX_TIM2_Init+0x108>)
 80011ee:	2108      	movs	r1, #8
 80011f0:	0018      	movs	r0, r3
 80011f2:	f002 fce9 	bl	8003bc8 <HAL_TIM_OnePulse_Init>
 80011f6:	1e03      	subs	r3, r0, #0
 80011f8:	d001      	beq.n	80011fe <MX_TIM2_Init+0xaa>
 80011fa:	f000 f96f 	bl	80014dc <Error_Handler>
 80011fe:	2110      	movs	r1, #16
 8001200:	187b      	adds	r3, r7, r1
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	187b      	adds	r3, r7, r1
 8001208:	2200      	movs	r2, #0
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	187a      	adds	r2, r7, r1
 800120e:	4b13      	ldr	r3, [pc, #76]	@ (800125c <MX_TIM2_Init+0x108>)
 8001210:	0011      	movs	r1, r2
 8001212:	0018      	movs	r0, r3
 8001214:	f003 f8b6 	bl	8004384 <HAL_TIMEx_MasterConfigSynchronization>
 8001218:	1e03      	subs	r3, r0, #0
 800121a:	d001      	beq.n	8001220 <MX_TIM2_Init+0xcc>
 800121c:	f000 f95e 	bl	80014dc <Error_Handler>
 8001220:	003b      	movs	r3, r7
 8001222:	2260      	movs	r2, #96	@ 0x60
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	003b      	movs	r3, r7
 8001228:	2200      	movs	r2, #0
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	003b      	movs	r3, r7
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
 8001232:	003b      	movs	r3, r7
 8001234:	2200      	movs	r2, #0
 8001236:	60da      	str	r2, [r3, #12]
 8001238:	0039      	movs	r1, r7
 800123a:	4b08      	ldr	r3, [pc, #32]	@ (800125c <MX_TIM2_Init+0x108>)
 800123c:	2200      	movs	r2, #0
 800123e:	0018      	movs	r0, r3
 8001240:	f002 fd14 	bl	8003c6c <HAL_TIM_PWM_ConfigChannel>
 8001244:	1e03      	subs	r3, r0, #0
 8001246:	d001      	beq.n	800124c <MX_TIM2_Init+0xf8>
 8001248:	f000 f948 	bl	80014dc <Error_Handler>
 800124c:	4b03      	ldr	r3, [pc, #12]	@ (800125c <MX_TIM2_Init+0x108>)
 800124e:	0018      	movs	r0, r3
 8001250:	f000 fa7e 	bl	8001750 <HAL_TIM_MspPostInit>
 8001254:	46c0      	nop			@ (mov r8, r8)
 8001256:	46bd      	mov	sp, r7
 8001258:	b00a      	add	sp, #40	@ 0x28
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20000128 	.word	0x20000128

08001260 <MX_USART2_UART_Init>:
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
 8001264:	4b14      	ldr	r3, [pc, #80]	@ (80012b8 <MX_USART2_UART_Init+0x58>)
 8001266:	4a15      	ldr	r2, [pc, #84]	@ (80012bc <MX_USART2_UART_Init+0x5c>)
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	4b13      	ldr	r3, [pc, #76]	@ (80012b8 <MX_USART2_UART_Init+0x58>)
 800126c:	22e1      	movs	r2, #225	@ 0xe1
 800126e:	0252      	lsls	r2, r2, #9
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	4b11      	ldr	r3, [pc, #68]	@ (80012b8 <MX_USART2_UART_Init+0x58>)
 8001274:	2200      	movs	r2, #0
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	4b0f      	ldr	r3, [pc, #60]	@ (80012b8 <MX_USART2_UART_Init+0x58>)
 800127a:	2200      	movs	r2, #0
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	4b0e      	ldr	r3, [pc, #56]	@ (80012b8 <MX_USART2_UART_Init+0x58>)
 8001280:	2200      	movs	r2, #0
 8001282:	611a      	str	r2, [r3, #16]
 8001284:	4b0c      	ldr	r3, [pc, #48]	@ (80012b8 <MX_USART2_UART_Init+0x58>)
 8001286:	220c      	movs	r2, #12
 8001288:	615a      	str	r2, [r3, #20]
 800128a:	4b0b      	ldr	r3, [pc, #44]	@ (80012b8 <MX_USART2_UART_Init+0x58>)
 800128c:	2200      	movs	r2, #0
 800128e:	619a      	str	r2, [r3, #24]
 8001290:	4b09      	ldr	r3, [pc, #36]	@ (80012b8 <MX_USART2_UART_Init+0x58>)
 8001292:	2200      	movs	r2, #0
 8001294:	61da      	str	r2, [r3, #28]
 8001296:	4b08      	ldr	r3, [pc, #32]	@ (80012b8 <MX_USART2_UART_Init+0x58>)
 8001298:	2200      	movs	r2, #0
 800129a:	621a      	str	r2, [r3, #32]
 800129c:	4b06      	ldr	r3, [pc, #24]	@ (80012b8 <MX_USART2_UART_Init+0x58>)
 800129e:	2200      	movs	r2, #0
 80012a0:	625a      	str	r2, [r3, #36]	@ 0x24
 80012a2:	4b05      	ldr	r3, [pc, #20]	@ (80012b8 <MX_USART2_UART_Init+0x58>)
 80012a4:	0018      	movs	r0, r3
 80012a6:	f003 f8c5 	bl	8004434 <HAL_UART_Init>
 80012aa:	1e03      	subs	r3, r0, #0
 80012ac:	d001      	beq.n	80012b2 <MX_USART2_UART_Init+0x52>
 80012ae:	f000 f915 	bl	80014dc <Error_Handler>
 80012b2:	46c0      	nop			@ (mov r8, r8)
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	200001b0 	.word	0x200001b0
 80012bc:	40004400 	.word	0x40004400

080012c0 <MX_DMA_Init>:
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4b0c      	ldr	r3, [pc, #48]	@ (80012f8 <MX_DMA_Init+0x38>)
 80012c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80012ca:	4b0b      	ldr	r3, [pc, #44]	@ (80012f8 <MX_DMA_Init+0x38>)
 80012cc:	2101      	movs	r1, #1
 80012ce:	430a      	orrs	r2, r1
 80012d0:	631a      	str	r2, [r3, #48]	@ 0x30
 80012d2:	4b09      	ldr	r3, [pc, #36]	@ (80012f8 <MX_DMA_Init+0x38>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d6:	2201      	movs	r2, #1
 80012d8:	4013      	ands	r3, r2
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2200      	movs	r2, #0
 80012e0:	2100      	movs	r1, #0
 80012e2:	200b      	movs	r0, #11
 80012e4:	f000 fcd0 	bl	8001c88 <HAL_NVIC_SetPriority>
 80012e8:	200b      	movs	r0, #11
 80012ea:	f000 fce2 	bl	8001cb2 <HAL_NVIC_EnableIRQ>
 80012ee:	46c0      	nop			@ (mov r8, r8)
 80012f0:	46bd      	mov	sp, r7
 80012f2:	b002      	add	sp, #8
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	46c0      	nop			@ (mov r8, r8)
 80012f8:	40021000 	.word	0x40021000

080012fc <MX_GPIO_Init>:
 80012fc:	b590      	push	{r4, r7, lr}
 80012fe:	b08b      	sub	sp, #44	@ 0x2c
 8001300:	af00      	add	r7, sp, #0
 8001302:	2414      	movs	r4, #20
 8001304:	193b      	adds	r3, r7, r4
 8001306:	0018      	movs	r0, r3
 8001308:	2314      	movs	r3, #20
 800130a:	001a      	movs	r2, r3
 800130c:	2100      	movs	r1, #0
 800130e:	f004 f853 	bl	80053b8 <memset>
 8001312:	4b4d      	ldr	r3, [pc, #308]	@ (8001448 <MX_GPIO_Init+0x14c>)
 8001314:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001316:	4b4c      	ldr	r3, [pc, #304]	@ (8001448 <MX_GPIO_Init+0x14c>)
 8001318:	2104      	movs	r1, #4
 800131a:	430a      	orrs	r2, r1
 800131c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800131e:	4b4a      	ldr	r3, [pc, #296]	@ (8001448 <MX_GPIO_Init+0x14c>)
 8001320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001322:	2204      	movs	r2, #4
 8001324:	4013      	ands	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	4b47      	ldr	r3, [pc, #284]	@ (8001448 <MX_GPIO_Init+0x14c>)
 800132c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800132e:	4b46      	ldr	r3, [pc, #280]	@ (8001448 <MX_GPIO_Init+0x14c>)
 8001330:	2180      	movs	r1, #128	@ 0x80
 8001332:	430a      	orrs	r2, r1
 8001334:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001336:	4b44      	ldr	r3, [pc, #272]	@ (8001448 <MX_GPIO_Init+0x14c>)
 8001338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800133a:	2280      	movs	r2, #128	@ 0x80
 800133c:	4013      	ands	r3, r2
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	4b41      	ldr	r3, [pc, #260]	@ (8001448 <MX_GPIO_Init+0x14c>)
 8001344:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001346:	4b40      	ldr	r3, [pc, #256]	@ (8001448 <MX_GPIO_Init+0x14c>)
 8001348:	2101      	movs	r1, #1
 800134a:	430a      	orrs	r2, r1
 800134c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800134e:	4b3e      	ldr	r3, [pc, #248]	@ (8001448 <MX_GPIO_Init+0x14c>)
 8001350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001352:	2201      	movs	r2, #1
 8001354:	4013      	ands	r3, r2
 8001356:	60bb      	str	r3, [r7, #8]
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	4b3b      	ldr	r3, [pc, #236]	@ (8001448 <MX_GPIO_Init+0x14c>)
 800135c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800135e:	4b3a      	ldr	r3, [pc, #232]	@ (8001448 <MX_GPIO_Init+0x14c>)
 8001360:	2102      	movs	r1, #2
 8001362:	430a      	orrs	r2, r1
 8001364:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001366:	4b38      	ldr	r3, [pc, #224]	@ (8001448 <MX_GPIO_Init+0x14c>)
 8001368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800136a:	2202      	movs	r2, #2
 800136c:	4013      	ands	r3, r2
 800136e:	607b      	str	r3, [r7, #4]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	23a0      	movs	r3, #160	@ 0xa0
 8001374:	05db      	lsls	r3, r3, #23
 8001376:	2200      	movs	r2, #0
 8001378:	21e0      	movs	r1, #224	@ 0xe0
 800137a:	0018      	movs	r0, r3
 800137c:	f000 ff6f 	bl	800225e <HAL_GPIO_WritePin>
 8001380:	193b      	adds	r3, r7, r4
 8001382:	2280      	movs	r2, #128	@ 0x80
 8001384:	0192      	lsls	r2, r2, #6
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	193b      	adds	r3, r7, r4
 800138a:	2284      	movs	r2, #132	@ 0x84
 800138c:	0392      	lsls	r2, r2, #14
 800138e:	605a      	str	r2, [r3, #4]
 8001390:	193b      	adds	r3, r7, r4
 8001392:	2200      	movs	r2, #0
 8001394:	609a      	str	r2, [r3, #8]
 8001396:	193b      	adds	r3, r7, r4
 8001398:	4a2c      	ldr	r2, [pc, #176]	@ (800144c <MX_GPIO_Init+0x150>)
 800139a:	0019      	movs	r1, r3
 800139c:	0010      	movs	r0, r2
 800139e:	f000 fdcb 	bl	8001f38 <HAL_GPIO_Init>
 80013a2:	193b      	adds	r3, r7, r4
 80013a4:	2220      	movs	r2, #32
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	193b      	adds	r3, r7, r4
 80013aa:	2201      	movs	r2, #1
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	193b      	adds	r3, r7, r4
 80013b0:	2200      	movs	r2, #0
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	193b      	adds	r3, r7, r4
 80013b6:	2200      	movs	r2, #0
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	193a      	adds	r2, r7, r4
 80013bc:	23a0      	movs	r3, #160	@ 0xa0
 80013be:	05db      	lsls	r3, r3, #23
 80013c0:	0011      	movs	r1, r2
 80013c2:	0018      	movs	r0, r3
 80013c4:	f000 fdb8 	bl	8001f38 <HAL_GPIO_Init>
 80013c8:	193b      	adds	r3, r7, r4
 80013ca:	22c0      	movs	r2, #192	@ 0xc0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	193b      	adds	r3, r7, r4
 80013d0:	2201      	movs	r2, #1
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	193b      	adds	r3, r7, r4
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
 80013da:	193b      	adds	r3, r7, r4
 80013dc:	2203      	movs	r2, #3
 80013de:	60da      	str	r2, [r3, #12]
 80013e0:	193a      	adds	r2, r7, r4
 80013e2:	23a0      	movs	r3, #160	@ 0xa0
 80013e4:	05db      	lsls	r3, r3, #23
 80013e6:	0011      	movs	r1, r2
 80013e8:	0018      	movs	r0, r3
 80013ea:	f000 fda5 	bl	8001f38 <HAL_GPIO_Init>
 80013ee:	193b      	adds	r3, r7, r4
 80013f0:	2280      	movs	r2, #128	@ 0x80
 80013f2:	00d2      	lsls	r2, r2, #3
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	193b      	adds	r3, r7, r4
 80013f8:	22c4      	movs	r2, #196	@ 0xc4
 80013fa:	0392      	lsls	r2, r2, #14
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	193b      	adds	r3, r7, r4
 8001400:	2200      	movs	r2, #0
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	193a      	adds	r2, r7, r4
 8001406:	23a0      	movs	r3, #160	@ 0xa0
 8001408:	05db      	lsls	r3, r3, #23
 800140a:	0011      	movs	r1, r2
 800140c:	0018      	movs	r0, r3
 800140e:	f000 fd93 	bl	8001f38 <HAL_GPIO_Init>
 8001412:	193b      	adds	r3, r7, r4
 8001414:	2228      	movs	r2, #40	@ 0x28
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	193b      	adds	r3, r7, r4
 800141a:	2200      	movs	r2, #0
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	193b      	adds	r3, r7, r4
 8001420:	2200      	movs	r2, #0
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	193b      	adds	r3, r7, r4
 8001426:	4a0a      	ldr	r2, [pc, #40]	@ (8001450 <MX_GPIO_Init+0x154>)
 8001428:	0019      	movs	r1, r3
 800142a:	0010      	movs	r0, r2
 800142c:	f000 fd84 	bl	8001f38 <HAL_GPIO_Init>
 8001430:	2200      	movs	r2, #0
 8001432:	2100      	movs	r1, #0
 8001434:	2007      	movs	r0, #7
 8001436:	f000 fc27 	bl	8001c88 <HAL_NVIC_SetPriority>
 800143a:	2007      	movs	r0, #7
 800143c:	f000 fc39 	bl	8001cb2 <HAL_NVIC_EnableIRQ>
 8001440:	46c0      	nop			@ (mov r8, r8)
 8001442:	46bd      	mov	sp, r7
 8001444:	b00b      	add	sp, #44	@ 0x2c
 8001446:	bd90      	pop	{r4, r7, pc}
 8001448:	40021000 	.word	0x40021000
 800144c:	50000800 	.word	0x50000800
 8001450:	50000400 	.word	0x50000400

08001454 <I2C_Scan>:
 8001454:	b590      	push	{r4, r7, lr}
 8001456:	b085      	sub	sp, #20
 8001458:	af02      	add	r7, sp, #8
 800145a:	4b1c      	ldr	r3, [pc, #112]	@ (80014cc <I2C_Scan+0x78>)
 800145c:	0018      	movs	r0, r3
 800145e:	f003 feb5 	bl	80051cc <puts>
 8001462:	1d3b      	adds	r3, r7, #4
 8001464:	2200      	movs	r2, #0
 8001466:	701a      	strb	r2, [r3, #0]
 8001468:	1dfb      	adds	r3, r7, #7
 800146a:	2201      	movs	r2, #1
 800146c:	701a      	strb	r2, [r3, #0]
 800146e:	e021      	b.n	80014b4 <I2C_Scan+0x60>
 8001470:	1dba      	adds	r2, r7, #6
 8001472:	1dfb      	adds	r3, r7, #7
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	18db      	adds	r3, r3, r3
 8001478:	7013      	strb	r3, [r2, #0]
 800147a:	1dbb      	adds	r3, r7, #6
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	b299      	uxth	r1, r3
 8001480:	1d7c      	adds	r4, r7, #5
 8001482:	1d3a      	adds	r2, r7, #4
 8001484:	4812      	ldr	r0, [pc, #72]	@ (80014d0 <I2C_Scan+0x7c>)
 8001486:	230a      	movs	r3, #10
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	2301      	movs	r3, #1
 800148c:	f000 ffd2 	bl	8002434 <HAL_I2C_Master_Transmit>
 8001490:	0003      	movs	r3, r0
 8001492:	7023      	strb	r3, [r4, #0]
 8001494:	1d7b      	adds	r3, r7, #5
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d106      	bne.n	80014aa <I2C_Scan+0x56>
 800149c:	1dfb      	adds	r3, r7, #7
 800149e:	781a      	ldrb	r2, [r3, #0]
 80014a0:	4b0c      	ldr	r3, [pc, #48]	@ (80014d4 <I2C_Scan+0x80>)
 80014a2:	0011      	movs	r1, r2
 80014a4:	0018      	movs	r0, r3
 80014a6:	f003 fe2b 	bl	8005100 <iprintf>
 80014aa:	1dfb      	adds	r3, r7, #7
 80014ac:	781a      	ldrb	r2, [r3, #0]
 80014ae:	1dfb      	adds	r3, r7, #7
 80014b0:	3201      	adds	r2, #1
 80014b2:	701a      	strb	r2, [r3, #0]
 80014b4:	1dfb      	adds	r3, r7, #7
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b7e      	cmp	r3, #126	@ 0x7e
 80014ba:	d9d9      	bls.n	8001470 <I2C_Scan+0x1c>
 80014bc:	4b06      	ldr	r3, [pc, #24]	@ (80014d8 <I2C_Scan+0x84>)
 80014be:	0018      	movs	r0, r3
 80014c0:	f003 fe84 	bl	80051cc <puts>
 80014c4:	46c0      	nop			@ (mov r8, r8)
 80014c6:	46bd      	mov	sp, r7
 80014c8:	b003      	add	sp, #12
 80014ca:	bd90      	pop	{r4, r7, pc}
 80014cc:	08005f5c 	.word	0x08005f5c
 80014d0:	200000d4 	.word	0x200000d4
 80014d4:	08005f74 	.word	0x08005f74
 80014d8:	08005f9c 	.word	0x08005f9c

080014dc <Error_Handler>:
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
 80014e0:	b672      	cpsid	i
 80014e2:	46c0      	nop			@ (mov r8, r8)
 80014e4:	46c0      	nop			@ (mov r8, r8)
 80014e6:	e7fd      	b.n	80014e4 <Error_Handler+0x8>

080014e8 <RotaryEncoder_Init>:
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	603b      	str	r3, [r7, #0]
 80014f4:	1dbb      	adds	r3, r7, #6
 80014f6:	801a      	strh	r2, [r3, #0]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	68ba      	ldr	r2, [r7, #8]
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	1dba      	adds	r2, r7, #6
 8001502:	8812      	ldrh	r2, [r2, #0]
 8001504:	809a      	strh	r2, [r3, #4]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	683a      	ldr	r2, [r7, #0]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	68fa      	ldr	r2, [r7, #12]
 800150e:	2318      	movs	r3, #24
 8001510:	18fb      	adds	r3, r7, r3
 8001512:	881b      	ldrh	r3, [r3, #0]
 8001514:	8193      	strh	r3, [r2, #12]
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	69fa      	ldr	r2, [r7, #28]
 800151a:	611a      	str	r2, [r3, #16]
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2220      	movs	r2, #32
 8001520:	18ba      	adds	r2, r7, r2
 8001522:	8812      	ldrh	r2, [r2, #0]
 8001524:	829a      	strh	r2, [r3, #20]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	2200      	movs	r2, #0
 800152a:	619a      	str	r2, [r3, #24]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	2200      	movs	r2, #0
 8001530:	771a      	strb	r2, [r3, #28]
 8001532:	4b03      	ldr	r3, [pc, #12]	@ (8001540 <RotaryEncoder_Init+0x58>)
 8001534:	68fa      	ldr	r2, [r7, #12]
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	46c0      	nop			@ (mov r8, r8)
 800153a:	46bd      	mov	sp, r7
 800153c:	b004      	add	sp, #16
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20000258 	.word	0x20000258

08001544 <RotaryEncoder_Update>:
 8001544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	889b      	ldrh	r3, [r3, #4]
 8001554:	250f      	movs	r5, #15
 8001556:	197c      	adds	r4, r7, r5
 8001558:	0019      	movs	r1, r3
 800155a:	0010      	movs	r0, r2
 800155c:	f000 fe62 	bl	8002224 <HAL_GPIO_ReadPin>
 8001560:	0003      	movs	r3, r0
 8001562:	7023      	strb	r3, [r4, #0]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689a      	ldr	r2, [r3, #8]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	899b      	ldrh	r3, [r3, #12]
 800156c:	260e      	movs	r6, #14
 800156e:	19bc      	adds	r4, r7, r6
 8001570:	0019      	movs	r1, r3
 8001572:	0010      	movs	r0, r2
 8001574:	f000 fe56 	bl	8002224 <HAL_GPIO_ReadPin>
 8001578:	0003      	movs	r3, r0
 800157a:	7023      	strb	r3, [r4, #0]
 800157c:	197b      	adds	r3, r7, r5
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d014      	beq.n	80015ae <RotaryEncoder_Update+0x6a>
 8001584:	19bb      	adds	r3, r7, r6
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d008      	beq.n	800159e <RotaryEncoder_Update+0x5a>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2202      	movs	r2, #2
 8001590:	771a      	strb	r2, [r3, #28]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	1e5a      	subs	r2, r3, #1
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	619a      	str	r2, [r3, #24]
 800159c:	e007      	b.n	80015ae <RotaryEncoder_Update+0x6a>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2201      	movs	r2, #1
 80015a2:	771a      	strb	r2, [r3, #28]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	1c5a      	adds	r2, r3, #1
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	619a      	str	r2, [r3, #24]
 80015ae:	46c0      	nop			@ (mov r8, r8)
 80015b0:	46bd      	mov	sp, r7
 80015b2:	b005      	add	sp, #20
 80015b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015b6 <RotaryEncoder_ReadSwitch>:
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b082      	sub	sp, #8
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	691a      	ldr	r2, [r3, #16]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	8a9b      	ldrh	r3, [r3, #20]
 80015c6:	0019      	movs	r1, r3
 80015c8:	0010      	movs	r0, r2
 80015ca:	f000 fe2b 	bl	8002224 <HAL_GPIO_ReadPin>
 80015ce:	0003      	movs	r3, r0
 80015d0:	0018      	movs	r0, r3
 80015d2:	46bd      	mov	sp, r7
 80015d4:	b002      	add	sp, #8
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <HAL_GPIO_EXTI_Callback>:
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	0002      	movs	r2, r0
 80015e0:	1dbb      	adds	r3, r7, #6
 80015e2:	801a      	strh	r2, [r3, #0]
 80015e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001610 <HAL_GPIO_EXTI_Callback+0x38>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d00c      	beq.n	8001606 <HAL_GPIO_EXTI_Callback+0x2e>
 80015ec:	4b08      	ldr	r3, [pc, #32]	@ (8001610 <HAL_GPIO_EXTI_Callback+0x38>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	889b      	ldrh	r3, [r3, #4]
 80015f2:	1dba      	adds	r2, r7, #6
 80015f4:	8812      	ldrh	r2, [r2, #0]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d106      	bne.n	8001608 <HAL_GPIO_EXTI_Callback+0x30>
 80015fa:	4b05      	ldr	r3, [pc, #20]	@ (8001610 <HAL_GPIO_EXTI_Callback+0x38>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	0018      	movs	r0, r3
 8001600:	f7ff ffa0 	bl	8001544 <RotaryEncoder_Update>
 8001604:	e000      	b.n	8001608 <HAL_GPIO_EXTI_Callback+0x30>
 8001606:	46c0      	nop			@ (mov r8, r8)
 8001608:	46bd      	mov	sp, r7
 800160a:	b002      	add	sp, #8
 800160c:	bd80      	pop	{r7, pc}
 800160e:	46c0      	nop			@ (mov r8, r8)
 8001610:	20000258 	.word	0x20000258

08001614 <HAL_MspInit>:
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
 8001618:	4b07      	ldr	r3, [pc, #28]	@ (8001638 <HAL_MspInit+0x24>)
 800161a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800161c:	4b06      	ldr	r3, [pc, #24]	@ (8001638 <HAL_MspInit+0x24>)
 800161e:	2101      	movs	r1, #1
 8001620:	430a      	orrs	r2, r1
 8001622:	635a      	str	r2, [r3, #52]	@ 0x34
 8001624:	4b04      	ldr	r3, [pc, #16]	@ (8001638 <HAL_MspInit+0x24>)
 8001626:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001628:	4b03      	ldr	r3, [pc, #12]	@ (8001638 <HAL_MspInit+0x24>)
 800162a:	2180      	movs	r1, #128	@ 0x80
 800162c:	0549      	lsls	r1, r1, #21
 800162e:	430a      	orrs	r2, r1
 8001630:	639a      	str	r2, [r3, #56]	@ 0x38
 8001632:	46c0      	nop			@ (mov r8, r8)
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40021000 	.word	0x40021000

0800163c <HAL_I2C_MspInit>:
 800163c:	b590      	push	{r4, r7, lr}
 800163e:	b089      	sub	sp, #36	@ 0x24
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	240c      	movs	r4, #12
 8001646:	193b      	adds	r3, r7, r4
 8001648:	0018      	movs	r0, r3
 800164a:	2314      	movs	r3, #20
 800164c:	001a      	movs	r2, r3
 800164e:	2100      	movs	r1, #0
 8001650:	f003 feb2 	bl	80053b8 <memset>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a17      	ldr	r2, [pc, #92]	@ (80016b8 <HAL_I2C_MspInit+0x7c>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d128      	bne.n	80016b0 <HAL_I2C_MspInit+0x74>
 800165e:	4b17      	ldr	r3, [pc, #92]	@ (80016bc <HAL_I2C_MspInit+0x80>)
 8001660:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001662:	4b16      	ldr	r3, [pc, #88]	@ (80016bc <HAL_I2C_MspInit+0x80>)
 8001664:	2102      	movs	r1, #2
 8001666:	430a      	orrs	r2, r1
 8001668:	62da      	str	r2, [r3, #44]	@ 0x2c
 800166a:	4b14      	ldr	r3, [pc, #80]	@ (80016bc <HAL_I2C_MspInit+0x80>)
 800166c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800166e:	2202      	movs	r2, #2
 8001670:	4013      	ands	r3, r2
 8001672:	60bb      	str	r3, [r7, #8]
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	0021      	movs	r1, r4
 8001678:	187b      	adds	r3, r7, r1
 800167a:	22c0      	movs	r2, #192	@ 0xc0
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	187b      	adds	r3, r7, r1
 8001680:	2212      	movs	r2, #18
 8001682:	605a      	str	r2, [r3, #4]
 8001684:	187b      	adds	r3, r7, r1
 8001686:	2200      	movs	r2, #0
 8001688:	609a      	str	r2, [r3, #8]
 800168a:	187b      	adds	r3, r7, r1
 800168c:	2203      	movs	r2, #3
 800168e:	60da      	str	r2, [r3, #12]
 8001690:	187b      	adds	r3, r7, r1
 8001692:	2201      	movs	r2, #1
 8001694:	611a      	str	r2, [r3, #16]
 8001696:	187b      	adds	r3, r7, r1
 8001698:	4a09      	ldr	r2, [pc, #36]	@ (80016c0 <HAL_I2C_MspInit+0x84>)
 800169a:	0019      	movs	r1, r3
 800169c:	0010      	movs	r0, r2
 800169e:	f000 fc4b 	bl	8001f38 <HAL_GPIO_Init>
 80016a2:	4b06      	ldr	r3, [pc, #24]	@ (80016bc <HAL_I2C_MspInit+0x80>)
 80016a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80016a6:	4b05      	ldr	r3, [pc, #20]	@ (80016bc <HAL_I2C_MspInit+0x80>)
 80016a8:	2180      	movs	r1, #128	@ 0x80
 80016aa:	0389      	lsls	r1, r1, #14
 80016ac:	430a      	orrs	r2, r1
 80016ae:	639a      	str	r2, [r3, #56]	@ 0x38
 80016b0:	46c0      	nop			@ (mov r8, r8)
 80016b2:	46bd      	mov	sp, r7
 80016b4:	b009      	add	sp, #36	@ 0x24
 80016b6:	bd90      	pop	{r4, r7, pc}
 80016b8:	40005400 	.word	0x40005400
 80016bc:	40021000 	.word	0x40021000
 80016c0:	50000400 	.word	0x50000400

080016c4 <HAL_TIM_Base_MspInit>:
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	2380      	movs	r3, #128	@ 0x80
 80016d2:	05db      	lsls	r3, r3, #23
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d130      	bne.n	800173a <HAL_TIM_Base_MspInit+0x76>
 80016d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001744 <HAL_TIM_Base_MspInit+0x80>)
 80016da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80016dc:	4b19      	ldr	r3, [pc, #100]	@ (8001744 <HAL_TIM_Base_MspInit+0x80>)
 80016de:	2101      	movs	r1, #1
 80016e0:	430a      	orrs	r2, r1
 80016e2:	639a      	str	r2, [r3, #56]	@ 0x38
 80016e4:	4b18      	ldr	r3, [pc, #96]	@ (8001748 <HAL_TIM_Base_MspInit+0x84>)
 80016e6:	4a19      	ldr	r2, [pc, #100]	@ (800174c <HAL_TIM_Base_MspInit+0x88>)
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	4b17      	ldr	r3, [pc, #92]	@ (8001748 <HAL_TIM_Base_MspInit+0x84>)
 80016ec:	2208      	movs	r2, #8
 80016ee:	605a      	str	r2, [r3, #4]
 80016f0:	4b15      	ldr	r3, [pc, #84]	@ (8001748 <HAL_TIM_Base_MspInit+0x84>)
 80016f2:	2210      	movs	r2, #16
 80016f4:	609a      	str	r2, [r3, #8]
 80016f6:	4b14      	ldr	r3, [pc, #80]	@ (8001748 <HAL_TIM_Base_MspInit+0x84>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	60da      	str	r2, [r3, #12]
 80016fc:	4b12      	ldr	r3, [pc, #72]	@ (8001748 <HAL_TIM_Base_MspInit+0x84>)
 80016fe:	2280      	movs	r2, #128	@ 0x80
 8001700:	611a      	str	r2, [r3, #16]
 8001702:	4b11      	ldr	r3, [pc, #68]	@ (8001748 <HAL_TIM_Base_MspInit+0x84>)
 8001704:	2280      	movs	r2, #128	@ 0x80
 8001706:	0052      	lsls	r2, r2, #1
 8001708:	615a      	str	r2, [r3, #20]
 800170a:	4b0f      	ldr	r3, [pc, #60]	@ (8001748 <HAL_TIM_Base_MspInit+0x84>)
 800170c:	2280      	movs	r2, #128	@ 0x80
 800170e:	00d2      	lsls	r2, r2, #3
 8001710:	619a      	str	r2, [r3, #24]
 8001712:	4b0d      	ldr	r3, [pc, #52]	@ (8001748 <HAL_TIM_Base_MspInit+0x84>)
 8001714:	2200      	movs	r2, #0
 8001716:	61da      	str	r2, [r3, #28]
 8001718:	4b0b      	ldr	r3, [pc, #44]	@ (8001748 <HAL_TIM_Base_MspInit+0x84>)
 800171a:	2200      	movs	r2, #0
 800171c:	621a      	str	r2, [r3, #32]
 800171e:	4b0a      	ldr	r3, [pc, #40]	@ (8001748 <HAL_TIM_Base_MspInit+0x84>)
 8001720:	0018      	movs	r0, r3
 8001722:	f000 fae3 	bl	8001cec <HAL_DMA_Init>
 8001726:	1e03      	subs	r3, r0, #0
 8001728:	d001      	beq.n	800172e <HAL_TIM_Base_MspInit+0x6a>
 800172a:	f7ff fed7 	bl	80014dc <Error_Handler>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a05      	ldr	r2, [pc, #20]	@ (8001748 <HAL_TIM_Base_MspInit+0x84>)
 8001732:	621a      	str	r2, [r3, #32]
 8001734:	4b04      	ldr	r3, [pc, #16]	@ (8001748 <HAL_TIM_Base_MspInit+0x84>)
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	629a      	str	r2, [r3, #40]	@ 0x28
 800173a:	46c0      	nop			@ (mov r8, r8)
 800173c:	46bd      	mov	sp, r7
 800173e:	b002      	add	sp, #8
 8001740:	bd80      	pop	{r7, pc}
 8001742:	46c0      	nop			@ (mov r8, r8)
 8001744:	40021000 	.word	0x40021000
 8001748:	20000168 	.word	0x20000168
 800174c:	40020058 	.word	0x40020058

08001750 <HAL_TIM_MspPostInit>:
 8001750:	b590      	push	{r4, r7, lr}
 8001752:	b089      	sub	sp, #36	@ 0x24
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	240c      	movs	r4, #12
 800175a:	193b      	adds	r3, r7, r4
 800175c:	0018      	movs	r0, r3
 800175e:	2314      	movs	r3, #20
 8001760:	001a      	movs	r2, r3
 8001762:	2100      	movs	r1, #0
 8001764:	f003 fe28 	bl	80053b8 <memset>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	2380      	movs	r3, #128	@ 0x80
 800176e:	05db      	lsls	r3, r3, #23
 8001770:	429a      	cmp	r2, r3
 8001772:	d122      	bne.n	80017ba <HAL_TIM_MspPostInit+0x6a>
 8001774:	4b13      	ldr	r3, [pc, #76]	@ (80017c4 <HAL_TIM_MspPostInit+0x74>)
 8001776:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001778:	4b12      	ldr	r3, [pc, #72]	@ (80017c4 <HAL_TIM_MspPostInit+0x74>)
 800177a:	2101      	movs	r1, #1
 800177c:	430a      	orrs	r2, r1
 800177e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001780:	4b10      	ldr	r3, [pc, #64]	@ (80017c4 <HAL_TIM_MspPostInit+0x74>)
 8001782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001784:	2201      	movs	r2, #1
 8001786:	4013      	ands	r3, r2
 8001788:	60bb      	str	r3, [r7, #8]
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	0021      	movs	r1, r4
 800178e:	187b      	adds	r3, r7, r1
 8001790:	2201      	movs	r2, #1
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	187b      	adds	r3, r7, r1
 8001796:	2202      	movs	r2, #2
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	187b      	adds	r3, r7, r1
 800179c:	2200      	movs	r2, #0
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	187b      	adds	r3, r7, r1
 80017a2:	2200      	movs	r2, #0
 80017a4:	60da      	str	r2, [r3, #12]
 80017a6:	187b      	adds	r3, r7, r1
 80017a8:	2202      	movs	r2, #2
 80017aa:	611a      	str	r2, [r3, #16]
 80017ac:	187a      	adds	r2, r7, r1
 80017ae:	23a0      	movs	r3, #160	@ 0xa0
 80017b0:	05db      	lsls	r3, r3, #23
 80017b2:	0011      	movs	r1, r2
 80017b4:	0018      	movs	r0, r3
 80017b6:	f000 fbbf 	bl	8001f38 <HAL_GPIO_Init>
 80017ba:	46c0      	nop			@ (mov r8, r8)
 80017bc:	46bd      	mov	sp, r7
 80017be:	b009      	add	sp, #36	@ 0x24
 80017c0:	bd90      	pop	{r4, r7, pc}
 80017c2:	46c0      	nop			@ (mov r8, r8)
 80017c4:	40021000 	.word	0x40021000

080017c8 <HAL_UART_MspInit>:
 80017c8:	b590      	push	{r4, r7, lr}
 80017ca:	b089      	sub	sp, #36	@ 0x24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	240c      	movs	r4, #12
 80017d2:	193b      	adds	r3, r7, r4
 80017d4:	0018      	movs	r0, r3
 80017d6:	2314      	movs	r3, #20
 80017d8:	001a      	movs	r2, r3
 80017da:	2100      	movs	r1, #0
 80017dc:	f003 fdec 	bl	80053b8 <memset>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a18      	ldr	r2, [pc, #96]	@ (8001848 <HAL_UART_MspInit+0x80>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d129      	bne.n	800183e <HAL_UART_MspInit+0x76>
 80017ea:	4b18      	ldr	r3, [pc, #96]	@ (800184c <HAL_UART_MspInit+0x84>)
 80017ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80017ee:	4b17      	ldr	r3, [pc, #92]	@ (800184c <HAL_UART_MspInit+0x84>)
 80017f0:	2180      	movs	r1, #128	@ 0x80
 80017f2:	0289      	lsls	r1, r1, #10
 80017f4:	430a      	orrs	r2, r1
 80017f6:	639a      	str	r2, [r3, #56]	@ 0x38
 80017f8:	4b14      	ldr	r3, [pc, #80]	@ (800184c <HAL_UART_MspInit+0x84>)
 80017fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017fc:	4b13      	ldr	r3, [pc, #76]	@ (800184c <HAL_UART_MspInit+0x84>)
 80017fe:	2101      	movs	r1, #1
 8001800:	430a      	orrs	r2, r1
 8001802:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001804:	4b11      	ldr	r3, [pc, #68]	@ (800184c <HAL_UART_MspInit+0x84>)
 8001806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001808:	2201      	movs	r2, #1
 800180a:	4013      	ands	r3, r2
 800180c:	60bb      	str	r3, [r7, #8]
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	0021      	movs	r1, r4
 8001812:	187b      	adds	r3, r7, r1
 8001814:	220c      	movs	r2, #12
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	187b      	adds	r3, r7, r1
 800181a:	2202      	movs	r2, #2
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	187b      	adds	r3, r7, r1
 8001820:	2200      	movs	r2, #0
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	187b      	adds	r3, r7, r1
 8001826:	2203      	movs	r2, #3
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	187b      	adds	r3, r7, r1
 800182c:	2204      	movs	r2, #4
 800182e:	611a      	str	r2, [r3, #16]
 8001830:	187a      	adds	r2, r7, r1
 8001832:	23a0      	movs	r3, #160	@ 0xa0
 8001834:	05db      	lsls	r3, r3, #23
 8001836:	0011      	movs	r1, r2
 8001838:	0018      	movs	r0, r3
 800183a:	f000 fb7d 	bl	8001f38 <HAL_GPIO_Init>
 800183e:	46c0      	nop			@ (mov r8, r8)
 8001840:	46bd      	mov	sp, r7
 8001842:	b009      	add	sp, #36	@ 0x24
 8001844:	bd90      	pop	{r4, r7, pc}
 8001846:	46c0      	nop			@ (mov r8, r8)
 8001848:	40004400 	.word	0x40004400
 800184c:	40021000 	.word	0x40021000

08001850 <NMI_Handler>:
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
 8001854:	46c0      	nop			@ (mov r8, r8)
 8001856:	e7fd      	b.n	8001854 <NMI_Handler+0x4>

08001858 <HardFault_Handler>:
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
 800185c:	46c0      	nop			@ (mov r8, r8)
 800185e:	e7fd      	b.n	800185c <HardFault_Handler+0x4>

08001860 <SVC_Handler>:
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
 8001864:	46c0      	nop			@ (mov r8, r8)
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <PendSV_Handler>:
 800186a:	b580      	push	{r7, lr}
 800186c:	af00      	add	r7, sp, #0
 800186e:	46c0      	nop			@ (mov r8, r8)
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <SysTick_Handler>:
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
 8001878:	f000 f93e 	bl	8001af8 <HAL_IncTick>
 800187c:	46c0      	nop			@ (mov r8, r8)
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <EXTI4_15_IRQHandler>:
 8001882:	b580      	push	{r7, lr}
 8001884:	af00      	add	r7, sp, #0
 8001886:	2380      	movs	r3, #128	@ 0x80
 8001888:	00db      	lsls	r3, r3, #3
 800188a:	0018      	movs	r0, r3
 800188c:	f000 fd20 	bl	80022d0 <HAL_GPIO_EXTI_IRQHandler>
 8001890:	2380      	movs	r3, #128	@ 0x80
 8001892:	019b      	lsls	r3, r3, #6
 8001894:	0018      	movs	r0, r3
 8001896:	f000 fd1b 	bl	80022d0 <HAL_GPIO_EXTI_IRQHandler>
 800189a:	46c0      	nop			@ (mov r8, r8)
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <DMA1_Channel4_5_6_7_IRQHandler>:
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	4b03      	ldr	r3, [pc, #12]	@ (80018b4 <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 80018a6:	0018      	movs	r0, r3
 80018a8:	f000 fa98 	bl	8001ddc <HAL_DMA_IRQHandler>
 80018ac:	46c0      	nop			@ (mov r8, r8)
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	46c0      	nop			@ (mov r8, r8)
 80018b4:	20000168 	.word	0x20000168

080018b8 <_read>:
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]
 80018c8:	e00a      	b.n	80018e0 <_read+0x28>
 80018ca:	e000      	b.n	80018ce <_read+0x16>
 80018cc:	bf00      	nop
 80018ce:	0001      	movs	r1, r0
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	1c5a      	adds	r2, r3, #1
 80018d4:	60ba      	str	r2, [r7, #8]
 80018d6:	b2ca      	uxtb	r2, r1
 80018d8:	701a      	strb	r2, [r3, #0]
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	3301      	adds	r3, #1
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	697a      	ldr	r2, [r7, #20]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	dbf0      	blt.n	80018ca <_read+0x12>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	0018      	movs	r0, r3
 80018ec:	46bd      	mov	sp, r7
 80018ee:	b006      	add	sp, #24
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <_write>:
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b086      	sub	sp, #24
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	60f8      	str	r0, [r7, #12]
 80018fa:	60b9      	str	r1, [r7, #8]
 80018fc:	607a      	str	r2, [r7, #4]
 80018fe:	2300      	movs	r3, #0
 8001900:	617b      	str	r3, [r7, #20]
 8001902:	e009      	b.n	8001918 <_write+0x26>
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	1c5a      	adds	r2, r3, #1
 8001908:	60ba      	str	r2, [r7, #8]
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	0018      	movs	r0, r3
 800190e:	f7ff f971 	bl	8000bf4 <__io_putchar>
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	3301      	adds	r3, #1
 8001916:	617b      	str	r3, [r7, #20]
 8001918:	697a      	ldr	r2, [r7, #20]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	429a      	cmp	r2, r3
 800191e:	dbf1      	blt.n	8001904 <_write+0x12>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	0018      	movs	r0, r3
 8001924:	46bd      	mov	sp, r7
 8001926:	b006      	add	sp, #24
 8001928:	bd80      	pop	{r7, pc}

0800192a <_close>:
 800192a:	b580      	push	{r7, lr}
 800192c:	b082      	sub	sp, #8
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
 8001932:	2301      	movs	r3, #1
 8001934:	425b      	negs	r3, r3
 8001936:	0018      	movs	r0, r3
 8001938:	46bd      	mov	sp, r7
 800193a:	b002      	add	sp, #8
 800193c:	bd80      	pop	{r7, pc}

0800193e <_fstat>:
 800193e:	b580      	push	{r7, lr}
 8001940:	b082      	sub	sp, #8
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
 8001946:	6039      	str	r1, [r7, #0]
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	2280      	movs	r2, #128	@ 0x80
 800194c:	0192      	lsls	r2, r2, #6
 800194e:	605a      	str	r2, [r3, #4]
 8001950:	2300      	movs	r3, #0
 8001952:	0018      	movs	r0, r3
 8001954:	46bd      	mov	sp, r7
 8001956:	b002      	add	sp, #8
 8001958:	bd80      	pop	{r7, pc}

0800195a <_isatty>:
 800195a:	b580      	push	{r7, lr}
 800195c:	b082      	sub	sp, #8
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
 8001962:	2301      	movs	r3, #1
 8001964:	0018      	movs	r0, r3
 8001966:	46bd      	mov	sp, r7
 8001968:	b002      	add	sp, #8
 800196a:	bd80      	pop	{r7, pc}

0800196c <_lseek>:
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	607a      	str	r2, [r7, #4]
 8001978:	2300      	movs	r3, #0
 800197a:	0018      	movs	r0, r3
 800197c:	46bd      	mov	sp, r7
 800197e:	b004      	add	sp, #16
 8001980:	bd80      	pop	{r7, pc}
	...

08001984 <_sbrk>:
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	4a14      	ldr	r2, [pc, #80]	@ (80019e0 <_sbrk+0x5c>)
 800198e:	4b15      	ldr	r3, [pc, #84]	@ (80019e4 <_sbrk+0x60>)
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	617b      	str	r3, [r7, #20]
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	613b      	str	r3, [r7, #16]
 8001998:	4b13      	ldr	r3, [pc, #76]	@ (80019e8 <_sbrk+0x64>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d102      	bne.n	80019a6 <_sbrk+0x22>
 80019a0:	4b11      	ldr	r3, [pc, #68]	@ (80019e8 <_sbrk+0x64>)
 80019a2:	4a12      	ldr	r2, [pc, #72]	@ (80019ec <_sbrk+0x68>)
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	4b10      	ldr	r3, [pc, #64]	@ (80019e8 <_sbrk+0x64>)
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	18d3      	adds	r3, r2, r3
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d207      	bcs.n	80019c4 <_sbrk+0x40>
 80019b4:	f003 fd56 	bl	8005464 <__errno>
 80019b8:	0003      	movs	r3, r0
 80019ba:	220c      	movs	r2, #12
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	2301      	movs	r3, #1
 80019c0:	425b      	negs	r3, r3
 80019c2:	e009      	b.n	80019d8 <_sbrk+0x54>
 80019c4:	4b08      	ldr	r3, [pc, #32]	@ (80019e8 <_sbrk+0x64>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	4b07      	ldr	r3, [pc, #28]	@ (80019e8 <_sbrk+0x64>)
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	18d2      	adds	r2, r2, r3
 80019d2:	4b05      	ldr	r3, [pc, #20]	@ (80019e8 <_sbrk+0x64>)
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	0018      	movs	r0, r3
 80019da:	46bd      	mov	sp, r7
 80019dc:	b006      	add	sp, #24
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	20002000 	.word	0x20002000
 80019e4:	00000400 	.word	0x00000400
 80019e8:	2000025c 	.word	0x2000025c
 80019ec:	200003b0 	.word	0x200003b0

080019f0 <SystemInit>:
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	46c0      	nop			@ (mov r8, r8)
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
	...

080019fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80019fc:	480d      	ldr	r0, [pc, #52]	@ (8001a34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019fe:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a00:	f7ff fff6 	bl	80019f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a04:	480c      	ldr	r0, [pc, #48]	@ (8001a38 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a06:	490d      	ldr	r1, [pc, #52]	@ (8001a3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a08:	4a0d      	ldr	r2, [pc, #52]	@ (8001a40 <LoopForever+0xe>)
  movs r3, #0
 8001a0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a0c:	e002      	b.n	8001a14 <LoopCopyDataInit>

08001a0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a12:	3304      	adds	r3, #4

08001a14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a18:	d3f9      	bcc.n	8001a0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a1c:	4c0a      	ldr	r4, [pc, #40]	@ (8001a48 <LoopForever+0x16>)
  movs r3, #0
 8001a1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a20:	e001      	b.n	8001a26 <LoopFillZerobss>

08001a22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a24:	3204      	adds	r2, #4

08001a26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a28:	d3fb      	bcc.n	8001a22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a2a:	f003 fd21 	bl	8005470 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a2e:	f7ff f96d 	bl	8000d0c <main>

08001a32 <LoopForever>:

LoopForever:
    b LoopForever
 8001a32:	e7fe      	b.n	8001a32 <LoopForever>
  ldr   r0, =_estack
 8001a34:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001a38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a3c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001a40:	08006068 	.word	0x08006068
  ldr r2, =_sbss
 8001a44:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001a48:	200003b0 	.word	0x200003b0

08001a4c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a4c:	e7fe      	b.n	8001a4c <ADC1_COMP_IRQHandler>
	...

08001a50 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a56:	1dfb      	adds	r3, r7, #7
 8001a58:	2200      	movs	r2, #0
 8001a5a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001a5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a8c <HAL_Init+0x3c>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	4b0a      	ldr	r3, [pc, #40]	@ (8001a8c <HAL_Init+0x3c>)
 8001a62:	2140      	movs	r1, #64	@ 0x40
 8001a64:	430a      	orrs	r2, r1
 8001a66:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a68:	2000      	movs	r0, #0
 8001a6a:	f000 f811 	bl	8001a90 <HAL_InitTick>
 8001a6e:	1e03      	subs	r3, r0, #0
 8001a70:	d003      	beq.n	8001a7a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001a72:	1dfb      	adds	r3, r7, #7
 8001a74:	2201      	movs	r2, #1
 8001a76:	701a      	strb	r2, [r3, #0]
 8001a78:	e001      	b.n	8001a7e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a7a:	f7ff fdcb 	bl	8001614 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a7e:	1dfb      	adds	r3, r7, #7
 8001a80:	781b      	ldrb	r3, [r3, #0]
}
 8001a82:	0018      	movs	r0, r3
 8001a84:	46bd      	mov	sp, r7
 8001a86:	b002      	add	sp, #8
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	46c0      	nop			@ (mov r8, r8)
 8001a8c:	40022000 	.word	0x40022000

08001a90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a90:	b590      	push	{r4, r7, lr}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a98:	4b14      	ldr	r3, [pc, #80]	@ (8001aec <HAL_InitTick+0x5c>)
 8001a9a:	681c      	ldr	r4, [r3, #0]
 8001a9c:	4b14      	ldr	r3, [pc, #80]	@ (8001af0 <HAL_InitTick+0x60>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	0019      	movs	r1, r3
 8001aa2:	23fa      	movs	r3, #250	@ 0xfa
 8001aa4:	0098      	lsls	r0, r3, #2
 8001aa6:	f7fe fb39 	bl	800011c <__udivsi3>
 8001aaa:	0003      	movs	r3, r0
 8001aac:	0019      	movs	r1, r3
 8001aae:	0020      	movs	r0, r4
 8001ab0:	f7fe fb34 	bl	800011c <__udivsi3>
 8001ab4:	0003      	movs	r3, r0
 8001ab6:	0018      	movs	r0, r3
 8001ab8:	f000 f90b 	bl	8001cd2 <HAL_SYSTICK_Config>
 8001abc:	1e03      	subs	r3, r0, #0
 8001abe:	d001      	beq.n	8001ac4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e00f      	b.n	8001ae4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2b03      	cmp	r3, #3
 8001ac8:	d80b      	bhi.n	8001ae2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aca:	6879      	ldr	r1, [r7, #4]
 8001acc:	2301      	movs	r3, #1
 8001ace:	425b      	negs	r3, r3
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	0018      	movs	r0, r3
 8001ad4:	f000 f8d8 	bl	8001c88 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ad8:	4b06      	ldr	r3, [pc, #24]	@ (8001af4 <HAL_InitTick+0x64>)
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	e000      	b.n	8001ae4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
}
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	b003      	add	sp, #12
 8001aea:	bd90      	pop	{r4, r7, pc}
 8001aec:	20000008 	.word	0x20000008
 8001af0:	20000010 	.word	0x20000010
 8001af4:	2000000c 	.word	0x2000000c

08001af8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001afc:	4b05      	ldr	r3, [pc, #20]	@ (8001b14 <HAL_IncTick+0x1c>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	001a      	movs	r2, r3
 8001b02:	4b05      	ldr	r3, [pc, #20]	@ (8001b18 <HAL_IncTick+0x20>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	18d2      	adds	r2, r2, r3
 8001b08:	4b03      	ldr	r3, [pc, #12]	@ (8001b18 <HAL_IncTick+0x20>)
 8001b0a:	601a      	str	r2, [r3, #0]
}
 8001b0c:	46c0      	nop			@ (mov r8, r8)
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	46c0      	nop			@ (mov r8, r8)
 8001b14:	20000010 	.word	0x20000010
 8001b18:	20000260 	.word	0x20000260

08001b1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b20:	4b02      	ldr	r3, [pc, #8]	@ (8001b2c <HAL_GetTick+0x10>)
 8001b22:	681b      	ldr	r3, [r3, #0]
}
 8001b24:	0018      	movs	r0, r3
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	46c0      	nop			@ (mov r8, r8)
 8001b2c:	20000260 	.word	0x20000260

08001b30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	0002      	movs	r2, r0
 8001b38:	1dfb      	adds	r3, r7, #7
 8001b3a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b3c:	1dfb      	adds	r3, r7, #7
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b42:	d809      	bhi.n	8001b58 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b44:	1dfb      	adds	r3, r7, #7
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	001a      	movs	r2, r3
 8001b4a:	231f      	movs	r3, #31
 8001b4c:	401a      	ands	r2, r3
 8001b4e:	4b04      	ldr	r3, [pc, #16]	@ (8001b60 <__NVIC_EnableIRQ+0x30>)
 8001b50:	2101      	movs	r1, #1
 8001b52:	4091      	lsls	r1, r2
 8001b54:	000a      	movs	r2, r1
 8001b56:	601a      	str	r2, [r3, #0]
  }
}
 8001b58:	46c0      	nop			@ (mov r8, r8)
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	b002      	add	sp, #8
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	e000e100 	.word	0xe000e100

08001b64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b64:	b590      	push	{r4, r7, lr}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	0002      	movs	r2, r0
 8001b6c:	6039      	str	r1, [r7, #0]
 8001b6e:	1dfb      	adds	r3, r7, #7
 8001b70:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b72:	1dfb      	adds	r3, r7, #7
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b78:	d828      	bhi.n	8001bcc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b7a:	4a2f      	ldr	r2, [pc, #188]	@ (8001c38 <__NVIC_SetPriority+0xd4>)
 8001b7c:	1dfb      	adds	r3, r7, #7
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	b25b      	sxtb	r3, r3
 8001b82:	089b      	lsrs	r3, r3, #2
 8001b84:	33c0      	adds	r3, #192	@ 0xc0
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	589b      	ldr	r3, [r3, r2]
 8001b8a:	1dfa      	adds	r2, r7, #7
 8001b8c:	7812      	ldrb	r2, [r2, #0]
 8001b8e:	0011      	movs	r1, r2
 8001b90:	2203      	movs	r2, #3
 8001b92:	400a      	ands	r2, r1
 8001b94:	00d2      	lsls	r2, r2, #3
 8001b96:	21ff      	movs	r1, #255	@ 0xff
 8001b98:	4091      	lsls	r1, r2
 8001b9a:	000a      	movs	r2, r1
 8001b9c:	43d2      	mvns	r2, r2
 8001b9e:	401a      	ands	r2, r3
 8001ba0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	019b      	lsls	r3, r3, #6
 8001ba6:	22ff      	movs	r2, #255	@ 0xff
 8001ba8:	401a      	ands	r2, r3
 8001baa:	1dfb      	adds	r3, r7, #7
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	0018      	movs	r0, r3
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	4003      	ands	r3, r0
 8001bb4:	00db      	lsls	r3, r3, #3
 8001bb6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bb8:	481f      	ldr	r0, [pc, #124]	@ (8001c38 <__NVIC_SetPriority+0xd4>)
 8001bba:	1dfb      	adds	r3, r7, #7
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	b25b      	sxtb	r3, r3
 8001bc0:	089b      	lsrs	r3, r3, #2
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	33c0      	adds	r3, #192	@ 0xc0
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001bca:	e031      	b.n	8001c30 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bcc:	4a1b      	ldr	r2, [pc, #108]	@ (8001c3c <__NVIC_SetPriority+0xd8>)
 8001bce:	1dfb      	adds	r3, r7, #7
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	0019      	movs	r1, r3
 8001bd4:	230f      	movs	r3, #15
 8001bd6:	400b      	ands	r3, r1
 8001bd8:	3b08      	subs	r3, #8
 8001bda:	089b      	lsrs	r3, r3, #2
 8001bdc:	3306      	adds	r3, #6
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	18d3      	adds	r3, r2, r3
 8001be2:	3304      	adds	r3, #4
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	1dfa      	adds	r2, r7, #7
 8001be8:	7812      	ldrb	r2, [r2, #0]
 8001bea:	0011      	movs	r1, r2
 8001bec:	2203      	movs	r2, #3
 8001bee:	400a      	ands	r2, r1
 8001bf0:	00d2      	lsls	r2, r2, #3
 8001bf2:	21ff      	movs	r1, #255	@ 0xff
 8001bf4:	4091      	lsls	r1, r2
 8001bf6:	000a      	movs	r2, r1
 8001bf8:	43d2      	mvns	r2, r2
 8001bfa:	401a      	ands	r2, r3
 8001bfc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	019b      	lsls	r3, r3, #6
 8001c02:	22ff      	movs	r2, #255	@ 0xff
 8001c04:	401a      	ands	r2, r3
 8001c06:	1dfb      	adds	r3, r7, #7
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	0018      	movs	r0, r3
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	4003      	ands	r3, r0
 8001c10:	00db      	lsls	r3, r3, #3
 8001c12:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c14:	4809      	ldr	r0, [pc, #36]	@ (8001c3c <__NVIC_SetPriority+0xd8>)
 8001c16:	1dfb      	adds	r3, r7, #7
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	001c      	movs	r4, r3
 8001c1c:	230f      	movs	r3, #15
 8001c1e:	4023      	ands	r3, r4
 8001c20:	3b08      	subs	r3, #8
 8001c22:	089b      	lsrs	r3, r3, #2
 8001c24:	430a      	orrs	r2, r1
 8001c26:	3306      	adds	r3, #6
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	18c3      	adds	r3, r0, r3
 8001c2c:	3304      	adds	r3, #4
 8001c2e:	601a      	str	r2, [r3, #0]
}
 8001c30:	46c0      	nop			@ (mov r8, r8)
 8001c32:	46bd      	mov	sp, r7
 8001c34:	b003      	add	sp, #12
 8001c36:	bd90      	pop	{r4, r7, pc}
 8001c38:	e000e100 	.word	0xe000e100
 8001c3c:	e000ed00 	.word	0xe000ed00

08001c40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	1e5a      	subs	r2, r3, #1
 8001c4c:	2380      	movs	r3, #128	@ 0x80
 8001c4e:	045b      	lsls	r3, r3, #17
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d301      	bcc.n	8001c58 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c54:	2301      	movs	r3, #1
 8001c56:	e010      	b.n	8001c7a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c58:	4b0a      	ldr	r3, [pc, #40]	@ (8001c84 <SysTick_Config+0x44>)
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	3a01      	subs	r2, #1
 8001c5e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c60:	2301      	movs	r3, #1
 8001c62:	425b      	negs	r3, r3
 8001c64:	2103      	movs	r1, #3
 8001c66:	0018      	movs	r0, r3
 8001c68:	f7ff ff7c 	bl	8001b64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c6c:	4b05      	ldr	r3, [pc, #20]	@ (8001c84 <SysTick_Config+0x44>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c72:	4b04      	ldr	r3, [pc, #16]	@ (8001c84 <SysTick_Config+0x44>)
 8001c74:	2207      	movs	r2, #7
 8001c76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	0018      	movs	r0, r3
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	b002      	add	sp, #8
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	46c0      	nop			@ (mov r8, r8)
 8001c84:	e000e010 	.word	0xe000e010

08001c88 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60b9      	str	r1, [r7, #8]
 8001c90:	607a      	str	r2, [r7, #4]
 8001c92:	210f      	movs	r1, #15
 8001c94:	187b      	adds	r3, r7, r1
 8001c96:	1c02      	adds	r2, r0, #0
 8001c98:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001c9a:	68ba      	ldr	r2, [r7, #8]
 8001c9c:	187b      	adds	r3, r7, r1
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	b25b      	sxtb	r3, r3
 8001ca2:	0011      	movs	r1, r2
 8001ca4:	0018      	movs	r0, r3
 8001ca6:	f7ff ff5d 	bl	8001b64 <__NVIC_SetPriority>
}
 8001caa:	46c0      	nop			@ (mov r8, r8)
 8001cac:	46bd      	mov	sp, r7
 8001cae:	b004      	add	sp, #16
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b082      	sub	sp, #8
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	0002      	movs	r2, r0
 8001cba:	1dfb      	adds	r3, r7, #7
 8001cbc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cbe:	1dfb      	adds	r3, r7, #7
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	b25b      	sxtb	r3, r3
 8001cc4:	0018      	movs	r0, r3
 8001cc6:	f7ff ff33 	bl	8001b30 <__NVIC_EnableIRQ>
}
 8001cca:	46c0      	nop			@ (mov r8, r8)
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	b002      	add	sp, #8
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b082      	sub	sp, #8
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	0018      	movs	r0, r3
 8001cde:	f7ff ffaf 	bl	8001c40 <SysTick_Config>
 8001ce2:	0003      	movs	r3, r0
}
 8001ce4:	0018      	movs	r0, r3
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	b002      	add	sp, #8
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e061      	b.n	8001dc2 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a32      	ldr	r2, [pc, #200]	@ (8001dcc <HAL_DMA_Init+0xe0>)
 8001d04:	4694      	mov	ip, r2
 8001d06:	4463      	add	r3, ip
 8001d08:	2114      	movs	r1, #20
 8001d0a:	0018      	movs	r0, r3
 8001d0c:	f7fe fa06 	bl	800011c <__udivsi3>
 8001d10:	0003      	movs	r3, r0
 8001d12:	009a      	lsls	r2, r3, #2
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4a2d      	ldr	r2, [pc, #180]	@ (8001dd0 <HAL_DMA_Init+0xe4>)
 8001d1c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2225      	movs	r2, #37	@ 0x25
 8001d22:	2102      	movs	r1, #2
 8001d24:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	4a28      	ldr	r2, [pc, #160]	@ (8001dd4 <HAL_DMA_Init+0xe8>)
 8001d32:	4013      	ands	r3, r2
 8001d34:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001d3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	691b      	ldr	r3, [r3, #16]
 8001d44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a1b      	ldr	r3, [r3, #32]
 8001d5c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	68fa      	ldr	r2, [r7, #12]
 8001d6a:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	2380      	movs	r3, #128	@ 0x80
 8001d72:	01db      	lsls	r3, r3, #7
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d018      	beq.n	8001daa <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001d78:	4b17      	ldr	r3, [pc, #92]	@ (8001dd8 <HAL_DMA_Init+0xec>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d80:	211c      	movs	r1, #28
 8001d82:	400b      	ands	r3, r1
 8001d84:	210f      	movs	r1, #15
 8001d86:	4099      	lsls	r1, r3
 8001d88:	000b      	movs	r3, r1
 8001d8a:	43d9      	mvns	r1, r3
 8001d8c:	4b12      	ldr	r3, [pc, #72]	@ (8001dd8 <HAL_DMA_Init+0xec>)
 8001d8e:	400a      	ands	r2, r1
 8001d90:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001d92:	4b11      	ldr	r3, [pc, #68]	@ (8001dd8 <HAL_DMA_Init+0xec>)
 8001d94:	6819      	ldr	r1, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685a      	ldr	r2, [r3, #4]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d9e:	201c      	movs	r0, #28
 8001da0:	4003      	ands	r3, r0
 8001da2:	409a      	lsls	r2, r3
 8001da4:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd8 <HAL_DMA_Init+0xec>)
 8001da6:	430a      	orrs	r2, r1
 8001da8:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2225      	movs	r2, #37	@ 0x25
 8001db4:	2101      	movs	r1, #1
 8001db6:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2224      	movs	r2, #36	@ 0x24
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	0018      	movs	r0, r3
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	b004      	add	sp, #16
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	46c0      	nop			@ (mov r8, r8)
 8001dcc:	bffdfff8 	.word	0xbffdfff8
 8001dd0:	40020000 	.word	0x40020000
 8001dd4:	ffff800f 	.word	0xffff800f
 8001dd8:	400200a8 	.word	0x400200a8

08001ddc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df8:	221c      	movs	r2, #28
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	2204      	movs	r2, #4
 8001dfe:	409a      	lsls	r2, r3
 8001e00:	0013      	movs	r3, r2
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	4013      	ands	r3, r2
 8001e06:	d026      	beq.n	8001e56 <HAL_DMA_IRQHandler+0x7a>
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	2204      	movs	r2, #4
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	d022      	beq.n	8001e56 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2220      	movs	r2, #32
 8001e18:	4013      	ands	r3, r2
 8001e1a:	d107      	bne.n	8001e2c <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2104      	movs	r1, #4
 8001e28:	438a      	bics	r2, r1
 8001e2a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e30:	221c      	movs	r2, #28
 8001e32:	401a      	ands	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e38:	2104      	movs	r1, #4
 8001e3a:	4091      	lsls	r1, r2
 8001e3c:	000a      	movs	r2, r1
 8001e3e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d100      	bne.n	8001e4a <HAL_DMA_IRQHandler+0x6e>
 8001e48:	e071      	b.n	8001f2e <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	0010      	movs	r0, r2
 8001e52:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8001e54:	e06b      	b.n	8001f2e <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e5a:	221c      	movs	r2, #28
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	2202      	movs	r2, #2
 8001e60:	409a      	lsls	r2, r3
 8001e62:	0013      	movs	r3, r2
 8001e64:	68fa      	ldr	r2, [r7, #12]
 8001e66:	4013      	ands	r3, r2
 8001e68:	d02d      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0xea>
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	2202      	movs	r2, #2
 8001e6e:	4013      	ands	r3, r2
 8001e70:	d029      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2220      	movs	r2, #32
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	d10b      	bne.n	8001e96 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	210a      	movs	r1, #10
 8001e8a:	438a      	bics	r2, r1
 8001e8c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2225      	movs	r2, #37	@ 0x25
 8001e92:	2101      	movs	r1, #1
 8001e94:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e9a:	221c      	movs	r2, #28
 8001e9c:	401a      	ands	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea2:	2102      	movs	r1, #2
 8001ea4:	4091      	lsls	r1, r2
 8001ea6:	000a      	movs	r2, r1
 8001ea8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2224      	movs	r2, #36	@ 0x24
 8001eae:	2100      	movs	r1, #0
 8001eb0:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d039      	beq.n	8001f2e <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	0010      	movs	r0, r2
 8001ec2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001ec4:	e033      	b.n	8001f2e <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eca:	221c      	movs	r2, #28
 8001ecc:	4013      	ands	r3, r2
 8001ece:	2208      	movs	r2, #8
 8001ed0:	409a      	lsls	r2, r3
 8001ed2:	0013      	movs	r3, r2
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	d02a      	beq.n	8001f30 <HAL_DMA_IRQHandler+0x154>
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	2208      	movs	r2, #8
 8001ede:	4013      	ands	r3, r2
 8001ee0:	d026      	beq.n	8001f30 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	210e      	movs	r1, #14
 8001eee:	438a      	bics	r2, r1
 8001ef0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ef6:	221c      	movs	r2, #28
 8001ef8:	401a      	ands	r2, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efe:	2101      	movs	r1, #1
 8001f00:	4091      	lsls	r1, r2
 8001f02:	000a      	movs	r2, r1
 8001f04:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2225      	movs	r2, #37	@ 0x25
 8001f10:	2101      	movs	r1, #1
 8001f12:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2224      	movs	r2, #36	@ 0x24
 8001f18:	2100      	movs	r1, #0
 8001f1a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d005      	beq.n	8001f30 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	0010      	movs	r0, r2
 8001f2c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001f2e:	46c0      	nop			@ (mov r8, r8)
 8001f30:	46c0      	nop			@ (mov r8, r8)
}
 8001f32:	46bd      	mov	sp, r7
 8001f34:	b004      	add	sp, #16
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f42:	2300      	movs	r3, #0
 8001f44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f46:	2300      	movs	r3, #0
 8001f48:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001f4e:	e14f      	b.n	80021f0 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2101      	movs	r1, #1
 8001f56:	697a      	ldr	r2, [r7, #20]
 8001f58:	4091      	lsls	r1, r2
 8001f5a:	000a      	movs	r2, r1
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d100      	bne.n	8001f68 <HAL_GPIO_Init+0x30>
 8001f66:	e140      	b.n	80021ea <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	2203      	movs	r2, #3
 8001f6e:	4013      	ands	r3, r2
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d005      	beq.n	8001f80 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	2203      	movs	r2, #3
 8001f7a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d130      	bne.n	8001fe2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	2203      	movs	r2, #3
 8001f8c:	409a      	lsls	r2, r3
 8001f8e:	0013      	movs	r3, r2
 8001f90:	43da      	mvns	r2, r3
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	4013      	ands	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	68da      	ldr	r2, [r3, #12]
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	409a      	lsls	r2, r3
 8001fa2:	0013      	movs	r3, r2
 8001fa4:	693a      	ldr	r2, [r7, #16]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	409a      	lsls	r2, r3
 8001fbc:	0013      	movs	r3, r2
 8001fbe:	43da      	mvns	r2, r3
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	091b      	lsrs	r3, r3, #4
 8001fcc:	2201      	movs	r2, #1
 8001fce:	401a      	ands	r2, r3
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	409a      	lsls	r2, r3
 8001fd4:	0013      	movs	r3, r2
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2203      	movs	r2, #3
 8001fe8:	4013      	ands	r3, r2
 8001fea:	2b03      	cmp	r3, #3
 8001fec:	d017      	beq.n	800201e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	2203      	movs	r2, #3
 8001ffa:	409a      	lsls	r2, r3
 8001ffc:	0013      	movs	r3, r2
 8001ffe:	43da      	mvns	r2, r3
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	4013      	ands	r3, r2
 8002004:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	689a      	ldr	r2, [r3, #8]
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	409a      	lsls	r2, r3
 8002010:	0013      	movs	r3, r2
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	4313      	orrs	r3, r2
 8002016:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	2203      	movs	r2, #3
 8002024:	4013      	ands	r3, r2
 8002026:	2b02      	cmp	r3, #2
 8002028:	d123      	bne.n	8002072 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	08da      	lsrs	r2, r3, #3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	3208      	adds	r2, #8
 8002032:	0092      	lsls	r2, r2, #2
 8002034:	58d3      	ldr	r3, [r2, r3]
 8002036:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	2207      	movs	r2, #7
 800203c:	4013      	ands	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	220f      	movs	r2, #15
 8002042:	409a      	lsls	r2, r3
 8002044:	0013      	movs	r3, r2
 8002046:	43da      	mvns	r2, r3
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	4013      	ands	r3, r2
 800204c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	691a      	ldr	r2, [r3, #16]
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	2107      	movs	r1, #7
 8002056:	400b      	ands	r3, r1
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	409a      	lsls	r2, r3
 800205c:	0013      	movs	r3, r2
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	4313      	orrs	r3, r2
 8002062:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	08da      	lsrs	r2, r3, #3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3208      	adds	r2, #8
 800206c:	0092      	lsls	r2, r2, #2
 800206e:	6939      	ldr	r1, [r7, #16]
 8002070:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	2203      	movs	r2, #3
 800207e:	409a      	lsls	r2, r3
 8002080:	0013      	movs	r3, r2
 8002082:	43da      	mvns	r2, r3
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	4013      	ands	r3, r2
 8002088:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	2203      	movs	r2, #3
 8002090:	401a      	ands	r2, r3
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	409a      	lsls	r2, r3
 8002098:	0013      	movs	r3, r2
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	4313      	orrs	r3, r2
 800209e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685a      	ldr	r2, [r3, #4]
 80020aa:	23c0      	movs	r3, #192	@ 0xc0
 80020ac:	029b      	lsls	r3, r3, #10
 80020ae:	4013      	ands	r3, r2
 80020b0:	d100      	bne.n	80020b4 <HAL_GPIO_Init+0x17c>
 80020b2:	e09a      	b.n	80021ea <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020b4:	4b54      	ldr	r3, [pc, #336]	@ (8002208 <HAL_GPIO_Init+0x2d0>)
 80020b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020b8:	4b53      	ldr	r3, [pc, #332]	@ (8002208 <HAL_GPIO_Init+0x2d0>)
 80020ba:	2101      	movs	r1, #1
 80020bc:	430a      	orrs	r2, r1
 80020be:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80020c0:	4a52      	ldr	r2, [pc, #328]	@ (800220c <HAL_GPIO_Init+0x2d4>)
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	089b      	lsrs	r3, r3, #2
 80020c6:	3302      	adds	r3, #2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	589b      	ldr	r3, [r3, r2]
 80020cc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	2203      	movs	r2, #3
 80020d2:	4013      	ands	r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	220f      	movs	r2, #15
 80020d8:	409a      	lsls	r2, r3
 80020da:	0013      	movs	r3, r2
 80020dc:	43da      	mvns	r2, r3
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	4013      	ands	r3, r2
 80020e2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	23a0      	movs	r3, #160	@ 0xa0
 80020e8:	05db      	lsls	r3, r3, #23
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d019      	beq.n	8002122 <HAL_GPIO_Init+0x1ea>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a47      	ldr	r2, [pc, #284]	@ (8002210 <HAL_GPIO_Init+0x2d8>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d013      	beq.n	800211e <HAL_GPIO_Init+0x1e6>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a46      	ldr	r2, [pc, #280]	@ (8002214 <HAL_GPIO_Init+0x2dc>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d00d      	beq.n	800211a <HAL_GPIO_Init+0x1e2>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a45      	ldr	r2, [pc, #276]	@ (8002218 <HAL_GPIO_Init+0x2e0>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d007      	beq.n	8002116 <HAL_GPIO_Init+0x1de>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a44      	ldr	r2, [pc, #272]	@ (800221c <HAL_GPIO_Init+0x2e4>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d101      	bne.n	8002112 <HAL_GPIO_Init+0x1da>
 800210e:	2305      	movs	r3, #5
 8002110:	e008      	b.n	8002124 <HAL_GPIO_Init+0x1ec>
 8002112:	2306      	movs	r3, #6
 8002114:	e006      	b.n	8002124 <HAL_GPIO_Init+0x1ec>
 8002116:	2303      	movs	r3, #3
 8002118:	e004      	b.n	8002124 <HAL_GPIO_Init+0x1ec>
 800211a:	2302      	movs	r3, #2
 800211c:	e002      	b.n	8002124 <HAL_GPIO_Init+0x1ec>
 800211e:	2301      	movs	r3, #1
 8002120:	e000      	b.n	8002124 <HAL_GPIO_Init+0x1ec>
 8002122:	2300      	movs	r3, #0
 8002124:	697a      	ldr	r2, [r7, #20]
 8002126:	2103      	movs	r1, #3
 8002128:	400a      	ands	r2, r1
 800212a:	0092      	lsls	r2, r2, #2
 800212c:	4093      	lsls	r3, r2
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	4313      	orrs	r3, r2
 8002132:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002134:	4935      	ldr	r1, [pc, #212]	@ (800220c <HAL_GPIO_Init+0x2d4>)
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	089b      	lsrs	r3, r3, #2
 800213a:	3302      	adds	r3, #2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002142:	4b37      	ldr	r3, [pc, #220]	@ (8002220 <HAL_GPIO_Init+0x2e8>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	43da      	mvns	r2, r3
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	4013      	ands	r3, r2
 8002150:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685a      	ldr	r2, [r3, #4]
 8002156:	2380      	movs	r3, #128	@ 0x80
 8002158:	035b      	lsls	r3, r3, #13
 800215a:	4013      	ands	r3, r2
 800215c:	d003      	beq.n	8002166 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	4313      	orrs	r3, r2
 8002164:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002166:	4b2e      	ldr	r3, [pc, #184]	@ (8002220 <HAL_GPIO_Init+0x2e8>)
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800216c:	4b2c      	ldr	r3, [pc, #176]	@ (8002220 <HAL_GPIO_Init+0x2e8>)
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	43da      	mvns	r2, r3
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	4013      	ands	r3, r2
 800217a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685a      	ldr	r2, [r3, #4]
 8002180:	2380      	movs	r3, #128	@ 0x80
 8002182:	039b      	lsls	r3, r3, #14
 8002184:	4013      	ands	r3, r2
 8002186:	d003      	beq.n	8002190 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	4313      	orrs	r3, r2
 800218e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002190:	4b23      	ldr	r3, [pc, #140]	@ (8002220 <HAL_GPIO_Init+0x2e8>)
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8002196:	4b22      	ldr	r3, [pc, #136]	@ (8002220 <HAL_GPIO_Init+0x2e8>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	43da      	mvns	r2, r3
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	4013      	ands	r3, r2
 80021a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685a      	ldr	r2, [r3, #4]
 80021aa:	2380      	movs	r3, #128	@ 0x80
 80021ac:	029b      	lsls	r3, r3, #10
 80021ae:	4013      	ands	r3, r2
 80021b0:	d003      	beq.n	80021ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80021ba:	4b19      	ldr	r3, [pc, #100]	@ (8002220 <HAL_GPIO_Init+0x2e8>)
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021c0:	4b17      	ldr	r3, [pc, #92]	@ (8002220 <HAL_GPIO_Init+0x2e8>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	43da      	mvns	r2, r3
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	4013      	ands	r3, r2
 80021ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	2380      	movs	r3, #128	@ 0x80
 80021d6:	025b      	lsls	r3, r3, #9
 80021d8:	4013      	ands	r3, r2
 80021da:	d003      	beq.n	80021e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80021e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002220 <HAL_GPIO_Init+0x2e8>)
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	3301      	adds	r3, #1
 80021ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	40da      	lsrs	r2, r3
 80021f8:	1e13      	subs	r3, r2, #0
 80021fa:	d000      	beq.n	80021fe <HAL_GPIO_Init+0x2c6>
 80021fc:	e6a8      	b.n	8001f50 <HAL_GPIO_Init+0x18>
  }
}
 80021fe:	46c0      	nop			@ (mov r8, r8)
 8002200:	46c0      	nop			@ (mov r8, r8)
 8002202:	46bd      	mov	sp, r7
 8002204:	b006      	add	sp, #24
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40021000 	.word	0x40021000
 800220c:	40010000 	.word	0x40010000
 8002210:	50000400 	.word	0x50000400
 8002214:	50000800 	.word	0x50000800
 8002218:	50000c00 	.word	0x50000c00
 800221c:	50001c00 	.word	0x50001c00
 8002220:	40010400 	.word	0x40010400

08002224 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	000a      	movs	r2, r1
 800222e:	1cbb      	adds	r3, r7, #2
 8002230:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	1cba      	adds	r2, r7, #2
 8002238:	8812      	ldrh	r2, [r2, #0]
 800223a:	4013      	ands	r3, r2
 800223c:	d004      	beq.n	8002248 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800223e:	230f      	movs	r3, #15
 8002240:	18fb      	adds	r3, r7, r3
 8002242:	2201      	movs	r2, #1
 8002244:	701a      	strb	r2, [r3, #0]
 8002246:	e003      	b.n	8002250 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002248:	230f      	movs	r3, #15
 800224a:	18fb      	adds	r3, r7, r3
 800224c:	2200      	movs	r2, #0
 800224e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002250:	230f      	movs	r3, #15
 8002252:	18fb      	adds	r3, r7, r3
 8002254:	781b      	ldrb	r3, [r3, #0]
}
 8002256:	0018      	movs	r0, r3
 8002258:	46bd      	mov	sp, r7
 800225a:	b004      	add	sp, #16
 800225c:	bd80      	pop	{r7, pc}

0800225e <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b082      	sub	sp, #8
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
 8002266:	0008      	movs	r0, r1
 8002268:	0011      	movs	r1, r2
 800226a:	1cbb      	adds	r3, r7, #2
 800226c:	1c02      	adds	r2, r0, #0
 800226e:	801a      	strh	r2, [r3, #0]
 8002270:	1c7b      	adds	r3, r7, #1
 8002272:	1c0a      	adds	r2, r1, #0
 8002274:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002276:	1c7b      	adds	r3, r7, #1
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d004      	beq.n	8002288 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800227e:	1cbb      	adds	r3, r7, #2
 8002280:	881a      	ldrh	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002286:	e003      	b.n	8002290 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002288:	1cbb      	adds	r3, r7, #2
 800228a:	881a      	ldrh	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002290:	46c0      	nop			@ (mov r8, r8)
 8002292:	46bd      	mov	sp, r7
 8002294:	b002      	add	sp, #8
 8002296:	bd80      	pop	{r7, pc}

08002298 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	000a      	movs	r2, r1
 80022a2:	1cbb      	adds	r3, r7, #2
 80022a4:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022ac:	1cbb      	adds	r3, r7, #2
 80022ae:	881b      	ldrh	r3, [r3, #0]
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	4013      	ands	r3, r2
 80022b4:	041a      	lsls	r2, r3, #16
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	43db      	mvns	r3, r3
 80022ba:	1cb9      	adds	r1, r7, #2
 80022bc:	8809      	ldrh	r1, [r1, #0]
 80022be:	400b      	ands	r3, r1
 80022c0:	431a      	orrs	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	619a      	str	r2, [r3, #24]
}
 80022c6:	46c0      	nop			@ (mov r8, r8)
 80022c8:	46bd      	mov	sp, r7
 80022ca:	b004      	add	sp, #16
 80022cc:	bd80      	pop	{r7, pc}
	...

080022d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	0002      	movs	r2, r0
 80022d8:	1dbb      	adds	r3, r7, #6
 80022da:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80022dc:	4b09      	ldr	r3, [pc, #36]	@ (8002304 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80022de:	695b      	ldr	r3, [r3, #20]
 80022e0:	1dba      	adds	r2, r7, #6
 80022e2:	8812      	ldrh	r2, [r2, #0]
 80022e4:	4013      	ands	r3, r2
 80022e6:	d008      	beq.n	80022fa <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022e8:	4b06      	ldr	r3, [pc, #24]	@ (8002304 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80022ea:	1dba      	adds	r2, r7, #6
 80022ec:	8812      	ldrh	r2, [r2, #0]
 80022ee:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022f0:	1dbb      	adds	r3, r7, #6
 80022f2:	881b      	ldrh	r3, [r3, #0]
 80022f4:	0018      	movs	r0, r3
 80022f6:	f7ff f96f 	bl	80015d8 <HAL_GPIO_EXTI_Callback>
  }
}
 80022fa:	46c0      	nop			@ (mov r8, r8)
 80022fc:	46bd      	mov	sp, r7
 80022fe:	b002      	add	sp, #8
 8002300:	bd80      	pop	{r7, pc}
 8002302:	46c0      	nop			@ (mov r8, r8)
 8002304:	40010400 	.word	0x40010400

08002308 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e082      	b.n	8002420 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2241      	movs	r2, #65	@ 0x41
 800231e:	5c9b      	ldrb	r3, [r3, r2]
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	d107      	bne.n	8002336 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2240      	movs	r2, #64	@ 0x40
 800232a:	2100      	movs	r1, #0
 800232c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	0018      	movs	r0, r3
 8002332:	f7ff f983 	bl	800163c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2241      	movs	r2, #65	@ 0x41
 800233a:	2124      	movs	r1, #36	@ 0x24
 800233c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2101      	movs	r1, #1
 800234a:	438a      	bics	r2, r1
 800234c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685a      	ldr	r2, [r3, #4]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4934      	ldr	r1, [pc, #208]	@ (8002428 <HAL_I2C_Init+0x120>)
 8002358:	400a      	ands	r2, r1
 800235a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689a      	ldr	r2, [r3, #8]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4931      	ldr	r1, [pc, #196]	@ (800242c <HAL_I2C_Init+0x124>)
 8002368:	400a      	ands	r2, r1
 800236a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d108      	bne.n	8002386 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689a      	ldr	r2, [r3, #8]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2180      	movs	r1, #128	@ 0x80
 800237e:	0209      	lsls	r1, r1, #8
 8002380:	430a      	orrs	r2, r1
 8002382:	609a      	str	r2, [r3, #8]
 8002384:	e007      	b.n	8002396 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689a      	ldr	r2, [r3, #8]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2184      	movs	r1, #132	@ 0x84
 8002390:	0209      	lsls	r1, r1, #8
 8002392:	430a      	orrs	r2, r1
 8002394:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	2b02      	cmp	r3, #2
 800239c:	d104      	bne.n	80023a8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2280      	movs	r2, #128	@ 0x80
 80023a4:	0112      	lsls	r2, r2, #4
 80023a6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	685a      	ldr	r2, [r3, #4]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	491f      	ldr	r1, [pc, #124]	@ (8002430 <HAL_I2C_Init+0x128>)
 80023b4:	430a      	orrs	r2, r1
 80023b6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68da      	ldr	r2, [r3, #12]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	491a      	ldr	r1, [pc, #104]	@ (800242c <HAL_I2C_Init+0x124>)
 80023c4:	400a      	ands	r2, r1
 80023c6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	691a      	ldr	r2, [r3, #16]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	695b      	ldr	r3, [r3, #20]
 80023d0:	431a      	orrs	r2, r3
 80023d2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	430a      	orrs	r2, r1
 80023e0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	69d9      	ldr	r1, [r3, #28]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a1a      	ldr	r2, [r3, #32]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	430a      	orrs	r2, r1
 80023f0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2101      	movs	r1, #1
 80023fe:	430a      	orrs	r2, r1
 8002400:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2241      	movs	r2, #65	@ 0x41
 800240c:	2120      	movs	r1, #32
 800240e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2242      	movs	r2, #66	@ 0x42
 800241a:	2100      	movs	r1, #0
 800241c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800241e:	2300      	movs	r3, #0
}
 8002420:	0018      	movs	r0, r3
 8002422:	46bd      	mov	sp, r7
 8002424:	b002      	add	sp, #8
 8002426:	bd80      	pop	{r7, pc}
 8002428:	f0ffffff 	.word	0xf0ffffff
 800242c:	ffff7fff 	.word	0xffff7fff
 8002430:	02008000 	.word	0x02008000

08002434 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002434:	b590      	push	{r4, r7, lr}
 8002436:	b089      	sub	sp, #36	@ 0x24
 8002438:	af02      	add	r7, sp, #8
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	0008      	movs	r0, r1
 800243e:	607a      	str	r2, [r7, #4]
 8002440:	0019      	movs	r1, r3
 8002442:	230a      	movs	r3, #10
 8002444:	18fb      	adds	r3, r7, r3
 8002446:	1c02      	adds	r2, r0, #0
 8002448:	801a      	strh	r2, [r3, #0]
 800244a:	2308      	movs	r3, #8
 800244c:	18fb      	adds	r3, r7, r3
 800244e:	1c0a      	adds	r2, r1, #0
 8002450:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2241      	movs	r2, #65	@ 0x41
 8002456:	5c9b      	ldrb	r3, [r3, r2]
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b20      	cmp	r3, #32
 800245c:	d000      	beq.n	8002460 <HAL_I2C_Master_Transmit+0x2c>
 800245e:	e0e7      	b.n	8002630 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2240      	movs	r2, #64	@ 0x40
 8002464:	5c9b      	ldrb	r3, [r3, r2]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d101      	bne.n	800246e <HAL_I2C_Master_Transmit+0x3a>
 800246a:	2302      	movs	r3, #2
 800246c:	e0e1      	b.n	8002632 <HAL_I2C_Master_Transmit+0x1fe>
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2240      	movs	r2, #64	@ 0x40
 8002472:	2101      	movs	r1, #1
 8002474:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002476:	f7ff fb51 	bl	8001b1c <HAL_GetTick>
 800247a:	0003      	movs	r3, r0
 800247c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800247e:	2380      	movs	r3, #128	@ 0x80
 8002480:	0219      	lsls	r1, r3, #8
 8002482:	68f8      	ldr	r0, [r7, #12]
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	2319      	movs	r3, #25
 800248a:	2201      	movs	r2, #1
 800248c:	f000 f8fc 	bl	8002688 <I2C_WaitOnFlagUntilTimeout>
 8002490:	1e03      	subs	r3, r0, #0
 8002492:	d001      	beq.n	8002498 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e0cc      	b.n	8002632 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2241      	movs	r2, #65	@ 0x41
 800249c:	2121      	movs	r1, #33	@ 0x21
 800249e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2242      	movs	r2, #66	@ 0x42
 80024a4:	2110      	movs	r1, #16
 80024a6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2200      	movs	r2, #0
 80024ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2208      	movs	r2, #8
 80024b8:	18ba      	adds	r2, r7, r2
 80024ba:	8812      	ldrh	r2, [r2, #0]
 80024bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2200      	movs	r2, #0
 80024c2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	2bff      	cmp	r3, #255	@ 0xff
 80024cc:	d911      	bls.n	80024f2 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	22ff      	movs	r2, #255	@ 0xff
 80024d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024d8:	b2da      	uxtb	r2, r3
 80024da:	2380      	movs	r3, #128	@ 0x80
 80024dc:	045c      	lsls	r4, r3, #17
 80024de:	230a      	movs	r3, #10
 80024e0:	18fb      	adds	r3, r7, r3
 80024e2:	8819      	ldrh	r1, [r3, #0]
 80024e4:	68f8      	ldr	r0, [r7, #12]
 80024e6:	4b55      	ldr	r3, [pc, #340]	@ (800263c <HAL_I2C_Master_Transmit+0x208>)
 80024e8:	9300      	str	r3, [sp, #0]
 80024ea:	0023      	movs	r3, r4
 80024ec:	f000 fa9c 	bl	8002a28 <I2C_TransferConfig>
 80024f0:	e075      	b.n	80025de <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002500:	b2da      	uxtb	r2, r3
 8002502:	2380      	movs	r3, #128	@ 0x80
 8002504:	049c      	lsls	r4, r3, #18
 8002506:	230a      	movs	r3, #10
 8002508:	18fb      	adds	r3, r7, r3
 800250a:	8819      	ldrh	r1, [r3, #0]
 800250c:	68f8      	ldr	r0, [r7, #12]
 800250e:	4b4b      	ldr	r3, [pc, #300]	@ (800263c <HAL_I2C_Master_Transmit+0x208>)
 8002510:	9300      	str	r3, [sp, #0]
 8002512:	0023      	movs	r3, r4
 8002514:	f000 fa88 	bl	8002a28 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002518:	e061      	b.n	80025de <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800251a:	697a      	ldr	r2, [r7, #20]
 800251c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	0018      	movs	r0, r3
 8002522:	f000 f8ff 	bl	8002724 <I2C_WaitOnTXISFlagUntilTimeout>
 8002526:	1e03      	subs	r3, r0, #0
 8002528:	d001      	beq.n	800252e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e081      	b.n	8002632 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002532:	781a      	ldrb	r2, [r3, #0]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800253e:	1c5a      	adds	r2, r3, #1
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002548:	b29b      	uxth	r3, r3
 800254a:	3b01      	subs	r3, #1
 800254c:	b29a      	uxth	r2, r3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002556:	3b01      	subs	r3, #1
 8002558:	b29a      	uxth	r2, r3
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002562:	b29b      	uxth	r3, r3
 8002564:	2b00      	cmp	r3, #0
 8002566:	d03a      	beq.n	80025de <HAL_I2C_Master_Transmit+0x1aa>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800256c:	2b00      	cmp	r3, #0
 800256e:	d136      	bne.n	80025de <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002570:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	9300      	str	r3, [sp, #0]
 8002578:	0013      	movs	r3, r2
 800257a:	2200      	movs	r2, #0
 800257c:	2180      	movs	r1, #128	@ 0x80
 800257e:	f000 f883 	bl	8002688 <I2C_WaitOnFlagUntilTimeout>
 8002582:	1e03      	subs	r3, r0, #0
 8002584:	d001      	beq.n	800258a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e053      	b.n	8002632 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800258e:	b29b      	uxth	r3, r3
 8002590:	2bff      	cmp	r3, #255	@ 0xff
 8002592:	d911      	bls.n	80025b8 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	22ff      	movs	r2, #255	@ 0xff
 8002598:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800259e:	b2da      	uxtb	r2, r3
 80025a0:	2380      	movs	r3, #128	@ 0x80
 80025a2:	045c      	lsls	r4, r3, #17
 80025a4:	230a      	movs	r3, #10
 80025a6:	18fb      	adds	r3, r7, r3
 80025a8:	8819      	ldrh	r1, [r3, #0]
 80025aa:	68f8      	ldr	r0, [r7, #12]
 80025ac:	2300      	movs	r3, #0
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	0023      	movs	r3, r4
 80025b2:	f000 fa39 	bl	8002a28 <I2C_TransferConfig>
 80025b6:	e012      	b.n	80025de <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025bc:	b29a      	uxth	r2, r3
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025c6:	b2da      	uxtb	r2, r3
 80025c8:	2380      	movs	r3, #128	@ 0x80
 80025ca:	049c      	lsls	r4, r3, #18
 80025cc:	230a      	movs	r3, #10
 80025ce:	18fb      	adds	r3, r7, r3
 80025d0:	8819      	ldrh	r1, [r3, #0]
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	2300      	movs	r3, #0
 80025d6:	9300      	str	r3, [sp, #0]
 80025d8:	0023      	movs	r3, r4
 80025da:	f000 fa25 	bl	8002a28 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d198      	bne.n	800251a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025e8:	697a      	ldr	r2, [r7, #20]
 80025ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	0018      	movs	r0, r3
 80025f0:	f000 f8de 	bl	80027b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80025f4:	1e03      	subs	r3, r0, #0
 80025f6:	d001      	beq.n	80025fc <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e01a      	b.n	8002632 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2220      	movs	r2, #32
 8002602:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	685a      	ldr	r2, [r3, #4]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	490c      	ldr	r1, [pc, #48]	@ (8002640 <HAL_I2C_Master_Transmit+0x20c>)
 8002610:	400a      	ands	r2, r1
 8002612:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2241      	movs	r2, #65	@ 0x41
 8002618:	2120      	movs	r1, #32
 800261a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2242      	movs	r2, #66	@ 0x42
 8002620:	2100      	movs	r1, #0
 8002622:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2240      	movs	r2, #64	@ 0x40
 8002628:	2100      	movs	r1, #0
 800262a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800262c:	2300      	movs	r3, #0
 800262e:	e000      	b.n	8002632 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8002630:	2302      	movs	r3, #2
  }
}
 8002632:	0018      	movs	r0, r3
 8002634:	46bd      	mov	sp, r7
 8002636:	b007      	add	sp, #28
 8002638:	bd90      	pop	{r4, r7, pc}
 800263a:	46c0      	nop			@ (mov r8, r8)
 800263c:	80002000 	.word	0x80002000
 8002640:	fe00e800 	.word	0xfe00e800

08002644 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	2202      	movs	r2, #2
 8002654:	4013      	ands	r3, r2
 8002656:	2b02      	cmp	r3, #2
 8002658:	d103      	bne.n	8002662 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2200      	movs	r2, #0
 8002660:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	2201      	movs	r2, #1
 800266a:	4013      	ands	r3, r2
 800266c:	2b01      	cmp	r3, #1
 800266e:	d007      	beq.n	8002680 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	699a      	ldr	r2, [r3, #24]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2101      	movs	r1, #1
 800267c:	430a      	orrs	r2, r1
 800267e:	619a      	str	r2, [r3, #24]
  }
}
 8002680:	46c0      	nop			@ (mov r8, r8)
 8002682:	46bd      	mov	sp, r7
 8002684:	b002      	add	sp, #8
 8002686:	bd80      	pop	{r7, pc}

08002688 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	603b      	str	r3, [r7, #0]
 8002694:	1dfb      	adds	r3, r7, #7
 8002696:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002698:	e030      	b.n	80026fc <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	3301      	adds	r3, #1
 800269e:	d02d      	beq.n	80026fc <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026a0:	f7ff fa3c 	bl	8001b1c <HAL_GetTick>
 80026a4:	0002      	movs	r2, r0
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d302      	bcc.n	80026b6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d122      	bne.n	80026fc <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	68ba      	ldr	r2, [r7, #8]
 80026be:	4013      	ands	r3, r2
 80026c0:	68ba      	ldr	r2, [r7, #8]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	425a      	negs	r2, r3
 80026c6:	4153      	adcs	r3, r2
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	001a      	movs	r2, r3
 80026cc:	1dfb      	adds	r3, r7, #7
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d113      	bne.n	80026fc <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026d8:	2220      	movs	r2, #32
 80026da:	431a      	orrs	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2241      	movs	r2, #65	@ 0x41
 80026e4:	2120      	movs	r1, #32
 80026e6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2242      	movs	r2, #66	@ 0x42
 80026ec:	2100      	movs	r1, #0
 80026ee:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2240      	movs	r2, #64	@ 0x40
 80026f4:	2100      	movs	r1, #0
 80026f6:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e00f      	b.n	800271c <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	68ba      	ldr	r2, [r7, #8]
 8002704:	4013      	ands	r3, r2
 8002706:	68ba      	ldr	r2, [r7, #8]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	425a      	negs	r2, r3
 800270c:	4153      	adcs	r3, r2
 800270e:	b2db      	uxtb	r3, r3
 8002710:	001a      	movs	r2, r3
 8002712:	1dfb      	adds	r3, r7, #7
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	429a      	cmp	r2, r3
 8002718:	d0bf      	beq.n	800269a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800271a:	2300      	movs	r3, #0
}
 800271c:	0018      	movs	r0, r3
 800271e:	46bd      	mov	sp, r7
 8002720:	b004      	add	sp, #16
 8002722:	bd80      	pop	{r7, pc}

08002724 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002730:	e032      	b.n	8002798 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	68b9      	ldr	r1, [r7, #8]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	0018      	movs	r0, r3
 800273a:	f000 f87d 	bl	8002838 <I2C_IsErrorOccurred>
 800273e:	1e03      	subs	r3, r0, #0
 8002740:	d001      	beq.n	8002746 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e030      	b.n	80027a8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	3301      	adds	r3, #1
 800274a:	d025      	beq.n	8002798 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800274c:	f7ff f9e6 	bl	8001b1c <HAL_GetTick>
 8002750:	0002      	movs	r2, r0
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	68ba      	ldr	r2, [r7, #8]
 8002758:	429a      	cmp	r2, r3
 800275a:	d302      	bcc.n	8002762 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d11a      	bne.n	8002798 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	2202      	movs	r2, #2
 800276a:	4013      	ands	r3, r2
 800276c:	2b02      	cmp	r3, #2
 800276e:	d013      	beq.n	8002798 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002774:	2220      	movs	r2, #32
 8002776:	431a      	orrs	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2241      	movs	r2, #65	@ 0x41
 8002780:	2120      	movs	r1, #32
 8002782:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2242      	movs	r2, #66	@ 0x42
 8002788:	2100      	movs	r1, #0
 800278a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2240      	movs	r2, #64	@ 0x40
 8002790:	2100      	movs	r1, #0
 8002792:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e007      	b.n	80027a8 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	2202      	movs	r2, #2
 80027a0:	4013      	ands	r3, r2
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d1c5      	bne.n	8002732 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	0018      	movs	r0, r3
 80027aa:	46bd      	mov	sp, r7
 80027ac:	b004      	add	sp, #16
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027bc:	e02f      	b.n	800281e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	68b9      	ldr	r1, [r7, #8]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	0018      	movs	r0, r3
 80027c6:	f000 f837 	bl	8002838 <I2C_IsErrorOccurred>
 80027ca:	1e03      	subs	r3, r0, #0
 80027cc:	d001      	beq.n	80027d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e02d      	b.n	800282e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027d2:	f7ff f9a3 	bl	8001b1c <HAL_GetTick>
 80027d6:	0002      	movs	r2, r0
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	68ba      	ldr	r2, [r7, #8]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d302      	bcc.n	80027e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d11a      	bne.n	800281e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	2220      	movs	r2, #32
 80027f0:	4013      	ands	r3, r2
 80027f2:	2b20      	cmp	r3, #32
 80027f4:	d013      	beq.n	800281e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027fa:	2220      	movs	r2, #32
 80027fc:	431a      	orrs	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2241      	movs	r2, #65	@ 0x41
 8002806:	2120      	movs	r1, #32
 8002808:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2242      	movs	r2, #66	@ 0x42
 800280e:	2100      	movs	r1, #0
 8002810:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2240      	movs	r2, #64	@ 0x40
 8002816:	2100      	movs	r1, #0
 8002818:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e007      	b.n	800282e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	2220      	movs	r2, #32
 8002826:	4013      	ands	r3, r2
 8002828:	2b20      	cmp	r3, #32
 800282a:	d1c8      	bne.n	80027be <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	0018      	movs	r0, r3
 8002830:	46bd      	mov	sp, r7
 8002832:	b004      	add	sp, #16
 8002834:	bd80      	pop	{r7, pc}
	...

08002838 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b08a      	sub	sp, #40	@ 0x28
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002844:	2327      	movs	r3, #39	@ 0x27
 8002846:	18fb      	adds	r3, r7, r3
 8002848:	2200      	movs	r2, #0
 800284a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002854:	2300      	movs	r3, #0
 8002856:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	2210      	movs	r2, #16
 8002860:	4013      	ands	r3, r2
 8002862:	d100      	bne.n	8002866 <I2C_IsErrorOccurred+0x2e>
 8002864:	e079      	b.n	800295a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2210      	movs	r2, #16
 800286c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800286e:	e057      	b.n	8002920 <I2C_IsErrorOccurred+0xe8>
 8002870:	2227      	movs	r2, #39	@ 0x27
 8002872:	18bb      	adds	r3, r7, r2
 8002874:	18ba      	adds	r2, r7, r2
 8002876:	7812      	ldrb	r2, [r2, #0]
 8002878:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	3301      	adds	r3, #1
 800287e:	d04f      	beq.n	8002920 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002880:	f7ff f94c 	bl	8001b1c <HAL_GetTick>
 8002884:	0002      	movs	r2, r0
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	68ba      	ldr	r2, [r7, #8]
 800288c:	429a      	cmp	r2, r3
 800288e:	d302      	bcc.n	8002896 <I2C_IsErrorOccurred+0x5e>
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d144      	bne.n	8002920 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	685a      	ldr	r2, [r3, #4]
 800289c:	2380      	movs	r3, #128	@ 0x80
 800289e:	01db      	lsls	r3, r3, #7
 80028a0:	4013      	ands	r3, r2
 80028a2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80028a4:	2013      	movs	r0, #19
 80028a6:	183b      	adds	r3, r7, r0
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	2142      	movs	r1, #66	@ 0x42
 80028ac:	5c52      	ldrb	r2, [r2, r1]
 80028ae:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	699a      	ldr	r2, [r3, #24]
 80028b6:	2380      	movs	r3, #128	@ 0x80
 80028b8:	021b      	lsls	r3, r3, #8
 80028ba:	401a      	ands	r2, r3
 80028bc:	2380      	movs	r3, #128	@ 0x80
 80028be:	021b      	lsls	r3, r3, #8
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d126      	bne.n	8002912 <I2C_IsErrorOccurred+0xda>
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	2380      	movs	r3, #128	@ 0x80
 80028c8:	01db      	lsls	r3, r3, #7
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d021      	beq.n	8002912 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80028ce:	183b      	adds	r3, r7, r0
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	2b20      	cmp	r3, #32
 80028d4:	d01d      	beq.n	8002912 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	685a      	ldr	r2, [r3, #4]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2180      	movs	r1, #128	@ 0x80
 80028e2:	01c9      	lsls	r1, r1, #7
 80028e4:	430a      	orrs	r2, r1
 80028e6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80028e8:	f7ff f918 	bl	8001b1c <HAL_GetTick>
 80028ec:	0003      	movs	r3, r0
 80028ee:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028f0:	e00f      	b.n	8002912 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80028f2:	f7ff f913 	bl	8001b1c <HAL_GetTick>
 80028f6:	0002      	movs	r2, r0
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b19      	cmp	r3, #25
 80028fe:	d908      	bls.n	8002912 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002900:	6a3b      	ldr	r3, [r7, #32]
 8002902:	2220      	movs	r2, #32
 8002904:	4313      	orrs	r3, r2
 8002906:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002908:	2327      	movs	r3, #39	@ 0x27
 800290a:	18fb      	adds	r3, r7, r3
 800290c:	2201      	movs	r2, #1
 800290e:	701a      	strb	r2, [r3, #0]

              break;
 8002910:	e006      	b.n	8002920 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	2220      	movs	r2, #32
 800291a:	4013      	ands	r3, r2
 800291c:	2b20      	cmp	r3, #32
 800291e:	d1e8      	bne.n	80028f2 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	2220      	movs	r2, #32
 8002928:	4013      	ands	r3, r2
 800292a:	2b20      	cmp	r3, #32
 800292c:	d004      	beq.n	8002938 <I2C_IsErrorOccurred+0x100>
 800292e:	2327      	movs	r3, #39	@ 0x27
 8002930:	18fb      	adds	r3, r7, r3
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d09b      	beq.n	8002870 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002938:	2327      	movs	r3, #39	@ 0x27
 800293a:	18fb      	adds	r3, r7, r3
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d103      	bne.n	800294a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2220      	movs	r2, #32
 8002948:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800294a:	6a3b      	ldr	r3, [r7, #32]
 800294c:	2204      	movs	r2, #4
 800294e:	4313      	orrs	r3, r2
 8002950:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002952:	2327      	movs	r3, #39	@ 0x27
 8002954:	18fb      	adds	r3, r7, r3
 8002956:	2201      	movs	r2, #1
 8002958:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	2380      	movs	r3, #128	@ 0x80
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	4013      	ands	r3, r2
 800296a:	d00c      	beq.n	8002986 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800296c:	6a3b      	ldr	r3, [r7, #32]
 800296e:	2201      	movs	r2, #1
 8002970:	4313      	orrs	r3, r2
 8002972:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2280      	movs	r2, #128	@ 0x80
 800297a:	0052      	lsls	r2, r2, #1
 800297c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800297e:	2327      	movs	r3, #39	@ 0x27
 8002980:	18fb      	adds	r3, r7, r3
 8002982:	2201      	movs	r2, #1
 8002984:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	2380      	movs	r3, #128	@ 0x80
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	4013      	ands	r3, r2
 800298e:	d00c      	beq.n	80029aa <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002990:	6a3b      	ldr	r3, [r7, #32]
 8002992:	2208      	movs	r2, #8
 8002994:	4313      	orrs	r3, r2
 8002996:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2280      	movs	r2, #128	@ 0x80
 800299e:	00d2      	lsls	r2, r2, #3
 80029a0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029a2:	2327      	movs	r3, #39	@ 0x27
 80029a4:	18fb      	adds	r3, r7, r3
 80029a6:	2201      	movs	r2, #1
 80029a8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	2380      	movs	r3, #128	@ 0x80
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	4013      	ands	r3, r2
 80029b2:	d00c      	beq.n	80029ce <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80029b4:	6a3b      	ldr	r3, [r7, #32]
 80029b6:	2202      	movs	r2, #2
 80029b8:	4313      	orrs	r3, r2
 80029ba:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2280      	movs	r2, #128	@ 0x80
 80029c2:	0092      	lsls	r2, r2, #2
 80029c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029c6:	2327      	movs	r3, #39	@ 0x27
 80029c8:	18fb      	adds	r3, r7, r3
 80029ca:	2201      	movs	r2, #1
 80029cc:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80029ce:	2327      	movs	r3, #39	@ 0x27
 80029d0:	18fb      	adds	r3, r7, r3
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d01d      	beq.n	8002a14 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	0018      	movs	r0, r3
 80029dc:	f7ff fe32 	bl	8002644 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	685a      	ldr	r2, [r3, #4]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	490e      	ldr	r1, [pc, #56]	@ (8002a24 <I2C_IsErrorOccurred+0x1ec>)
 80029ec:	400a      	ands	r2, r1
 80029ee:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80029f4:	6a3b      	ldr	r3, [r7, #32]
 80029f6:	431a      	orrs	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2241      	movs	r2, #65	@ 0x41
 8002a00:	2120      	movs	r1, #32
 8002a02:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2242      	movs	r2, #66	@ 0x42
 8002a08:	2100      	movs	r1, #0
 8002a0a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2240      	movs	r2, #64	@ 0x40
 8002a10:	2100      	movs	r1, #0
 8002a12:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002a14:	2327      	movs	r3, #39	@ 0x27
 8002a16:	18fb      	adds	r3, r7, r3
 8002a18:	781b      	ldrb	r3, [r3, #0]
}
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	b00a      	add	sp, #40	@ 0x28
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	46c0      	nop			@ (mov r8, r8)
 8002a24:	fe00e800 	.word	0xfe00e800

08002a28 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002a28:	b590      	push	{r4, r7, lr}
 8002a2a:	b087      	sub	sp, #28
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	0008      	movs	r0, r1
 8002a32:	0011      	movs	r1, r2
 8002a34:	607b      	str	r3, [r7, #4]
 8002a36:	240a      	movs	r4, #10
 8002a38:	193b      	adds	r3, r7, r4
 8002a3a:	1c02      	adds	r2, r0, #0
 8002a3c:	801a      	strh	r2, [r3, #0]
 8002a3e:	2009      	movs	r0, #9
 8002a40:	183b      	adds	r3, r7, r0
 8002a42:	1c0a      	adds	r2, r1, #0
 8002a44:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a46:	193b      	adds	r3, r7, r4
 8002a48:	881b      	ldrh	r3, [r3, #0]
 8002a4a:	059b      	lsls	r3, r3, #22
 8002a4c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a4e:	183b      	adds	r3, r7, r0
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	0419      	lsls	r1, r3, #16
 8002a54:	23ff      	movs	r3, #255	@ 0xff
 8002a56:	041b      	lsls	r3, r3, #16
 8002a58:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a5a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a62:	4313      	orrs	r3, r2
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	085b      	lsrs	r3, r3, #1
 8002a68:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a72:	0d51      	lsrs	r1, r2, #21
 8002a74:	2280      	movs	r2, #128	@ 0x80
 8002a76:	00d2      	lsls	r2, r2, #3
 8002a78:	400a      	ands	r2, r1
 8002a7a:	4907      	ldr	r1, [pc, #28]	@ (8002a98 <I2C_TransferConfig+0x70>)
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	43d2      	mvns	r2, r2
 8002a80:	401a      	ands	r2, r3
 8002a82:	0011      	movs	r1, r2
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	697a      	ldr	r2, [r7, #20]
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002a8e:	46c0      	nop			@ (mov r8, r8)
 8002a90:	46bd      	mov	sp, r7
 8002a92:	b007      	add	sp, #28
 8002a94:	bd90      	pop	{r4, r7, pc}
 8002a96:	46c0      	nop			@ (mov r8, r8)
 8002a98:	03ff63ff 	.word	0x03ff63ff

08002a9c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2241      	movs	r2, #65	@ 0x41
 8002aaa:	5c9b      	ldrb	r3, [r3, r2]
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b20      	cmp	r3, #32
 8002ab0:	d138      	bne.n	8002b24 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2240      	movs	r2, #64	@ 0x40
 8002ab6:	5c9b      	ldrb	r3, [r3, r2]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d101      	bne.n	8002ac0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002abc:	2302      	movs	r3, #2
 8002abe:	e032      	b.n	8002b26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2240      	movs	r2, #64	@ 0x40
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2241      	movs	r2, #65	@ 0x41
 8002acc:	2124      	movs	r1, #36	@ 0x24
 8002ace:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2101      	movs	r1, #1
 8002adc:	438a      	bics	r2, r1
 8002ade:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4911      	ldr	r1, [pc, #68]	@ (8002b30 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002aec:	400a      	ands	r2, r1
 8002aee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6819      	ldr	r1, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	683a      	ldr	r2, [r7, #0]
 8002afc:	430a      	orrs	r2, r1
 8002afe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2101      	movs	r1, #1
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2241      	movs	r2, #65	@ 0x41
 8002b14:	2120      	movs	r1, #32
 8002b16:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2240      	movs	r2, #64	@ 0x40
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002b20:	2300      	movs	r3, #0
 8002b22:	e000      	b.n	8002b26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b24:	2302      	movs	r3, #2
  }
}
 8002b26:	0018      	movs	r0, r3
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	b002      	add	sp, #8
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	46c0      	nop			@ (mov r8, r8)
 8002b30:	ffffefff 	.word	0xffffefff

08002b34 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2241      	movs	r2, #65	@ 0x41
 8002b42:	5c9b      	ldrb	r3, [r3, r2]
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b20      	cmp	r3, #32
 8002b48:	d139      	bne.n	8002bbe <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2240      	movs	r2, #64	@ 0x40
 8002b4e:	5c9b      	ldrb	r3, [r3, r2]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d101      	bne.n	8002b58 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b54:	2302      	movs	r3, #2
 8002b56:	e033      	b.n	8002bc0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2240      	movs	r2, #64	@ 0x40
 8002b5c:	2101      	movs	r1, #1
 8002b5e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2241      	movs	r2, #65	@ 0x41
 8002b64:	2124      	movs	r1, #36	@ 0x24
 8002b66:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2101      	movs	r1, #1
 8002b74:	438a      	bics	r2, r1
 8002b76:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	4a11      	ldr	r2, [pc, #68]	@ (8002bc8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002b84:	4013      	ands	r3, r2
 8002b86:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	021b      	lsls	r3, r3, #8
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2101      	movs	r1, #1
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2241      	movs	r2, #65	@ 0x41
 8002bae:	2120      	movs	r1, #32
 8002bb0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2240      	movs	r2, #64	@ 0x40
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	e000      	b.n	8002bc0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002bbe:	2302      	movs	r3, #2
  }
}
 8002bc0:	0018      	movs	r0, r3
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	b004      	add	sp, #16
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	fffff0ff 	.word	0xfffff0ff

08002bcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bcc:	b5b0      	push	{r4, r5, r7, lr}
 8002bce:	b08a      	sub	sp, #40	@ 0x28
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d102      	bne.n	8002be0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	f000 fbaf 	bl	800333e <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002be0:	4bcf      	ldr	r3, [pc, #828]	@ (8002f20 <HAL_RCC_OscConfig+0x354>)
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	220c      	movs	r2, #12
 8002be6:	4013      	ands	r3, r2
 8002be8:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bea:	4bcd      	ldr	r3, [pc, #820]	@ (8002f20 <HAL_RCC_OscConfig+0x354>)
 8002bec:	68da      	ldr	r2, [r3, #12]
 8002bee:	2380      	movs	r3, #128	@ 0x80
 8002bf0:	025b      	lsls	r3, r3, #9
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	d100      	bne.n	8002c02 <HAL_RCC_OscConfig+0x36>
 8002c00:	e07e      	b.n	8002d00 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c02:	6a3b      	ldr	r3, [r7, #32]
 8002c04:	2b08      	cmp	r3, #8
 8002c06:	d007      	beq.n	8002c18 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c08:	6a3b      	ldr	r3, [r7, #32]
 8002c0a:	2b0c      	cmp	r3, #12
 8002c0c:	d112      	bne.n	8002c34 <HAL_RCC_OscConfig+0x68>
 8002c0e:	69fa      	ldr	r2, [r7, #28]
 8002c10:	2380      	movs	r3, #128	@ 0x80
 8002c12:	025b      	lsls	r3, r3, #9
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d10d      	bne.n	8002c34 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c18:	4bc1      	ldr	r3, [pc, #772]	@ (8002f20 <HAL_RCC_OscConfig+0x354>)
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	2380      	movs	r3, #128	@ 0x80
 8002c1e:	029b      	lsls	r3, r3, #10
 8002c20:	4013      	ands	r3, r2
 8002c22:	d100      	bne.n	8002c26 <HAL_RCC_OscConfig+0x5a>
 8002c24:	e06b      	b.n	8002cfe <HAL_RCC_OscConfig+0x132>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d167      	bne.n	8002cfe <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	f000 fb85 	bl	800333e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	2380      	movs	r3, #128	@ 0x80
 8002c3a:	025b      	lsls	r3, r3, #9
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d107      	bne.n	8002c50 <HAL_RCC_OscConfig+0x84>
 8002c40:	4bb7      	ldr	r3, [pc, #732]	@ (8002f20 <HAL_RCC_OscConfig+0x354>)
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	4bb6      	ldr	r3, [pc, #728]	@ (8002f20 <HAL_RCC_OscConfig+0x354>)
 8002c46:	2180      	movs	r1, #128	@ 0x80
 8002c48:	0249      	lsls	r1, r1, #9
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	601a      	str	r2, [r3, #0]
 8002c4e:	e027      	b.n	8002ca0 <HAL_RCC_OscConfig+0xd4>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685a      	ldr	r2, [r3, #4]
 8002c54:	23a0      	movs	r3, #160	@ 0xa0
 8002c56:	02db      	lsls	r3, r3, #11
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d10e      	bne.n	8002c7a <HAL_RCC_OscConfig+0xae>
 8002c5c:	4bb0      	ldr	r3, [pc, #704]	@ (8002f20 <HAL_RCC_OscConfig+0x354>)
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	4baf      	ldr	r3, [pc, #700]	@ (8002f20 <HAL_RCC_OscConfig+0x354>)
 8002c62:	2180      	movs	r1, #128	@ 0x80
 8002c64:	02c9      	lsls	r1, r1, #11
 8002c66:	430a      	orrs	r2, r1
 8002c68:	601a      	str	r2, [r3, #0]
 8002c6a:	4bad      	ldr	r3, [pc, #692]	@ (8002f20 <HAL_RCC_OscConfig+0x354>)
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	4bac      	ldr	r3, [pc, #688]	@ (8002f20 <HAL_RCC_OscConfig+0x354>)
 8002c70:	2180      	movs	r1, #128	@ 0x80
 8002c72:	0249      	lsls	r1, r1, #9
 8002c74:	430a      	orrs	r2, r1
 8002c76:	601a      	str	r2, [r3, #0]
 8002c78:	e012      	b.n	8002ca0 <HAL_RCC_OscConfig+0xd4>
 8002c7a:	4ba9      	ldr	r3, [pc, #676]	@ (8002f20 <HAL_RCC_OscConfig+0x354>)
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	4ba8      	ldr	r3, [pc, #672]	@ (8002f20 <HAL_RCC_OscConfig+0x354>)
 8002c80:	49a8      	ldr	r1, [pc, #672]	@ (8002f24 <HAL_RCC_OscConfig+0x358>)
 8002c82:	400a      	ands	r2, r1
 8002c84:	601a      	str	r2, [r3, #0]
 8002c86:	4ba6      	ldr	r3, [pc, #664]	@ (8002f20 <HAL_RCC_OscConfig+0x354>)
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	2380      	movs	r3, #128	@ 0x80
 8002c8c:	025b      	lsls	r3, r3, #9
 8002c8e:	4013      	ands	r3, r2
 8002c90:	60fb      	str	r3, [r7, #12]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	4ba2      	ldr	r3, [pc, #648]	@ (8002f20 <HAL_RCC_OscConfig+0x354>)
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	4ba1      	ldr	r3, [pc, #644]	@ (8002f20 <HAL_RCC_OscConfig+0x354>)
 8002c9a:	49a3      	ldr	r1, [pc, #652]	@ (8002f28 <HAL_RCC_OscConfig+0x35c>)
 8002c9c:	400a      	ands	r2, r1
 8002c9e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d015      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca8:	f7fe ff38 	bl	8001b1c <HAL_GetTick>
 8002cac:	0003      	movs	r3, r0
 8002cae:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cb0:	e009      	b.n	8002cc6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cb2:	f7fe ff33 	bl	8001b1c <HAL_GetTick>
 8002cb6:	0002      	movs	r2, r0
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	2b64      	cmp	r3, #100	@ 0x64
 8002cbe:	d902      	bls.n	8002cc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	f000 fb3c 	bl	800333e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cc6:	4b96      	ldr	r3, [pc, #600]	@ (8002f20 <HAL_RCC_OscConfig+0x354>)
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	2380      	movs	r3, #128	@ 0x80
 8002ccc:	029b      	lsls	r3, r3, #10
 8002cce:	4013      	ands	r3, r2
 8002cd0:	d0ef      	beq.n	8002cb2 <HAL_RCC_OscConfig+0xe6>
 8002cd2:	e015      	b.n	8002d00 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd4:	f7fe ff22 	bl	8001b1c <HAL_GetTick>
 8002cd8:	0003      	movs	r3, r0
 8002cda:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002cdc:	e008      	b.n	8002cf0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cde:	f7fe ff1d 	bl	8001b1c <HAL_GetTick>
 8002ce2:	0002      	movs	r2, r0
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b64      	cmp	r3, #100	@ 0x64
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e326      	b.n	800333e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002cf0:	4b8b      	ldr	r3, [pc, #556]	@ (8002f20 <HAL_RCC_OscConfig+0x354>)
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	2380      	movs	r3, #128	@ 0x80
 8002cf6:	029b      	lsls	r3, r3, #10
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	d1f0      	bne.n	8002cde <HAL_RCC_OscConfig+0x112>
 8002cfc:	e000      	b.n	8002d00 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cfe:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2202      	movs	r2, #2
 8002d06:	4013      	ands	r3, r2
 8002d08:	d100      	bne.n	8002d0c <HAL_RCC_OscConfig+0x140>
 8002d0a:	e08b      	b.n	8002e24 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d12:	6a3b      	ldr	r3, [r7, #32]
 8002d14:	2b04      	cmp	r3, #4
 8002d16:	d005      	beq.n	8002d24 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d18:	6a3b      	ldr	r3, [r7, #32]
 8002d1a:	2b0c      	cmp	r3, #12
 8002d1c:	d13e      	bne.n	8002d9c <HAL_RCC_OscConfig+0x1d0>
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d13b      	bne.n	8002d9c <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002d24:	4b7e      	ldr	r3, [pc, #504]	@ (8002f20 <HAL_RCC_OscConfig+0x354>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2204      	movs	r2, #4
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	d004      	beq.n	8002d38 <HAL_RCC_OscConfig+0x16c>
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d101      	bne.n	8002d38 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e302      	b.n	800333e <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d38:	4b79      	ldr	r3, [pc, #484]	@ (8002f20 <HAL_RCC_OscConfig+0x354>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	4a7b      	ldr	r2, [pc, #492]	@ (8002f2c <HAL_RCC_OscConfig+0x360>)
 8002d3e:	4013      	ands	r3, r2
 8002d40:	0019      	movs	r1, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	021a      	lsls	r2, r3, #8
 8002d48:	4b75      	ldr	r3, [pc, #468]	@ (8002f20 <HAL_RCC_OscConfig+0x354>)
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002d4e:	4b74      	ldr	r3, [pc, #464]	@ (8002f20 <HAL_RCC_OscConfig+0x354>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2209      	movs	r2, #9
 8002d54:	4393      	bics	r3, r2
 8002d56:	0019      	movs	r1, r3
 8002d58:	4b71      	ldr	r3, [pc, #452]	@ (8002f20 <HAL_RCC_OscConfig+0x354>)
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d60:	f000 fc40 	bl	80035e4 <HAL_RCC_GetSysClockFreq>
 8002d64:	0001      	movs	r1, r0
 8002d66:	4b6e      	ldr	r3, [pc, #440]	@ (8002f20 <HAL_RCC_OscConfig+0x354>)
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	091b      	lsrs	r3, r3, #4
 8002d6c:	220f      	movs	r2, #15
 8002d6e:	4013      	ands	r3, r2
 8002d70:	4a6f      	ldr	r2, [pc, #444]	@ (8002f30 <HAL_RCC_OscConfig+0x364>)
 8002d72:	5cd3      	ldrb	r3, [r2, r3]
 8002d74:	000a      	movs	r2, r1
 8002d76:	40da      	lsrs	r2, r3
 8002d78:	4b6e      	ldr	r3, [pc, #440]	@ (8002f34 <HAL_RCC_OscConfig+0x368>)
 8002d7a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002d7c:	4b6e      	ldr	r3, [pc, #440]	@ (8002f38 <HAL_RCC_OscConfig+0x36c>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2513      	movs	r5, #19
 8002d82:	197c      	adds	r4, r7, r5
 8002d84:	0018      	movs	r0, r3
 8002d86:	f7fe fe83 	bl	8001a90 <HAL_InitTick>
 8002d8a:	0003      	movs	r3, r0
 8002d8c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002d8e:	197b      	adds	r3, r7, r5
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d046      	beq.n	8002e24 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8002d96:	197b      	adds	r3, r7, r5
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	e2d0      	b.n	800333e <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d027      	beq.n	8002df2 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002da2:	4b5f      	ldr	r3, [pc, #380]	@ (8002f20 <HAL_RCC_OscConfig+0x354>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2209      	movs	r2, #9
 8002da8:	4393      	bics	r3, r2
 8002daa:	0019      	movs	r1, r3
 8002dac:	4b5c      	ldr	r3, [pc, #368]	@ (8002f20 <HAL_RCC_OscConfig+0x354>)
 8002dae:	697a      	ldr	r2, [r7, #20]
 8002db0:	430a      	orrs	r2, r1
 8002db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db4:	f7fe feb2 	bl	8001b1c <HAL_GetTick>
 8002db8:	0003      	movs	r3, r0
 8002dba:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dbc:	e008      	b.n	8002dd0 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dbe:	f7fe fead 	bl	8001b1c <HAL_GetTick>
 8002dc2:	0002      	movs	r2, r0
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e2b6      	b.n	800333e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dd0:	4b53      	ldr	r3, [pc, #332]	@ (8002f20 <HAL_RCC_OscConfig+0x354>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2204      	movs	r2, #4
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	d0f1      	beq.n	8002dbe <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dda:	4b51      	ldr	r3, [pc, #324]	@ (8002f20 <HAL_RCC_OscConfig+0x354>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	4a53      	ldr	r2, [pc, #332]	@ (8002f2c <HAL_RCC_OscConfig+0x360>)
 8002de0:	4013      	ands	r3, r2
 8002de2:	0019      	movs	r1, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	691b      	ldr	r3, [r3, #16]
 8002de8:	021a      	lsls	r2, r3, #8
 8002dea:	4b4d      	ldr	r3, [pc, #308]	@ (8002f20 <HAL_RCC_OscConfig+0x354>)
 8002dec:	430a      	orrs	r2, r1
 8002dee:	605a      	str	r2, [r3, #4]
 8002df0:	e018      	b.n	8002e24 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002df2:	4b4b      	ldr	r3, [pc, #300]	@ (8002f20 <HAL_RCC_OscConfig+0x354>)
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	4b4a      	ldr	r3, [pc, #296]	@ (8002f20 <HAL_RCC_OscConfig+0x354>)
 8002df8:	2101      	movs	r1, #1
 8002dfa:	438a      	bics	r2, r1
 8002dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dfe:	f7fe fe8d 	bl	8001b1c <HAL_GetTick>
 8002e02:	0003      	movs	r3, r0
 8002e04:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e06:	e008      	b.n	8002e1a <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e08:	f7fe fe88 	bl	8001b1c <HAL_GetTick>
 8002e0c:	0002      	movs	r2, r0
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e291      	b.n	800333e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e1a:	4b41      	ldr	r3, [pc, #260]	@ (8002f20 <HAL_RCC_OscConfig+0x354>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2204      	movs	r2, #4
 8002e20:	4013      	ands	r3, r2
 8002e22:	d1f1      	bne.n	8002e08 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2210      	movs	r2, #16
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	d100      	bne.n	8002e30 <HAL_RCC_OscConfig+0x264>
 8002e2e:	e0a1      	b.n	8002f74 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e30:	6a3b      	ldr	r3, [r7, #32]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d140      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e36:	4b3a      	ldr	r3, [pc, #232]	@ (8002f20 <HAL_RCC_OscConfig+0x354>)
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	2380      	movs	r3, #128	@ 0x80
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4013      	ands	r3, r2
 8002e40:	d005      	beq.n	8002e4e <HAL_RCC_OscConfig+0x282>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	69db      	ldr	r3, [r3, #28]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e277      	b.n	800333e <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e4e:	4b34      	ldr	r3, [pc, #208]	@ (8002f20 <HAL_RCC_OscConfig+0x354>)
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	4a3a      	ldr	r2, [pc, #232]	@ (8002f3c <HAL_RCC_OscConfig+0x370>)
 8002e54:	4013      	ands	r3, r2
 8002e56:	0019      	movs	r1, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e5c:	4b30      	ldr	r3, [pc, #192]	@ (8002f20 <HAL_RCC_OscConfig+0x354>)
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e62:	4b2f      	ldr	r3, [pc, #188]	@ (8002f20 <HAL_RCC_OscConfig+0x354>)
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	021b      	lsls	r3, r3, #8
 8002e68:	0a19      	lsrs	r1, r3, #8
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	061a      	lsls	r2, r3, #24
 8002e70:	4b2b      	ldr	r3, [pc, #172]	@ (8002f20 <HAL_RCC_OscConfig+0x354>)
 8002e72:	430a      	orrs	r2, r1
 8002e74:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e7a:	0b5b      	lsrs	r3, r3, #13
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	2280      	movs	r2, #128	@ 0x80
 8002e80:	0212      	lsls	r2, r2, #8
 8002e82:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002e84:	4b26      	ldr	r3, [pc, #152]	@ (8002f20 <HAL_RCC_OscConfig+0x354>)
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	091b      	lsrs	r3, r3, #4
 8002e8a:	210f      	movs	r1, #15
 8002e8c:	400b      	ands	r3, r1
 8002e8e:	4928      	ldr	r1, [pc, #160]	@ (8002f30 <HAL_RCC_OscConfig+0x364>)
 8002e90:	5ccb      	ldrb	r3, [r1, r3]
 8002e92:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002e94:	4b27      	ldr	r3, [pc, #156]	@ (8002f34 <HAL_RCC_OscConfig+0x368>)
 8002e96:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002e98:	4b27      	ldr	r3, [pc, #156]	@ (8002f38 <HAL_RCC_OscConfig+0x36c>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2513      	movs	r5, #19
 8002e9e:	197c      	adds	r4, r7, r5
 8002ea0:	0018      	movs	r0, r3
 8002ea2:	f7fe fdf5 	bl	8001a90 <HAL_InitTick>
 8002ea6:	0003      	movs	r3, r0
 8002ea8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002eaa:	197b      	adds	r3, r7, r5
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d060      	beq.n	8002f74 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8002eb2:	197b      	adds	r3, r7, r5
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	e242      	b.n	800333e <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	69db      	ldr	r3, [r3, #28]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d03f      	beq.n	8002f40 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ec0:	4b17      	ldr	r3, [pc, #92]	@ (8002f20 <HAL_RCC_OscConfig+0x354>)
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	4b16      	ldr	r3, [pc, #88]	@ (8002f20 <HAL_RCC_OscConfig+0x354>)
 8002ec6:	2180      	movs	r1, #128	@ 0x80
 8002ec8:	0049      	lsls	r1, r1, #1
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ece:	f7fe fe25 	bl	8001b1c <HAL_GetTick>
 8002ed2:	0003      	movs	r3, r0
 8002ed4:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002ed6:	e008      	b.n	8002eea <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ed8:	f7fe fe20 	bl	8001b1c <HAL_GetTick>
 8002edc:	0002      	movs	r2, r0
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e229      	b.n	800333e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002eea:	4b0d      	ldr	r3, [pc, #52]	@ (8002f20 <HAL_RCC_OscConfig+0x354>)
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	2380      	movs	r3, #128	@ 0x80
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	d0f0      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ef6:	4b0a      	ldr	r3, [pc, #40]	@ (8002f20 <HAL_RCC_OscConfig+0x354>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	4a10      	ldr	r2, [pc, #64]	@ (8002f3c <HAL_RCC_OscConfig+0x370>)
 8002efc:	4013      	ands	r3, r2
 8002efe:	0019      	movs	r1, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f04:	4b06      	ldr	r3, [pc, #24]	@ (8002f20 <HAL_RCC_OscConfig+0x354>)
 8002f06:	430a      	orrs	r2, r1
 8002f08:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f0a:	4b05      	ldr	r3, [pc, #20]	@ (8002f20 <HAL_RCC_OscConfig+0x354>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	021b      	lsls	r3, r3, #8
 8002f10:	0a19      	lsrs	r1, r3, #8
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	061a      	lsls	r2, r3, #24
 8002f18:	4b01      	ldr	r3, [pc, #4]	@ (8002f20 <HAL_RCC_OscConfig+0x354>)
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	605a      	str	r2, [r3, #4]
 8002f1e:	e029      	b.n	8002f74 <HAL_RCC_OscConfig+0x3a8>
 8002f20:	40021000 	.word	0x40021000
 8002f24:	fffeffff 	.word	0xfffeffff
 8002f28:	fffbffff 	.word	0xfffbffff
 8002f2c:	ffffe0ff 	.word	0xffffe0ff
 8002f30:	08005fb8 	.word	0x08005fb8
 8002f34:	20000008 	.word	0x20000008
 8002f38:	2000000c 	.word	0x2000000c
 8002f3c:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f40:	4bbd      	ldr	r3, [pc, #756]	@ (8003238 <HAL_RCC_OscConfig+0x66c>)
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	4bbc      	ldr	r3, [pc, #752]	@ (8003238 <HAL_RCC_OscConfig+0x66c>)
 8002f46:	49bd      	ldr	r1, [pc, #756]	@ (800323c <HAL_RCC_OscConfig+0x670>)
 8002f48:	400a      	ands	r2, r1
 8002f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f4c:	f7fe fde6 	bl	8001b1c <HAL_GetTick>
 8002f50:	0003      	movs	r3, r0
 8002f52:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002f54:	e008      	b.n	8002f68 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f56:	f7fe fde1 	bl	8001b1c <HAL_GetTick>
 8002f5a:	0002      	movs	r2, r0
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e1ea      	b.n	800333e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002f68:	4bb3      	ldr	r3, [pc, #716]	@ (8003238 <HAL_RCC_OscConfig+0x66c>)
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	2380      	movs	r3, #128	@ 0x80
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	4013      	ands	r3, r2
 8002f72:	d1f0      	bne.n	8002f56 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2208      	movs	r2, #8
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	d036      	beq.n	8002fec <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d019      	beq.n	8002fba <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f86:	4bac      	ldr	r3, [pc, #688]	@ (8003238 <HAL_RCC_OscConfig+0x66c>)
 8002f88:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002f8a:	4bab      	ldr	r3, [pc, #684]	@ (8003238 <HAL_RCC_OscConfig+0x66c>)
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f92:	f7fe fdc3 	bl	8001b1c <HAL_GetTick>
 8002f96:	0003      	movs	r3, r0
 8002f98:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f9a:	e008      	b.n	8002fae <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f9c:	f7fe fdbe 	bl	8001b1c <HAL_GetTick>
 8002fa0:	0002      	movs	r2, r0
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e1c7      	b.n	800333e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002fae:	4ba2      	ldr	r3, [pc, #648]	@ (8003238 <HAL_RCC_OscConfig+0x66c>)
 8002fb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fb2:	2202      	movs	r2, #2
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	d0f1      	beq.n	8002f9c <HAL_RCC_OscConfig+0x3d0>
 8002fb8:	e018      	b.n	8002fec <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fba:	4b9f      	ldr	r3, [pc, #636]	@ (8003238 <HAL_RCC_OscConfig+0x66c>)
 8002fbc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002fbe:	4b9e      	ldr	r3, [pc, #632]	@ (8003238 <HAL_RCC_OscConfig+0x66c>)
 8002fc0:	2101      	movs	r1, #1
 8002fc2:	438a      	bics	r2, r1
 8002fc4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fc6:	f7fe fda9 	bl	8001b1c <HAL_GetTick>
 8002fca:	0003      	movs	r3, r0
 8002fcc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fd0:	f7fe fda4 	bl	8001b1c <HAL_GetTick>
 8002fd4:	0002      	movs	r2, r0
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e1ad      	b.n	800333e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002fe2:	4b95      	ldr	r3, [pc, #596]	@ (8003238 <HAL_RCC_OscConfig+0x66c>)
 8002fe4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fe6:	2202      	movs	r2, #2
 8002fe8:	4013      	ands	r3, r2
 8002fea:	d1f1      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2204      	movs	r2, #4
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	d100      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x42c>
 8002ff6:	e0ae      	b.n	8003156 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ff8:	2027      	movs	r0, #39	@ 0x27
 8002ffa:	183b      	adds	r3, r7, r0
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003000:	4b8d      	ldr	r3, [pc, #564]	@ (8003238 <HAL_RCC_OscConfig+0x66c>)
 8003002:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003004:	2380      	movs	r3, #128	@ 0x80
 8003006:	055b      	lsls	r3, r3, #21
 8003008:	4013      	ands	r3, r2
 800300a:	d109      	bne.n	8003020 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800300c:	4b8a      	ldr	r3, [pc, #552]	@ (8003238 <HAL_RCC_OscConfig+0x66c>)
 800300e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003010:	4b89      	ldr	r3, [pc, #548]	@ (8003238 <HAL_RCC_OscConfig+0x66c>)
 8003012:	2180      	movs	r1, #128	@ 0x80
 8003014:	0549      	lsls	r1, r1, #21
 8003016:	430a      	orrs	r2, r1
 8003018:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800301a:	183b      	adds	r3, r7, r0
 800301c:	2201      	movs	r2, #1
 800301e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003020:	4b87      	ldr	r3, [pc, #540]	@ (8003240 <HAL_RCC_OscConfig+0x674>)
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	2380      	movs	r3, #128	@ 0x80
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	4013      	ands	r3, r2
 800302a:	d11a      	bne.n	8003062 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800302c:	4b84      	ldr	r3, [pc, #528]	@ (8003240 <HAL_RCC_OscConfig+0x674>)
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	4b83      	ldr	r3, [pc, #524]	@ (8003240 <HAL_RCC_OscConfig+0x674>)
 8003032:	2180      	movs	r1, #128	@ 0x80
 8003034:	0049      	lsls	r1, r1, #1
 8003036:	430a      	orrs	r2, r1
 8003038:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800303a:	f7fe fd6f 	bl	8001b1c <HAL_GetTick>
 800303e:	0003      	movs	r3, r0
 8003040:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003044:	f7fe fd6a 	bl	8001b1c <HAL_GetTick>
 8003048:	0002      	movs	r2, r0
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b64      	cmp	r3, #100	@ 0x64
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e173      	b.n	800333e <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003056:	4b7a      	ldr	r3, [pc, #488]	@ (8003240 <HAL_RCC_OscConfig+0x674>)
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	2380      	movs	r3, #128	@ 0x80
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	4013      	ands	r3, r2
 8003060:	d0f0      	beq.n	8003044 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	689a      	ldr	r2, [r3, #8]
 8003066:	2380      	movs	r3, #128	@ 0x80
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	429a      	cmp	r2, r3
 800306c:	d107      	bne.n	800307e <HAL_RCC_OscConfig+0x4b2>
 800306e:	4b72      	ldr	r3, [pc, #456]	@ (8003238 <HAL_RCC_OscConfig+0x66c>)
 8003070:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003072:	4b71      	ldr	r3, [pc, #452]	@ (8003238 <HAL_RCC_OscConfig+0x66c>)
 8003074:	2180      	movs	r1, #128	@ 0x80
 8003076:	0049      	lsls	r1, r1, #1
 8003078:	430a      	orrs	r2, r1
 800307a:	651a      	str	r2, [r3, #80]	@ 0x50
 800307c:	e031      	b.n	80030e2 <HAL_RCC_OscConfig+0x516>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d10c      	bne.n	80030a0 <HAL_RCC_OscConfig+0x4d4>
 8003086:	4b6c      	ldr	r3, [pc, #432]	@ (8003238 <HAL_RCC_OscConfig+0x66c>)
 8003088:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800308a:	4b6b      	ldr	r3, [pc, #428]	@ (8003238 <HAL_RCC_OscConfig+0x66c>)
 800308c:	496b      	ldr	r1, [pc, #428]	@ (800323c <HAL_RCC_OscConfig+0x670>)
 800308e:	400a      	ands	r2, r1
 8003090:	651a      	str	r2, [r3, #80]	@ 0x50
 8003092:	4b69      	ldr	r3, [pc, #420]	@ (8003238 <HAL_RCC_OscConfig+0x66c>)
 8003094:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003096:	4b68      	ldr	r3, [pc, #416]	@ (8003238 <HAL_RCC_OscConfig+0x66c>)
 8003098:	496a      	ldr	r1, [pc, #424]	@ (8003244 <HAL_RCC_OscConfig+0x678>)
 800309a:	400a      	ands	r2, r1
 800309c:	651a      	str	r2, [r3, #80]	@ 0x50
 800309e:	e020      	b.n	80030e2 <HAL_RCC_OscConfig+0x516>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	689a      	ldr	r2, [r3, #8]
 80030a4:	23a0      	movs	r3, #160	@ 0xa0
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d10e      	bne.n	80030ca <HAL_RCC_OscConfig+0x4fe>
 80030ac:	4b62      	ldr	r3, [pc, #392]	@ (8003238 <HAL_RCC_OscConfig+0x66c>)
 80030ae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80030b0:	4b61      	ldr	r3, [pc, #388]	@ (8003238 <HAL_RCC_OscConfig+0x66c>)
 80030b2:	2180      	movs	r1, #128	@ 0x80
 80030b4:	00c9      	lsls	r1, r1, #3
 80030b6:	430a      	orrs	r2, r1
 80030b8:	651a      	str	r2, [r3, #80]	@ 0x50
 80030ba:	4b5f      	ldr	r3, [pc, #380]	@ (8003238 <HAL_RCC_OscConfig+0x66c>)
 80030bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80030be:	4b5e      	ldr	r3, [pc, #376]	@ (8003238 <HAL_RCC_OscConfig+0x66c>)
 80030c0:	2180      	movs	r1, #128	@ 0x80
 80030c2:	0049      	lsls	r1, r1, #1
 80030c4:	430a      	orrs	r2, r1
 80030c6:	651a      	str	r2, [r3, #80]	@ 0x50
 80030c8:	e00b      	b.n	80030e2 <HAL_RCC_OscConfig+0x516>
 80030ca:	4b5b      	ldr	r3, [pc, #364]	@ (8003238 <HAL_RCC_OscConfig+0x66c>)
 80030cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80030ce:	4b5a      	ldr	r3, [pc, #360]	@ (8003238 <HAL_RCC_OscConfig+0x66c>)
 80030d0:	495a      	ldr	r1, [pc, #360]	@ (800323c <HAL_RCC_OscConfig+0x670>)
 80030d2:	400a      	ands	r2, r1
 80030d4:	651a      	str	r2, [r3, #80]	@ 0x50
 80030d6:	4b58      	ldr	r3, [pc, #352]	@ (8003238 <HAL_RCC_OscConfig+0x66c>)
 80030d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80030da:	4b57      	ldr	r3, [pc, #348]	@ (8003238 <HAL_RCC_OscConfig+0x66c>)
 80030dc:	4959      	ldr	r1, [pc, #356]	@ (8003244 <HAL_RCC_OscConfig+0x678>)
 80030de:	400a      	ands	r2, r1
 80030e0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d015      	beq.n	8003116 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ea:	f7fe fd17 	bl	8001b1c <HAL_GetTick>
 80030ee:	0003      	movs	r3, r0
 80030f0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030f2:	e009      	b.n	8003108 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030f4:	f7fe fd12 	bl	8001b1c <HAL_GetTick>
 80030f8:	0002      	movs	r2, r0
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	4a52      	ldr	r2, [pc, #328]	@ (8003248 <HAL_RCC_OscConfig+0x67c>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d901      	bls.n	8003108 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e11a      	b.n	800333e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003108:	4b4b      	ldr	r3, [pc, #300]	@ (8003238 <HAL_RCC_OscConfig+0x66c>)
 800310a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800310c:	2380      	movs	r3, #128	@ 0x80
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	4013      	ands	r3, r2
 8003112:	d0ef      	beq.n	80030f4 <HAL_RCC_OscConfig+0x528>
 8003114:	e014      	b.n	8003140 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003116:	f7fe fd01 	bl	8001b1c <HAL_GetTick>
 800311a:	0003      	movs	r3, r0
 800311c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800311e:	e009      	b.n	8003134 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003120:	f7fe fcfc 	bl	8001b1c <HAL_GetTick>
 8003124:	0002      	movs	r2, r0
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	4a47      	ldr	r2, [pc, #284]	@ (8003248 <HAL_RCC_OscConfig+0x67c>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d901      	bls.n	8003134 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e104      	b.n	800333e <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003134:	4b40      	ldr	r3, [pc, #256]	@ (8003238 <HAL_RCC_OscConfig+0x66c>)
 8003136:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003138:	2380      	movs	r3, #128	@ 0x80
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4013      	ands	r3, r2
 800313e:	d1ef      	bne.n	8003120 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003140:	2327      	movs	r3, #39	@ 0x27
 8003142:	18fb      	adds	r3, r7, r3
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d105      	bne.n	8003156 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800314a:	4b3b      	ldr	r3, [pc, #236]	@ (8003238 <HAL_RCC_OscConfig+0x66c>)
 800314c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800314e:	4b3a      	ldr	r3, [pc, #232]	@ (8003238 <HAL_RCC_OscConfig+0x66c>)
 8003150:	493e      	ldr	r1, [pc, #248]	@ (800324c <HAL_RCC_OscConfig+0x680>)
 8003152:	400a      	ands	r2, r1
 8003154:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2220      	movs	r2, #32
 800315c:	4013      	ands	r3, r2
 800315e:	d049      	beq.n	80031f4 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d026      	beq.n	80031b6 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003168:	4b33      	ldr	r3, [pc, #204]	@ (8003238 <HAL_RCC_OscConfig+0x66c>)
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	4b32      	ldr	r3, [pc, #200]	@ (8003238 <HAL_RCC_OscConfig+0x66c>)
 800316e:	2101      	movs	r1, #1
 8003170:	430a      	orrs	r2, r1
 8003172:	609a      	str	r2, [r3, #8]
 8003174:	4b30      	ldr	r3, [pc, #192]	@ (8003238 <HAL_RCC_OscConfig+0x66c>)
 8003176:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003178:	4b2f      	ldr	r3, [pc, #188]	@ (8003238 <HAL_RCC_OscConfig+0x66c>)
 800317a:	2101      	movs	r1, #1
 800317c:	430a      	orrs	r2, r1
 800317e:	635a      	str	r2, [r3, #52]	@ 0x34
 8003180:	4b33      	ldr	r3, [pc, #204]	@ (8003250 <HAL_RCC_OscConfig+0x684>)
 8003182:	6a1a      	ldr	r2, [r3, #32]
 8003184:	4b32      	ldr	r3, [pc, #200]	@ (8003250 <HAL_RCC_OscConfig+0x684>)
 8003186:	2180      	movs	r1, #128	@ 0x80
 8003188:	0189      	lsls	r1, r1, #6
 800318a:	430a      	orrs	r2, r1
 800318c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800318e:	f7fe fcc5 	bl	8001b1c <HAL_GetTick>
 8003192:	0003      	movs	r3, r0
 8003194:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003196:	e008      	b.n	80031aa <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003198:	f7fe fcc0 	bl	8001b1c <HAL_GetTick>
 800319c:	0002      	movs	r2, r0
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e0c9      	b.n	800333e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80031aa:	4b23      	ldr	r3, [pc, #140]	@ (8003238 <HAL_RCC_OscConfig+0x66c>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	2202      	movs	r2, #2
 80031b0:	4013      	ands	r3, r2
 80031b2:	d0f1      	beq.n	8003198 <HAL_RCC_OscConfig+0x5cc>
 80031b4:	e01e      	b.n	80031f4 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80031b6:	4b20      	ldr	r3, [pc, #128]	@ (8003238 <HAL_RCC_OscConfig+0x66c>)
 80031b8:	689a      	ldr	r2, [r3, #8]
 80031ba:	4b1f      	ldr	r3, [pc, #124]	@ (8003238 <HAL_RCC_OscConfig+0x66c>)
 80031bc:	2101      	movs	r1, #1
 80031be:	438a      	bics	r2, r1
 80031c0:	609a      	str	r2, [r3, #8]
 80031c2:	4b23      	ldr	r3, [pc, #140]	@ (8003250 <HAL_RCC_OscConfig+0x684>)
 80031c4:	6a1a      	ldr	r2, [r3, #32]
 80031c6:	4b22      	ldr	r3, [pc, #136]	@ (8003250 <HAL_RCC_OscConfig+0x684>)
 80031c8:	4922      	ldr	r1, [pc, #136]	@ (8003254 <HAL_RCC_OscConfig+0x688>)
 80031ca:	400a      	ands	r2, r1
 80031cc:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ce:	f7fe fca5 	bl	8001b1c <HAL_GetTick>
 80031d2:	0003      	movs	r3, r0
 80031d4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80031d6:	e008      	b.n	80031ea <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031d8:	f7fe fca0 	bl	8001b1c <HAL_GetTick>
 80031dc:	0002      	movs	r2, r0
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e0a9      	b.n	800333e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80031ea:	4b13      	ldr	r3, [pc, #76]	@ (8003238 <HAL_RCC_OscConfig+0x66c>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	2202      	movs	r2, #2
 80031f0:	4013      	ands	r3, r2
 80031f2:	d1f1      	bne.n	80031d8 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d100      	bne.n	80031fe <HAL_RCC_OscConfig+0x632>
 80031fc:	e09e      	b.n	800333c <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031fe:	6a3b      	ldr	r3, [r7, #32]
 8003200:	2b0c      	cmp	r3, #12
 8003202:	d100      	bne.n	8003206 <HAL_RCC_OscConfig+0x63a>
 8003204:	e077      	b.n	80032f6 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800320a:	2b02      	cmp	r3, #2
 800320c:	d158      	bne.n	80032c0 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800320e:	4b0a      	ldr	r3, [pc, #40]	@ (8003238 <HAL_RCC_OscConfig+0x66c>)
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	4b09      	ldr	r3, [pc, #36]	@ (8003238 <HAL_RCC_OscConfig+0x66c>)
 8003214:	4910      	ldr	r1, [pc, #64]	@ (8003258 <HAL_RCC_OscConfig+0x68c>)
 8003216:	400a      	ands	r2, r1
 8003218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800321a:	f7fe fc7f 	bl	8001b1c <HAL_GetTick>
 800321e:	0003      	movs	r3, r0
 8003220:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003222:	e01b      	b.n	800325c <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003224:	f7fe fc7a 	bl	8001b1c <HAL_GetTick>
 8003228:	0002      	movs	r2, r0
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d914      	bls.n	800325c <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e083      	b.n	800333e <HAL_RCC_OscConfig+0x772>
 8003236:	46c0      	nop			@ (mov r8, r8)
 8003238:	40021000 	.word	0x40021000
 800323c:	fffffeff 	.word	0xfffffeff
 8003240:	40007000 	.word	0x40007000
 8003244:	fffffbff 	.word	0xfffffbff
 8003248:	00001388 	.word	0x00001388
 800324c:	efffffff 	.word	0xefffffff
 8003250:	40010000 	.word	0x40010000
 8003254:	ffffdfff 	.word	0xffffdfff
 8003258:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800325c:	4b3a      	ldr	r3, [pc, #232]	@ (8003348 <HAL_RCC_OscConfig+0x77c>)
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	2380      	movs	r3, #128	@ 0x80
 8003262:	049b      	lsls	r3, r3, #18
 8003264:	4013      	ands	r3, r2
 8003266:	d1dd      	bne.n	8003224 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003268:	4b37      	ldr	r3, [pc, #220]	@ (8003348 <HAL_RCC_OscConfig+0x77c>)
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	4a37      	ldr	r2, [pc, #220]	@ (800334c <HAL_RCC_OscConfig+0x780>)
 800326e:	4013      	ands	r3, r2
 8003270:	0019      	movs	r1, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800327a:	431a      	orrs	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003280:	431a      	orrs	r2, r3
 8003282:	4b31      	ldr	r3, [pc, #196]	@ (8003348 <HAL_RCC_OscConfig+0x77c>)
 8003284:	430a      	orrs	r2, r1
 8003286:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003288:	4b2f      	ldr	r3, [pc, #188]	@ (8003348 <HAL_RCC_OscConfig+0x77c>)
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	4b2e      	ldr	r3, [pc, #184]	@ (8003348 <HAL_RCC_OscConfig+0x77c>)
 800328e:	2180      	movs	r1, #128	@ 0x80
 8003290:	0449      	lsls	r1, r1, #17
 8003292:	430a      	orrs	r2, r1
 8003294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003296:	f7fe fc41 	bl	8001b1c <HAL_GetTick>
 800329a:	0003      	movs	r3, r0
 800329c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800329e:	e008      	b.n	80032b2 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032a0:	f7fe fc3c 	bl	8001b1c <HAL_GetTick>
 80032a4:	0002      	movs	r2, r0
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e045      	b.n	800333e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80032b2:	4b25      	ldr	r3, [pc, #148]	@ (8003348 <HAL_RCC_OscConfig+0x77c>)
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	2380      	movs	r3, #128	@ 0x80
 80032b8:	049b      	lsls	r3, r3, #18
 80032ba:	4013      	ands	r3, r2
 80032bc:	d0f0      	beq.n	80032a0 <HAL_RCC_OscConfig+0x6d4>
 80032be:	e03d      	b.n	800333c <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032c0:	4b21      	ldr	r3, [pc, #132]	@ (8003348 <HAL_RCC_OscConfig+0x77c>)
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	4b20      	ldr	r3, [pc, #128]	@ (8003348 <HAL_RCC_OscConfig+0x77c>)
 80032c6:	4922      	ldr	r1, [pc, #136]	@ (8003350 <HAL_RCC_OscConfig+0x784>)
 80032c8:	400a      	ands	r2, r1
 80032ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032cc:	f7fe fc26 	bl	8001b1c <HAL_GetTick>
 80032d0:	0003      	movs	r3, r0
 80032d2:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80032d4:	e008      	b.n	80032e8 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032d6:	f7fe fc21 	bl	8001b1c <HAL_GetTick>
 80032da:	0002      	movs	r2, r0
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d901      	bls.n	80032e8 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e02a      	b.n	800333e <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80032e8:	4b17      	ldr	r3, [pc, #92]	@ (8003348 <HAL_RCC_OscConfig+0x77c>)
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	2380      	movs	r3, #128	@ 0x80
 80032ee:	049b      	lsls	r3, r3, #18
 80032f0:	4013      	ands	r3, r2
 80032f2:	d1f0      	bne.n	80032d6 <HAL_RCC_OscConfig+0x70a>
 80032f4:	e022      	b.n	800333c <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d101      	bne.n	8003302 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e01d      	b.n	800333e <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003302:	4b11      	ldr	r3, [pc, #68]	@ (8003348 <HAL_RCC_OscConfig+0x77c>)
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003308:	69fa      	ldr	r2, [r7, #28]
 800330a:	2380      	movs	r3, #128	@ 0x80
 800330c:	025b      	lsls	r3, r3, #9
 800330e:	401a      	ands	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003314:	429a      	cmp	r2, r3
 8003316:	d10f      	bne.n	8003338 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003318:	69fa      	ldr	r2, [r7, #28]
 800331a:	23f0      	movs	r3, #240	@ 0xf0
 800331c:	039b      	lsls	r3, r3, #14
 800331e:	401a      	ands	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003324:	429a      	cmp	r2, r3
 8003326:	d107      	bne.n	8003338 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003328:	69fa      	ldr	r2, [r7, #28]
 800332a:	23c0      	movs	r3, #192	@ 0xc0
 800332c:	041b      	lsls	r3, r3, #16
 800332e:	401a      	ands	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003334:	429a      	cmp	r2, r3
 8003336:	d001      	beq.n	800333c <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e000      	b.n	800333e <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	0018      	movs	r0, r3
 8003340:	46bd      	mov	sp, r7
 8003342:	b00a      	add	sp, #40	@ 0x28
 8003344:	bdb0      	pop	{r4, r5, r7, pc}
 8003346:	46c0      	nop			@ (mov r8, r8)
 8003348:	40021000 	.word	0x40021000
 800334c:	ff02ffff 	.word	0xff02ffff
 8003350:	feffffff 	.word	0xfeffffff

08003354 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003354:	b5b0      	push	{r4, r5, r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d101      	bne.n	8003368 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e128      	b.n	80035ba <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003368:	4b96      	ldr	r3, [pc, #600]	@ (80035c4 <HAL_RCC_ClockConfig+0x270>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2201      	movs	r2, #1
 800336e:	4013      	ands	r3, r2
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	429a      	cmp	r2, r3
 8003374:	d91e      	bls.n	80033b4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003376:	4b93      	ldr	r3, [pc, #588]	@ (80035c4 <HAL_RCC_ClockConfig+0x270>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2201      	movs	r2, #1
 800337c:	4393      	bics	r3, r2
 800337e:	0019      	movs	r1, r3
 8003380:	4b90      	ldr	r3, [pc, #576]	@ (80035c4 <HAL_RCC_ClockConfig+0x270>)
 8003382:	683a      	ldr	r2, [r7, #0]
 8003384:	430a      	orrs	r2, r1
 8003386:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003388:	f7fe fbc8 	bl	8001b1c <HAL_GetTick>
 800338c:	0003      	movs	r3, r0
 800338e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003390:	e009      	b.n	80033a6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003392:	f7fe fbc3 	bl	8001b1c <HAL_GetTick>
 8003396:	0002      	movs	r2, r0
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	4a8a      	ldr	r2, [pc, #552]	@ (80035c8 <HAL_RCC_ClockConfig+0x274>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e109      	b.n	80035ba <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033a6:	4b87      	ldr	r3, [pc, #540]	@ (80035c4 <HAL_RCC_ClockConfig+0x270>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2201      	movs	r2, #1
 80033ac:	4013      	ands	r3, r2
 80033ae:	683a      	ldr	r2, [r7, #0]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d1ee      	bne.n	8003392 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2202      	movs	r2, #2
 80033ba:	4013      	ands	r3, r2
 80033bc:	d009      	beq.n	80033d2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033be:	4b83      	ldr	r3, [pc, #524]	@ (80035cc <HAL_RCC_ClockConfig+0x278>)
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	22f0      	movs	r2, #240	@ 0xf0
 80033c4:	4393      	bics	r3, r2
 80033c6:	0019      	movs	r1, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689a      	ldr	r2, [r3, #8]
 80033cc:	4b7f      	ldr	r3, [pc, #508]	@ (80035cc <HAL_RCC_ClockConfig+0x278>)
 80033ce:	430a      	orrs	r2, r1
 80033d0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2201      	movs	r2, #1
 80033d8:	4013      	ands	r3, r2
 80033da:	d100      	bne.n	80033de <HAL_RCC_ClockConfig+0x8a>
 80033dc:	e089      	b.n	80034f2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d107      	bne.n	80033f6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033e6:	4b79      	ldr	r3, [pc, #484]	@ (80035cc <HAL_RCC_ClockConfig+0x278>)
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	2380      	movs	r3, #128	@ 0x80
 80033ec:	029b      	lsls	r3, r3, #10
 80033ee:	4013      	ands	r3, r2
 80033f0:	d120      	bne.n	8003434 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e0e1      	b.n	80035ba <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2b03      	cmp	r3, #3
 80033fc:	d107      	bne.n	800340e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80033fe:	4b73      	ldr	r3, [pc, #460]	@ (80035cc <HAL_RCC_ClockConfig+0x278>)
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	2380      	movs	r3, #128	@ 0x80
 8003404:	049b      	lsls	r3, r3, #18
 8003406:	4013      	ands	r3, r2
 8003408:	d114      	bne.n	8003434 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e0d5      	b.n	80035ba <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d106      	bne.n	8003424 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003416:	4b6d      	ldr	r3, [pc, #436]	@ (80035cc <HAL_RCC_ClockConfig+0x278>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2204      	movs	r2, #4
 800341c:	4013      	ands	r3, r2
 800341e:	d109      	bne.n	8003434 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e0ca      	b.n	80035ba <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003424:	4b69      	ldr	r3, [pc, #420]	@ (80035cc <HAL_RCC_ClockConfig+0x278>)
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	2380      	movs	r3, #128	@ 0x80
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4013      	ands	r3, r2
 800342e:	d101      	bne.n	8003434 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e0c2      	b.n	80035ba <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003434:	4b65      	ldr	r3, [pc, #404]	@ (80035cc <HAL_RCC_ClockConfig+0x278>)
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	2203      	movs	r2, #3
 800343a:	4393      	bics	r3, r2
 800343c:	0019      	movs	r1, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685a      	ldr	r2, [r3, #4]
 8003442:	4b62      	ldr	r3, [pc, #392]	@ (80035cc <HAL_RCC_ClockConfig+0x278>)
 8003444:	430a      	orrs	r2, r1
 8003446:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003448:	f7fe fb68 	bl	8001b1c <HAL_GetTick>
 800344c:	0003      	movs	r3, r0
 800344e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	2b02      	cmp	r3, #2
 8003456:	d111      	bne.n	800347c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003458:	e009      	b.n	800346e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800345a:	f7fe fb5f 	bl	8001b1c <HAL_GetTick>
 800345e:	0002      	movs	r2, r0
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	4a58      	ldr	r2, [pc, #352]	@ (80035c8 <HAL_RCC_ClockConfig+0x274>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d901      	bls.n	800346e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e0a5      	b.n	80035ba <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800346e:	4b57      	ldr	r3, [pc, #348]	@ (80035cc <HAL_RCC_ClockConfig+0x278>)
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	220c      	movs	r2, #12
 8003474:	4013      	ands	r3, r2
 8003476:	2b08      	cmp	r3, #8
 8003478:	d1ef      	bne.n	800345a <HAL_RCC_ClockConfig+0x106>
 800347a:	e03a      	b.n	80034f2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	2b03      	cmp	r3, #3
 8003482:	d111      	bne.n	80034a8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003484:	e009      	b.n	800349a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003486:	f7fe fb49 	bl	8001b1c <HAL_GetTick>
 800348a:	0002      	movs	r2, r0
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	4a4d      	ldr	r2, [pc, #308]	@ (80035c8 <HAL_RCC_ClockConfig+0x274>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d901      	bls.n	800349a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e08f      	b.n	80035ba <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800349a:	4b4c      	ldr	r3, [pc, #304]	@ (80035cc <HAL_RCC_ClockConfig+0x278>)
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	220c      	movs	r2, #12
 80034a0:	4013      	ands	r3, r2
 80034a2:	2b0c      	cmp	r3, #12
 80034a4:	d1ef      	bne.n	8003486 <HAL_RCC_ClockConfig+0x132>
 80034a6:	e024      	b.n	80034f2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d11b      	bne.n	80034e8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80034b0:	e009      	b.n	80034c6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034b2:	f7fe fb33 	bl	8001b1c <HAL_GetTick>
 80034b6:	0002      	movs	r2, r0
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	4a42      	ldr	r2, [pc, #264]	@ (80035c8 <HAL_RCC_ClockConfig+0x274>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e079      	b.n	80035ba <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80034c6:	4b41      	ldr	r3, [pc, #260]	@ (80035cc <HAL_RCC_ClockConfig+0x278>)
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	220c      	movs	r2, #12
 80034cc:	4013      	ands	r3, r2
 80034ce:	2b04      	cmp	r3, #4
 80034d0:	d1ef      	bne.n	80034b2 <HAL_RCC_ClockConfig+0x15e>
 80034d2:	e00e      	b.n	80034f2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034d4:	f7fe fb22 	bl	8001b1c <HAL_GetTick>
 80034d8:	0002      	movs	r2, r0
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	4a3a      	ldr	r2, [pc, #232]	@ (80035c8 <HAL_RCC_ClockConfig+0x274>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d901      	bls.n	80034e8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e068      	b.n	80035ba <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80034e8:	4b38      	ldr	r3, [pc, #224]	@ (80035cc <HAL_RCC_ClockConfig+0x278>)
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	220c      	movs	r2, #12
 80034ee:	4013      	ands	r3, r2
 80034f0:	d1f0      	bne.n	80034d4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034f2:	4b34      	ldr	r3, [pc, #208]	@ (80035c4 <HAL_RCC_ClockConfig+0x270>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2201      	movs	r2, #1
 80034f8:	4013      	ands	r3, r2
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d21e      	bcs.n	800353e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003500:	4b30      	ldr	r3, [pc, #192]	@ (80035c4 <HAL_RCC_ClockConfig+0x270>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2201      	movs	r2, #1
 8003506:	4393      	bics	r3, r2
 8003508:	0019      	movs	r1, r3
 800350a:	4b2e      	ldr	r3, [pc, #184]	@ (80035c4 <HAL_RCC_ClockConfig+0x270>)
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	430a      	orrs	r2, r1
 8003510:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003512:	f7fe fb03 	bl	8001b1c <HAL_GetTick>
 8003516:	0003      	movs	r3, r0
 8003518:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800351a:	e009      	b.n	8003530 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800351c:	f7fe fafe 	bl	8001b1c <HAL_GetTick>
 8003520:	0002      	movs	r2, r0
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	4a28      	ldr	r2, [pc, #160]	@ (80035c8 <HAL_RCC_ClockConfig+0x274>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d901      	bls.n	8003530 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e044      	b.n	80035ba <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003530:	4b24      	ldr	r3, [pc, #144]	@ (80035c4 <HAL_RCC_ClockConfig+0x270>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2201      	movs	r2, #1
 8003536:	4013      	ands	r3, r2
 8003538:	683a      	ldr	r2, [r7, #0]
 800353a:	429a      	cmp	r2, r3
 800353c:	d1ee      	bne.n	800351c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2204      	movs	r2, #4
 8003544:	4013      	ands	r3, r2
 8003546:	d009      	beq.n	800355c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003548:	4b20      	ldr	r3, [pc, #128]	@ (80035cc <HAL_RCC_ClockConfig+0x278>)
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	4a20      	ldr	r2, [pc, #128]	@ (80035d0 <HAL_RCC_ClockConfig+0x27c>)
 800354e:	4013      	ands	r3, r2
 8003550:	0019      	movs	r1, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	68da      	ldr	r2, [r3, #12]
 8003556:	4b1d      	ldr	r3, [pc, #116]	@ (80035cc <HAL_RCC_ClockConfig+0x278>)
 8003558:	430a      	orrs	r2, r1
 800355a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2208      	movs	r2, #8
 8003562:	4013      	ands	r3, r2
 8003564:	d00a      	beq.n	800357c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003566:	4b19      	ldr	r3, [pc, #100]	@ (80035cc <HAL_RCC_ClockConfig+0x278>)
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	4a1a      	ldr	r2, [pc, #104]	@ (80035d4 <HAL_RCC_ClockConfig+0x280>)
 800356c:	4013      	ands	r3, r2
 800356e:	0019      	movs	r1, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	00da      	lsls	r2, r3, #3
 8003576:	4b15      	ldr	r3, [pc, #84]	@ (80035cc <HAL_RCC_ClockConfig+0x278>)
 8003578:	430a      	orrs	r2, r1
 800357a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800357c:	f000 f832 	bl	80035e4 <HAL_RCC_GetSysClockFreq>
 8003580:	0001      	movs	r1, r0
 8003582:	4b12      	ldr	r3, [pc, #72]	@ (80035cc <HAL_RCC_ClockConfig+0x278>)
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	091b      	lsrs	r3, r3, #4
 8003588:	220f      	movs	r2, #15
 800358a:	4013      	ands	r3, r2
 800358c:	4a12      	ldr	r2, [pc, #72]	@ (80035d8 <HAL_RCC_ClockConfig+0x284>)
 800358e:	5cd3      	ldrb	r3, [r2, r3]
 8003590:	000a      	movs	r2, r1
 8003592:	40da      	lsrs	r2, r3
 8003594:	4b11      	ldr	r3, [pc, #68]	@ (80035dc <HAL_RCC_ClockConfig+0x288>)
 8003596:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003598:	4b11      	ldr	r3, [pc, #68]	@ (80035e0 <HAL_RCC_ClockConfig+0x28c>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	250b      	movs	r5, #11
 800359e:	197c      	adds	r4, r7, r5
 80035a0:	0018      	movs	r0, r3
 80035a2:	f7fe fa75 	bl	8001a90 <HAL_InitTick>
 80035a6:	0003      	movs	r3, r0
 80035a8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80035aa:	197b      	adds	r3, r7, r5
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d002      	beq.n	80035b8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80035b2:	197b      	adds	r3, r7, r5
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	e000      	b.n	80035ba <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	0018      	movs	r0, r3
 80035bc:	46bd      	mov	sp, r7
 80035be:	b004      	add	sp, #16
 80035c0:	bdb0      	pop	{r4, r5, r7, pc}
 80035c2:	46c0      	nop			@ (mov r8, r8)
 80035c4:	40022000 	.word	0x40022000
 80035c8:	00001388 	.word	0x00001388
 80035cc:	40021000 	.word	0x40021000
 80035d0:	fffff8ff 	.word	0xfffff8ff
 80035d4:	ffffc7ff 	.word	0xffffc7ff
 80035d8:	08005fb8 	.word	0x08005fb8
 80035dc:	20000008 	.word	0x20000008
 80035e0:	2000000c 	.word	0x2000000c

080035e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035e4:	b5b0      	push	{r4, r5, r7, lr}
 80035e6:	b08e      	sub	sp, #56	@ 0x38
 80035e8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80035ea:	4b4c      	ldr	r3, [pc, #304]	@ (800371c <HAL_RCC_GetSysClockFreq+0x138>)
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035f2:	230c      	movs	r3, #12
 80035f4:	4013      	ands	r3, r2
 80035f6:	2b0c      	cmp	r3, #12
 80035f8:	d014      	beq.n	8003624 <HAL_RCC_GetSysClockFreq+0x40>
 80035fa:	d900      	bls.n	80035fe <HAL_RCC_GetSysClockFreq+0x1a>
 80035fc:	e07b      	b.n	80036f6 <HAL_RCC_GetSysClockFreq+0x112>
 80035fe:	2b04      	cmp	r3, #4
 8003600:	d002      	beq.n	8003608 <HAL_RCC_GetSysClockFreq+0x24>
 8003602:	2b08      	cmp	r3, #8
 8003604:	d00b      	beq.n	800361e <HAL_RCC_GetSysClockFreq+0x3a>
 8003606:	e076      	b.n	80036f6 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003608:	4b44      	ldr	r3, [pc, #272]	@ (800371c <HAL_RCC_GetSysClockFreq+0x138>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2210      	movs	r2, #16
 800360e:	4013      	ands	r3, r2
 8003610:	d002      	beq.n	8003618 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003612:	4b43      	ldr	r3, [pc, #268]	@ (8003720 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003614:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003616:	e07c      	b.n	8003712 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003618:	4b42      	ldr	r3, [pc, #264]	@ (8003724 <HAL_RCC_GetSysClockFreq+0x140>)
 800361a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800361c:	e079      	b.n	8003712 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800361e:	4b42      	ldr	r3, [pc, #264]	@ (8003728 <HAL_RCC_GetSysClockFreq+0x144>)
 8003620:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003622:	e076      	b.n	8003712 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003626:	0c9a      	lsrs	r2, r3, #18
 8003628:	230f      	movs	r3, #15
 800362a:	401a      	ands	r2, r3
 800362c:	4b3f      	ldr	r3, [pc, #252]	@ (800372c <HAL_RCC_GetSysClockFreq+0x148>)
 800362e:	5c9b      	ldrb	r3, [r3, r2]
 8003630:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003634:	0d9a      	lsrs	r2, r3, #22
 8003636:	2303      	movs	r3, #3
 8003638:	4013      	ands	r3, r2
 800363a:	3301      	adds	r3, #1
 800363c:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800363e:	4b37      	ldr	r3, [pc, #220]	@ (800371c <HAL_RCC_GetSysClockFreq+0x138>)
 8003640:	68da      	ldr	r2, [r3, #12]
 8003642:	2380      	movs	r3, #128	@ 0x80
 8003644:	025b      	lsls	r3, r3, #9
 8003646:	4013      	ands	r3, r2
 8003648:	d01a      	beq.n	8003680 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800364a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800364c:	61bb      	str	r3, [r7, #24]
 800364e:	2300      	movs	r3, #0
 8003650:	61fb      	str	r3, [r7, #28]
 8003652:	4a35      	ldr	r2, [pc, #212]	@ (8003728 <HAL_RCC_GetSysClockFreq+0x144>)
 8003654:	2300      	movs	r3, #0
 8003656:	69b8      	ldr	r0, [r7, #24]
 8003658:	69f9      	ldr	r1, [r7, #28]
 800365a:	f7fc fe0b 	bl	8000274 <__aeabi_lmul>
 800365e:	0002      	movs	r2, r0
 8003660:	000b      	movs	r3, r1
 8003662:	0010      	movs	r0, r2
 8003664:	0019      	movs	r1, r3
 8003666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003668:	613b      	str	r3, [r7, #16]
 800366a:	2300      	movs	r3, #0
 800366c:	617b      	str	r3, [r7, #20]
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	f7fc fddf 	bl	8000234 <__aeabi_uldivmod>
 8003676:	0002      	movs	r2, r0
 8003678:	000b      	movs	r3, r1
 800367a:	0013      	movs	r3, r2
 800367c:	637b      	str	r3, [r7, #52]	@ 0x34
 800367e:	e037      	b.n	80036f0 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003680:	4b26      	ldr	r3, [pc, #152]	@ (800371c <HAL_RCC_GetSysClockFreq+0x138>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2210      	movs	r2, #16
 8003686:	4013      	ands	r3, r2
 8003688:	d01a      	beq.n	80036c0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800368a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800368c:	60bb      	str	r3, [r7, #8]
 800368e:	2300      	movs	r3, #0
 8003690:	60fb      	str	r3, [r7, #12]
 8003692:	4a23      	ldr	r2, [pc, #140]	@ (8003720 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003694:	2300      	movs	r3, #0
 8003696:	68b8      	ldr	r0, [r7, #8]
 8003698:	68f9      	ldr	r1, [r7, #12]
 800369a:	f7fc fdeb 	bl	8000274 <__aeabi_lmul>
 800369e:	0002      	movs	r2, r0
 80036a0:	000b      	movs	r3, r1
 80036a2:	0010      	movs	r0, r2
 80036a4:	0019      	movs	r1, r3
 80036a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a8:	603b      	str	r3, [r7, #0]
 80036aa:	2300      	movs	r3, #0
 80036ac:	607b      	str	r3, [r7, #4]
 80036ae:	683a      	ldr	r2, [r7, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f7fc fdbf 	bl	8000234 <__aeabi_uldivmod>
 80036b6:	0002      	movs	r2, r0
 80036b8:	000b      	movs	r3, r1
 80036ba:	0013      	movs	r3, r2
 80036bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80036be:	e017      	b.n	80036f0 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80036c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036c2:	0018      	movs	r0, r3
 80036c4:	2300      	movs	r3, #0
 80036c6:	0019      	movs	r1, r3
 80036c8:	4a16      	ldr	r2, [pc, #88]	@ (8003724 <HAL_RCC_GetSysClockFreq+0x140>)
 80036ca:	2300      	movs	r3, #0
 80036cc:	f7fc fdd2 	bl	8000274 <__aeabi_lmul>
 80036d0:	0002      	movs	r2, r0
 80036d2:	000b      	movs	r3, r1
 80036d4:	0010      	movs	r0, r2
 80036d6:	0019      	movs	r1, r3
 80036d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036da:	001c      	movs	r4, r3
 80036dc:	2300      	movs	r3, #0
 80036de:	001d      	movs	r5, r3
 80036e0:	0022      	movs	r2, r4
 80036e2:	002b      	movs	r3, r5
 80036e4:	f7fc fda6 	bl	8000234 <__aeabi_uldivmod>
 80036e8:	0002      	movs	r2, r0
 80036ea:	000b      	movs	r3, r1
 80036ec:	0013      	movs	r3, r2
 80036ee:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 80036f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036f2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80036f4:	e00d      	b.n	8003712 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80036f6:	4b09      	ldr	r3, [pc, #36]	@ (800371c <HAL_RCC_GetSysClockFreq+0x138>)
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	0b5b      	lsrs	r3, r3, #13
 80036fc:	2207      	movs	r2, #7
 80036fe:	4013      	ands	r3, r2
 8003700:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003702:	6a3b      	ldr	r3, [r7, #32]
 8003704:	3301      	adds	r3, #1
 8003706:	2280      	movs	r2, #128	@ 0x80
 8003708:	0212      	lsls	r2, r2, #8
 800370a:	409a      	lsls	r2, r3
 800370c:	0013      	movs	r3, r2
 800370e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003710:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8003714:	0018      	movs	r0, r3
 8003716:	46bd      	mov	sp, r7
 8003718:	b00e      	add	sp, #56	@ 0x38
 800371a:	bdb0      	pop	{r4, r5, r7, pc}
 800371c:	40021000 	.word	0x40021000
 8003720:	003d0900 	.word	0x003d0900
 8003724:	00f42400 	.word	0x00f42400
 8003728:	007a1200 	.word	0x007a1200
 800372c:	08005fd0 	.word	0x08005fd0

08003730 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003734:	4b02      	ldr	r3, [pc, #8]	@ (8003740 <HAL_RCC_GetHCLKFreq+0x10>)
 8003736:	681b      	ldr	r3, [r3, #0]
}
 8003738:	0018      	movs	r0, r3
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	46c0      	nop			@ (mov r8, r8)
 8003740:	20000008 	.word	0x20000008

08003744 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003748:	f7ff fff2 	bl	8003730 <HAL_RCC_GetHCLKFreq>
 800374c:	0001      	movs	r1, r0
 800374e:	4b06      	ldr	r3, [pc, #24]	@ (8003768 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	0a1b      	lsrs	r3, r3, #8
 8003754:	2207      	movs	r2, #7
 8003756:	4013      	ands	r3, r2
 8003758:	4a04      	ldr	r2, [pc, #16]	@ (800376c <HAL_RCC_GetPCLK1Freq+0x28>)
 800375a:	5cd3      	ldrb	r3, [r2, r3]
 800375c:	40d9      	lsrs	r1, r3
 800375e:	000b      	movs	r3, r1
}
 8003760:	0018      	movs	r0, r3
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	46c0      	nop			@ (mov r8, r8)
 8003768:	40021000 	.word	0x40021000
 800376c:	08005fc8 	.word	0x08005fc8

08003770 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003774:	f7ff ffdc 	bl	8003730 <HAL_RCC_GetHCLKFreq>
 8003778:	0001      	movs	r1, r0
 800377a:	4b06      	ldr	r3, [pc, #24]	@ (8003794 <HAL_RCC_GetPCLK2Freq+0x24>)
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	0adb      	lsrs	r3, r3, #11
 8003780:	2207      	movs	r2, #7
 8003782:	4013      	ands	r3, r2
 8003784:	4a04      	ldr	r2, [pc, #16]	@ (8003798 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003786:	5cd3      	ldrb	r3, [r2, r3]
 8003788:	40d9      	lsrs	r1, r3
 800378a:	000b      	movs	r3, r1
}
 800378c:	0018      	movs	r0, r3
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	46c0      	nop			@ (mov r8, r8)
 8003794:	40021000 	.word	0x40021000
 8003798:	08005fc8 	.word	0x08005fc8

0800379c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b086      	sub	sp, #24
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80037a4:	2317      	movs	r3, #23
 80037a6:	18fb      	adds	r3, r7, r3
 80037a8:	2200      	movs	r2, #0
 80037aa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2220      	movs	r2, #32
 80037b2:	4013      	ands	r3, r2
 80037b4:	d106      	bne.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	2380      	movs	r3, #128	@ 0x80
 80037bc:	011b      	lsls	r3, r3, #4
 80037be:	4013      	ands	r3, r2
 80037c0:	d100      	bne.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80037c2:	e104      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037c4:	4bb1      	ldr	r3, [pc, #708]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80037c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037c8:	2380      	movs	r3, #128	@ 0x80
 80037ca:	055b      	lsls	r3, r3, #21
 80037cc:	4013      	ands	r3, r2
 80037ce:	d10a      	bne.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037d0:	4bae      	ldr	r3, [pc, #696]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80037d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037d4:	4bad      	ldr	r3, [pc, #692]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80037d6:	2180      	movs	r1, #128	@ 0x80
 80037d8:	0549      	lsls	r1, r1, #21
 80037da:	430a      	orrs	r2, r1
 80037dc:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80037de:	2317      	movs	r3, #23
 80037e0:	18fb      	adds	r3, r7, r3
 80037e2:	2201      	movs	r2, #1
 80037e4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037e6:	4baa      	ldr	r3, [pc, #680]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	2380      	movs	r3, #128	@ 0x80
 80037ec:	005b      	lsls	r3, r3, #1
 80037ee:	4013      	ands	r3, r2
 80037f0:	d11a      	bne.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037f2:	4ba7      	ldr	r3, [pc, #668]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	4ba6      	ldr	r3, [pc, #664]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80037f8:	2180      	movs	r1, #128	@ 0x80
 80037fa:	0049      	lsls	r1, r1, #1
 80037fc:	430a      	orrs	r2, r1
 80037fe:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003800:	f7fe f98c 	bl	8001b1c <HAL_GetTick>
 8003804:	0003      	movs	r3, r0
 8003806:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003808:	e008      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800380a:	f7fe f987 	bl	8001b1c <HAL_GetTick>
 800380e:	0002      	movs	r2, r0
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	2b64      	cmp	r3, #100	@ 0x64
 8003816:	d901      	bls.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e133      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800381c:	4b9c      	ldr	r3, [pc, #624]	@ (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	2380      	movs	r3, #128	@ 0x80
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	4013      	ands	r3, r2
 8003826:	d0f0      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003828:	4b98      	ldr	r3, [pc, #608]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	23c0      	movs	r3, #192	@ 0xc0
 800382e:	039b      	lsls	r3, r3, #14
 8003830:	4013      	ands	r3, r2
 8003832:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685a      	ldr	r2, [r3, #4]
 8003838:	23c0      	movs	r3, #192	@ 0xc0
 800383a:	039b      	lsls	r3, r3, #14
 800383c:	4013      	ands	r3, r2
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	429a      	cmp	r2, r3
 8003842:	d107      	bne.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689a      	ldr	r2, [r3, #8]
 8003848:	23c0      	movs	r3, #192	@ 0xc0
 800384a:	039b      	lsls	r3, r3, #14
 800384c:	4013      	ands	r3, r2
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	429a      	cmp	r2, r3
 8003852:	d013      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685a      	ldr	r2, [r3, #4]
 8003858:	23c0      	movs	r3, #192	@ 0xc0
 800385a:	029b      	lsls	r3, r3, #10
 800385c:	401a      	ands	r2, r3
 800385e:	23c0      	movs	r3, #192	@ 0xc0
 8003860:	029b      	lsls	r3, r3, #10
 8003862:	429a      	cmp	r2, r3
 8003864:	d10a      	bne.n	800387c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003866:	4b89      	ldr	r3, [pc, #548]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	2380      	movs	r3, #128	@ 0x80
 800386c:	029b      	lsls	r3, r3, #10
 800386e:	401a      	ands	r2, r3
 8003870:	2380      	movs	r3, #128	@ 0x80
 8003872:	029b      	lsls	r3, r3, #10
 8003874:	429a      	cmp	r2, r3
 8003876:	d101      	bne.n	800387c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e103      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800387c:	4b83      	ldr	r3, [pc, #524]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800387e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003880:	23c0      	movs	r3, #192	@ 0xc0
 8003882:	029b      	lsls	r3, r3, #10
 8003884:	4013      	ands	r3, r2
 8003886:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d049      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x186>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685a      	ldr	r2, [r3, #4]
 8003892:	23c0      	movs	r3, #192	@ 0xc0
 8003894:	029b      	lsls	r3, r3, #10
 8003896:	4013      	ands	r3, r2
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	429a      	cmp	r2, r3
 800389c:	d004      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2220      	movs	r2, #32
 80038a4:	4013      	ands	r3, r2
 80038a6:	d10d      	bne.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	689a      	ldr	r2, [r3, #8]
 80038ac:	23c0      	movs	r3, #192	@ 0xc0
 80038ae:	029b      	lsls	r3, r3, #10
 80038b0:	4013      	ands	r3, r2
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d034      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	2380      	movs	r3, #128	@ 0x80
 80038be:	011b      	lsls	r3, r3, #4
 80038c0:	4013      	ands	r3, r2
 80038c2:	d02e      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80038c4:	4b71      	ldr	r3, [pc, #452]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80038c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038c8:	4a72      	ldr	r2, [pc, #456]	@ (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80038ca:	4013      	ands	r3, r2
 80038cc:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80038ce:	4b6f      	ldr	r3, [pc, #444]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80038d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80038d2:	4b6e      	ldr	r3, [pc, #440]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80038d4:	2180      	movs	r1, #128	@ 0x80
 80038d6:	0309      	lsls	r1, r1, #12
 80038d8:	430a      	orrs	r2, r1
 80038da:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80038dc:	4b6b      	ldr	r3, [pc, #428]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80038de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80038e0:	4b6a      	ldr	r3, [pc, #424]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80038e2:	496d      	ldr	r1, [pc, #436]	@ (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80038e4:	400a      	ands	r2, r1
 80038e6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80038e8:	4b68      	ldr	r3, [pc, #416]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	2380      	movs	r3, #128	@ 0x80
 80038f2:	005b      	lsls	r3, r3, #1
 80038f4:	4013      	ands	r3, r2
 80038f6:	d014      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f8:	f7fe f910 	bl	8001b1c <HAL_GetTick>
 80038fc:	0003      	movs	r3, r0
 80038fe:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003900:	e009      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003902:	f7fe f90b 	bl	8001b1c <HAL_GetTick>
 8003906:	0002      	movs	r2, r0
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	4a63      	ldr	r2, [pc, #396]	@ (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d901      	bls.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e0b6      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003916:	4b5d      	ldr	r3, [pc, #372]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003918:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800391a:	2380      	movs	r3, #128	@ 0x80
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	4013      	ands	r3, r2
 8003920:	d0ef      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	2380      	movs	r3, #128	@ 0x80
 8003928:	011b      	lsls	r3, r3, #4
 800392a:	4013      	ands	r3, r2
 800392c:	d01f      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	689a      	ldr	r2, [r3, #8]
 8003932:	23c0      	movs	r3, #192	@ 0xc0
 8003934:	029b      	lsls	r3, r3, #10
 8003936:	401a      	ands	r2, r3
 8003938:	23c0      	movs	r3, #192	@ 0xc0
 800393a:	029b      	lsls	r3, r3, #10
 800393c:	429a      	cmp	r2, r3
 800393e:	d10c      	bne.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003940:	4b52      	ldr	r3, [pc, #328]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a56      	ldr	r2, [pc, #344]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003946:	4013      	ands	r3, r2
 8003948:	0019      	movs	r1, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	689a      	ldr	r2, [r3, #8]
 800394e:	23c0      	movs	r3, #192	@ 0xc0
 8003950:	039b      	lsls	r3, r3, #14
 8003952:	401a      	ands	r2, r3
 8003954:	4b4d      	ldr	r3, [pc, #308]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003956:	430a      	orrs	r2, r1
 8003958:	601a      	str	r2, [r3, #0]
 800395a:	4b4c      	ldr	r3, [pc, #304]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800395c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	689a      	ldr	r2, [r3, #8]
 8003962:	23c0      	movs	r3, #192	@ 0xc0
 8003964:	029b      	lsls	r3, r3, #10
 8003966:	401a      	ands	r2, r3
 8003968:	4b48      	ldr	r3, [pc, #288]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800396a:	430a      	orrs	r2, r1
 800396c:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2220      	movs	r2, #32
 8003974:	4013      	ands	r3, r2
 8003976:	d01f      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685a      	ldr	r2, [r3, #4]
 800397c:	23c0      	movs	r3, #192	@ 0xc0
 800397e:	029b      	lsls	r3, r3, #10
 8003980:	401a      	ands	r2, r3
 8003982:	23c0      	movs	r3, #192	@ 0xc0
 8003984:	029b      	lsls	r3, r3, #10
 8003986:	429a      	cmp	r2, r3
 8003988:	d10c      	bne.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x208>
 800398a:	4b40      	ldr	r3, [pc, #256]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a44      	ldr	r2, [pc, #272]	@ (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003990:	4013      	ands	r3, r2
 8003992:	0019      	movs	r1, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685a      	ldr	r2, [r3, #4]
 8003998:	23c0      	movs	r3, #192	@ 0xc0
 800399a:	039b      	lsls	r3, r3, #14
 800399c:	401a      	ands	r2, r3
 800399e:	4b3b      	ldr	r3, [pc, #236]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80039a0:	430a      	orrs	r2, r1
 80039a2:	601a      	str	r2, [r3, #0]
 80039a4:	4b39      	ldr	r3, [pc, #228]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80039a6:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685a      	ldr	r2, [r3, #4]
 80039ac:	23c0      	movs	r3, #192	@ 0xc0
 80039ae:	029b      	lsls	r3, r3, #10
 80039b0:	401a      	ands	r2, r3
 80039b2:	4b36      	ldr	r3, [pc, #216]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80039b4:	430a      	orrs	r2, r1
 80039b6:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80039b8:	2317      	movs	r3, #23
 80039ba:	18fb      	adds	r3, r7, r3
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d105      	bne.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039c2:	4b32      	ldr	r3, [pc, #200]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80039c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80039c6:	4b31      	ldr	r3, [pc, #196]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80039c8:	4936      	ldr	r1, [pc, #216]	@ (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80039ca:	400a      	ands	r2, r1
 80039cc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2201      	movs	r2, #1
 80039d4:	4013      	ands	r3, r2
 80039d6:	d009      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039d8:	4b2c      	ldr	r3, [pc, #176]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80039da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039dc:	2203      	movs	r2, #3
 80039de:	4393      	bics	r3, r2
 80039e0:	0019      	movs	r1, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	68da      	ldr	r2, [r3, #12]
 80039e6:	4b29      	ldr	r3, [pc, #164]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80039e8:	430a      	orrs	r2, r1
 80039ea:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2202      	movs	r2, #2
 80039f2:	4013      	ands	r3, r2
 80039f4:	d009      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039f6:	4b25      	ldr	r3, [pc, #148]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80039f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039fa:	220c      	movs	r2, #12
 80039fc:	4393      	bics	r3, r2
 80039fe:	0019      	movs	r1, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	691a      	ldr	r2, [r3, #16]
 8003a04:	4b21      	ldr	r3, [pc, #132]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003a06:	430a      	orrs	r2, r1
 8003a08:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2204      	movs	r2, #4
 8003a10:	4013      	ands	r3, r2
 8003a12:	d009      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a14:	4b1d      	ldr	r3, [pc, #116]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003a16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a18:	4a23      	ldr	r2, [pc, #140]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	0019      	movs	r1, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	695a      	ldr	r2, [r3, #20]
 8003a22:	4b1a      	ldr	r3, [pc, #104]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003a24:	430a      	orrs	r2, r1
 8003a26:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2208      	movs	r2, #8
 8003a2e:	4013      	ands	r3, r2
 8003a30:	d009      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a32:	4b16      	ldr	r3, [pc, #88]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a36:	4a1d      	ldr	r2, [pc, #116]	@ (8003aac <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003a38:	4013      	ands	r3, r2
 8003a3a:	0019      	movs	r1, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	699a      	ldr	r2, [r3, #24]
 8003a40:	4b12      	ldr	r3, [pc, #72]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003a42:	430a      	orrs	r2, r1
 8003a44:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2240      	movs	r2, #64	@ 0x40
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	d009      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a50:	4b0e      	ldr	r3, [pc, #56]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003a52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a54:	4a16      	ldr	r2, [pc, #88]	@ (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003a56:	4013      	ands	r3, r2
 8003a58:	0019      	movs	r1, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a1a      	ldr	r2, [r3, #32]
 8003a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003a60:	430a      	orrs	r2, r1
 8003a62:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2280      	movs	r2, #128	@ 0x80
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	d009      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003a6e:	4b07      	ldr	r3, [pc, #28]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003a70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a72:	4a10      	ldr	r2, [pc, #64]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8003a74:	4013      	ands	r3, r2
 8003a76:	0019      	movs	r1, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	69da      	ldr	r2, [r3, #28]
 8003a7c:	4b03      	ldr	r3, [pc, #12]	@ (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8003a82:	2300      	movs	r3, #0
}
 8003a84:	0018      	movs	r0, r3
 8003a86:	46bd      	mov	sp, r7
 8003a88:	b006      	add	sp, #24
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	40021000 	.word	0x40021000
 8003a90:	40007000 	.word	0x40007000
 8003a94:	fffcffff 	.word	0xfffcffff
 8003a98:	fff7ffff 	.word	0xfff7ffff
 8003a9c:	00001388 	.word	0x00001388
 8003aa0:	ffcfffff 	.word	0xffcfffff
 8003aa4:	efffffff 	.word	0xefffffff
 8003aa8:	fffff3ff 	.word	0xfffff3ff
 8003aac:	ffffcfff 	.word	0xffffcfff
 8003ab0:	fbffffff 	.word	0xfbffffff
 8003ab4:	fff3ffff 	.word	0xfff3ffff

08003ab8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d101      	bne.n	8003aca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e032      	b.n	8003b30 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2239      	movs	r2, #57	@ 0x39
 8003ace:	5c9b      	ldrb	r3, [r3, r2]
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d107      	bne.n	8003ae6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2238      	movs	r2, #56	@ 0x38
 8003ada:	2100      	movs	r1, #0
 8003adc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	0018      	movs	r0, r3
 8003ae2:	f7fd fdef 	bl	80016c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2239      	movs	r2, #57	@ 0x39
 8003aea:	2102      	movs	r1, #2
 8003aec:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	3304      	adds	r3, #4
 8003af6:	0019      	movs	r1, r3
 8003af8:	0010      	movs	r0, r2
 8003afa:	f000 fa51 	bl	8003fa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	223e      	movs	r2, #62	@ 0x3e
 8003b02:	2101      	movs	r1, #1
 8003b04:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	223a      	movs	r2, #58	@ 0x3a
 8003b0a:	2101      	movs	r1, #1
 8003b0c:	5499      	strb	r1, [r3, r2]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	223b      	movs	r2, #59	@ 0x3b
 8003b12:	2101      	movs	r1, #1
 8003b14:	5499      	strb	r1, [r3, r2]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	223c      	movs	r2, #60	@ 0x3c
 8003b1a:	2101      	movs	r1, #1
 8003b1c:	5499      	strb	r1, [r3, r2]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	223d      	movs	r2, #61	@ 0x3d
 8003b22:	2101      	movs	r1, #1
 8003b24:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2239      	movs	r2, #57	@ 0x39
 8003b2a:	2101      	movs	r1, #1
 8003b2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	0018      	movs	r0, r3
 8003b32:	46bd      	mov	sp, r7
 8003b34:	b002      	add	sp, #8
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e032      	b.n	8003bb0 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2239      	movs	r2, #57	@ 0x39
 8003b4e:	5c9b      	ldrb	r3, [r3, r2]
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d107      	bne.n	8003b66 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2238      	movs	r2, #56	@ 0x38
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	0018      	movs	r0, r3
 8003b62:	f000 f829 	bl	8003bb8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2239      	movs	r2, #57	@ 0x39
 8003b6a:	2102      	movs	r1, #2
 8003b6c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	3304      	adds	r3, #4
 8003b76:	0019      	movs	r1, r3
 8003b78:	0010      	movs	r0, r2
 8003b7a:	f000 fa11 	bl	8003fa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	223e      	movs	r2, #62	@ 0x3e
 8003b82:	2101      	movs	r1, #1
 8003b84:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	223a      	movs	r2, #58	@ 0x3a
 8003b8a:	2101      	movs	r1, #1
 8003b8c:	5499      	strb	r1, [r3, r2]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	223b      	movs	r2, #59	@ 0x3b
 8003b92:	2101      	movs	r1, #1
 8003b94:	5499      	strb	r1, [r3, r2]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	223c      	movs	r2, #60	@ 0x3c
 8003b9a:	2101      	movs	r1, #1
 8003b9c:	5499      	strb	r1, [r3, r2]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	223d      	movs	r2, #61	@ 0x3d
 8003ba2:	2101      	movs	r1, #1
 8003ba4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2239      	movs	r2, #57	@ 0x39
 8003baa:	2101      	movs	r1, #1
 8003bac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	0018      	movs	r0, r3
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	b002      	add	sp, #8
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003bc0:	46c0      	nop			@ (mov r8, r8)
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	b002      	add	sp, #8
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d101      	bne.n	8003bdc <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e03a      	b.n	8003c52 <HAL_TIM_OnePulse_Init+0x8a>
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2239      	movs	r2, #57	@ 0x39
 8003be0:	5c9b      	ldrb	r3, [r3, r2]
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d107      	bne.n	8003bf8 <HAL_TIM_OnePulse_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2238      	movs	r2, #56	@ 0x38
 8003bec:	2100      	movs	r1, #0
 8003bee:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	0018      	movs	r0, r3
 8003bf4:	f000 f831 	bl	8003c5a <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2239      	movs	r2, #57	@ 0x39
 8003bfc:	2102      	movs	r1, #2
 8003bfe:	5499      	strb	r1, [r3, r2]

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	3304      	adds	r3, #4
 8003c08:	0019      	movs	r1, r3
 8003c0a:	0010      	movs	r0, r2
 8003c0c:	f000 f9c8 	bl	8003fa0 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2108      	movs	r1, #8
 8003c1c:	438a      	bics	r2, r1
 8003c1e:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	6819      	ldr	r1, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	683a      	ldr	r2, [r7, #0]
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	223e      	movs	r2, #62	@ 0x3e
 8003c34:	2101      	movs	r1, #1
 8003c36:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	223a      	movs	r2, #58	@ 0x3a
 8003c3c:	2101      	movs	r1, #1
 8003c3e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	223b      	movs	r2, #59	@ 0x3b
 8003c44:	2101      	movs	r1, #1
 8003c46:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2239      	movs	r2, #57	@ 0x39
 8003c4c:	2101      	movs	r1, #1
 8003c4e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	0018      	movs	r0, r3
 8003c54:	46bd      	mov	sp, r7
 8003c56:	b002      	add	sp, #8
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b082      	sub	sp, #8
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8003c62:	46c0      	nop			@ (mov r8, r8)
 8003c64:	46bd      	mov	sp, r7
 8003c66:	b002      	add	sp, #8
 8003c68:	bd80      	pop	{r7, pc}
	...

08003c6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c78:	2317      	movs	r3, #23
 8003c7a:	18fb      	adds	r3, r7, r3
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2238      	movs	r2, #56	@ 0x38
 8003c84:	5c9b      	ldrb	r3, [r3, r2]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d101      	bne.n	8003c8e <HAL_TIM_PWM_ConfigChannel+0x22>
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	e0ad      	b.n	8003dea <HAL_TIM_PWM_ConfigChannel+0x17e>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2238      	movs	r2, #56	@ 0x38
 8003c92:	2101      	movs	r1, #1
 8003c94:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2b0c      	cmp	r3, #12
 8003c9a:	d100      	bne.n	8003c9e <HAL_TIM_PWM_ConfigChannel+0x32>
 8003c9c:	e076      	b.n	8003d8c <HAL_TIM_PWM_ConfigChannel+0x120>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2b0c      	cmp	r3, #12
 8003ca2:	d900      	bls.n	8003ca6 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8003ca4:	e095      	b.n	8003dd2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2b08      	cmp	r3, #8
 8003caa:	d04e      	beq.n	8003d4a <HAL_TIM_PWM_ConfigChannel+0xde>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2b08      	cmp	r3, #8
 8003cb0:	d900      	bls.n	8003cb4 <HAL_TIM_PWM_ConfigChannel+0x48>
 8003cb2:	e08e      	b.n	8003dd2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d003      	beq.n	8003cc2 <HAL_TIM_PWM_ConfigChannel+0x56>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2b04      	cmp	r3, #4
 8003cbe:	d021      	beq.n	8003d04 <HAL_TIM_PWM_ConfigChannel+0x98>
 8003cc0:	e087      	b.n	8003dd2 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68ba      	ldr	r2, [r7, #8]
 8003cc8:	0011      	movs	r1, r2
 8003cca:	0018      	movs	r0, r3
 8003ccc:	f000 f9bc 	bl	8004048 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	699a      	ldr	r2, [r3, #24]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2108      	movs	r1, #8
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	699a      	ldr	r2, [r3, #24]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2104      	movs	r1, #4
 8003cec:	438a      	bics	r2, r1
 8003cee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	6999      	ldr	r1, [r3, #24]
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	68da      	ldr	r2, [r3, #12]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	619a      	str	r2, [r3, #24]
      break;
 8003d02:	e06b      	b.n	8003ddc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68ba      	ldr	r2, [r7, #8]
 8003d0a:	0011      	movs	r1, r2
 8003d0c:	0018      	movs	r0, r3
 8003d0e:	f000 f9d7 	bl	80040c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	699a      	ldr	r2, [r3, #24]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2180      	movs	r1, #128	@ 0x80
 8003d1e:	0109      	lsls	r1, r1, #4
 8003d20:	430a      	orrs	r2, r1
 8003d22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	699a      	ldr	r2, [r3, #24]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4931      	ldr	r1, [pc, #196]	@ (8003df4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003d30:	400a      	ands	r2, r1
 8003d32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	6999      	ldr	r1, [r3, #24]
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	021a      	lsls	r2, r3, #8
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	430a      	orrs	r2, r1
 8003d46:	619a      	str	r2, [r3, #24]
      break;
 8003d48:	e048      	b.n	8003ddc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68ba      	ldr	r2, [r7, #8]
 8003d50:	0011      	movs	r1, r2
 8003d52:	0018      	movs	r0, r3
 8003d54:	f000 f9f6 	bl	8004144 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	69da      	ldr	r2, [r3, #28]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2108      	movs	r1, #8
 8003d64:	430a      	orrs	r2, r1
 8003d66:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	69da      	ldr	r2, [r3, #28]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2104      	movs	r1, #4
 8003d74:	438a      	bics	r2, r1
 8003d76:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	69d9      	ldr	r1, [r3, #28]
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	68da      	ldr	r2, [r3, #12]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	430a      	orrs	r2, r1
 8003d88:	61da      	str	r2, [r3, #28]
      break;
 8003d8a:	e027      	b.n	8003ddc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68ba      	ldr	r2, [r7, #8]
 8003d92:	0011      	movs	r1, r2
 8003d94:	0018      	movs	r0, r3
 8003d96:	f000 fa15 	bl	80041c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	69da      	ldr	r2, [r3, #28]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2180      	movs	r1, #128	@ 0x80
 8003da6:	0109      	lsls	r1, r1, #4
 8003da8:	430a      	orrs	r2, r1
 8003daa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	69da      	ldr	r2, [r3, #28]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	490f      	ldr	r1, [pc, #60]	@ (8003df4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003db8:	400a      	ands	r2, r1
 8003dba:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	69d9      	ldr	r1, [r3, #28]
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	021a      	lsls	r2, r3, #8
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	61da      	str	r2, [r3, #28]
      break;
 8003dd0:	e004      	b.n	8003ddc <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8003dd2:	2317      	movs	r3, #23
 8003dd4:	18fb      	adds	r3, r7, r3
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	701a      	strb	r2, [r3, #0]
      break;
 8003dda:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2238      	movs	r2, #56	@ 0x38
 8003de0:	2100      	movs	r1, #0
 8003de2:	5499      	strb	r1, [r3, r2]

  return status;
 8003de4:	2317      	movs	r3, #23
 8003de6:	18fb      	adds	r3, r7, r3
 8003de8:	781b      	ldrb	r3, [r3, #0]
}
 8003dea:	0018      	movs	r0, r3
 8003dec:	46bd      	mov	sp, r7
 8003dee:	b006      	add	sp, #24
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	46c0      	nop			@ (mov r8, r8)
 8003df4:	fffffbff 	.word	0xfffffbff

08003df8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e02:	230f      	movs	r3, #15
 8003e04:	18fb      	adds	r3, r7, r3
 8003e06:	2200      	movs	r2, #0
 8003e08:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2238      	movs	r2, #56	@ 0x38
 8003e0e:	5c9b      	ldrb	r3, [r3, r2]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d101      	bne.n	8003e18 <HAL_TIM_ConfigClockSource+0x20>
 8003e14:	2302      	movs	r3, #2
 8003e16:	e0bc      	b.n	8003f92 <HAL_TIM_ConfigClockSource+0x19a>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2238      	movs	r2, #56	@ 0x38
 8003e1c:	2101      	movs	r1, #1
 8003e1e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2239      	movs	r2, #57	@ 0x39
 8003e24:	2102      	movs	r1, #2
 8003e26:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	2277      	movs	r2, #119	@ 0x77
 8003e34:	4393      	bics	r3, r2
 8003e36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	4a58      	ldr	r2, [pc, #352]	@ (8003f9c <HAL_TIM_ConfigClockSource+0x1a4>)
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68ba      	ldr	r2, [r7, #8]
 8003e46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2280      	movs	r2, #128	@ 0x80
 8003e4e:	0192      	lsls	r2, r2, #6
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d040      	beq.n	8003ed6 <HAL_TIM_ConfigClockSource+0xde>
 8003e54:	2280      	movs	r2, #128	@ 0x80
 8003e56:	0192      	lsls	r2, r2, #6
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d900      	bls.n	8003e5e <HAL_TIM_ConfigClockSource+0x66>
 8003e5c:	e088      	b.n	8003f70 <HAL_TIM_ConfigClockSource+0x178>
 8003e5e:	2280      	movs	r2, #128	@ 0x80
 8003e60:	0152      	lsls	r2, r2, #5
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d100      	bne.n	8003e68 <HAL_TIM_ConfigClockSource+0x70>
 8003e66:	e088      	b.n	8003f7a <HAL_TIM_ConfigClockSource+0x182>
 8003e68:	2280      	movs	r2, #128	@ 0x80
 8003e6a:	0152      	lsls	r2, r2, #5
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d900      	bls.n	8003e72 <HAL_TIM_ConfigClockSource+0x7a>
 8003e70:	e07e      	b.n	8003f70 <HAL_TIM_ConfigClockSource+0x178>
 8003e72:	2b70      	cmp	r3, #112	@ 0x70
 8003e74:	d018      	beq.n	8003ea8 <HAL_TIM_ConfigClockSource+0xb0>
 8003e76:	d900      	bls.n	8003e7a <HAL_TIM_ConfigClockSource+0x82>
 8003e78:	e07a      	b.n	8003f70 <HAL_TIM_ConfigClockSource+0x178>
 8003e7a:	2b60      	cmp	r3, #96	@ 0x60
 8003e7c:	d04f      	beq.n	8003f1e <HAL_TIM_ConfigClockSource+0x126>
 8003e7e:	d900      	bls.n	8003e82 <HAL_TIM_ConfigClockSource+0x8a>
 8003e80:	e076      	b.n	8003f70 <HAL_TIM_ConfigClockSource+0x178>
 8003e82:	2b50      	cmp	r3, #80	@ 0x50
 8003e84:	d03b      	beq.n	8003efe <HAL_TIM_ConfigClockSource+0x106>
 8003e86:	d900      	bls.n	8003e8a <HAL_TIM_ConfigClockSource+0x92>
 8003e88:	e072      	b.n	8003f70 <HAL_TIM_ConfigClockSource+0x178>
 8003e8a:	2b40      	cmp	r3, #64	@ 0x40
 8003e8c:	d057      	beq.n	8003f3e <HAL_TIM_ConfigClockSource+0x146>
 8003e8e:	d900      	bls.n	8003e92 <HAL_TIM_ConfigClockSource+0x9a>
 8003e90:	e06e      	b.n	8003f70 <HAL_TIM_ConfigClockSource+0x178>
 8003e92:	2b30      	cmp	r3, #48	@ 0x30
 8003e94:	d063      	beq.n	8003f5e <HAL_TIM_ConfigClockSource+0x166>
 8003e96:	d86b      	bhi.n	8003f70 <HAL_TIM_ConfigClockSource+0x178>
 8003e98:	2b20      	cmp	r3, #32
 8003e9a:	d060      	beq.n	8003f5e <HAL_TIM_ConfigClockSource+0x166>
 8003e9c:	d868      	bhi.n	8003f70 <HAL_TIM_ConfigClockSource+0x178>
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d05d      	beq.n	8003f5e <HAL_TIM_ConfigClockSource+0x166>
 8003ea2:	2b10      	cmp	r3, #16
 8003ea4:	d05b      	beq.n	8003f5e <HAL_TIM_ConfigClockSource+0x166>
 8003ea6:	e063      	b.n	8003f70 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003eb8:	f000 fa44 	bl	8004344 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	2277      	movs	r2, #119	@ 0x77
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68ba      	ldr	r2, [r7, #8]
 8003ed2:	609a      	str	r2, [r3, #8]
      break;
 8003ed4:	e052      	b.n	8003f7c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ee6:	f000 fa2d 	bl	8004344 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	689a      	ldr	r2, [r3, #8]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2180      	movs	r1, #128	@ 0x80
 8003ef6:	01c9      	lsls	r1, r1, #7
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	609a      	str	r2, [r3, #8]
      break;
 8003efc:	e03e      	b.n	8003f7c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f0a:	001a      	movs	r2, r3
 8003f0c:	f000 f9a0 	bl	8004250 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2150      	movs	r1, #80	@ 0x50
 8003f16:	0018      	movs	r0, r3
 8003f18:	f000 f9fa 	bl	8004310 <TIM_ITRx_SetConfig>
      break;
 8003f1c:	e02e      	b.n	8003f7c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f2a:	001a      	movs	r2, r3
 8003f2c:	f000 f9be 	bl	80042ac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2160      	movs	r1, #96	@ 0x60
 8003f36:	0018      	movs	r0, r3
 8003f38:	f000 f9ea 	bl	8004310 <TIM_ITRx_SetConfig>
      break;
 8003f3c:	e01e      	b.n	8003f7c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f4a:	001a      	movs	r2, r3
 8003f4c:	f000 f980 	bl	8004250 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2140      	movs	r1, #64	@ 0x40
 8003f56:	0018      	movs	r0, r3
 8003f58:	f000 f9da 	bl	8004310 <TIM_ITRx_SetConfig>
      break;
 8003f5c:	e00e      	b.n	8003f7c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	0019      	movs	r1, r3
 8003f68:	0010      	movs	r0, r2
 8003f6a:	f000 f9d1 	bl	8004310 <TIM_ITRx_SetConfig>
      break;
 8003f6e:	e005      	b.n	8003f7c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003f70:	230f      	movs	r3, #15
 8003f72:	18fb      	adds	r3, r7, r3
 8003f74:	2201      	movs	r2, #1
 8003f76:	701a      	strb	r2, [r3, #0]
      break;
 8003f78:	e000      	b.n	8003f7c <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003f7a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2239      	movs	r2, #57	@ 0x39
 8003f80:	2101      	movs	r1, #1
 8003f82:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2238      	movs	r2, #56	@ 0x38
 8003f88:	2100      	movs	r1, #0
 8003f8a:	5499      	strb	r1, [r3, r2]

  return status;
 8003f8c:	230f      	movs	r3, #15
 8003f8e:	18fb      	adds	r3, r7, r3
 8003f90:	781b      	ldrb	r3, [r3, #0]
}
 8003f92:	0018      	movs	r0, r3
 8003f94:	46bd      	mov	sp, r7
 8003f96:	b004      	add	sp, #16
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	46c0      	nop			@ (mov r8, r8)
 8003f9c:	ffff00ff 	.word	0xffff00ff

08003fa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	2380      	movs	r3, #128	@ 0x80
 8003fb4:	05db      	lsls	r3, r3, #23
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d007      	beq.n	8003fca <TIM_Base_SetConfig+0x2a>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a1f      	ldr	r2, [pc, #124]	@ (800403c <TIM_Base_SetConfig+0x9c>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d003      	beq.n	8003fca <TIM_Base_SetConfig+0x2a>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a1e      	ldr	r2, [pc, #120]	@ (8004040 <TIM_Base_SetConfig+0xa0>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d108      	bne.n	8003fdc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2270      	movs	r2, #112	@ 0x70
 8003fce:	4393      	bics	r3, r2
 8003fd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	2380      	movs	r3, #128	@ 0x80
 8003fe0:	05db      	lsls	r3, r3, #23
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d007      	beq.n	8003ff6 <TIM_Base_SetConfig+0x56>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a14      	ldr	r2, [pc, #80]	@ (800403c <TIM_Base_SetConfig+0x9c>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d003      	beq.n	8003ff6 <TIM_Base_SetConfig+0x56>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a13      	ldr	r2, [pc, #76]	@ (8004040 <TIM_Base_SetConfig+0xa0>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d108      	bne.n	8004008 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	4a12      	ldr	r2, [pc, #72]	@ (8004044 <TIM_Base_SetConfig+0xa4>)
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	4313      	orrs	r3, r2
 8004006:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2280      	movs	r2, #128	@ 0x80
 800400c:	4393      	bics	r3, r2
 800400e:	001a      	movs	r2, r3
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	4313      	orrs	r3, r2
 8004016:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	689a      	ldr	r2, [r3, #8]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2201      	movs	r2, #1
 8004032:	615a      	str	r2, [r3, #20]
}
 8004034:	46c0      	nop			@ (mov r8, r8)
 8004036:	46bd      	mov	sp, r7
 8004038:	b004      	add	sp, #16
 800403a:	bd80      	pop	{r7, pc}
 800403c:	40010800 	.word	0x40010800
 8004040:	40011400 	.word	0x40011400
 8004044:	fffffcff 	.word	0xfffffcff

08004048 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b086      	sub	sp, #24
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a1b      	ldr	r3, [r3, #32]
 8004056:	2201      	movs	r2, #1
 8004058:	4393      	bics	r3, r2
 800405a:	001a      	movs	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a1b      	ldr	r3, [r3, #32]
 8004064:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2270      	movs	r2, #112	@ 0x70
 8004076:	4393      	bics	r3, r2
 8004078:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2203      	movs	r2, #3
 800407e:	4393      	bics	r3, r2
 8004080:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	4313      	orrs	r3, r2
 800408a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	2202      	movs	r2, #2
 8004090:	4393      	bics	r3, r2
 8004092:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	697a      	ldr	r2, [r7, #20]
 800409a:	4313      	orrs	r3, r2
 800409c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	685a      	ldr	r2, [r3, #4]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	697a      	ldr	r2, [r7, #20]
 80040b6:	621a      	str	r2, [r3, #32]
}
 80040b8:	46c0      	nop			@ (mov r8, r8)
 80040ba:	46bd      	mov	sp, r7
 80040bc:	b006      	add	sp, #24
 80040be:	bd80      	pop	{r7, pc}

080040c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b086      	sub	sp, #24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a1b      	ldr	r3, [r3, #32]
 80040ce:	2210      	movs	r2, #16
 80040d0:	4393      	bics	r3, r2
 80040d2:	001a      	movs	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a1b      	ldr	r3, [r3, #32]
 80040dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	699b      	ldr	r3, [r3, #24]
 80040e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	4a13      	ldr	r2, [pc, #76]	@ (800413c <TIM_OC2_SetConfig+0x7c>)
 80040ee:	4013      	ands	r3, r2
 80040f0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	4a12      	ldr	r2, [pc, #72]	@ (8004140 <TIM_OC2_SetConfig+0x80>)
 80040f6:	4013      	ands	r3, r2
 80040f8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	021b      	lsls	r3, r3, #8
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	4313      	orrs	r3, r2
 8004104:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	2220      	movs	r2, #32
 800410a:	4393      	bics	r3, r2
 800410c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	011b      	lsls	r3, r3, #4
 8004114:	697a      	ldr	r2, [r7, #20]
 8004116:	4313      	orrs	r3, r2
 8004118:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	693a      	ldr	r2, [r7, #16]
 800411e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	685a      	ldr	r2, [r3, #4]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	697a      	ldr	r2, [r7, #20]
 8004132:	621a      	str	r2, [r3, #32]
}
 8004134:	46c0      	nop			@ (mov r8, r8)
 8004136:	46bd      	mov	sp, r7
 8004138:	b006      	add	sp, #24
 800413a:	bd80      	pop	{r7, pc}
 800413c:	ffff8fff 	.word	0xffff8fff
 8004140:	fffffcff 	.word	0xfffffcff

08004144 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	4a1a      	ldr	r2, [pc, #104]	@ (80041bc <TIM_OC3_SetConfig+0x78>)
 8004154:	401a      	ands	r2, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	69db      	ldr	r3, [r3, #28]
 800416a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2270      	movs	r2, #112	@ 0x70
 8004170:	4393      	bics	r3, r2
 8004172:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2203      	movs	r2, #3
 8004178:	4393      	bics	r3, r2
 800417a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	4313      	orrs	r3, r2
 8004184:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	4a0d      	ldr	r2, [pc, #52]	@ (80041c0 <TIM_OC3_SetConfig+0x7c>)
 800418a:	4013      	ands	r3, r2
 800418c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	021b      	lsls	r3, r3, #8
 8004194:	697a      	ldr	r2, [r7, #20]
 8004196:	4313      	orrs	r3, r2
 8004198:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	685a      	ldr	r2, [r3, #4]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	697a      	ldr	r2, [r7, #20]
 80041b2:	621a      	str	r2, [r3, #32]
}
 80041b4:	46c0      	nop			@ (mov r8, r8)
 80041b6:	46bd      	mov	sp, r7
 80041b8:	b006      	add	sp, #24
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	fffffeff 	.word	0xfffffeff
 80041c0:	fffffdff 	.word	0xfffffdff

080041c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	4a1b      	ldr	r2, [pc, #108]	@ (8004240 <TIM_OC4_SetConfig+0x7c>)
 80041d4:	401a      	ands	r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	69db      	ldr	r3, [r3, #28]
 80041ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	4a15      	ldr	r2, [pc, #84]	@ (8004244 <TIM_OC4_SetConfig+0x80>)
 80041f0:	4013      	ands	r3, r2
 80041f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	4a14      	ldr	r2, [pc, #80]	@ (8004248 <TIM_OC4_SetConfig+0x84>)
 80041f8:	4013      	ands	r3, r2
 80041fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	021b      	lsls	r3, r3, #8
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	4313      	orrs	r3, r2
 8004206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	4a10      	ldr	r2, [pc, #64]	@ (800424c <TIM_OC4_SetConfig+0x88>)
 800420c:	4013      	ands	r3, r2
 800420e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	031b      	lsls	r3, r3, #12
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	4313      	orrs	r3, r2
 800421a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	685a      	ldr	r2, [r3, #4]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	621a      	str	r2, [r3, #32]
}
 8004236:	46c0      	nop			@ (mov r8, r8)
 8004238:	46bd      	mov	sp, r7
 800423a:	b006      	add	sp, #24
 800423c:	bd80      	pop	{r7, pc}
 800423e:	46c0      	nop			@ (mov r8, r8)
 8004240:	ffffefff 	.word	0xffffefff
 8004244:	ffff8fff 	.word	0xffff8fff
 8004248:	fffffcff 	.word	0xfffffcff
 800424c:	ffffdfff 	.word	0xffffdfff

08004250 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b086      	sub	sp, #24
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6a1b      	ldr	r3, [r3, #32]
 8004260:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	2201      	movs	r2, #1
 8004268:	4393      	bics	r3, r2
 800426a:	001a      	movs	r2, r3
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	699b      	ldr	r3, [r3, #24]
 8004274:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	22f0      	movs	r2, #240	@ 0xf0
 800427a:	4393      	bics	r3, r2
 800427c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	011b      	lsls	r3, r3, #4
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	4313      	orrs	r3, r2
 8004286:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	220a      	movs	r2, #10
 800428c:	4393      	bics	r3, r2
 800428e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004290:	697a      	ldr	r2, [r7, #20]
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	4313      	orrs	r3, r2
 8004296:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	693a      	ldr	r2, [r7, #16]
 800429c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	697a      	ldr	r2, [r7, #20]
 80042a2:	621a      	str	r2, [r3, #32]
}
 80042a4:	46c0      	nop			@ (mov r8, r8)
 80042a6:	46bd      	mov	sp, r7
 80042a8:	b006      	add	sp, #24
 80042aa:	bd80      	pop	{r7, pc}

080042ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b086      	sub	sp, #24
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6a1b      	ldr	r3, [r3, #32]
 80042bc:	2210      	movs	r2, #16
 80042be:	4393      	bics	r3, r2
 80042c0:	001a      	movs	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6a1b      	ldr	r3, [r3, #32]
 80042d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	4a0d      	ldr	r2, [pc, #52]	@ (800430c <TIM_TI2_ConfigInputStage+0x60>)
 80042d6:	4013      	ands	r3, r2
 80042d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	031b      	lsls	r3, r3, #12
 80042de:	697a      	ldr	r2, [r7, #20]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	22a0      	movs	r2, #160	@ 0xa0
 80042e8:	4393      	bics	r3, r2
 80042ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	011b      	lsls	r3, r3, #4
 80042f0:	693a      	ldr	r2, [r7, #16]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	697a      	ldr	r2, [r7, #20]
 80042fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	693a      	ldr	r2, [r7, #16]
 8004300:	621a      	str	r2, [r3, #32]
}
 8004302:	46c0      	nop			@ (mov r8, r8)
 8004304:	46bd      	mov	sp, r7
 8004306:	b006      	add	sp, #24
 8004308:	bd80      	pop	{r7, pc}
 800430a:	46c0      	nop			@ (mov r8, r8)
 800430c:	ffff0fff 	.word	0xffff0fff

08004310 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2270      	movs	r2, #112	@ 0x70
 8004324:	4393      	bics	r3, r2
 8004326:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004328:	683a      	ldr	r2, [r7, #0]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	4313      	orrs	r3, r2
 800432e:	2207      	movs	r2, #7
 8004330:	4313      	orrs	r3, r2
 8004332:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	609a      	str	r2, [r3, #8]
}
 800433a:	46c0      	nop			@ (mov r8, r8)
 800433c:	46bd      	mov	sp, r7
 800433e:	b004      	add	sp, #16
 8004340:	bd80      	pop	{r7, pc}
	...

08004344 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b086      	sub	sp, #24
 8004348:	af00      	add	r7, sp, #0
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	607a      	str	r2, [r7, #4]
 8004350:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	4a09      	ldr	r2, [pc, #36]	@ (8004380 <TIM_ETR_SetConfig+0x3c>)
 800435c:	4013      	ands	r3, r2
 800435e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	021a      	lsls	r2, r3, #8
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	431a      	orrs	r2, r3
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	4313      	orrs	r3, r2
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	4313      	orrs	r3, r2
 8004370:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	697a      	ldr	r2, [r7, #20]
 8004376:	609a      	str	r2, [r3, #8]
}
 8004378:	46c0      	nop			@ (mov r8, r8)
 800437a:	46bd      	mov	sp, r7
 800437c:	b006      	add	sp, #24
 800437e:	bd80      	pop	{r7, pc}
 8004380:	ffff00ff 	.word	0xffff00ff

08004384 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2238      	movs	r2, #56	@ 0x38
 8004392:	5c9b      	ldrb	r3, [r3, r2]
 8004394:	2b01      	cmp	r3, #1
 8004396:	d101      	bne.n	800439c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004398:	2302      	movs	r3, #2
 800439a:	e042      	b.n	8004422 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2238      	movs	r2, #56	@ 0x38
 80043a0:	2101      	movs	r1, #1
 80043a2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2239      	movs	r2, #57	@ 0x39
 80043a8:	2102      	movs	r1, #2
 80043aa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2270      	movs	r2, #112	@ 0x70
 80043c0:	4393      	bics	r3, r2
 80043c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	2380      	movs	r3, #128	@ 0x80
 80043dc:	05db      	lsls	r3, r3, #23
 80043de:	429a      	cmp	r2, r3
 80043e0:	d009      	beq.n	80043f6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a11      	ldr	r2, [pc, #68]	@ (800442c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d004      	beq.n	80043f6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a0f      	ldr	r2, [pc, #60]	@ (8004430 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d10c      	bne.n	8004410 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	2280      	movs	r2, #128	@ 0x80
 80043fa:	4393      	bics	r3, r2
 80043fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	68ba      	ldr	r2, [r7, #8]
 8004404:	4313      	orrs	r3, r2
 8004406:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68ba      	ldr	r2, [r7, #8]
 800440e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2239      	movs	r2, #57	@ 0x39
 8004414:	2101      	movs	r1, #1
 8004416:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2238      	movs	r2, #56	@ 0x38
 800441c:	2100      	movs	r1, #0
 800441e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	0018      	movs	r0, r3
 8004424:	46bd      	mov	sp, r7
 8004426:	b004      	add	sp, #16
 8004428:	bd80      	pop	{r7, pc}
 800442a:	46c0      	nop			@ (mov r8, r8)
 800442c:	40010800 	.word	0x40010800
 8004430:	40011400 	.word	0x40011400

08004434 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d101      	bne.n	8004446 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e044      	b.n	80044d0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800444a:	2b00      	cmp	r3, #0
 800444c:	d107      	bne.n	800445e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2278      	movs	r2, #120	@ 0x78
 8004452:	2100      	movs	r1, #0
 8004454:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	0018      	movs	r0, r3
 800445a:	f7fd f9b5 	bl	80017c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2224      	movs	r2, #36	@ 0x24
 8004462:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2101      	movs	r1, #1
 8004470:	438a      	bics	r2, r1
 8004472:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	0018      	movs	r0, r3
 8004478:	f000 f8d0 	bl	800461c <UART_SetConfig>
 800447c:	0003      	movs	r3, r0
 800447e:	2b01      	cmp	r3, #1
 8004480:	d101      	bne.n	8004486 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e024      	b.n	80044d0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800448a:	2b00      	cmp	r3, #0
 800448c:	d003      	beq.n	8004496 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	0018      	movs	r0, r3
 8004492:	f000 fb47 	bl	8004b24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	685a      	ldr	r2, [r3, #4]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	490d      	ldr	r1, [pc, #52]	@ (80044d8 <HAL_UART_Init+0xa4>)
 80044a2:	400a      	ands	r2, r1
 80044a4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	689a      	ldr	r2, [r3, #8]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	212a      	movs	r1, #42	@ 0x2a
 80044b2:	438a      	bics	r2, r1
 80044b4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2101      	movs	r1, #1
 80044c2:	430a      	orrs	r2, r1
 80044c4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	0018      	movs	r0, r3
 80044ca:	f000 fbdf 	bl	8004c8c <UART_CheckIdleState>
 80044ce:	0003      	movs	r3, r0
}
 80044d0:	0018      	movs	r0, r3
 80044d2:	46bd      	mov	sp, r7
 80044d4:	b002      	add	sp, #8
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	ffffb7ff 	.word	0xffffb7ff

080044dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b08a      	sub	sp, #40	@ 0x28
 80044e0:	af02      	add	r7, sp, #8
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	603b      	str	r3, [r7, #0]
 80044e8:	1dbb      	adds	r3, r7, #6
 80044ea:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044f0:	2b20      	cmp	r3, #32
 80044f2:	d000      	beq.n	80044f6 <HAL_UART_Transmit+0x1a>
 80044f4:	e08c      	b.n	8004610 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d003      	beq.n	8004504 <HAL_UART_Transmit+0x28>
 80044fc:	1dbb      	adds	r3, r7, #6
 80044fe:	881b      	ldrh	r3, [r3, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d101      	bne.n	8004508 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e084      	b.n	8004612 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	689a      	ldr	r2, [r3, #8]
 800450c:	2380      	movs	r3, #128	@ 0x80
 800450e:	015b      	lsls	r3, r3, #5
 8004510:	429a      	cmp	r2, r3
 8004512:	d109      	bne.n	8004528 <HAL_UART_Transmit+0x4c>
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d105      	bne.n	8004528 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	2201      	movs	r2, #1
 8004520:	4013      	ands	r3, r2
 8004522:	d001      	beq.n	8004528 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e074      	b.n	8004612 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2284      	movs	r2, #132	@ 0x84
 800452c:	2100      	movs	r1, #0
 800452e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2221      	movs	r2, #33	@ 0x21
 8004534:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004536:	f7fd faf1 	bl	8001b1c <HAL_GetTick>
 800453a:	0003      	movs	r3, r0
 800453c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	1dba      	adds	r2, r7, #6
 8004542:	2150      	movs	r1, #80	@ 0x50
 8004544:	8812      	ldrh	r2, [r2, #0]
 8004546:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	1dba      	adds	r2, r7, #6
 800454c:	2152      	movs	r1, #82	@ 0x52
 800454e:	8812      	ldrh	r2, [r2, #0]
 8004550:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	689a      	ldr	r2, [r3, #8]
 8004556:	2380      	movs	r3, #128	@ 0x80
 8004558:	015b      	lsls	r3, r3, #5
 800455a:	429a      	cmp	r2, r3
 800455c:	d108      	bne.n	8004570 <HAL_UART_Transmit+0x94>
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d104      	bne.n	8004570 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8004566:	2300      	movs	r3, #0
 8004568:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	61bb      	str	r3, [r7, #24]
 800456e:	e003      	b.n	8004578 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004574:	2300      	movs	r3, #0
 8004576:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004578:	e02f      	b.n	80045da <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800457a:	697a      	ldr	r2, [r7, #20]
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	9300      	str	r3, [sp, #0]
 8004582:	0013      	movs	r3, r2
 8004584:	2200      	movs	r2, #0
 8004586:	2180      	movs	r1, #128	@ 0x80
 8004588:	f000 fc28 	bl	8004ddc <UART_WaitOnFlagUntilTimeout>
 800458c:	1e03      	subs	r3, r0, #0
 800458e:	d004      	beq.n	800459a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2220      	movs	r2, #32
 8004594:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e03b      	b.n	8004612 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d10b      	bne.n	80045b8 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	881b      	ldrh	r3, [r3, #0]
 80045a4:	001a      	movs	r2, r3
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	05d2      	lsls	r2, r2, #23
 80045ac:	0dd2      	lsrs	r2, r2, #23
 80045ae:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	3302      	adds	r3, #2
 80045b4:	61bb      	str	r3, [r7, #24]
 80045b6:	e007      	b.n	80045c8 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	781a      	ldrb	r2, [r3, #0]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	3301      	adds	r3, #1
 80045c6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2252      	movs	r2, #82	@ 0x52
 80045cc:	5a9b      	ldrh	r3, [r3, r2]
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	3b01      	subs	r3, #1
 80045d2:	b299      	uxth	r1, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2252      	movs	r2, #82	@ 0x52
 80045d8:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2252      	movs	r2, #82	@ 0x52
 80045de:	5a9b      	ldrh	r3, [r3, r2]
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1c9      	bne.n	800457a <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	9300      	str	r3, [sp, #0]
 80045ee:	0013      	movs	r3, r2
 80045f0:	2200      	movs	r2, #0
 80045f2:	2140      	movs	r1, #64	@ 0x40
 80045f4:	f000 fbf2 	bl	8004ddc <UART_WaitOnFlagUntilTimeout>
 80045f8:	1e03      	subs	r3, r0, #0
 80045fa:	d004      	beq.n	8004606 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2220      	movs	r2, #32
 8004600:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e005      	b.n	8004612 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2220      	movs	r2, #32
 800460a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800460c:	2300      	movs	r3, #0
 800460e:	e000      	b.n	8004612 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8004610:	2302      	movs	r3, #2
  }
}
 8004612:	0018      	movs	r0, r3
 8004614:	46bd      	mov	sp, r7
 8004616:	b008      	add	sp, #32
 8004618:	bd80      	pop	{r7, pc}
	...

0800461c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800461c:	b5b0      	push	{r4, r5, r7, lr}
 800461e:	b08e      	sub	sp, #56	@ 0x38
 8004620:	af00      	add	r7, sp, #0
 8004622:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004624:	231a      	movs	r3, #26
 8004626:	2218      	movs	r2, #24
 8004628:	189b      	adds	r3, r3, r2
 800462a:	19db      	adds	r3, r3, r7
 800462c:	2200      	movs	r2, #0
 800462e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	689a      	ldr	r2, [r3, #8]
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	431a      	orrs	r2, r3
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	431a      	orrs	r2, r3
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	69db      	ldr	r3, [r3, #28]
 8004644:	4313      	orrs	r3, r2
 8004646:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4ac6      	ldr	r2, [pc, #792]	@ (8004968 <UART_SetConfig+0x34c>)
 8004650:	4013      	ands	r3, r2
 8004652:	0019      	movs	r1, r3
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800465a:	430a      	orrs	r2, r1
 800465c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	4ac1      	ldr	r2, [pc, #772]	@ (800496c <UART_SetConfig+0x350>)
 8004666:	4013      	ands	r3, r2
 8004668:	0019      	movs	r1, r3
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	68da      	ldr	r2, [r3, #12]
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	430a      	orrs	r2, r1
 8004674:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4abb      	ldr	r2, [pc, #748]	@ (8004970 <UART_SetConfig+0x354>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d004      	beq.n	8004690 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800468c:	4313      	orrs	r3, r2
 800468e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	4ab7      	ldr	r2, [pc, #732]	@ (8004974 <UART_SetConfig+0x358>)
 8004698:	4013      	ands	r3, r2
 800469a:	0019      	movs	r1, r3
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80046a2:	430a      	orrs	r2, r1
 80046a4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4ab3      	ldr	r2, [pc, #716]	@ (8004978 <UART_SetConfig+0x35c>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d131      	bne.n	8004714 <UART_SetConfig+0xf8>
 80046b0:	4bb2      	ldr	r3, [pc, #712]	@ (800497c <UART_SetConfig+0x360>)
 80046b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046b4:	2203      	movs	r2, #3
 80046b6:	4013      	ands	r3, r2
 80046b8:	2b03      	cmp	r3, #3
 80046ba:	d01d      	beq.n	80046f8 <UART_SetConfig+0xdc>
 80046bc:	d823      	bhi.n	8004706 <UART_SetConfig+0xea>
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d00c      	beq.n	80046dc <UART_SetConfig+0xc0>
 80046c2:	d820      	bhi.n	8004706 <UART_SetConfig+0xea>
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d002      	beq.n	80046ce <UART_SetConfig+0xb2>
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d00e      	beq.n	80046ea <UART_SetConfig+0xce>
 80046cc:	e01b      	b.n	8004706 <UART_SetConfig+0xea>
 80046ce:	231b      	movs	r3, #27
 80046d0:	2218      	movs	r2, #24
 80046d2:	189b      	adds	r3, r3, r2
 80046d4:	19db      	adds	r3, r3, r7
 80046d6:	2201      	movs	r2, #1
 80046d8:	701a      	strb	r2, [r3, #0]
 80046da:	e09c      	b.n	8004816 <UART_SetConfig+0x1fa>
 80046dc:	231b      	movs	r3, #27
 80046de:	2218      	movs	r2, #24
 80046e0:	189b      	adds	r3, r3, r2
 80046e2:	19db      	adds	r3, r3, r7
 80046e4:	2202      	movs	r2, #2
 80046e6:	701a      	strb	r2, [r3, #0]
 80046e8:	e095      	b.n	8004816 <UART_SetConfig+0x1fa>
 80046ea:	231b      	movs	r3, #27
 80046ec:	2218      	movs	r2, #24
 80046ee:	189b      	adds	r3, r3, r2
 80046f0:	19db      	adds	r3, r3, r7
 80046f2:	2204      	movs	r2, #4
 80046f4:	701a      	strb	r2, [r3, #0]
 80046f6:	e08e      	b.n	8004816 <UART_SetConfig+0x1fa>
 80046f8:	231b      	movs	r3, #27
 80046fa:	2218      	movs	r2, #24
 80046fc:	189b      	adds	r3, r3, r2
 80046fe:	19db      	adds	r3, r3, r7
 8004700:	2208      	movs	r2, #8
 8004702:	701a      	strb	r2, [r3, #0]
 8004704:	e087      	b.n	8004816 <UART_SetConfig+0x1fa>
 8004706:	231b      	movs	r3, #27
 8004708:	2218      	movs	r2, #24
 800470a:	189b      	adds	r3, r3, r2
 800470c:	19db      	adds	r3, r3, r7
 800470e:	2210      	movs	r2, #16
 8004710:	701a      	strb	r2, [r3, #0]
 8004712:	e080      	b.n	8004816 <UART_SetConfig+0x1fa>
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a99      	ldr	r2, [pc, #612]	@ (8004980 <UART_SetConfig+0x364>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d131      	bne.n	8004782 <UART_SetConfig+0x166>
 800471e:	4b97      	ldr	r3, [pc, #604]	@ (800497c <UART_SetConfig+0x360>)
 8004720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004722:	220c      	movs	r2, #12
 8004724:	4013      	ands	r3, r2
 8004726:	2b0c      	cmp	r3, #12
 8004728:	d01d      	beq.n	8004766 <UART_SetConfig+0x14a>
 800472a:	d823      	bhi.n	8004774 <UART_SetConfig+0x158>
 800472c:	2b08      	cmp	r3, #8
 800472e:	d00c      	beq.n	800474a <UART_SetConfig+0x12e>
 8004730:	d820      	bhi.n	8004774 <UART_SetConfig+0x158>
 8004732:	2b00      	cmp	r3, #0
 8004734:	d002      	beq.n	800473c <UART_SetConfig+0x120>
 8004736:	2b04      	cmp	r3, #4
 8004738:	d00e      	beq.n	8004758 <UART_SetConfig+0x13c>
 800473a:	e01b      	b.n	8004774 <UART_SetConfig+0x158>
 800473c:	231b      	movs	r3, #27
 800473e:	2218      	movs	r2, #24
 8004740:	189b      	adds	r3, r3, r2
 8004742:	19db      	adds	r3, r3, r7
 8004744:	2200      	movs	r2, #0
 8004746:	701a      	strb	r2, [r3, #0]
 8004748:	e065      	b.n	8004816 <UART_SetConfig+0x1fa>
 800474a:	231b      	movs	r3, #27
 800474c:	2218      	movs	r2, #24
 800474e:	189b      	adds	r3, r3, r2
 8004750:	19db      	adds	r3, r3, r7
 8004752:	2202      	movs	r2, #2
 8004754:	701a      	strb	r2, [r3, #0]
 8004756:	e05e      	b.n	8004816 <UART_SetConfig+0x1fa>
 8004758:	231b      	movs	r3, #27
 800475a:	2218      	movs	r2, #24
 800475c:	189b      	adds	r3, r3, r2
 800475e:	19db      	adds	r3, r3, r7
 8004760:	2204      	movs	r2, #4
 8004762:	701a      	strb	r2, [r3, #0]
 8004764:	e057      	b.n	8004816 <UART_SetConfig+0x1fa>
 8004766:	231b      	movs	r3, #27
 8004768:	2218      	movs	r2, #24
 800476a:	189b      	adds	r3, r3, r2
 800476c:	19db      	adds	r3, r3, r7
 800476e:	2208      	movs	r2, #8
 8004770:	701a      	strb	r2, [r3, #0]
 8004772:	e050      	b.n	8004816 <UART_SetConfig+0x1fa>
 8004774:	231b      	movs	r3, #27
 8004776:	2218      	movs	r2, #24
 8004778:	189b      	adds	r3, r3, r2
 800477a:	19db      	adds	r3, r3, r7
 800477c:	2210      	movs	r2, #16
 800477e:	701a      	strb	r2, [r3, #0]
 8004780:	e049      	b.n	8004816 <UART_SetConfig+0x1fa>
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a7a      	ldr	r2, [pc, #488]	@ (8004970 <UART_SetConfig+0x354>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d13e      	bne.n	800480a <UART_SetConfig+0x1ee>
 800478c:	4b7b      	ldr	r3, [pc, #492]	@ (800497c <UART_SetConfig+0x360>)
 800478e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004790:	23c0      	movs	r3, #192	@ 0xc0
 8004792:	011b      	lsls	r3, r3, #4
 8004794:	4013      	ands	r3, r2
 8004796:	22c0      	movs	r2, #192	@ 0xc0
 8004798:	0112      	lsls	r2, r2, #4
 800479a:	4293      	cmp	r3, r2
 800479c:	d027      	beq.n	80047ee <UART_SetConfig+0x1d2>
 800479e:	22c0      	movs	r2, #192	@ 0xc0
 80047a0:	0112      	lsls	r2, r2, #4
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d82a      	bhi.n	80047fc <UART_SetConfig+0x1e0>
 80047a6:	2280      	movs	r2, #128	@ 0x80
 80047a8:	0112      	lsls	r2, r2, #4
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d011      	beq.n	80047d2 <UART_SetConfig+0x1b6>
 80047ae:	2280      	movs	r2, #128	@ 0x80
 80047b0:	0112      	lsls	r2, r2, #4
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d822      	bhi.n	80047fc <UART_SetConfig+0x1e0>
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d004      	beq.n	80047c4 <UART_SetConfig+0x1a8>
 80047ba:	2280      	movs	r2, #128	@ 0x80
 80047bc:	00d2      	lsls	r2, r2, #3
 80047be:	4293      	cmp	r3, r2
 80047c0:	d00e      	beq.n	80047e0 <UART_SetConfig+0x1c4>
 80047c2:	e01b      	b.n	80047fc <UART_SetConfig+0x1e0>
 80047c4:	231b      	movs	r3, #27
 80047c6:	2218      	movs	r2, #24
 80047c8:	189b      	adds	r3, r3, r2
 80047ca:	19db      	adds	r3, r3, r7
 80047cc:	2200      	movs	r2, #0
 80047ce:	701a      	strb	r2, [r3, #0]
 80047d0:	e021      	b.n	8004816 <UART_SetConfig+0x1fa>
 80047d2:	231b      	movs	r3, #27
 80047d4:	2218      	movs	r2, #24
 80047d6:	189b      	adds	r3, r3, r2
 80047d8:	19db      	adds	r3, r3, r7
 80047da:	2202      	movs	r2, #2
 80047dc:	701a      	strb	r2, [r3, #0]
 80047de:	e01a      	b.n	8004816 <UART_SetConfig+0x1fa>
 80047e0:	231b      	movs	r3, #27
 80047e2:	2218      	movs	r2, #24
 80047e4:	189b      	adds	r3, r3, r2
 80047e6:	19db      	adds	r3, r3, r7
 80047e8:	2204      	movs	r2, #4
 80047ea:	701a      	strb	r2, [r3, #0]
 80047ec:	e013      	b.n	8004816 <UART_SetConfig+0x1fa>
 80047ee:	231b      	movs	r3, #27
 80047f0:	2218      	movs	r2, #24
 80047f2:	189b      	adds	r3, r3, r2
 80047f4:	19db      	adds	r3, r3, r7
 80047f6:	2208      	movs	r2, #8
 80047f8:	701a      	strb	r2, [r3, #0]
 80047fa:	e00c      	b.n	8004816 <UART_SetConfig+0x1fa>
 80047fc:	231b      	movs	r3, #27
 80047fe:	2218      	movs	r2, #24
 8004800:	189b      	adds	r3, r3, r2
 8004802:	19db      	adds	r3, r3, r7
 8004804:	2210      	movs	r2, #16
 8004806:	701a      	strb	r2, [r3, #0]
 8004808:	e005      	b.n	8004816 <UART_SetConfig+0x1fa>
 800480a:	231b      	movs	r3, #27
 800480c:	2218      	movs	r2, #24
 800480e:	189b      	adds	r3, r3, r2
 8004810:	19db      	adds	r3, r3, r7
 8004812:	2210      	movs	r2, #16
 8004814:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a55      	ldr	r2, [pc, #340]	@ (8004970 <UART_SetConfig+0x354>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d000      	beq.n	8004822 <UART_SetConfig+0x206>
 8004820:	e084      	b.n	800492c <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004822:	231b      	movs	r3, #27
 8004824:	2218      	movs	r2, #24
 8004826:	189b      	adds	r3, r3, r2
 8004828:	19db      	adds	r3, r3, r7
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	2b08      	cmp	r3, #8
 800482e:	d01d      	beq.n	800486c <UART_SetConfig+0x250>
 8004830:	dc20      	bgt.n	8004874 <UART_SetConfig+0x258>
 8004832:	2b04      	cmp	r3, #4
 8004834:	d015      	beq.n	8004862 <UART_SetConfig+0x246>
 8004836:	dc1d      	bgt.n	8004874 <UART_SetConfig+0x258>
 8004838:	2b00      	cmp	r3, #0
 800483a:	d002      	beq.n	8004842 <UART_SetConfig+0x226>
 800483c:	2b02      	cmp	r3, #2
 800483e:	d005      	beq.n	800484c <UART_SetConfig+0x230>
 8004840:	e018      	b.n	8004874 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004842:	f7fe ff7f 	bl	8003744 <HAL_RCC_GetPCLK1Freq>
 8004846:	0003      	movs	r3, r0
 8004848:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800484a:	e01c      	b.n	8004886 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800484c:	4b4b      	ldr	r3, [pc, #300]	@ (800497c <UART_SetConfig+0x360>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2210      	movs	r2, #16
 8004852:	4013      	ands	r3, r2
 8004854:	d002      	beq.n	800485c <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004856:	4b4b      	ldr	r3, [pc, #300]	@ (8004984 <UART_SetConfig+0x368>)
 8004858:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800485a:	e014      	b.n	8004886 <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 800485c:	4b4a      	ldr	r3, [pc, #296]	@ (8004988 <UART_SetConfig+0x36c>)
 800485e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004860:	e011      	b.n	8004886 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004862:	f7fe febf 	bl	80035e4 <HAL_RCC_GetSysClockFreq>
 8004866:	0003      	movs	r3, r0
 8004868:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800486a:	e00c      	b.n	8004886 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800486c:	2380      	movs	r3, #128	@ 0x80
 800486e:	021b      	lsls	r3, r3, #8
 8004870:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004872:	e008      	b.n	8004886 <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8004874:	2300      	movs	r3, #0
 8004876:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8004878:	231a      	movs	r3, #26
 800487a:	2218      	movs	r2, #24
 800487c:	189b      	adds	r3, r3, r2
 800487e:	19db      	adds	r3, r3, r7
 8004880:	2201      	movs	r2, #1
 8004882:	701a      	strb	r2, [r3, #0]
        break;
 8004884:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004888:	2b00      	cmp	r3, #0
 800488a:	d100      	bne.n	800488e <UART_SetConfig+0x272>
 800488c:	e132      	b.n	8004af4 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	685a      	ldr	r2, [r3, #4]
 8004892:	0013      	movs	r3, r2
 8004894:	005b      	lsls	r3, r3, #1
 8004896:	189b      	adds	r3, r3, r2
 8004898:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800489a:	429a      	cmp	r2, r3
 800489c:	d305      	bcc.n	80048aa <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80048a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d906      	bls.n	80048b8 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 80048aa:	231a      	movs	r3, #26
 80048ac:	2218      	movs	r2, #24
 80048ae:	189b      	adds	r3, r3, r2
 80048b0:	19db      	adds	r3, r3, r7
 80048b2:	2201      	movs	r2, #1
 80048b4:	701a      	strb	r2, [r3, #0]
 80048b6:	e11d      	b.n	8004af4 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80048b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048ba:	613b      	str	r3, [r7, #16]
 80048bc:	2300      	movs	r3, #0
 80048be:	617b      	str	r3, [r7, #20]
 80048c0:	6939      	ldr	r1, [r7, #16]
 80048c2:	697a      	ldr	r2, [r7, #20]
 80048c4:	000b      	movs	r3, r1
 80048c6:	0e1b      	lsrs	r3, r3, #24
 80048c8:	0010      	movs	r0, r2
 80048ca:	0205      	lsls	r5, r0, #8
 80048cc:	431d      	orrs	r5, r3
 80048ce:	000b      	movs	r3, r1
 80048d0:	021c      	lsls	r4, r3, #8
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	085b      	lsrs	r3, r3, #1
 80048d8:	60bb      	str	r3, [r7, #8]
 80048da:	2300      	movs	r3, #0
 80048dc:	60fb      	str	r3, [r7, #12]
 80048de:	68b8      	ldr	r0, [r7, #8]
 80048e0:	68f9      	ldr	r1, [r7, #12]
 80048e2:	1900      	adds	r0, r0, r4
 80048e4:	4169      	adcs	r1, r5
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	603b      	str	r3, [r7, #0]
 80048ec:	2300      	movs	r3, #0
 80048ee:	607b      	str	r3, [r7, #4]
 80048f0:	683a      	ldr	r2, [r7, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f7fb fc9e 	bl	8000234 <__aeabi_uldivmod>
 80048f8:	0002      	movs	r2, r0
 80048fa:	000b      	movs	r3, r1
 80048fc:	0013      	movs	r3, r2
 80048fe:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004900:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004902:	23c0      	movs	r3, #192	@ 0xc0
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	429a      	cmp	r2, r3
 8004908:	d309      	bcc.n	800491e <UART_SetConfig+0x302>
 800490a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800490c:	2380      	movs	r3, #128	@ 0x80
 800490e:	035b      	lsls	r3, r3, #13
 8004910:	429a      	cmp	r2, r3
 8004912:	d204      	bcs.n	800491e <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800491a:	60da      	str	r2, [r3, #12]
 800491c:	e0ea      	b.n	8004af4 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 800491e:	231a      	movs	r3, #26
 8004920:	2218      	movs	r2, #24
 8004922:	189b      	adds	r3, r3, r2
 8004924:	19db      	adds	r3, r3, r7
 8004926:	2201      	movs	r2, #1
 8004928:	701a      	strb	r2, [r3, #0]
 800492a:	e0e3      	b.n	8004af4 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	69da      	ldr	r2, [r3, #28]
 8004930:	2380      	movs	r3, #128	@ 0x80
 8004932:	021b      	lsls	r3, r3, #8
 8004934:	429a      	cmp	r2, r3
 8004936:	d000      	beq.n	800493a <UART_SetConfig+0x31e>
 8004938:	e085      	b.n	8004a46 <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 800493a:	231b      	movs	r3, #27
 800493c:	2218      	movs	r2, #24
 800493e:	189b      	adds	r3, r3, r2
 8004940:	19db      	adds	r3, r3, r7
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	2b08      	cmp	r3, #8
 8004946:	d837      	bhi.n	80049b8 <UART_SetConfig+0x39c>
 8004948:	009a      	lsls	r2, r3, #2
 800494a:	4b10      	ldr	r3, [pc, #64]	@ (800498c <UART_SetConfig+0x370>)
 800494c:	18d3      	adds	r3, r2, r3
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004952:	f7fe fef7 	bl	8003744 <HAL_RCC_GetPCLK1Freq>
 8004956:	0003      	movs	r3, r0
 8004958:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800495a:	e036      	b.n	80049ca <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800495c:	f7fe ff08 	bl	8003770 <HAL_RCC_GetPCLK2Freq>
 8004960:	0003      	movs	r3, r0
 8004962:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004964:	e031      	b.n	80049ca <UART_SetConfig+0x3ae>
 8004966:	46c0      	nop			@ (mov r8, r8)
 8004968:	efff69f3 	.word	0xefff69f3
 800496c:	ffffcfff 	.word	0xffffcfff
 8004970:	40004800 	.word	0x40004800
 8004974:	fffff4ff 	.word	0xfffff4ff
 8004978:	40013800 	.word	0x40013800
 800497c:	40021000 	.word	0x40021000
 8004980:	40004400 	.word	0x40004400
 8004984:	003d0900 	.word	0x003d0900
 8004988:	00f42400 	.word	0x00f42400
 800498c:	08005fdc 	.word	0x08005fdc
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004990:	4b60      	ldr	r3, [pc, #384]	@ (8004b14 <UART_SetConfig+0x4f8>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2210      	movs	r2, #16
 8004996:	4013      	ands	r3, r2
 8004998:	d002      	beq.n	80049a0 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800499a:	4b5f      	ldr	r3, [pc, #380]	@ (8004b18 <UART_SetConfig+0x4fc>)
 800499c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800499e:	e014      	b.n	80049ca <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 80049a0:	4b5e      	ldr	r3, [pc, #376]	@ (8004b1c <UART_SetConfig+0x500>)
 80049a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80049a4:	e011      	b.n	80049ca <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049a6:	f7fe fe1d 	bl	80035e4 <HAL_RCC_GetSysClockFreq>
 80049aa:	0003      	movs	r3, r0
 80049ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80049ae:	e00c      	b.n	80049ca <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049b0:	2380      	movs	r3, #128	@ 0x80
 80049b2:	021b      	lsls	r3, r3, #8
 80049b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80049b6:	e008      	b.n	80049ca <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 80049b8:	2300      	movs	r3, #0
 80049ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80049bc:	231a      	movs	r3, #26
 80049be:	2218      	movs	r2, #24
 80049c0:	189b      	adds	r3, r3, r2
 80049c2:	19db      	adds	r3, r3, r7
 80049c4:	2201      	movs	r2, #1
 80049c6:	701a      	strb	r2, [r3, #0]
        break;
 80049c8:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80049ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d100      	bne.n	80049d2 <UART_SetConfig+0x3b6>
 80049d0:	e090      	b.n	8004af4 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80049d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049d4:	005a      	lsls	r2, r3, #1
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	085b      	lsrs	r3, r3, #1
 80049dc:	18d2      	adds	r2, r2, r3
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	0019      	movs	r1, r3
 80049e4:	0010      	movs	r0, r2
 80049e6:	f7fb fb99 	bl	800011c <__udivsi3>
 80049ea:	0003      	movs	r3, r0
 80049ec:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049f0:	2b0f      	cmp	r3, #15
 80049f2:	d921      	bls.n	8004a38 <UART_SetConfig+0x41c>
 80049f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80049f6:	2380      	movs	r3, #128	@ 0x80
 80049f8:	025b      	lsls	r3, r3, #9
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d21c      	bcs.n	8004a38 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80049fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a00:	b29a      	uxth	r2, r3
 8004a02:	200e      	movs	r0, #14
 8004a04:	2418      	movs	r4, #24
 8004a06:	1903      	adds	r3, r0, r4
 8004a08:	19db      	adds	r3, r3, r7
 8004a0a:	210f      	movs	r1, #15
 8004a0c:	438a      	bics	r2, r1
 8004a0e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a12:	085b      	lsrs	r3, r3, #1
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	2207      	movs	r2, #7
 8004a18:	4013      	ands	r3, r2
 8004a1a:	b299      	uxth	r1, r3
 8004a1c:	1903      	adds	r3, r0, r4
 8004a1e:	19db      	adds	r3, r3, r7
 8004a20:	1902      	adds	r2, r0, r4
 8004a22:	19d2      	adds	r2, r2, r7
 8004a24:	8812      	ldrh	r2, [r2, #0]
 8004a26:	430a      	orrs	r2, r1
 8004a28:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	1902      	adds	r2, r0, r4
 8004a30:	19d2      	adds	r2, r2, r7
 8004a32:	8812      	ldrh	r2, [r2, #0]
 8004a34:	60da      	str	r2, [r3, #12]
 8004a36:	e05d      	b.n	8004af4 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8004a38:	231a      	movs	r3, #26
 8004a3a:	2218      	movs	r2, #24
 8004a3c:	189b      	adds	r3, r3, r2
 8004a3e:	19db      	adds	r3, r3, r7
 8004a40:	2201      	movs	r2, #1
 8004a42:	701a      	strb	r2, [r3, #0]
 8004a44:	e056      	b.n	8004af4 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a46:	231b      	movs	r3, #27
 8004a48:	2218      	movs	r2, #24
 8004a4a:	189b      	adds	r3, r3, r2
 8004a4c:	19db      	adds	r3, r3, r7
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	2b08      	cmp	r3, #8
 8004a52:	d822      	bhi.n	8004a9a <UART_SetConfig+0x47e>
 8004a54:	009a      	lsls	r2, r3, #2
 8004a56:	4b32      	ldr	r3, [pc, #200]	@ (8004b20 <UART_SetConfig+0x504>)
 8004a58:	18d3      	adds	r3, r2, r3
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a5e:	f7fe fe71 	bl	8003744 <HAL_RCC_GetPCLK1Freq>
 8004a62:	0003      	movs	r3, r0
 8004a64:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004a66:	e021      	b.n	8004aac <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a68:	f7fe fe82 	bl	8003770 <HAL_RCC_GetPCLK2Freq>
 8004a6c:	0003      	movs	r3, r0
 8004a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004a70:	e01c      	b.n	8004aac <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a72:	4b28      	ldr	r3, [pc, #160]	@ (8004b14 <UART_SetConfig+0x4f8>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2210      	movs	r2, #16
 8004a78:	4013      	ands	r3, r2
 8004a7a:	d002      	beq.n	8004a82 <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004a7c:	4b26      	ldr	r3, [pc, #152]	@ (8004b18 <UART_SetConfig+0x4fc>)
 8004a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004a80:	e014      	b.n	8004aac <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8004a82:	4b26      	ldr	r3, [pc, #152]	@ (8004b1c <UART_SetConfig+0x500>)
 8004a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004a86:	e011      	b.n	8004aac <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a88:	f7fe fdac 	bl	80035e4 <HAL_RCC_GetSysClockFreq>
 8004a8c:	0003      	movs	r3, r0
 8004a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004a90:	e00c      	b.n	8004aac <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a92:	2380      	movs	r3, #128	@ 0x80
 8004a94:	021b      	lsls	r3, r3, #8
 8004a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004a98:	e008      	b.n	8004aac <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8004a9e:	231a      	movs	r3, #26
 8004aa0:	2218      	movs	r2, #24
 8004aa2:	189b      	adds	r3, r3, r2
 8004aa4:	19db      	adds	r3, r3, r7
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	701a      	strb	r2, [r3, #0]
        break;
 8004aaa:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004aac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d020      	beq.n	8004af4 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	085a      	lsrs	r2, r3, #1
 8004ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aba:	18d2      	adds	r2, r2, r3
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	0019      	movs	r1, r3
 8004ac2:	0010      	movs	r0, r2
 8004ac4:	f7fb fb2a 	bl	800011c <__udivsi3>
 8004ac8:	0003      	movs	r3, r0
 8004aca:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ace:	2b0f      	cmp	r3, #15
 8004ad0:	d90a      	bls.n	8004ae8 <UART_SetConfig+0x4cc>
 8004ad2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ad4:	2380      	movs	r3, #128	@ 0x80
 8004ad6:	025b      	lsls	r3, r3, #9
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d205      	bcs.n	8004ae8 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ade:	b29a      	uxth	r2, r3
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	60da      	str	r2, [r3, #12]
 8004ae6:	e005      	b.n	8004af4 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8004ae8:	231a      	movs	r3, #26
 8004aea:	2218      	movs	r2, #24
 8004aec:	189b      	adds	r3, r3, r2
 8004aee:	19db      	adds	r3, r3, r7
 8004af0:	2201      	movs	r2, #1
 8004af2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	2200      	movs	r2, #0
 8004af8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	2200      	movs	r2, #0
 8004afe:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004b00:	231a      	movs	r3, #26
 8004b02:	2218      	movs	r2, #24
 8004b04:	189b      	adds	r3, r3, r2
 8004b06:	19db      	adds	r3, r3, r7
 8004b08:	781b      	ldrb	r3, [r3, #0]
}
 8004b0a:	0018      	movs	r0, r3
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	b00e      	add	sp, #56	@ 0x38
 8004b10:	bdb0      	pop	{r4, r5, r7, pc}
 8004b12:	46c0      	nop			@ (mov r8, r8)
 8004b14:	40021000 	.word	0x40021000
 8004b18:	003d0900 	.word	0x003d0900
 8004b1c:	00f42400 	.word	0x00f42400
 8004b20:	08006000 	.word	0x08006000

08004b24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b30:	2201      	movs	r2, #1
 8004b32:	4013      	ands	r3, r2
 8004b34:	d00b      	beq.n	8004b4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	4a4a      	ldr	r2, [pc, #296]	@ (8004c68 <UART_AdvFeatureConfig+0x144>)
 8004b3e:	4013      	ands	r3, r2
 8004b40:	0019      	movs	r1, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b52:	2202      	movs	r2, #2
 8004b54:	4013      	ands	r3, r2
 8004b56:	d00b      	beq.n	8004b70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	4a43      	ldr	r2, [pc, #268]	@ (8004c6c <UART_AdvFeatureConfig+0x148>)
 8004b60:	4013      	ands	r3, r2
 8004b62:	0019      	movs	r1, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b74:	2204      	movs	r2, #4
 8004b76:	4013      	ands	r3, r2
 8004b78:	d00b      	beq.n	8004b92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	4a3b      	ldr	r2, [pc, #236]	@ (8004c70 <UART_AdvFeatureConfig+0x14c>)
 8004b82:	4013      	ands	r3, r2
 8004b84:	0019      	movs	r1, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b96:	2208      	movs	r2, #8
 8004b98:	4013      	ands	r3, r2
 8004b9a:	d00b      	beq.n	8004bb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	4a34      	ldr	r2, [pc, #208]	@ (8004c74 <UART_AdvFeatureConfig+0x150>)
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	0019      	movs	r1, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb8:	2210      	movs	r2, #16
 8004bba:	4013      	ands	r3, r2
 8004bbc:	d00b      	beq.n	8004bd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	4a2c      	ldr	r2, [pc, #176]	@ (8004c78 <UART_AdvFeatureConfig+0x154>)
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	0019      	movs	r1, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bda:	2220      	movs	r2, #32
 8004bdc:	4013      	ands	r3, r2
 8004bde:	d00b      	beq.n	8004bf8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	4a25      	ldr	r2, [pc, #148]	@ (8004c7c <UART_AdvFeatureConfig+0x158>)
 8004be8:	4013      	ands	r3, r2
 8004bea:	0019      	movs	r1, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	430a      	orrs	r2, r1
 8004bf6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bfc:	2240      	movs	r2, #64	@ 0x40
 8004bfe:	4013      	ands	r3, r2
 8004c00:	d01d      	beq.n	8004c3e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	4a1d      	ldr	r2, [pc, #116]	@ (8004c80 <UART_AdvFeatureConfig+0x15c>)
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	0019      	movs	r1, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	430a      	orrs	r2, r1
 8004c18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c1e:	2380      	movs	r3, #128	@ 0x80
 8004c20:	035b      	lsls	r3, r3, #13
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d10b      	bne.n	8004c3e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	4a15      	ldr	r2, [pc, #84]	@ (8004c84 <UART_AdvFeatureConfig+0x160>)
 8004c2e:	4013      	ands	r3, r2
 8004c30:	0019      	movs	r1, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c42:	2280      	movs	r2, #128	@ 0x80
 8004c44:	4013      	ands	r3, r2
 8004c46:	d00b      	beq.n	8004c60 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	4a0e      	ldr	r2, [pc, #56]	@ (8004c88 <UART_AdvFeatureConfig+0x164>)
 8004c50:	4013      	ands	r3, r2
 8004c52:	0019      	movs	r1, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	605a      	str	r2, [r3, #4]
  }
}
 8004c60:	46c0      	nop			@ (mov r8, r8)
 8004c62:	46bd      	mov	sp, r7
 8004c64:	b002      	add	sp, #8
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	fffdffff 	.word	0xfffdffff
 8004c6c:	fffeffff 	.word	0xfffeffff
 8004c70:	fffbffff 	.word	0xfffbffff
 8004c74:	ffff7fff 	.word	0xffff7fff
 8004c78:	ffffefff 	.word	0xffffefff
 8004c7c:	ffffdfff 	.word	0xffffdfff
 8004c80:	ffefffff 	.word	0xffefffff
 8004c84:	ff9fffff 	.word	0xff9fffff
 8004c88:	fff7ffff 	.word	0xfff7ffff

08004c8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b092      	sub	sp, #72	@ 0x48
 8004c90:	af02      	add	r7, sp, #8
 8004c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2284      	movs	r2, #132	@ 0x84
 8004c98:	2100      	movs	r1, #0
 8004c9a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c9c:	f7fc ff3e 	bl	8001b1c <HAL_GetTick>
 8004ca0:	0003      	movs	r3, r0
 8004ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2208      	movs	r2, #8
 8004cac:	4013      	ands	r3, r2
 8004cae:	2b08      	cmp	r3, #8
 8004cb0:	d12c      	bne.n	8004d0c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cb4:	2280      	movs	r2, #128	@ 0x80
 8004cb6:	0391      	lsls	r1, r2, #14
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	4a46      	ldr	r2, [pc, #280]	@ (8004dd4 <UART_CheckIdleState+0x148>)
 8004cbc:	9200      	str	r2, [sp, #0]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f000 f88c 	bl	8004ddc <UART_WaitOnFlagUntilTimeout>
 8004cc4:	1e03      	subs	r3, r0, #0
 8004cc6:	d021      	beq.n	8004d0c <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cc8:	f3ef 8310 	mrs	r3, PRIMASK
 8004ccc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004cd0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cd8:	f383 8810 	msr	PRIMASK, r3
}
 8004cdc:	46c0      	nop			@ (mov r8, r8)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2180      	movs	r1, #128	@ 0x80
 8004cea:	438a      	bics	r2, r1
 8004cec:	601a      	str	r2, [r3, #0]
 8004cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cf4:	f383 8810 	msr	PRIMASK, r3
}
 8004cf8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2220      	movs	r2, #32
 8004cfe:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2278      	movs	r2, #120	@ 0x78
 8004d04:	2100      	movs	r1, #0
 8004d06:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e05f      	b.n	8004dcc <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2204      	movs	r2, #4
 8004d14:	4013      	ands	r3, r2
 8004d16:	2b04      	cmp	r3, #4
 8004d18:	d146      	bne.n	8004da8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d1c:	2280      	movs	r2, #128	@ 0x80
 8004d1e:	03d1      	lsls	r1, r2, #15
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	4a2c      	ldr	r2, [pc, #176]	@ (8004dd4 <UART_CheckIdleState+0x148>)
 8004d24:	9200      	str	r2, [sp, #0]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f000 f858 	bl	8004ddc <UART_WaitOnFlagUntilTimeout>
 8004d2c:	1e03      	subs	r3, r0, #0
 8004d2e:	d03b      	beq.n	8004da8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d30:	f3ef 8310 	mrs	r3, PRIMASK
 8004d34:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d36:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d38:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	f383 8810 	msr	PRIMASK, r3
}
 8004d44:	46c0      	nop			@ (mov r8, r8)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4921      	ldr	r1, [pc, #132]	@ (8004dd8 <UART_CheckIdleState+0x14c>)
 8004d52:	400a      	ands	r2, r1
 8004d54:	601a      	str	r2, [r3, #0]
 8004d56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d58:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	f383 8810 	msr	PRIMASK, r3
}
 8004d60:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d62:	f3ef 8310 	mrs	r3, PRIMASK
 8004d66:	61bb      	str	r3, [r7, #24]
  return(result);
 8004d68:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d6a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	f383 8810 	msr	PRIMASK, r3
}
 8004d76:	46c0      	nop			@ (mov r8, r8)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	689a      	ldr	r2, [r3, #8]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	2101      	movs	r1, #1
 8004d84:	438a      	bics	r2, r1
 8004d86:	609a      	str	r2, [r3, #8]
 8004d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d8a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d8c:	6a3b      	ldr	r3, [r7, #32]
 8004d8e:	f383 8810 	msr	PRIMASK, r3
}
 8004d92:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2280      	movs	r2, #128	@ 0x80
 8004d98:	2120      	movs	r1, #32
 8004d9a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2278      	movs	r2, #120	@ 0x78
 8004da0:	2100      	movs	r1, #0
 8004da2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e011      	b.n	8004dcc <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2220      	movs	r2, #32
 8004dac:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2280      	movs	r2, #128	@ 0x80
 8004db2:	2120      	movs	r1, #32
 8004db4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2278      	movs	r2, #120	@ 0x78
 8004dc6:	2100      	movs	r1, #0
 8004dc8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	0018      	movs	r0, r3
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	b010      	add	sp, #64	@ 0x40
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	01ffffff 	.word	0x01ffffff
 8004dd8:	fffffedf 	.word	0xfffffedf

08004ddc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	603b      	str	r3, [r7, #0]
 8004de8:	1dfb      	adds	r3, r7, #7
 8004dea:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dec:	e04b      	b.n	8004e86 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	3301      	adds	r3, #1
 8004df2:	d048      	beq.n	8004e86 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004df4:	f7fc fe92 	bl	8001b1c <HAL_GetTick>
 8004df8:	0002      	movs	r2, r0
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	69ba      	ldr	r2, [r7, #24]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d302      	bcc.n	8004e0a <UART_WaitOnFlagUntilTimeout+0x2e>
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d101      	bne.n	8004e0e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e04b      	b.n	8004ea6 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2204      	movs	r2, #4
 8004e16:	4013      	ands	r3, r2
 8004e18:	d035      	beq.n	8004e86 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	69db      	ldr	r3, [r3, #28]
 8004e20:	2208      	movs	r2, #8
 8004e22:	4013      	ands	r3, r2
 8004e24:	2b08      	cmp	r3, #8
 8004e26:	d111      	bne.n	8004e4c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2208      	movs	r2, #8
 8004e2e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	0018      	movs	r0, r3
 8004e34:	f000 f83c 	bl	8004eb0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2284      	movs	r2, #132	@ 0x84
 8004e3c:	2108      	movs	r1, #8
 8004e3e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2278      	movs	r2, #120	@ 0x78
 8004e44:	2100      	movs	r1, #0
 8004e46:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e02c      	b.n	8004ea6 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	69da      	ldr	r2, [r3, #28]
 8004e52:	2380      	movs	r3, #128	@ 0x80
 8004e54:	011b      	lsls	r3, r3, #4
 8004e56:	401a      	ands	r2, r3
 8004e58:	2380      	movs	r3, #128	@ 0x80
 8004e5a:	011b      	lsls	r3, r3, #4
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d112      	bne.n	8004e86 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2280      	movs	r2, #128	@ 0x80
 8004e66:	0112      	lsls	r2, r2, #4
 8004e68:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	0018      	movs	r0, r3
 8004e6e:	f000 f81f 	bl	8004eb0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2284      	movs	r2, #132	@ 0x84
 8004e76:	2120      	movs	r1, #32
 8004e78:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2278      	movs	r2, #120	@ 0x78
 8004e7e:	2100      	movs	r1, #0
 8004e80:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	e00f      	b.n	8004ea6 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	69db      	ldr	r3, [r3, #28]
 8004e8c:	68ba      	ldr	r2, [r7, #8]
 8004e8e:	4013      	ands	r3, r2
 8004e90:	68ba      	ldr	r2, [r7, #8]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	425a      	negs	r2, r3
 8004e96:	4153      	adcs	r3, r2
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	001a      	movs	r2, r3
 8004e9c:	1dfb      	adds	r3, r7, #7
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d0a4      	beq.n	8004dee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	0018      	movs	r0, r3
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	b004      	add	sp, #16
 8004eac:	bd80      	pop	{r7, pc}
	...

08004eb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b08e      	sub	sp, #56	@ 0x38
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004eb8:	f3ef 8310 	mrs	r3, PRIMASK
 8004ebc:	617b      	str	r3, [r7, #20]
  return(result);
 8004ebe:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ec0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	f383 8810 	msr	PRIMASK, r3
}
 8004ecc:	46c0      	nop			@ (mov r8, r8)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4926      	ldr	r1, [pc, #152]	@ (8004f74 <UART_EndRxTransfer+0xc4>)
 8004eda:	400a      	ands	r2, r1
 8004edc:	601a      	str	r2, [r3, #0]
 8004ede:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ee0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	f383 8810 	msr	PRIMASK, r3
}
 8004ee8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004eea:	f3ef 8310 	mrs	r3, PRIMASK
 8004eee:	623b      	str	r3, [r7, #32]
  return(result);
 8004ef0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ef2:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004efa:	f383 8810 	msr	PRIMASK, r3
}
 8004efe:	46c0      	nop			@ (mov r8, r8)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	689a      	ldr	r2, [r3, #8]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2101      	movs	r1, #1
 8004f0c:	438a      	bics	r2, r1
 8004f0e:	609a      	str	r2, [r3, #8]
 8004f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f12:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f16:	f383 8810 	msr	PRIMASK, r3
}
 8004f1a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d118      	bne.n	8004f56 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f24:	f3ef 8310 	mrs	r3, PRIMASK
 8004f28:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f2a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f2e:	2301      	movs	r3, #1
 8004f30:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f383 8810 	msr	PRIMASK, r3
}
 8004f38:	46c0      	nop			@ (mov r8, r8)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2110      	movs	r1, #16
 8004f46:	438a      	bics	r2, r1
 8004f48:	601a      	str	r2, [r3, #0]
 8004f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f4c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	f383 8810 	msr	PRIMASK, r3
}
 8004f54:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2280      	movs	r2, #128	@ 0x80
 8004f5a:	2120      	movs	r1, #32
 8004f5c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004f6a:	46c0      	nop			@ (mov r8, r8)
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	b00e      	add	sp, #56	@ 0x38
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	46c0      	nop			@ (mov r8, r8)
 8004f74:	fffffedf 	.word	0xfffffedf

08004f78 <std>:
 8004f78:	2300      	movs	r3, #0
 8004f7a:	b510      	push	{r4, lr}
 8004f7c:	0004      	movs	r4, r0
 8004f7e:	6003      	str	r3, [r0, #0]
 8004f80:	6043      	str	r3, [r0, #4]
 8004f82:	6083      	str	r3, [r0, #8]
 8004f84:	8181      	strh	r1, [r0, #12]
 8004f86:	6643      	str	r3, [r0, #100]	@ 0x64
 8004f88:	81c2      	strh	r2, [r0, #14]
 8004f8a:	6103      	str	r3, [r0, #16]
 8004f8c:	6143      	str	r3, [r0, #20]
 8004f8e:	6183      	str	r3, [r0, #24]
 8004f90:	0019      	movs	r1, r3
 8004f92:	2208      	movs	r2, #8
 8004f94:	305c      	adds	r0, #92	@ 0x5c
 8004f96:	f000 fa0f 	bl	80053b8 <memset>
 8004f9a:	4b0b      	ldr	r3, [pc, #44]	@ (8004fc8 <std+0x50>)
 8004f9c:	6224      	str	r4, [r4, #32]
 8004f9e:	6263      	str	r3, [r4, #36]	@ 0x24
 8004fa0:	4b0a      	ldr	r3, [pc, #40]	@ (8004fcc <std+0x54>)
 8004fa2:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004fa4:	4b0a      	ldr	r3, [pc, #40]	@ (8004fd0 <std+0x58>)
 8004fa6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004fa8:	4b0a      	ldr	r3, [pc, #40]	@ (8004fd4 <std+0x5c>)
 8004faa:	6323      	str	r3, [r4, #48]	@ 0x30
 8004fac:	4b0a      	ldr	r3, [pc, #40]	@ (8004fd8 <std+0x60>)
 8004fae:	429c      	cmp	r4, r3
 8004fb0:	d005      	beq.n	8004fbe <std+0x46>
 8004fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8004fdc <std+0x64>)
 8004fb4:	429c      	cmp	r4, r3
 8004fb6:	d002      	beq.n	8004fbe <std+0x46>
 8004fb8:	4b09      	ldr	r3, [pc, #36]	@ (8004fe0 <std+0x68>)
 8004fba:	429c      	cmp	r4, r3
 8004fbc:	d103      	bne.n	8004fc6 <std+0x4e>
 8004fbe:	0020      	movs	r0, r4
 8004fc0:	3058      	adds	r0, #88	@ 0x58
 8004fc2:	f000 fa79 	bl	80054b8 <__retarget_lock_init_recursive>
 8004fc6:	bd10      	pop	{r4, pc}
 8004fc8:	080051e1 	.word	0x080051e1
 8004fcc:	08005209 	.word	0x08005209
 8004fd0:	08005241 	.word	0x08005241
 8004fd4:	0800526d 	.word	0x0800526d
 8004fd8:	20000264 	.word	0x20000264
 8004fdc:	200002cc 	.word	0x200002cc
 8004fe0:	20000334 	.word	0x20000334

08004fe4 <stdio_exit_handler>:
 8004fe4:	b510      	push	{r4, lr}
 8004fe6:	4a03      	ldr	r2, [pc, #12]	@ (8004ff4 <stdio_exit_handler+0x10>)
 8004fe8:	4903      	ldr	r1, [pc, #12]	@ (8004ff8 <stdio_exit_handler+0x14>)
 8004fea:	4804      	ldr	r0, [pc, #16]	@ (8004ffc <stdio_exit_handler+0x18>)
 8004fec:	f000 f86c 	bl	80050c8 <_fwalk_sglue>
 8004ff0:	bd10      	pop	{r4, pc}
 8004ff2:	46c0      	nop			@ (mov r8, r8)
 8004ff4:	20000014 	.word	0x20000014
 8004ff8:	08005d49 	.word	0x08005d49
 8004ffc:	20000024 	.word	0x20000024

08005000 <cleanup_stdio>:
 8005000:	6841      	ldr	r1, [r0, #4]
 8005002:	4b0b      	ldr	r3, [pc, #44]	@ (8005030 <cleanup_stdio+0x30>)
 8005004:	b510      	push	{r4, lr}
 8005006:	0004      	movs	r4, r0
 8005008:	4299      	cmp	r1, r3
 800500a:	d001      	beq.n	8005010 <cleanup_stdio+0x10>
 800500c:	f000 fe9c 	bl	8005d48 <_fflush_r>
 8005010:	68a1      	ldr	r1, [r4, #8]
 8005012:	4b08      	ldr	r3, [pc, #32]	@ (8005034 <cleanup_stdio+0x34>)
 8005014:	4299      	cmp	r1, r3
 8005016:	d002      	beq.n	800501e <cleanup_stdio+0x1e>
 8005018:	0020      	movs	r0, r4
 800501a:	f000 fe95 	bl	8005d48 <_fflush_r>
 800501e:	68e1      	ldr	r1, [r4, #12]
 8005020:	4b05      	ldr	r3, [pc, #20]	@ (8005038 <cleanup_stdio+0x38>)
 8005022:	4299      	cmp	r1, r3
 8005024:	d002      	beq.n	800502c <cleanup_stdio+0x2c>
 8005026:	0020      	movs	r0, r4
 8005028:	f000 fe8e 	bl	8005d48 <_fflush_r>
 800502c:	bd10      	pop	{r4, pc}
 800502e:	46c0      	nop			@ (mov r8, r8)
 8005030:	20000264 	.word	0x20000264
 8005034:	200002cc 	.word	0x200002cc
 8005038:	20000334 	.word	0x20000334

0800503c <global_stdio_init.part.0>:
 800503c:	b510      	push	{r4, lr}
 800503e:	4b09      	ldr	r3, [pc, #36]	@ (8005064 <global_stdio_init.part.0+0x28>)
 8005040:	4a09      	ldr	r2, [pc, #36]	@ (8005068 <global_stdio_init.part.0+0x2c>)
 8005042:	2104      	movs	r1, #4
 8005044:	601a      	str	r2, [r3, #0]
 8005046:	4809      	ldr	r0, [pc, #36]	@ (800506c <global_stdio_init.part.0+0x30>)
 8005048:	2200      	movs	r2, #0
 800504a:	f7ff ff95 	bl	8004f78 <std>
 800504e:	2201      	movs	r2, #1
 8005050:	2109      	movs	r1, #9
 8005052:	4807      	ldr	r0, [pc, #28]	@ (8005070 <global_stdio_init.part.0+0x34>)
 8005054:	f7ff ff90 	bl	8004f78 <std>
 8005058:	2202      	movs	r2, #2
 800505a:	2112      	movs	r1, #18
 800505c:	4805      	ldr	r0, [pc, #20]	@ (8005074 <global_stdio_init.part.0+0x38>)
 800505e:	f7ff ff8b 	bl	8004f78 <std>
 8005062:	bd10      	pop	{r4, pc}
 8005064:	2000039c 	.word	0x2000039c
 8005068:	08004fe5 	.word	0x08004fe5
 800506c:	20000264 	.word	0x20000264
 8005070:	200002cc 	.word	0x200002cc
 8005074:	20000334 	.word	0x20000334

08005078 <__sfp_lock_acquire>:
 8005078:	b510      	push	{r4, lr}
 800507a:	4802      	ldr	r0, [pc, #8]	@ (8005084 <__sfp_lock_acquire+0xc>)
 800507c:	f000 fa1d 	bl	80054ba <__retarget_lock_acquire_recursive>
 8005080:	bd10      	pop	{r4, pc}
 8005082:	46c0      	nop			@ (mov r8, r8)
 8005084:	200003a5 	.word	0x200003a5

08005088 <__sfp_lock_release>:
 8005088:	b510      	push	{r4, lr}
 800508a:	4802      	ldr	r0, [pc, #8]	@ (8005094 <__sfp_lock_release+0xc>)
 800508c:	f000 fa16 	bl	80054bc <__retarget_lock_release_recursive>
 8005090:	bd10      	pop	{r4, pc}
 8005092:	46c0      	nop			@ (mov r8, r8)
 8005094:	200003a5 	.word	0x200003a5

08005098 <__sinit>:
 8005098:	b510      	push	{r4, lr}
 800509a:	0004      	movs	r4, r0
 800509c:	f7ff ffec 	bl	8005078 <__sfp_lock_acquire>
 80050a0:	6a23      	ldr	r3, [r4, #32]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d002      	beq.n	80050ac <__sinit+0x14>
 80050a6:	f7ff ffef 	bl	8005088 <__sfp_lock_release>
 80050aa:	bd10      	pop	{r4, pc}
 80050ac:	4b04      	ldr	r3, [pc, #16]	@ (80050c0 <__sinit+0x28>)
 80050ae:	6223      	str	r3, [r4, #32]
 80050b0:	4b04      	ldr	r3, [pc, #16]	@ (80050c4 <__sinit+0x2c>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1f6      	bne.n	80050a6 <__sinit+0xe>
 80050b8:	f7ff ffc0 	bl	800503c <global_stdio_init.part.0>
 80050bc:	e7f3      	b.n	80050a6 <__sinit+0xe>
 80050be:	46c0      	nop			@ (mov r8, r8)
 80050c0:	08005001 	.word	0x08005001
 80050c4:	2000039c 	.word	0x2000039c

080050c8 <_fwalk_sglue>:
 80050c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050ca:	0014      	movs	r4, r2
 80050cc:	2600      	movs	r6, #0
 80050ce:	9000      	str	r0, [sp, #0]
 80050d0:	9101      	str	r1, [sp, #4]
 80050d2:	68a5      	ldr	r5, [r4, #8]
 80050d4:	6867      	ldr	r7, [r4, #4]
 80050d6:	3f01      	subs	r7, #1
 80050d8:	d504      	bpl.n	80050e4 <_fwalk_sglue+0x1c>
 80050da:	6824      	ldr	r4, [r4, #0]
 80050dc:	2c00      	cmp	r4, #0
 80050de:	d1f8      	bne.n	80050d2 <_fwalk_sglue+0xa>
 80050e0:	0030      	movs	r0, r6
 80050e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80050e4:	89ab      	ldrh	r3, [r5, #12]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d908      	bls.n	80050fc <_fwalk_sglue+0x34>
 80050ea:	220e      	movs	r2, #14
 80050ec:	5eab      	ldrsh	r3, [r5, r2]
 80050ee:	3301      	adds	r3, #1
 80050f0:	d004      	beq.n	80050fc <_fwalk_sglue+0x34>
 80050f2:	0029      	movs	r1, r5
 80050f4:	9800      	ldr	r0, [sp, #0]
 80050f6:	9b01      	ldr	r3, [sp, #4]
 80050f8:	4798      	blx	r3
 80050fa:	4306      	orrs	r6, r0
 80050fc:	3568      	adds	r5, #104	@ 0x68
 80050fe:	e7ea      	b.n	80050d6 <_fwalk_sglue+0xe>

08005100 <iprintf>:
 8005100:	b40f      	push	{r0, r1, r2, r3}
 8005102:	b507      	push	{r0, r1, r2, lr}
 8005104:	4905      	ldr	r1, [pc, #20]	@ (800511c <iprintf+0x1c>)
 8005106:	ab04      	add	r3, sp, #16
 8005108:	6808      	ldr	r0, [r1, #0]
 800510a:	cb04      	ldmia	r3!, {r2}
 800510c:	6881      	ldr	r1, [r0, #8]
 800510e:	9301      	str	r3, [sp, #4]
 8005110:	f000 fafa 	bl	8005708 <_vfiprintf_r>
 8005114:	b003      	add	sp, #12
 8005116:	bc08      	pop	{r3}
 8005118:	b004      	add	sp, #16
 800511a:	4718      	bx	r3
 800511c:	20000020 	.word	0x20000020

08005120 <_puts_r>:
 8005120:	6a03      	ldr	r3, [r0, #32]
 8005122:	b570      	push	{r4, r5, r6, lr}
 8005124:	0005      	movs	r5, r0
 8005126:	000e      	movs	r6, r1
 8005128:	6884      	ldr	r4, [r0, #8]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d101      	bne.n	8005132 <_puts_r+0x12>
 800512e:	f7ff ffb3 	bl	8005098 <__sinit>
 8005132:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005134:	07db      	lsls	r3, r3, #31
 8005136:	d405      	bmi.n	8005144 <_puts_r+0x24>
 8005138:	89a3      	ldrh	r3, [r4, #12]
 800513a:	059b      	lsls	r3, r3, #22
 800513c:	d402      	bmi.n	8005144 <_puts_r+0x24>
 800513e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005140:	f000 f9bb 	bl	80054ba <__retarget_lock_acquire_recursive>
 8005144:	89a3      	ldrh	r3, [r4, #12]
 8005146:	071b      	lsls	r3, r3, #28
 8005148:	d502      	bpl.n	8005150 <_puts_r+0x30>
 800514a:	6923      	ldr	r3, [r4, #16]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d11f      	bne.n	8005190 <_puts_r+0x70>
 8005150:	0021      	movs	r1, r4
 8005152:	0028      	movs	r0, r5
 8005154:	f000 f8d2 	bl	80052fc <__swsetup_r>
 8005158:	2800      	cmp	r0, #0
 800515a:	d019      	beq.n	8005190 <_puts_r+0x70>
 800515c:	2501      	movs	r5, #1
 800515e:	426d      	negs	r5, r5
 8005160:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005162:	07db      	lsls	r3, r3, #31
 8005164:	d405      	bmi.n	8005172 <_puts_r+0x52>
 8005166:	89a3      	ldrh	r3, [r4, #12]
 8005168:	059b      	lsls	r3, r3, #22
 800516a:	d402      	bmi.n	8005172 <_puts_r+0x52>
 800516c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800516e:	f000 f9a5 	bl	80054bc <__retarget_lock_release_recursive>
 8005172:	0028      	movs	r0, r5
 8005174:	bd70      	pop	{r4, r5, r6, pc}
 8005176:	3601      	adds	r6, #1
 8005178:	60a3      	str	r3, [r4, #8]
 800517a:	2b00      	cmp	r3, #0
 800517c:	da04      	bge.n	8005188 <_puts_r+0x68>
 800517e:	69a2      	ldr	r2, [r4, #24]
 8005180:	429a      	cmp	r2, r3
 8005182:	dc16      	bgt.n	80051b2 <_puts_r+0x92>
 8005184:	290a      	cmp	r1, #10
 8005186:	d014      	beq.n	80051b2 <_puts_r+0x92>
 8005188:	6823      	ldr	r3, [r4, #0]
 800518a:	1c5a      	adds	r2, r3, #1
 800518c:	6022      	str	r2, [r4, #0]
 800518e:	7019      	strb	r1, [r3, #0]
 8005190:	68a3      	ldr	r3, [r4, #8]
 8005192:	7831      	ldrb	r1, [r6, #0]
 8005194:	3b01      	subs	r3, #1
 8005196:	2900      	cmp	r1, #0
 8005198:	d1ed      	bne.n	8005176 <_puts_r+0x56>
 800519a:	60a3      	str	r3, [r4, #8]
 800519c:	2b00      	cmp	r3, #0
 800519e:	da0f      	bge.n	80051c0 <_puts_r+0xa0>
 80051a0:	0022      	movs	r2, r4
 80051a2:	0028      	movs	r0, r5
 80051a4:	310a      	adds	r1, #10
 80051a6:	f000 f867 	bl	8005278 <__swbuf_r>
 80051aa:	3001      	adds	r0, #1
 80051ac:	d0d6      	beq.n	800515c <_puts_r+0x3c>
 80051ae:	250a      	movs	r5, #10
 80051b0:	e7d6      	b.n	8005160 <_puts_r+0x40>
 80051b2:	0022      	movs	r2, r4
 80051b4:	0028      	movs	r0, r5
 80051b6:	f000 f85f 	bl	8005278 <__swbuf_r>
 80051ba:	3001      	adds	r0, #1
 80051bc:	d1e8      	bne.n	8005190 <_puts_r+0x70>
 80051be:	e7cd      	b.n	800515c <_puts_r+0x3c>
 80051c0:	6823      	ldr	r3, [r4, #0]
 80051c2:	1c5a      	adds	r2, r3, #1
 80051c4:	6022      	str	r2, [r4, #0]
 80051c6:	220a      	movs	r2, #10
 80051c8:	701a      	strb	r2, [r3, #0]
 80051ca:	e7f0      	b.n	80051ae <_puts_r+0x8e>

080051cc <puts>:
 80051cc:	b510      	push	{r4, lr}
 80051ce:	4b03      	ldr	r3, [pc, #12]	@ (80051dc <puts+0x10>)
 80051d0:	0001      	movs	r1, r0
 80051d2:	6818      	ldr	r0, [r3, #0]
 80051d4:	f7ff ffa4 	bl	8005120 <_puts_r>
 80051d8:	bd10      	pop	{r4, pc}
 80051da:	46c0      	nop			@ (mov r8, r8)
 80051dc:	20000020 	.word	0x20000020

080051e0 <__sread>:
 80051e0:	b570      	push	{r4, r5, r6, lr}
 80051e2:	000c      	movs	r4, r1
 80051e4:	250e      	movs	r5, #14
 80051e6:	5f49      	ldrsh	r1, [r1, r5]
 80051e8:	f000 f914 	bl	8005414 <_read_r>
 80051ec:	2800      	cmp	r0, #0
 80051ee:	db03      	blt.n	80051f8 <__sread+0x18>
 80051f0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80051f2:	181b      	adds	r3, r3, r0
 80051f4:	6563      	str	r3, [r4, #84]	@ 0x54
 80051f6:	bd70      	pop	{r4, r5, r6, pc}
 80051f8:	89a3      	ldrh	r3, [r4, #12]
 80051fa:	4a02      	ldr	r2, [pc, #8]	@ (8005204 <__sread+0x24>)
 80051fc:	4013      	ands	r3, r2
 80051fe:	81a3      	strh	r3, [r4, #12]
 8005200:	e7f9      	b.n	80051f6 <__sread+0x16>
 8005202:	46c0      	nop			@ (mov r8, r8)
 8005204:	ffffefff 	.word	0xffffefff

08005208 <__swrite>:
 8005208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800520a:	001f      	movs	r7, r3
 800520c:	898b      	ldrh	r3, [r1, #12]
 800520e:	0005      	movs	r5, r0
 8005210:	000c      	movs	r4, r1
 8005212:	0016      	movs	r6, r2
 8005214:	05db      	lsls	r3, r3, #23
 8005216:	d505      	bpl.n	8005224 <__swrite+0x1c>
 8005218:	230e      	movs	r3, #14
 800521a:	5ec9      	ldrsh	r1, [r1, r3]
 800521c:	2200      	movs	r2, #0
 800521e:	2302      	movs	r3, #2
 8005220:	f000 f8e4 	bl	80053ec <_lseek_r>
 8005224:	89a3      	ldrh	r3, [r4, #12]
 8005226:	4a05      	ldr	r2, [pc, #20]	@ (800523c <__swrite+0x34>)
 8005228:	0028      	movs	r0, r5
 800522a:	4013      	ands	r3, r2
 800522c:	81a3      	strh	r3, [r4, #12]
 800522e:	0032      	movs	r2, r6
 8005230:	230e      	movs	r3, #14
 8005232:	5ee1      	ldrsh	r1, [r4, r3]
 8005234:	003b      	movs	r3, r7
 8005236:	f000 f901 	bl	800543c <_write_r>
 800523a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800523c:	ffffefff 	.word	0xffffefff

08005240 <__sseek>:
 8005240:	b570      	push	{r4, r5, r6, lr}
 8005242:	000c      	movs	r4, r1
 8005244:	250e      	movs	r5, #14
 8005246:	5f49      	ldrsh	r1, [r1, r5]
 8005248:	f000 f8d0 	bl	80053ec <_lseek_r>
 800524c:	89a3      	ldrh	r3, [r4, #12]
 800524e:	1c42      	adds	r2, r0, #1
 8005250:	d103      	bne.n	800525a <__sseek+0x1a>
 8005252:	4a05      	ldr	r2, [pc, #20]	@ (8005268 <__sseek+0x28>)
 8005254:	4013      	ands	r3, r2
 8005256:	81a3      	strh	r3, [r4, #12]
 8005258:	bd70      	pop	{r4, r5, r6, pc}
 800525a:	2280      	movs	r2, #128	@ 0x80
 800525c:	0152      	lsls	r2, r2, #5
 800525e:	4313      	orrs	r3, r2
 8005260:	81a3      	strh	r3, [r4, #12]
 8005262:	6560      	str	r0, [r4, #84]	@ 0x54
 8005264:	e7f8      	b.n	8005258 <__sseek+0x18>
 8005266:	46c0      	nop			@ (mov r8, r8)
 8005268:	ffffefff 	.word	0xffffefff

0800526c <__sclose>:
 800526c:	b510      	push	{r4, lr}
 800526e:	230e      	movs	r3, #14
 8005270:	5ec9      	ldrsh	r1, [r1, r3]
 8005272:	f000 f8a9 	bl	80053c8 <_close_r>
 8005276:	bd10      	pop	{r4, pc}

08005278 <__swbuf_r>:
 8005278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800527a:	0006      	movs	r6, r0
 800527c:	000d      	movs	r5, r1
 800527e:	0014      	movs	r4, r2
 8005280:	2800      	cmp	r0, #0
 8005282:	d004      	beq.n	800528e <__swbuf_r+0x16>
 8005284:	6a03      	ldr	r3, [r0, #32]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d101      	bne.n	800528e <__swbuf_r+0x16>
 800528a:	f7ff ff05 	bl	8005098 <__sinit>
 800528e:	69a3      	ldr	r3, [r4, #24]
 8005290:	60a3      	str	r3, [r4, #8]
 8005292:	89a3      	ldrh	r3, [r4, #12]
 8005294:	071b      	lsls	r3, r3, #28
 8005296:	d502      	bpl.n	800529e <__swbuf_r+0x26>
 8005298:	6923      	ldr	r3, [r4, #16]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d109      	bne.n	80052b2 <__swbuf_r+0x3a>
 800529e:	0021      	movs	r1, r4
 80052a0:	0030      	movs	r0, r6
 80052a2:	f000 f82b 	bl	80052fc <__swsetup_r>
 80052a6:	2800      	cmp	r0, #0
 80052a8:	d003      	beq.n	80052b2 <__swbuf_r+0x3a>
 80052aa:	2501      	movs	r5, #1
 80052ac:	426d      	negs	r5, r5
 80052ae:	0028      	movs	r0, r5
 80052b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052b2:	6923      	ldr	r3, [r4, #16]
 80052b4:	6820      	ldr	r0, [r4, #0]
 80052b6:	b2ef      	uxtb	r7, r5
 80052b8:	1ac0      	subs	r0, r0, r3
 80052ba:	6963      	ldr	r3, [r4, #20]
 80052bc:	b2ed      	uxtb	r5, r5
 80052be:	4283      	cmp	r3, r0
 80052c0:	dc05      	bgt.n	80052ce <__swbuf_r+0x56>
 80052c2:	0021      	movs	r1, r4
 80052c4:	0030      	movs	r0, r6
 80052c6:	f000 fd3f 	bl	8005d48 <_fflush_r>
 80052ca:	2800      	cmp	r0, #0
 80052cc:	d1ed      	bne.n	80052aa <__swbuf_r+0x32>
 80052ce:	68a3      	ldr	r3, [r4, #8]
 80052d0:	3001      	adds	r0, #1
 80052d2:	3b01      	subs	r3, #1
 80052d4:	60a3      	str	r3, [r4, #8]
 80052d6:	6823      	ldr	r3, [r4, #0]
 80052d8:	1c5a      	adds	r2, r3, #1
 80052da:	6022      	str	r2, [r4, #0]
 80052dc:	701f      	strb	r7, [r3, #0]
 80052de:	6963      	ldr	r3, [r4, #20]
 80052e0:	4283      	cmp	r3, r0
 80052e2:	d004      	beq.n	80052ee <__swbuf_r+0x76>
 80052e4:	89a3      	ldrh	r3, [r4, #12]
 80052e6:	07db      	lsls	r3, r3, #31
 80052e8:	d5e1      	bpl.n	80052ae <__swbuf_r+0x36>
 80052ea:	2d0a      	cmp	r5, #10
 80052ec:	d1df      	bne.n	80052ae <__swbuf_r+0x36>
 80052ee:	0021      	movs	r1, r4
 80052f0:	0030      	movs	r0, r6
 80052f2:	f000 fd29 	bl	8005d48 <_fflush_r>
 80052f6:	2800      	cmp	r0, #0
 80052f8:	d0d9      	beq.n	80052ae <__swbuf_r+0x36>
 80052fa:	e7d6      	b.n	80052aa <__swbuf_r+0x32>

080052fc <__swsetup_r>:
 80052fc:	4b2d      	ldr	r3, [pc, #180]	@ (80053b4 <__swsetup_r+0xb8>)
 80052fe:	b570      	push	{r4, r5, r6, lr}
 8005300:	0005      	movs	r5, r0
 8005302:	6818      	ldr	r0, [r3, #0]
 8005304:	000c      	movs	r4, r1
 8005306:	2800      	cmp	r0, #0
 8005308:	d004      	beq.n	8005314 <__swsetup_r+0x18>
 800530a:	6a03      	ldr	r3, [r0, #32]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d101      	bne.n	8005314 <__swsetup_r+0x18>
 8005310:	f7ff fec2 	bl	8005098 <__sinit>
 8005314:	230c      	movs	r3, #12
 8005316:	5ee2      	ldrsh	r2, [r4, r3]
 8005318:	0713      	lsls	r3, r2, #28
 800531a:	d423      	bmi.n	8005364 <__swsetup_r+0x68>
 800531c:	06d3      	lsls	r3, r2, #27
 800531e:	d407      	bmi.n	8005330 <__swsetup_r+0x34>
 8005320:	2309      	movs	r3, #9
 8005322:	602b      	str	r3, [r5, #0]
 8005324:	2340      	movs	r3, #64	@ 0x40
 8005326:	2001      	movs	r0, #1
 8005328:	4313      	orrs	r3, r2
 800532a:	81a3      	strh	r3, [r4, #12]
 800532c:	4240      	negs	r0, r0
 800532e:	e03a      	b.n	80053a6 <__swsetup_r+0xaa>
 8005330:	0752      	lsls	r2, r2, #29
 8005332:	d513      	bpl.n	800535c <__swsetup_r+0x60>
 8005334:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005336:	2900      	cmp	r1, #0
 8005338:	d008      	beq.n	800534c <__swsetup_r+0x50>
 800533a:	0023      	movs	r3, r4
 800533c:	3344      	adds	r3, #68	@ 0x44
 800533e:	4299      	cmp	r1, r3
 8005340:	d002      	beq.n	8005348 <__swsetup_r+0x4c>
 8005342:	0028      	movs	r0, r5
 8005344:	f000 f8bc 	bl	80054c0 <_free_r>
 8005348:	2300      	movs	r3, #0
 800534a:	6363      	str	r3, [r4, #52]	@ 0x34
 800534c:	2224      	movs	r2, #36	@ 0x24
 800534e:	89a3      	ldrh	r3, [r4, #12]
 8005350:	4393      	bics	r3, r2
 8005352:	81a3      	strh	r3, [r4, #12]
 8005354:	2300      	movs	r3, #0
 8005356:	6063      	str	r3, [r4, #4]
 8005358:	6923      	ldr	r3, [r4, #16]
 800535a:	6023      	str	r3, [r4, #0]
 800535c:	2308      	movs	r3, #8
 800535e:	89a2      	ldrh	r2, [r4, #12]
 8005360:	4313      	orrs	r3, r2
 8005362:	81a3      	strh	r3, [r4, #12]
 8005364:	6923      	ldr	r3, [r4, #16]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d10b      	bne.n	8005382 <__swsetup_r+0x86>
 800536a:	21a0      	movs	r1, #160	@ 0xa0
 800536c:	2280      	movs	r2, #128	@ 0x80
 800536e:	89a3      	ldrh	r3, [r4, #12]
 8005370:	0089      	lsls	r1, r1, #2
 8005372:	0092      	lsls	r2, r2, #2
 8005374:	400b      	ands	r3, r1
 8005376:	4293      	cmp	r3, r2
 8005378:	d003      	beq.n	8005382 <__swsetup_r+0x86>
 800537a:	0021      	movs	r1, r4
 800537c:	0028      	movs	r0, r5
 800537e:	f000 fd39 	bl	8005df4 <__smakebuf_r>
 8005382:	230c      	movs	r3, #12
 8005384:	5ee2      	ldrsh	r2, [r4, r3]
 8005386:	2101      	movs	r1, #1
 8005388:	0013      	movs	r3, r2
 800538a:	400b      	ands	r3, r1
 800538c:	420a      	tst	r2, r1
 800538e:	d00b      	beq.n	80053a8 <__swsetup_r+0xac>
 8005390:	2300      	movs	r3, #0
 8005392:	60a3      	str	r3, [r4, #8]
 8005394:	6963      	ldr	r3, [r4, #20]
 8005396:	425b      	negs	r3, r3
 8005398:	61a3      	str	r3, [r4, #24]
 800539a:	2000      	movs	r0, #0
 800539c:	6923      	ldr	r3, [r4, #16]
 800539e:	4283      	cmp	r3, r0
 80053a0:	d101      	bne.n	80053a6 <__swsetup_r+0xaa>
 80053a2:	0613      	lsls	r3, r2, #24
 80053a4:	d4be      	bmi.n	8005324 <__swsetup_r+0x28>
 80053a6:	bd70      	pop	{r4, r5, r6, pc}
 80053a8:	0791      	lsls	r1, r2, #30
 80053aa:	d400      	bmi.n	80053ae <__swsetup_r+0xb2>
 80053ac:	6963      	ldr	r3, [r4, #20]
 80053ae:	60a3      	str	r3, [r4, #8]
 80053b0:	e7f3      	b.n	800539a <__swsetup_r+0x9e>
 80053b2:	46c0      	nop			@ (mov r8, r8)
 80053b4:	20000020 	.word	0x20000020

080053b8 <memset>:
 80053b8:	0003      	movs	r3, r0
 80053ba:	1882      	adds	r2, r0, r2
 80053bc:	4293      	cmp	r3, r2
 80053be:	d100      	bne.n	80053c2 <memset+0xa>
 80053c0:	4770      	bx	lr
 80053c2:	7019      	strb	r1, [r3, #0]
 80053c4:	3301      	adds	r3, #1
 80053c6:	e7f9      	b.n	80053bc <memset+0x4>

080053c8 <_close_r>:
 80053c8:	2300      	movs	r3, #0
 80053ca:	b570      	push	{r4, r5, r6, lr}
 80053cc:	4d06      	ldr	r5, [pc, #24]	@ (80053e8 <_close_r+0x20>)
 80053ce:	0004      	movs	r4, r0
 80053d0:	0008      	movs	r0, r1
 80053d2:	602b      	str	r3, [r5, #0]
 80053d4:	f7fc faa9 	bl	800192a <_close>
 80053d8:	1c43      	adds	r3, r0, #1
 80053da:	d103      	bne.n	80053e4 <_close_r+0x1c>
 80053dc:	682b      	ldr	r3, [r5, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d000      	beq.n	80053e4 <_close_r+0x1c>
 80053e2:	6023      	str	r3, [r4, #0]
 80053e4:	bd70      	pop	{r4, r5, r6, pc}
 80053e6:	46c0      	nop			@ (mov r8, r8)
 80053e8:	200003a0 	.word	0x200003a0

080053ec <_lseek_r>:
 80053ec:	b570      	push	{r4, r5, r6, lr}
 80053ee:	0004      	movs	r4, r0
 80053f0:	0008      	movs	r0, r1
 80053f2:	0011      	movs	r1, r2
 80053f4:	001a      	movs	r2, r3
 80053f6:	2300      	movs	r3, #0
 80053f8:	4d05      	ldr	r5, [pc, #20]	@ (8005410 <_lseek_r+0x24>)
 80053fa:	602b      	str	r3, [r5, #0]
 80053fc:	f7fc fab6 	bl	800196c <_lseek>
 8005400:	1c43      	adds	r3, r0, #1
 8005402:	d103      	bne.n	800540c <_lseek_r+0x20>
 8005404:	682b      	ldr	r3, [r5, #0]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d000      	beq.n	800540c <_lseek_r+0x20>
 800540a:	6023      	str	r3, [r4, #0]
 800540c:	bd70      	pop	{r4, r5, r6, pc}
 800540e:	46c0      	nop			@ (mov r8, r8)
 8005410:	200003a0 	.word	0x200003a0

08005414 <_read_r>:
 8005414:	b570      	push	{r4, r5, r6, lr}
 8005416:	0004      	movs	r4, r0
 8005418:	0008      	movs	r0, r1
 800541a:	0011      	movs	r1, r2
 800541c:	001a      	movs	r2, r3
 800541e:	2300      	movs	r3, #0
 8005420:	4d05      	ldr	r5, [pc, #20]	@ (8005438 <_read_r+0x24>)
 8005422:	602b      	str	r3, [r5, #0]
 8005424:	f7fc fa48 	bl	80018b8 <_read>
 8005428:	1c43      	adds	r3, r0, #1
 800542a:	d103      	bne.n	8005434 <_read_r+0x20>
 800542c:	682b      	ldr	r3, [r5, #0]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d000      	beq.n	8005434 <_read_r+0x20>
 8005432:	6023      	str	r3, [r4, #0]
 8005434:	bd70      	pop	{r4, r5, r6, pc}
 8005436:	46c0      	nop			@ (mov r8, r8)
 8005438:	200003a0 	.word	0x200003a0

0800543c <_write_r>:
 800543c:	b570      	push	{r4, r5, r6, lr}
 800543e:	0004      	movs	r4, r0
 8005440:	0008      	movs	r0, r1
 8005442:	0011      	movs	r1, r2
 8005444:	001a      	movs	r2, r3
 8005446:	2300      	movs	r3, #0
 8005448:	4d05      	ldr	r5, [pc, #20]	@ (8005460 <_write_r+0x24>)
 800544a:	602b      	str	r3, [r5, #0]
 800544c:	f7fc fa51 	bl	80018f2 <_write>
 8005450:	1c43      	adds	r3, r0, #1
 8005452:	d103      	bne.n	800545c <_write_r+0x20>
 8005454:	682b      	ldr	r3, [r5, #0]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d000      	beq.n	800545c <_write_r+0x20>
 800545a:	6023      	str	r3, [r4, #0]
 800545c:	bd70      	pop	{r4, r5, r6, pc}
 800545e:	46c0      	nop			@ (mov r8, r8)
 8005460:	200003a0 	.word	0x200003a0

08005464 <__errno>:
 8005464:	4b01      	ldr	r3, [pc, #4]	@ (800546c <__errno+0x8>)
 8005466:	6818      	ldr	r0, [r3, #0]
 8005468:	4770      	bx	lr
 800546a:	46c0      	nop			@ (mov r8, r8)
 800546c:	20000020 	.word	0x20000020

08005470 <__libc_init_array>:
 8005470:	b570      	push	{r4, r5, r6, lr}
 8005472:	2600      	movs	r6, #0
 8005474:	4c0c      	ldr	r4, [pc, #48]	@ (80054a8 <__libc_init_array+0x38>)
 8005476:	4d0d      	ldr	r5, [pc, #52]	@ (80054ac <__libc_init_array+0x3c>)
 8005478:	1b64      	subs	r4, r4, r5
 800547a:	10a4      	asrs	r4, r4, #2
 800547c:	42a6      	cmp	r6, r4
 800547e:	d109      	bne.n	8005494 <__libc_init_array+0x24>
 8005480:	2600      	movs	r6, #0
 8005482:	f000 fd3b 	bl	8005efc <_init>
 8005486:	4c0a      	ldr	r4, [pc, #40]	@ (80054b0 <__libc_init_array+0x40>)
 8005488:	4d0a      	ldr	r5, [pc, #40]	@ (80054b4 <__libc_init_array+0x44>)
 800548a:	1b64      	subs	r4, r4, r5
 800548c:	10a4      	asrs	r4, r4, #2
 800548e:	42a6      	cmp	r6, r4
 8005490:	d105      	bne.n	800549e <__libc_init_array+0x2e>
 8005492:	bd70      	pop	{r4, r5, r6, pc}
 8005494:	00b3      	lsls	r3, r6, #2
 8005496:	58eb      	ldr	r3, [r5, r3]
 8005498:	4798      	blx	r3
 800549a:	3601      	adds	r6, #1
 800549c:	e7ee      	b.n	800547c <__libc_init_array+0xc>
 800549e:	00b3      	lsls	r3, r6, #2
 80054a0:	58eb      	ldr	r3, [r5, r3]
 80054a2:	4798      	blx	r3
 80054a4:	3601      	adds	r6, #1
 80054a6:	e7f2      	b.n	800548e <__libc_init_array+0x1e>
 80054a8:	08006060 	.word	0x08006060
 80054ac:	08006060 	.word	0x08006060
 80054b0:	08006064 	.word	0x08006064
 80054b4:	08006060 	.word	0x08006060

080054b8 <__retarget_lock_init_recursive>:
 80054b8:	4770      	bx	lr

080054ba <__retarget_lock_acquire_recursive>:
 80054ba:	4770      	bx	lr

080054bc <__retarget_lock_release_recursive>:
 80054bc:	4770      	bx	lr
	...

080054c0 <_free_r>:
 80054c0:	b570      	push	{r4, r5, r6, lr}
 80054c2:	0005      	movs	r5, r0
 80054c4:	1e0c      	subs	r4, r1, #0
 80054c6:	d010      	beq.n	80054ea <_free_r+0x2a>
 80054c8:	3c04      	subs	r4, #4
 80054ca:	6823      	ldr	r3, [r4, #0]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	da00      	bge.n	80054d2 <_free_r+0x12>
 80054d0:	18e4      	adds	r4, r4, r3
 80054d2:	0028      	movs	r0, r5
 80054d4:	f000 f8e0 	bl	8005698 <__malloc_lock>
 80054d8:	4a1d      	ldr	r2, [pc, #116]	@ (8005550 <_free_r+0x90>)
 80054da:	6813      	ldr	r3, [r2, #0]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d105      	bne.n	80054ec <_free_r+0x2c>
 80054e0:	6063      	str	r3, [r4, #4]
 80054e2:	6014      	str	r4, [r2, #0]
 80054e4:	0028      	movs	r0, r5
 80054e6:	f000 f8df 	bl	80056a8 <__malloc_unlock>
 80054ea:	bd70      	pop	{r4, r5, r6, pc}
 80054ec:	42a3      	cmp	r3, r4
 80054ee:	d908      	bls.n	8005502 <_free_r+0x42>
 80054f0:	6820      	ldr	r0, [r4, #0]
 80054f2:	1821      	adds	r1, r4, r0
 80054f4:	428b      	cmp	r3, r1
 80054f6:	d1f3      	bne.n	80054e0 <_free_r+0x20>
 80054f8:	6819      	ldr	r1, [r3, #0]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	1809      	adds	r1, r1, r0
 80054fe:	6021      	str	r1, [r4, #0]
 8005500:	e7ee      	b.n	80054e0 <_free_r+0x20>
 8005502:	001a      	movs	r2, r3
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d001      	beq.n	800550e <_free_r+0x4e>
 800550a:	42a3      	cmp	r3, r4
 800550c:	d9f9      	bls.n	8005502 <_free_r+0x42>
 800550e:	6811      	ldr	r1, [r2, #0]
 8005510:	1850      	adds	r0, r2, r1
 8005512:	42a0      	cmp	r0, r4
 8005514:	d10b      	bne.n	800552e <_free_r+0x6e>
 8005516:	6820      	ldr	r0, [r4, #0]
 8005518:	1809      	adds	r1, r1, r0
 800551a:	1850      	adds	r0, r2, r1
 800551c:	6011      	str	r1, [r2, #0]
 800551e:	4283      	cmp	r3, r0
 8005520:	d1e0      	bne.n	80054e4 <_free_r+0x24>
 8005522:	6818      	ldr	r0, [r3, #0]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	1841      	adds	r1, r0, r1
 8005528:	6011      	str	r1, [r2, #0]
 800552a:	6053      	str	r3, [r2, #4]
 800552c:	e7da      	b.n	80054e4 <_free_r+0x24>
 800552e:	42a0      	cmp	r0, r4
 8005530:	d902      	bls.n	8005538 <_free_r+0x78>
 8005532:	230c      	movs	r3, #12
 8005534:	602b      	str	r3, [r5, #0]
 8005536:	e7d5      	b.n	80054e4 <_free_r+0x24>
 8005538:	6820      	ldr	r0, [r4, #0]
 800553a:	1821      	adds	r1, r4, r0
 800553c:	428b      	cmp	r3, r1
 800553e:	d103      	bne.n	8005548 <_free_r+0x88>
 8005540:	6819      	ldr	r1, [r3, #0]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	1809      	adds	r1, r1, r0
 8005546:	6021      	str	r1, [r4, #0]
 8005548:	6063      	str	r3, [r4, #4]
 800554a:	6054      	str	r4, [r2, #4]
 800554c:	e7ca      	b.n	80054e4 <_free_r+0x24>
 800554e:	46c0      	nop			@ (mov r8, r8)
 8005550:	200003ac 	.word	0x200003ac

08005554 <sbrk_aligned>:
 8005554:	b570      	push	{r4, r5, r6, lr}
 8005556:	4e0f      	ldr	r6, [pc, #60]	@ (8005594 <sbrk_aligned+0x40>)
 8005558:	000d      	movs	r5, r1
 800555a:	6831      	ldr	r1, [r6, #0]
 800555c:	0004      	movs	r4, r0
 800555e:	2900      	cmp	r1, #0
 8005560:	d102      	bne.n	8005568 <sbrk_aligned+0x14>
 8005562:	f000 fcad 	bl	8005ec0 <_sbrk_r>
 8005566:	6030      	str	r0, [r6, #0]
 8005568:	0029      	movs	r1, r5
 800556a:	0020      	movs	r0, r4
 800556c:	f000 fca8 	bl	8005ec0 <_sbrk_r>
 8005570:	1c43      	adds	r3, r0, #1
 8005572:	d103      	bne.n	800557c <sbrk_aligned+0x28>
 8005574:	2501      	movs	r5, #1
 8005576:	426d      	negs	r5, r5
 8005578:	0028      	movs	r0, r5
 800557a:	bd70      	pop	{r4, r5, r6, pc}
 800557c:	2303      	movs	r3, #3
 800557e:	1cc5      	adds	r5, r0, #3
 8005580:	439d      	bics	r5, r3
 8005582:	42a8      	cmp	r0, r5
 8005584:	d0f8      	beq.n	8005578 <sbrk_aligned+0x24>
 8005586:	1a29      	subs	r1, r5, r0
 8005588:	0020      	movs	r0, r4
 800558a:	f000 fc99 	bl	8005ec0 <_sbrk_r>
 800558e:	3001      	adds	r0, #1
 8005590:	d1f2      	bne.n	8005578 <sbrk_aligned+0x24>
 8005592:	e7ef      	b.n	8005574 <sbrk_aligned+0x20>
 8005594:	200003a8 	.word	0x200003a8

08005598 <_malloc_r>:
 8005598:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800559a:	2203      	movs	r2, #3
 800559c:	1ccb      	adds	r3, r1, #3
 800559e:	4393      	bics	r3, r2
 80055a0:	3308      	adds	r3, #8
 80055a2:	0005      	movs	r5, r0
 80055a4:	001f      	movs	r7, r3
 80055a6:	2b0c      	cmp	r3, #12
 80055a8:	d234      	bcs.n	8005614 <_malloc_r+0x7c>
 80055aa:	270c      	movs	r7, #12
 80055ac:	42b9      	cmp	r1, r7
 80055ae:	d833      	bhi.n	8005618 <_malloc_r+0x80>
 80055b0:	0028      	movs	r0, r5
 80055b2:	f000 f871 	bl	8005698 <__malloc_lock>
 80055b6:	4e37      	ldr	r6, [pc, #220]	@ (8005694 <_malloc_r+0xfc>)
 80055b8:	6833      	ldr	r3, [r6, #0]
 80055ba:	001c      	movs	r4, r3
 80055bc:	2c00      	cmp	r4, #0
 80055be:	d12f      	bne.n	8005620 <_malloc_r+0x88>
 80055c0:	0039      	movs	r1, r7
 80055c2:	0028      	movs	r0, r5
 80055c4:	f7ff ffc6 	bl	8005554 <sbrk_aligned>
 80055c8:	0004      	movs	r4, r0
 80055ca:	1c43      	adds	r3, r0, #1
 80055cc:	d15f      	bne.n	800568e <_malloc_r+0xf6>
 80055ce:	6834      	ldr	r4, [r6, #0]
 80055d0:	9400      	str	r4, [sp, #0]
 80055d2:	9b00      	ldr	r3, [sp, #0]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d14a      	bne.n	800566e <_malloc_r+0xd6>
 80055d8:	2c00      	cmp	r4, #0
 80055da:	d052      	beq.n	8005682 <_malloc_r+0xea>
 80055dc:	6823      	ldr	r3, [r4, #0]
 80055de:	0028      	movs	r0, r5
 80055e0:	18e3      	adds	r3, r4, r3
 80055e2:	9900      	ldr	r1, [sp, #0]
 80055e4:	9301      	str	r3, [sp, #4]
 80055e6:	f000 fc6b 	bl	8005ec0 <_sbrk_r>
 80055ea:	9b01      	ldr	r3, [sp, #4]
 80055ec:	4283      	cmp	r3, r0
 80055ee:	d148      	bne.n	8005682 <_malloc_r+0xea>
 80055f0:	6823      	ldr	r3, [r4, #0]
 80055f2:	0028      	movs	r0, r5
 80055f4:	1aff      	subs	r7, r7, r3
 80055f6:	0039      	movs	r1, r7
 80055f8:	f7ff ffac 	bl	8005554 <sbrk_aligned>
 80055fc:	3001      	adds	r0, #1
 80055fe:	d040      	beq.n	8005682 <_malloc_r+0xea>
 8005600:	6823      	ldr	r3, [r4, #0]
 8005602:	19db      	adds	r3, r3, r7
 8005604:	6023      	str	r3, [r4, #0]
 8005606:	6833      	ldr	r3, [r6, #0]
 8005608:	685a      	ldr	r2, [r3, #4]
 800560a:	2a00      	cmp	r2, #0
 800560c:	d133      	bne.n	8005676 <_malloc_r+0xde>
 800560e:	9b00      	ldr	r3, [sp, #0]
 8005610:	6033      	str	r3, [r6, #0]
 8005612:	e019      	b.n	8005648 <_malloc_r+0xb0>
 8005614:	2b00      	cmp	r3, #0
 8005616:	dac9      	bge.n	80055ac <_malloc_r+0x14>
 8005618:	230c      	movs	r3, #12
 800561a:	602b      	str	r3, [r5, #0]
 800561c:	2000      	movs	r0, #0
 800561e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005620:	6821      	ldr	r1, [r4, #0]
 8005622:	1bc9      	subs	r1, r1, r7
 8005624:	d420      	bmi.n	8005668 <_malloc_r+0xd0>
 8005626:	290b      	cmp	r1, #11
 8005628:	d90a      	bls.n	8005640 <_malloc_r+0xa8>
 800562a:	19e2      	adds	r2, r4, r7
 800562c:	6027      	str	r7, [r4, #0]
 800562e:	42a3      	cmp	r3, r4
 8005630:	d104      	bne.n	800563c <_malloc_r+0xa4>
 8005632:	6032      	str	r2, [r6, #0]
 8005634:	6863      	ldr	r3, [r4, #4]
 8005636:	6011      	str	r1, [r2, #0]
 8005638:	6053      	str	r3, [r2, #4]
 800563a:	e005      	b.n	8005648 <_malloc_r+0xb0>
 800563c:	605a      	str	r2, [r3, #4]
 800563e:	e7f9      	b.n	8005634 <_malloc_r+0x9c>
 8005640:	6862      	ldr	r2, [r4, #4]
 8005642:	42a3      	cmp	r3, r4
 8005644:	d10e      	bne.n	8005664 <_malloc_r+0xcc>
 8005646:	6032      	str	r2, [r6, #0]
 8005648:	0028      	movs	r0, r5
 800564a:	f000 f82d 	bl	80056a8 <__malloc_unlock>
 800564e:	0020      	movs	r0, r4
 8005650:	2207      	movs	r2, #7
 8005652:	300b      	adds	r0, #11
 8005654:	1d23      	adds	r3, r4, #4
 8005656:	4390      	bics	r0, r2
 8005658:	1ac2      	subs	r2, r0, r3
 800565a:	4298      	cmp	r0, r3
 800565c:	d0df      	beq.n	800561e <_malloc_r+0x86>
 800565e:	1a1b      	subs	r3, r3, r0
 8005660:	50a3      	str	r3, [r4, r2]
 8005662:	e7dc      	b.n	800561e <_malloc_r+0x86>
 8005664:	605a      	str	r2, [r3, #4]
 8005666:	e7ef      	b.n	8005648 <_malloc_r+0xb0>
 8005668:	0023      	movs	r3, r4
 800566a:	6864      	ldr	r4, [r4, #4]
 800566c:	e7a6      	b.n	80055bc <_malloc_r+0x24>
 800566e:	9c00      	ldr	r4, [sp, #0]
 8005670:	6863      	ldr	r3, [r4, #4]
 8005672:	9300      	str	r3, [sp, #0]
 8005674:	e7ad      	b.n	80055d2 <_malloc_r+0x3a>
 8005676:	001a      	movs	r2, r3
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	42a3      	cmp	r3, r4
 800567c:	d1fb      	bne.n	8005676 <_malloc_r+0xde>
 800567e:	2300      	movs	r3, #0
 8005680:	e7da      	b.n	8005638 <_malloc_r+0xa0>
 8005682:	230c      	movs	r3, #12
 8005684:	0028      	movs	r0, r5
 8005686:	602b      	str	r3, [r5, #0]
 8005688:	f000 f80e 	bl	80056a8 <__malloc_unlock>
 800568c:	e7c6      	b.n	800561c <_malloc_r+0x84>
 800568e:	6007      	str	r7, [r0, #0]
 8005690:	e7da      	b.n	8005648 <_malloc_r+0xb0>
 8005692:	46c0      	nop			@ (mov r8, r8)
 8005694:	200003ac 	.word	0x200003ac

08005698 <__malloc_lock>:
 8005698:	b510      	push	{r4, lr}
 800569a:	4802      	ldr	r0, [pc, #8]	@ (80056a4 <__malloc_lock+0xc>)
 800569c:	f7ff ff0d 	bl	80054ba <__retarget_lock_acquire_recursive>
 80056a0:	bd10      	pop	{r4, pc}
 80056a2:	46c0      	nop			@ (mov r8, r8)
 80056a4:	200003a4 	.word	0x200003a4

080056a8 <__malloc_unlock>:
 80056a8:	b510      	push	{r4, lr}
 80056aa:	4802      	ldr	r0, [pc, #8]	@ (80056b4 <__malloc_unlock+0xc>)
 80056ac:	f7ff ff06 	bl	80054bc <__retarget_lock_release_recursive>
 80056b0:	bd10      	pop	{r4, pc}
 80056b2:	46c0      	nop			@ (mov r8, r8)
 80056b4:	200003a4 	.word	0x200003a4

080056b8 <__sfputc_r>:
 80056b8:	6893      	ldr	r3, [r2, #8]
 80056ba:	b510      	push	{r4, lr}
 80056bc:	3b01      	subs	r3, #1
 80056be:	6093      	str	r3, [r2, #8]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	da04      	bge.n	80056ce <__sfputc_r+0x16>
 80056c4:	6994      	ldr	r4, [r2, #24]
 80056c6:	42a3      	cmp	r3, r4
 80056c8:	db07      	blt.n	80056da <__sfputc_r+0x22>
 80056ca:	290a      	cmp	r1, #10
 80056cc:	d005      	beq.n	80056da <__sfputc_r+0x22>
 80056ce:	6813      	ldr	r3, [r2, #0]
 80056d0:	1c58      	adds	r0, r3, #1
 80056d2:	6010      	str	r0, [r2, #0]
 80056d4:	7019      	strb	r1, [r3, #0]
 80056d6:	0008      	movs	r0, r1
 80056d8:	bd10      	pop	{r4, pc}
 80056da:	f7ff fdcd 	bl	8005278 <__swbuf_r>
 80056de:	0001      	movs	r1, r0
 80056e0:	e7f9      	b.n	80056d6 <__sfputc_r+0x1e>

080056e2 <__sfputs_r>:
 80056e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056e4:	0006      	movs	r6, r0
 80056e6:	000f      	movs	r7, r1
 80056e8:	0014      	movs	r4, r2
 80056ea:	18d5      	adds	r5, r2, r3
 80056ec:	42ac      	cmp	r4, r5
 80056ee:	d101      	bne.n	80056f4 <__sfputs_r+0x12>
 80056f0:	2000      	movs	r0, #0
 80056f2:	e007      	b.n	8005704 <__sfputs_r+0x22>
 80056f4:	7821      	ldrb	r1, [r4, #0]
 80056f6:	003a      	movs	r2, r7
 80056f8:	0030      	movs	r0, r6
 80056fa:	f7ff ffdd 	bl	80056b8 <__sfputc_r>
 80056fe:	3401      	adds	r4, #1
 8005700:	1c43      	adds	r3, r0, #1
 8005702:	d1f3      	bne.n	80056ec <__sfputs_r+0xa>
 8005704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005708 <_vfiprintf_r>:
 8005708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800570a:	b0a1      	sub	sp, #132	@ 0x84
 800570c:	000f      	movs	r7, r1
 800570e:	0015      	movs	r5, r2
 8005710:	001e      	movs	r6, r3
 8005712:	9003      	str	r0, [sp, #12]
 8005714:	2800      	cmp	r0, #0
 8005716:	d004      	beq.n	8005722 <_vfiprintf_r+0x1a>
 8005718:	6a03      	ldr	r3, [r0, #32]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d101      	bne.n	8005722 <_vfiprintf_r+0x1a>
 800571e:	f7ff fcbb 	bl	8005098 <__sinit>
 8005722:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005724:	07db      	lsls	r3, r3, #31
 8005726:	d405      	bmi.n	8005734 <_vfiprintf_r+0x2c>
 8005728:	89bb      	ldrh	r3, [r7, #12]
 800572a:	059b      	lsls	r3, r3, #22
 800572c:	d402      	bmi.n	8005734 <_vfiprintf_r+0x2c>
 800572e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005730:	f7ff fec3 	bl	80054ba <__retarget_lock_acquire_recursive>
 8005734:	89bb      	ldrh	r3, [r7, #12]
 8005736:	071b      	lsls	r3, r3, #28
 8005738:	d502      	bpl.n	8005740 <_vfiprintf_r+0x38>
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d113      	bne.n	8005768 <_vfiprintf_r+0x60>
 8005740:	0039      	movs	r1, r7
 8005742:	9803      	ldr	r0, [sp, #12]
 8005744:	f7ff fdda 	bl	80052fc <__swsetup_r>
 8005748:	2800      	cmp	r0, #0
 800574a:	d00d      	beq.n	8005768 <_vfiprintf_r+0x60>
 800574c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800574e:	07db      	lsls	r3, r3, #31
 8005750:	d503      	bpl.n	800575a <_vfiprintf_r+0x52>
 8005752:	2001      	movs	r0, #1
 8005754:	4240      	negs	r0, r0
 8005756:	b021      	add	sp, #132	@ 0x84
 8005758:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800575a:	89bb      	ldrh	r3, [r7, #12]
 800575c:	059b      	lsls	r3, r3, #22
 800575e:	d4f8      	bmi.n	8005752 <_vfiprintf_r+0x4a>
 8005760:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005762:	f7ff feab 	bl	80054bc <__retarget_lock_release_recursive>
 8005766:	e7f4      	b.n	8005752 <_vfiprintf_r+0x4a>
 8005768:	2300      	movs	r3, #0
 800576a:	ac08      	add	r4, sp, #32
 800576c:	6163      	str	r3, [r4, #20]
 800576e:	3320      	adds	r3, #32
 8005770:	7663      	strb	r3, [r4, #25]
 8005772:	3310      	adds	r3, #16
 8005774:	76a3      	strb	r3, [r4, #26]
 8005776:	9607      	str	r6, [sp, #28]
 8005778:	002e      	movs	r6, r5
 800577a:	7833      	ldrb	r3, [r6, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d001      	beq.n	8005784 <_vfiprintf_r+0x7c>
 8005780:	2b25      	cmp	r3, #37	@ 0x25
 8005782:	d148      	bne.n	8005816 <_vfiprintf_r+0x10e>
 8005784:	1b73      	subs	r3, r6, r5
 8005786:	9305      	str	r3, [sp, #20]
 8005788:	42ae      	cmp	r6, r5
 800578a:	d00b      	beq.n	80057a4 <_vfiprintf_r+0x9c>
 800578c:	002a      	movs	r2, r5
 800578e:	0039      	movs	r1, r7
 8005790:	9803      	ldr	r0, [sp, #12]
 8005792:	f7ff ffa6 	bl	80056e2 <__sfputs_r>
 8005796:	3001      	adds	r0, #1
 8005798:	d100      	bne.n	800579c <_vfiprintf_r+0x94>
 800579a:	e0ae      	b.n	80058fa <_vfiprintf_r+0x1f2>
 800579c:	6963      	ldr	r3, [r4, #20]
 800579e:	9a05      	ldr	r2, [sp, #20]
 80057a0:	189b      	adds	r3, r3, r2
 80057a2:	6163      	str	r3, [r4, #20]
 80057a4:	7833      	ldrb	r3, [r6, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d100      	bne.n	80057ac <_vfiprintf_r+0xa4>
 80057aa:	e0a6      	b.n	80058fa <_vfiprintf_r+0x1f2>
 80057ac:	2201      	movs	r2, #1
 80057ae:	2300      	movs	r3, #0
 80057b0:	4252      	negs	r2, r2
 80057b2:	6062      	str	r2, [r4, #4]
 80057b4:	a904      	add	r1, sp, #16
 80057b6:	3254      	adds	r2, #84	@ 0x54
 80057b8:	1852      	adds	r2, r2, r1
 80057ba:	1c75      	adds	r5, r6, #1
 80057bc:	6023      	str	r3, [r4, #0]
 80057be:	60e3      	str	r3, [r4, #12]
 80057c0:	60a3      	str	r3, [r4, #8]
 80057c2:	7013      	strb	r3, [r2, #0]
 80057c4:	65a3      	str	r3, [r4, #88]	@ 0x58
 80057c6:	4b59      	ldr	r3, [pc, #356]	@ (800592c <_vfiprintf_r+0x224>)
 80057c8:	2205      	movs	r2, #5
 80057ca:	0018      	movs	r0, r3
 80057cc:	7829      	ldrb	r1, [r5, #0]
 80057ce:	9305      	str	r3, [sp, #20]
 80057d0:	f000 fb88 	bl	8005ee4 <memchr>
 80057d4:	1c6e      	adds	r6, r5, #1
 80057d6:	2800      	cmp	r0, #0
 80057d8:	d11f      	bne.n	800581a <_vfiprintf_r+0x112>
 80057da:	6822      	ldr	r2, [r4, #0]
 80057dc:	06d3      	lsls	r3, r2, #27
 80057de:	d504      	bpl.n	80057ea <_vfiprintf_r+0xe2>
 80057e0:	2353      	movs	r3, #83	@ 0x53
 80057e2:	a904      	add	r1, sp, #16
 80057e4:	185b      	adds	r3, r3, r1
 80057e6:	2120      	movs	r1, #32
 80057e8:	7019      	strb	r1, [r3, #0]
 80057ea:	0713      	lsls	r3, r2, #28
 80057ec:	d504      	bpl.n	80057f8 <_vfiprintf_r+0xf0>
 80057ee:	2353      	movs	r3, #83	@ 0x53
 80057f0:	a904      	add	r1, sp, #16
 80057f2:	185b      	adds	r3, r3, r1
 80057f4:	212b      	movs	r1, #43	@ 0x2b
 80057f6:	7019      	strb	r1, [r3, #0]
 80057f8:	782b      	ldrb	r3, [r5, #0]
 80057fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80057fc:	d016      	beq.n	800582c <_vfiprintf_r+0x124>
 80057fe:	002e      	movs	r6, r5
 8005800:	2100      	movs	r1, #0
 8005802:	200a      	movs	r0, #10
 8005804:	68e3      	ldr	r3, [r4, #12]
 8005806:	7832      	ldrb	r2, [r6, #0]
 8005808:	1c75      	adds	r5, r6, #1
 800580a:	3a30      	subs	r2, #48	@ 0x30
 800580c:	2a09      	cmp	r2, #9
 800580e:	d950      	bls.n	80058b2 <_vfiprintf_r+0x1aa>
 8005810:	2900      	cmp	r1, #0
 8005812:	d111      	bne.n	8005838 <_vfiprintf_r+0x130>
 8005814:	e017      	b.n	8005846 <_vfiprintf_r+0x13e>
 8005816:	3601      	adds	r6, #1
 8005818:	e7af      	b.n	800577a <_vfiprintf_r+0x72>
 800581a:	9b05      	ldr	r3, [sp, #20]
 800581c:	6822      	ldr	r2, [r4, #0]
 800581e:	1ac0      	subs	r0, r0, r3
 8005820:	2301      	movs	r3, #1
 8005822:	4083      	lsls	r3, r0
 8005824:	4313      	orrs	r3, r2
 8005826:	0035      	movs	r5, r6
 8005828:	6023      	str	r3, [r4, #0]
 800582a:	e7cc      	b.n	80057c6 <_vfiprintf_r+0xbe>
 800582c:	9b07      	ldr	r3, [sp, #28]
 800582e:	1d19      	adds	r1, r3, #4
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	9107      	str	r1, [sp, #28]
 8005834:	2b00      	cmp	r3, #0
 8005836:	db01      	blt.n	800583c <_vfiprintf_r+0x134>
 8005838:	930b      	str	r3, [sp, #44]	@ 0x2c
 800583a:	e004      	b.n	8005846 <_vfiprintf_r+0x13e>
 800583c:	425b      	negs	r3, r3
 800583e:	60e3      	str	r3, [r4, #12]
 8005840:	2302      	movs	r3, #2
 8005842:	4313      	orrs	r3, r2
 8005844:	6023      	str	r3, [r4, #0]
 8005846:	7833      	ldrb	r3, [r6, #0]
 8005848:	2b2e      	cmp	r3, #46	@ 0x2e
 800584a:	d10c      	bne.n	8005866 <_vfiprintf_r+0x15e>
 800584c:	7873      	ldrb	r3, [r6, #1]
 800584e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005850:	d134      	bne.n	80058bc <_vfiprintf_r+0x1b4>
 8005852:	9b07      	ldr	r3, [sp, #28]
 8005854:	3602      	adds	r6, #2
 8005856:	1d1a      	adds	r2, r3, #4
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	9207      	str	r2, [sp, #28]
 800585c:	2b00      	cmp	r3, #0
 800585e:	da01      	bge.n	8005864 <_vfiprintf_r+0x15c>
 8005860:	2301      	movs	r3, #1
 8005862:	425b      	negs	r3, r3
 8005864:	9309      	str	r3, [sp, #36]	@ 0x24
 8005866:	4d32      	ldr	r5, [pc, #200]	@ (8005930 <_vfiprintf_r+0x228>)
 8005868:	2203      	movs	r2, #3
 800586a:	0028      	movs	r0, r5
 800586c:	7831      	ldrb	r1, [r6, #0]
 800586e:	f000 fb39 	bl	8005ee4 <memchr>
 8005872:	2800      	cmp	r0, #0
 8005874:	d006      	beq.n	8005884 <_vfiprintf_r+0x17c>
 8005876:	2340      	movs	r3, #64	@ 0x40
 8005878:	1b40      	subs	r0, r0, r5
 800587a:	4083      	lsls	r3, r0
 800587c:	6822      	ldr	r2, [r4, #0]
 800587e:	3601      	adds	r6, #1
 8005880:	4313      	orrs	r3, r2
 8005882:	6023      	str	r3, [r4, #0]
 8005884:	7831      	ldrb	r1, [r6, #0]
 8005886:	2206      	movs	r2, #6
 8005888:	482a      	ldr	r0, [pc, #168]	@ (8005934 <_vfiprintf_r+0x22c>)
 800588a:	1c75      	adds	r5, r6, #1
 800588c:	7621      	strb	r1, [r4, #24]
 800588e:	f000 fb29 	bl	8005ee4 <memchr>
 8005892:	2800      	cmp	r0, #0
 8005894:	d040      	beq.n	8005918 <_vfiprintf_r+0x210>
 8005896:	4b28      	ldr	r3, [pc, #160]	@ (8005938 <_vfiprintf_r+0x230>)
 8005898:	2b00      	cmp	r3, #0
 800589a:	d122      	bne.n	80058e2 <_vfiprintf_r+0x1da>
 800589c:	2207      	movs	r2, #7
 800589e:	9b07      	ldr	r3, [sp, #28]
 80058a0:	3307      	adds	r3, #7
 80058a2:	4393      	bics	r3, r2
 80058a4:	3308      	adds	r3, #8
 80058a6:	9307      	str	r3, [sp, #28]
 80058a8:	6963      	ldr	r3, [r4, #20]
 80058aa:	9a04      	ldr	r2, [sp, #16]
 80058ac:	189b      	adds	r3, r3, r2
 80058ae:	6163      	str	r3, [r4, #20]
 80058b0:	e762      	b.n	8005778 <_vfiprintf_r+0x70>
 80058b2:	4343      	muls	r3, r0
 80058b4:	002e      	movs	r6, r5
 80058b6:	2101      	movs	r1, #1
 80058b8:	189b      	adds	r3, r3, r2
 80058ba:	e7a4      	b.n	8005806 <_vfiprintf_r+0xfe>
 80058bc:	2300      	movs	r3, #0
 80058be:	200a      	movs	r0, #10
 80058c0:	0019      	movs	r1, r3
 80058c2:	3601      	adds	r6, #1
 80058c4:	6063      	str	r3, [r4, #4]
 80058c6:	7832      	ldrb	r2, [r6, #0]
 80058c8:	1c75      	adds	r5, r6, #1
 80058ca:	3a30      	subs	r2, #48	@ 0x30
 80058cc:	2a09      	cmp	r2, #9
 80058ce:	d903      	bls.n	80058d8 <_vfiprintf_r+0x1d0>
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d0c8      	beq.n	8005866 <_vfiprintf_r+0x15e>
 80058d4:	9109      	str	r1, [sp, #36]	@ 0x24
 80058d6:	e7c6      	b.n	8005866 <_vfiprintf_r+0x15e>
 80058d8:	4341      	muls	r1, r0
 80058da:	002e      	movs	r6, r5
 80058dc:	2301      	movs	r3, #1
 80058de:	1889      	adds	r1, r1, r2
 80058e0:	e7f1      	b.n	80058c6 <_vfiprintf_r+0x1be>
 80058e2:	aa07      	add	r2, sp, #28
 80058e4:	9200      	str	r2, [sp, #0]
 80058e6:	0021      	movs	r1, r4
 80058e8:	003a      	movs	r2, r7
 80058ea:	4b14      	ldr	r3, [pc, #80]	@ (800593c <_vfiprintf_r+0x234>)
 80058ec:	9803      	ldr	r0, [sp, #12]
 80058ee:	e000      	b.n	80058f2 <_vfiprintf_r+0x1ea>
 80058f0:	bf00      	nop
 80058f2:	9004      	str	r0, [sp, #16]
 80058f4:	9b04      	ldr	r3, [sp, #16]
 80058f6:	3301      	adds	r3, #1
 80058f8:	d1d6      	bne.n	80058a8 <_vfiprintf_r+0x1a0>
 80058fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80058fc:	07db      	lsls	r3, r3, #31
 80058fe:	d405      	bmi.n	800590c <_vfiprintf_r+0x204>
 8005900:	89bb      	ldrh	r3, [r7, #12]
 8005902:	059b      	lsls	r3, r3, #22
 8005904:	d402      	bmi.n	800590c <_vfiprintf_r+0x204>
 8005906:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005908:	f7ff fdd8 	bl	80054bc <__retarget_lock_release_recursive>
 800590c:	89bb      	ldrh	r3, [r7, #12]
 800590e:	065b      	lsls	r3, r3, #25
 8005910:	d500      	bpl.n	8005914 <_vfiprintf_r+0x20c>
 8005912:	e71e      	b.n	8005752 <_vfiprintf_r+0x4a>
 8005914:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8005916:	e71e      	b.n	8005756 <_vfiprintf_r+0x4e>
 8005918:	aa07      	add	r2, sp, #28
 800591a:	9200      	str	r2, [sp, #0]
 800591c:	0021      	movs	r1, r4
 800591e:	003a      	movs	r2, r7
 8005920:	4b06      	ldr	r3, [pc, #24]	@ (800593c <_vfiprintf_r+0x234>)
 8005922:	9803      	ldr	r0, [sp, #12]
 8005924:	f000 f87c 	bl	8005a20 <_printf_i>
 8005928:	e7e3      	b.n	80058f2 <_vfiprintf_r+0x1ea>
 800592a:	46c0      	nop			@ (mov r8, r8)
 800592c:	08006024 	.word	0x08006024
 8005930:	0800602a 	.word	0x0800602a
 8005934:	0800602e 	.word	0x0800602e
 8005938:	00000000 	.word	0x00000000
 800593c:	080056e3 	.word	0x080056e3

08005940 <_printf_common>:
 8005940:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005942:	0016      	movs	r6, r2
 8005944:	9301      	str	r3, [sp, #4]
 8005946:	688a      	ldr	r2, [r1, #8]
 8005948:	690b      	ldr	r3, [r1, #16]
 800594a:	000c      	movs	r4, r1
 800594c:	9000      	str	r0, [sp, #0]
 800594e:	4293      	cmp	r3, r2
 8005950:	da00      	bge.n	8005954 <_printf_common+0x14>
 8005952:	0013      	movs	r3, r2
 8005954:	0022      	movs	r2, r4
 8005956:	6033      	str	r3, [r6, #0]
 8005958:	3243      	adds	r2, #67	@ 0x43
 800595a:	7812      	ldrb	r2, [r2, #0]
 800595c:	2a00      	cmp	r2, #0
 800595e:	d001      	beq.n	8005964 <_printf_common+0x24>
 8005960:	3301      	adds	r3, #1
 8005962:	6033      	str	r3, [r6, #0]
 8005964:	6823      	ldr	r3, [r4, #0]
 8005966:	069b      	lsls	r3, r3, #26
 8005968:	d502      	bpl.n	8005970 <_printf_common+0x30>
 800596a:	6833      	ldr	r3, [r6, #0]
 800596c:	3302      	adds	r3, #2
 800596e:	6033      	str	r3, [r6, #0]
 8005970:	6822      	ldr	r2, [r4, #0]
 8005972:	2306      	movs	r3, #6
 8005974:	0015      	movs	r5, r2
 8005976:	401d      	ands	r5, r3
 8005978:	421a      	tst	r2, r3
 800597a:	d027      	beq.n	80059cc <_printf_common+0x8c>
 800597c:	0023      	movs	r3, r4
 800597e:	3343      	adds	r3, #67	@ 0x43
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	1e5a      	subs	r2, r3, #1
 8005984:	4193      	sbcs	r3, r2
 8005986:	6822      	ldr	r2, [r4, #0]
 8005988:	0692      	lsls	r2, r2, #26
 800598a:	d430      	bmi.n	80059ee <_printf_common+0xae>
 800598c:	0022      	movs	r2, r4
 800598e:	9901      	ldr	r1, [sp, #4]
 8005990:	9800      	ldr	r0, [sp, #0]
 8005992:	9d08      	ldr	r5, [sp, #32]
 8005994:	3243      	adds	r2, #67	@ 0x43
 8005996:	47a8      	blx	r5
 8005998:	3001      	adds	r0, #1
 800599a:	d025      	beq.n	80059e8 <_printf_common+0xa8>
 800599c:	2206      	movs	r2, #6
 800599e:	6823      	ldr	r3, [r4, #0]
 80059a0:	2500      	movs	r5, #0
 80059a2:	4013      	ands	r3, r2
 80059a4:	2b04      	cmp	r3, #4
 80059a6:	d105      	bne.n	80059b4 <_printf_common+0x74>
 80059a8:	6833      	ldr	r3, [r6, #0]
 80059aa:	68e5      	ldr	r5, [r4, #12]
 80059ac:	1aed      	subs	r5, r5, r3
 80059ae:	43eb      	mvns	r3, r5
 80059b0:	17db      	asrs	r3, r3, #31
 80059b2:	401d      	ands	r5, r3
 80059b4:	68a3      	ldr	r3, [r4, #8]
 80059b6:	6922      	ldr	r2, [r4, #16]
 80059b8:	4293      	cmp	r3, r2
 80059ba:	dd01      	ble.n	80059c0 <_printf_common+0x80>
 80059bc:	1a9b      	subs	r3, r3, r2
 80059be:	18ed      	adds	r5, r5, r3
 80059c0:	2600      	movs	r6, #0
 80059c2:	42b5      	cmp	r5, r6
 80059c4:	d120      	bne.n	8005a08 <_printf_common+0xc8>
 80059c6:	2000      	movs	r0, #0
 80059c8:	e010      	b.n	80059ec <_printf_common+0xac>
 80059ca:	3501      	adds	r5, #1
 80059cc:	68e3      	ldr	r3, [r4, #12]
 80059ce:	6832      	ldr	r2, [r6, #0]
 80059d0:	1a9b      	subs	r3, r3, r2
 80059d2:	42ab      	cmp	r3, r5
 80059d4:	ddd2      	ble.n	800597c <_printf_common+0x3c>
 80059d6:	0022      	movs	r2, r4
 80059d8:	2301      	movs	r3, #1
 80059da:	9901      	ldr	r1, [sp, #4]
 80059dc:	9800      	ldr	r0, [sp, #0]
 80059de:	9f08      	ldr	r7, [sp, #32]
 80059e0:	3219      	adds	r2, #25
 80059e2:	47b8      	blx	r7
 80059e4:	3001      	adds	r0, #1
 80059e6:	d1f0      	bne.n	80059ca <_printf_common+0x8a>
 80059e8:	2001      	movs	r0, #1
 80059ea:	4240      	negs	r0, r0
 80059ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80059ee:	2030      	movs	r0, #48	@ 0x30
 80059f0:	18e1      	adds	r1, r4, r3
 80059f2:	3143      	adds	r1, #67	@ 0x43
 80059f4:	7008      	strb	r0, [r1, #0]
 80059f6:	0021      	movs	r1, r4
 80059f8:	1c5a      	adds	r2, r3, #1
 80059fa:	3145      	adds	r1, #69	@ 0x45
 80059fc:	7809      	ldrb	r1, [r1, #0]
 80059fe:	18a2      	adds	r2, r4, r2
 8005a00:	3243      	adds	r2, #67	@ 0x43
 8005a02:	3302      	adds	r3, #2
 8005a04:	7011      	strb	r1, [r2, #0]
 8005a06:	e7c1      	b.n	800598c <_printf_common+0x4c>
 8005a08:	0022      	movs	r2, r4
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	9901      	ldr	r1, [sp, #4]
 8005a0e:	9800      	ldr	r0, [sp, #0]
 8005a10:	9f08      	ldr	r7, [sp, #32]
 8005a12:	321a      	adds	r2, #26
 8005a14:	47b8      	blx	r7
 8005a16:	3001      	adds	r0, #1
 8005a18:	d0e6      	beq.n	80059e8 <_printf_common+0xa8>
 8005a1a:	3601      	adds	r6, #1
 8005a1c:	e7d1      	b.n	80059c2 <_printf_common+0x82>
	...

08005a20 <_printf_i>:
 8005a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a22:	b08b      	sub	sp, #44	@ 0x2c
 8005a24:	9206      	str	r2, [sp, #24]
 8005a26:	000a      	movs	r2, r1
 8005a28:	3243      	adds	r2, #67	@ 0x43
 8005a2a:	9307      	str	r3, [sp, #28]
 8005a2c:	9005      	str	r0, [sp, #20]
 8005a2e:	9203      	str	r2, [sp, #12]
 8005a30:	7e0a      	ldrb	r2, [r1, #24]
 8005a32:	000c      	movs	r4, r1
 8005a34:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005a36:	2a78      	cmp	r2, #120	@ 0x78
 8005a38:	d809      	bhi.n	8005a4e <_printf_i+0x2e>
 8005a3a:	2a62      	cmp	r2, #98	@ 0x62
 8005a3c:	d80b      	bhi.n	8005a56 <_printf_i+0x36>
 8005a3e:	2a00      	cmp	r2, #0
 8005a40:	d100      	bne.n	8005a44 <_printf_i+0x24>
 8005a42:	e0bc      	b.n	8005bbe <_printf_i+0x19e>
 8005a44:	497b      	ldr	r1, [pc, #492]	@ (8005c34 <_printf_i+0x214>)
 8005a46:	9104      	str	r1, [sp, #16]
 8005a48:	2a58      	cmp	r2, #88	@ 0x58
 8005a4a:	d100      	bne.n	8005a4e <_printf_i+0x2e>
 8005a4c:	e090      	b.n	8005b70 <_printf_i+0x150>
 8005a4e:	0025      	movs	r5, r4
 8005a50:	3542      	adds	r5, #66	@ 0x42
 8005a52:	702a      	strb	r2, [r5, #0]
 8005a54:	e022      	b.n	8005a9c <_printf_i+0x7c>
 8005a56:	0010      	movs	r0, r2
 8005a58:	3863      	subs	r0, #99	@ 0x63
 8005a5a:	2815      	cmp	r0, #21
 8005a5c:	d8f7      	bhi.n	8005a4e <_printf_i+0x2e>
 8005a5e:	f7fa fb53 	bl	8000108 <__gnu_thumb1_case_shi>
 8005a62:	0016      	.short	0x0016
 8005a64:	fff6001f 	.word	0xfff6001f
 8005a68:	fff6fff6 	.word	0xfff6fff6
 8005a6c:	001ffff6 	.word	0x001ffff6
 8005a70:	fff6fff6 	.word	0xfff6fff6
 8005a74:	fff6fff6 	.word	0xfff6fff6
 8005a78:	003600a1 	.word	0x003600a1
 8005a7c:	fff60080 	.word	0xfff60080
 8005a80:	00b2fff6 	.word	0x00b2fff6
 8005a84:	0036fff6 	.word	0x0036fff6
 8005a88:	fff6fff6 	.word	0xfff6fff6
 8005a8c:	0084      	.short	0x0084
 8005a8e:	0025      	movs	r5, r4
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	3542      	adds	r5, #66	@ 0x42
 8005a94:	1d11      	adds	r1, r2, #4
 8005a96:	6019      	str	r1, [r3, #0]
 8005a98:	6813      	ldr	r3, [r2, #0]
 8005a9a:	702b      	strb	r3, [r5, #0]
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e0a0      	b.n	8005be2 <_printf_i+0x1c2>
 8005aa0:	6818      	ldr	r0, [r3, #0]
 8005aa2:	6809      	ldr	r1, [r1, #0]
 8005aa4:	1d02      	adds	r2, r0, #4
 8005aa6:	060d      	lsls	r5, r1, #24
 8005aa8:	d50b      	bpl.n	8005ac2 <_printf_i+0xa2>
 8005aaa:	6806      	ldr	r6, [r0, #0]
 8005aac:	601a      	str	r2, [r3, #0]
 8005aae:	2e00      	cmp	r6, #0
 8005ab0:	da03      	bge.n	8005aba <_printf_i+0x9a>
 8005ab2:	232d      	movs	r3, #45	@ 0x2d
 8005ab4:	9a03      	ldr	r2, [sp, #12]
 8005ab6:	4276      	negs	r6, r6
 8005ab8:	7013      	strb	r3, [r2, #0]
 8005aba:	4b5e      	ldr	r3, [pc, #376]	@ (8005c34 <_printf_i+0x214>)
 8005abc:	270a      	movs	r7, #10
 8005abe:	9304      	str	r3, [sp, #16]
 8005ac0:	e018      	b.n	8005af4 <_printf_i+0xd4>
 8005ac2:	6806      	ldr	r6, [r0, #0]
 8005ac4:	601a      	str	r2, [r3, #0]
 8005ac6:	0649      	lsls	r1, r1, #25
 8005ac8:	d5f1      	bpl.n	8005aae <_printf_i+0x8e>
 8005aca:	b236      	sxth	r6, r6
 8005acc:	e7ef      	b.n	8005aae <_printf_i+0x8e>
 8005ace:	6808      	ldr	r0, [r1, #0]
 8005ad0:	6819      	ldr	r1, [r3, #0]
 8005ad2:	c940      	ldmia	r1!, {r6}
 8005ad4:	0605      	lsls	r5, r0, #24
 8005ad6:	d402      	bmi.n	8005ade <_printf_i+0xbe>
 8005ad8:	0640      	lsls	r0, r0, #25
 8005ada:	d500      	bpl.n	8005ade <_printf_i+0xbe>
 8005adc:	b2b6      	uxth	r6, r6
 8005ade:	6019      	str	r1, [r3, #0]
 8005ae0:	4b54      	ldr	r3, [pc, #336]	@ (8005c34 <_printf_i+0x214>)
 8005ae2:	270a      	movs	r7, #10
 8005ae4:	9304      	str	r3, [sp, #16]
 8005ae6:	2a6f      	cmp	r2, #111	@ 0x6f
 8005ae8:	d100      	bne.n	8005aec <_printf_i+0xcc>
 8005aea:	3f02      	subs	r7, #2
 8005aec:	0023      	movs	r3, r4
 8005aee:	2200      	movs	r2, #0
 8005af0:	3343      	adds	r3, #67	@ 0x43
 8005af2:	701a      	strb	r2, [r3, #0]
 8005af4:	6863      	ldr	r3, [r4, #4]
 8005af6:	60a3      	str	r3, [r4, #8]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	db03      	blt.n	8005b04 <_printf_i+0xe4>
 8005afc:	2104      	movs	r1, #4
 8005afe:	6822      	ldr	r2, [r4, #0]
 8005b00:	438a      	bics	r2, r1
 8005b02:	6022      	str	r2, [r4, #0]
 8005b04:	2e00      	cmp	r6, #0
 8005b06:	d102      	bne.n	8005b0e <_printf_i+0xee>
 8005b08:	9d03      	ldr	r5, [sp, #12]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d00c      	beq.n	8005b28 <_printf_i+0x108>
 8005b0e:	9d03      	ldr	r5, [sp, #12]
 8005b10:	0030      	movs	r0, r6
 8005b12:	0039      	movs	r1, r7
 8005b14:	f7fa fb88 	bl	8000228 <__aeabi_uidivmod>
 8005b18:	9b04      	ldr	r3, [sp, #16]
 8005b1a:	3d01      	subs	r5, #1
 8005b1c:	5c5b      	ldrb	r3, [r3, r1]
 8005b1e:	702b      	strb	r3, [r5, #0]
 8005b20:	0033      	movs	r3, r6
 8005b22:	0006      	movs	r6, r0
 8005b24:	429f      	cmp	r7, r3
 8005b26:	d9f3      	bls.n	8005b10 <_printf_i+0xf0>
 8005b28:	2f08      	cmp	r7, #8
 8005b2a:	d109      	bne.n	8005b40 <_printf_i+0x120>
 8005b2c:	6823      	ldr	r3, [r4, #0]
 8005b2e:	07db      	lsls	r3, r3, #31
 8005b30:	d506      	bpl.n	8005b40 <_printf_i+0x120>
 8005b32:	6862      	ldr	r2, [r4, #4]
 8005b34:	6923      	ldr	r3, [r4, #16]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	dc02      	bgt.n	8005b40 <_printf_i+0x120>
 8005b3a:	2330      	movs	r3, #48	@ 0x30
 8005b3c:	3d01      	subs	r5, #1
 8005b3e:	702b      	strb	r3, [r5, #0]
 8005b40:	9b03      	ldr	r3, [sp, #12]
 8005b42:	1b5b      	subs	r3, r3, r5
 8005b44:	6123      	str	r3, [r4, #16]
 8005b46:	9b07      	ldr	r3, [sp, #28]
 8005b48:	0021      	movs	r1, r4
 8005b4a:	9300      	str	r3, [sp, #0]
 8005b4c:	9805      	ldr	r0, [sp, #20]
 8005b4e:	9b06      	ldr	r3, [sp, #24]
 8005b50:	aa09      	add	r2, sp, #36	@ 0x24
 8005b52:	f7ff fef5 	bl	8005940 <_printf_common>
 8005b56:	3001      	adds	r0, #1
 8005b58:	d148      	bne.n	8005bec <_printf_i+0x1cc>
 8005b5a:	2001      	movs	r0, #1
 8005b5c:	4240      	negs	r0, r0
 8005b5e:	b00b      	add	sp, #44	@ 0x2c
 8005b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b62:	2220      	movs	r2, #32
 8005b64:	6809      	ldr	r1, [r1, #0]
 8005b66:	430a      	orrs	r2, r1
 8005b68:	6022      	str	r2, [r4, #0]
 8005b6a:	2278      	movs	r2, #120	@ 0x78
 8005b6c:	4932      	ldr	r1, [pc, #200]	@ (8005c38 <_printf_i+0x218>)
 8005b6e:	9104      	str	r1, [sp, #16]
 8005b70:	0021      	movs	r1, r4
 8005b72:	3145      	adds	r1, #69	@ 0x45
 8005b74:	700a      	strb	r2, [r1, #0]
 8005b76:	6819      	ldr	r1, [r3, #0]
 8005b78:	6822      	ldr	r2, [r4, #0]
 8005b7a:	c940      	ldmia	r1!, {r6}
 8005b7c:	0610      	lsls	r0, r2, #24
 8005b7e:	d402      	bmi.n	8005b86 <_printf_i+0x166>
 8005b80:	0650      	lsls	r0, r2, #25
 8005b82:	d500      	bpl.n	8005b86 <_printf_i+0x166>
 8005b84:	b2b6      	uxth	r6, r6
 8005b86:	6019      	str	r1, [r3, #0]
 8005b88:	07d3      	lsls	r3, r2, #31
 8005b8a:	d502      	bpl.n	8005b92 <_printf_i+0x172>
 8005b8c:	2320      	movs	r3, #32
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	6023      	str	r3, [r4, #0]
 8005b92:	2e00      	cmp	r6, #0
 8005b94:	d001      	beq.n	8005b9a <_printf_i+0x17a>
 8005b96:	2710      	movs	r7, #16
 8005b98:	e7a8      	b.n	8005aec <_printf_i+0xcc>
 8005b9a:	2220      	movs	r2, #32
 8005b9c:	6823      	ldr	r3, [r4, #0]
 8005b9e:	4393      	bics	r3, r2
 8005ba0:	6023      	str	r3, [r4, #0]
 8005ba2:	e7f8      	b.n	8005b96 <_printf_i+0x176>
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	680d      	ldr	r5, [r1, #0]
 8005ba8:	1d10      	adds	r0, r2, #4
 8005baa:	6949      	ldr	r1, [r1, #20]
 8005bac:	6018      	str	r0, [r3, #0]
 8005bae:	6813      	ldr	r3, [r2, #0]
 8005bb0:	062e      	lsls	r6, r5, #24
 8005bb2:	d501      	bpl.n	8005bb8 <_printf_i+0x198>
 8005bb4:	6019      	str	r1, [r3, #0]
 8005bb6:	e002      	b.n	8005bbe <_printf_i+0x19e>
 8005bb8:	066d      	lsls	r5, r5, #25
 8005bba:	d5fb      	bpl.n	8005bb4 <_printf_i+0x194>
 8005bbc:	8019      	strh	r1, [r3, #0]
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	9d03      	ldr	r5, [sp, #12]
 8005bc2:	6123      	str	r3, [r4, #16]
 8005bc4:	e7bf      	b.n	8005b46 <_printf_i+0x126>
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	1d11      	adds	r1, r2, #4
 8005bca:	6019      	str	r1, [r3, #0]
 8005bcc:	6815      	ldr	r5, [r2, #0]
 8005bce:	2100      	movs	r1, #0
 8005bd0:	0028      	movs	r0, r5
 8005bd2:	6862      	ldr	r2, [r4, #4]
 8005bd4:	f000 f986 	bl	8005ee4 <memchr>
 8005bd8:	2800      	cmp	r0, #0
 8005bda:	d001      	beq.n	8005be0 <_printf_i+0x1c0>
 8005bdc:	1b40      	subs	r0, r0, r5
 8005bde:	6060      	str	r0, [r4, #4]
 8005be0:	6863      	ldr	r3, [r4, #4]
 8005be2:	6123      	str	r3, [r4, #16]
 8005be4:	2300      	movs	r3, #0
 8005be6:	9a03      	ldr	r2, [sp, #12]
 8005be8:	7013      	strb	r3, [r2, #0]
 8005bea:	e7ac      	b.n	8005b46 <_printf_i+0x126>
 8005bec:	002a      	movs	r2, r5
 8005bee:	6923      	ldr	r3, [r4, #16]
 8005bf0:	9906      	ldr	r1, [sp, #24]
 8005bf2:	9805      	ldr	r0, [sp, #20]
 8005bf4:	9d07      	ldr	r5, [sp, #28]
 8005bf6:	47a8      	blx	r5
 8005bf8:	3001      	adds	r0, #1
 8005bfa:	d0ae      	beq.n	8005b5a <_printf_i+0x13a>
 8005bfc:	6823      	ldr	r3, [r4, #0]
 8005bfe:	079b      	lsls	r3, r3, #30
 8005c00:	d415      	bmi.n	8005c2e <_printf_i+0x20e>
 8005c02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c04:	68e0      	ldr	r0, [r4, #12]
 8005c06:	4298      	cmp	r0, r3
 8005c08:	daa9      	bge.n	8005b5e <_printf_i+0x13e>
 8005c0a:	0018      	movs	r0, r3
 8005c0c:	e7a7      	b.n	8005b5e <_printf_i+0x13e>
 8005c0e:	0022      	movs	r2, r4
 8005c10:	2301      	movs	r3, #1
 8005c12:	9906      	ldr	r1, [sp, #24]
 8005c14:	9805      	ldr	r0, [sp, #20]
 8005c16:	9e07      	ldr	r6, [sp, #28]
 8005c18:	3219      	adds	r2, #25
 8005c1a:	47b0      	blx	r6
 8005c1c:	3001      	adds	r0, #1
 8005c1e:	d09c      	beq.n	8005b5a <_printf_i+0x13a>
 8005c20:	3501      	adds	r5, #1
 8005c22:	68e3      	ldr	r3, [r4, #12]
 8005c24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005c26:	1a9b      	subs	r3, r3, r2
 8005c28:	42ab      	cmp	r3, r5
 8005c2a:	dcf0      	bgt.n	8005c0e <_printf_i+0x1ee>
 8005c2c:	e7e9      	b.n	8005c02 <_printf_i+0x1e2>
 8005c2e:	2500      	movs	r5, #0
 8005c30:	e7f7      	b.n	8005c22 <_printf_i+0x202>
 8005c32:	46c0      	nop			@ (mov r8, r8)
 8005c34:	08006035 	.word	0x08006035
 8005c38:	08006046 	.word	0x08006046

08005c3c <__sflush_r>:
 8005c3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c3e:	220c      	movs	r2, #12
 8005c40:	5e8b      	ldrsh	r3, [r1, r2]
 8005c42:	0005      	movs	r5, r0
 8005c44:	000c      	movs	r4, r1
 8005c46:	071a      	lsls	r2, r3, #28
 8005c48:	d456      	bmi.n	8005cf8 <__sflush_r+0xbc>
 8005c4a:	684a      	ldr	r2, [r1, #4]
 8005c4c:	2a00      	cmp	r2, #0
 8005c4e:	dc02      	bgt.n	8005c56 <__sflush_r+0x1a>
 8005c50:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8005c52:	2a00      	cmp	r2, #0
 8005c54:	dd4e      	ble.n	8005cf4 <__sflush_r+0xb8>
 8005c56:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8005c58:	2f00      	cmp	r7, #0
 8005c5a:	d04b      	beq.n	8005cf4 <__sflush_r+0xb8>
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	2080      	movs	r0, #128	@ 0x80
 8005c60:	682e      	ldr	r6, [r5, #0]
 8005c62:	602a      	str	r2, [r5, #0]
 8005c64:	001a      	movs	r2, r3
 8005c66:	0140      	lsls	r0, r0, #5
 8005c68:	6a21      	ldr	r1, [r4, #32]
 8005c6a:	4002      	ands	r2, r0
 8005c6c:	4203      	tst	r3, r0
 8005c6e:	d033      	beq.n	8005cd8 <__sflush_r+0x9c>
 8005c70:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005c72:	89a3      	ldrh	r3, [r4, #12]
 8005c74:	075b      	lsls	r3, r3, #29
 8005c76:	d506      	bpl.n	8005c86 <__sflush_r+0x4a>
 8005c78:	6863      	ldr	r3, [r4, #4]
 8005c7a:	1ad2      	subs	r2, r2, r3
 8005c7c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d001      	beq.n	8005c86 <__sflush_r+0x4a>
 8005c82:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005c84:	1ad2      	subs	r2, r2, r3
 8005c86:	2300      	movs	r3, #0
 8005c88:	0028      	movs	r0, r5
 8005c8a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8005c8c:	6a21      	ldr	r1, [r4, #32]
 8005c8e:	47b8      	blx	r7
 8005c90:	89a2      	ldrh	r2, [r4, #12]
 8005c92:	1c43      	adds	r3, r0, #1
 8005c94:	d106      	bne.n	8005ca4 <__sflush_r+0x68>
 8005c96:	6829      	ldr	r1, [r5, #0]
 8005c98:	291d      	cmp	r1, #29
 8005c9a:	d846      	bhi.n	8005d2a <__sflush_r+0xee>
 8005c9c:	4b29      	ldr	r3, [pc, #164]	@ (8005d44 <__sflush_r+0x108>)
 8005c9e:	410b      	asrs	r3, r1
 8005ca0:	07db      	lsls	r3, r3, #31
 8005ca2:	d442      	bmi.n	8005d2a <__sflush_r+0xee>
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	6063      	str	r3, [r4, #4]
 8005ca8:	6923      	ldr	r3, [r4, #16]
 8005caa:	6023      	str	r3, [r4, #0]
 8005cac:	04d2      	lsls	r2, r2, #19
 8005cae:	d505      	bpl.n	8005cbc <__sflush_r+0x80>
 8005cb0:	1c43      	adds	r3, r0, #1
 8005cb2:	d102      	bne.n	8005cba <__sflush_r+0x7e>
 8005cb4:	682b      	ldr	r3, [r5, #0]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d100      	bne.n	8005cbc <__sflush_r+0x80>
 8005cba:	6560      	str	r0, [r4, #84]	@ 0x54
 8005cbc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005cbe:	602e      	str	r6, [r5, #0]
 8005cc0:	2900      	cmp	r1, #0
 8005cc2:	d017      	beq.n	8005cf4 <__sflush_r+0xb8>
 8005cc4:	0023      	movs	r3, r4
 8005cc6:	3344      	adds	r3, #68	@ 0x44
 8005cc8:	4299      	cmp	r1, r3
 8005cca:	d002      	beq.n	8005cd2 <__sflush_r+0x96>
 8005ccc:	0028      	movs	r0, r5
 8005cce:	f7ff fbf7 	bl	80054c0 <_free_r>
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	6363      	str	r3, [r4, #52]	@ 0x34
 8005cd6:	e00d      	b.n	8005cf4 <__sflush_r+0xb8>
 8005cd8:	2301      	movs	r3, #1
 8005cda:	0028      	movs	r0, r5
 8005cdc:	47b8      	blx	r7
 8005cde:	0002      	movs	r2, r0
 8005ce0:	1c43      	adds	r3, r0, #1
 8005ce2:	d1c6      	bne.n	8005c72 <__sflush_r+0x36>
 8005ce4:	682b      	ldr	r3, [r5, #0]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d0c3      	beq.n	8005c72 <__sflush_r+0x36>
 8005cea:	2b1d      	cmp	r3, #29
 8005cec:	d001      	beq.n	8005cf2 <__sflush_r+0xb6>
 8005cee:	2b16      	cmp	r3, #22
 8005cf0:	d11a      	bne.n	8005d28 <__sflush_r+0xec>
 8005cf2:	602e      	str	r6, [r5, #0]
 8005cf4:	2000      	movs	r0, #0
 8005cf6:	e01e      	b.n	8005d36 <__sflush_r+0xfa>
 8005cf8:	690e      	ldr	r6, [r1, #16]
 8005cfa:	2e00      	cmp	r6, #0
 8005cfc:	d0fa      	beq.n	8005cf4 <__sflush_r+0xb8>
 8005cfe:	680f      	ldr	r7, [r1, #0]
 8005d00:	600e      	str	r6, [r1, #0]
 8005d02:	1bba      	subs	r2, r7, r6
 8005d04:	9201      	str	r2, [sp, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	079b      	lsls	r3, r3, #30
 8005d0a:	d100      	bne.n	8005d0e <__sflush_r+0xd2>
 8005d0c:	694a      	ldr	r2, [r1, #20]
 8005d0e:	60a2      	str	r2, [r4, #8]
 8005d10:	9b01      	ldr	r3, [sp, #4]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	ddee      	ble.n	8005cf4 <__sflush_r+0xb8>
 8005d16:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005d18:	0032      	movs	r2, r6
 8005d1a:	001f      	movs	r7, r3
 8005d1c:	0028      	movs	r0, r5
 8005d1e:	9b01      	ldr	r3, [sp, #4]
 8005d20:	6a21      	ldr	r1, [r4, #32]
 8005d22:	47b8      	blx	r7
 8005d24:	2800      	cmp	r0, #0
 8005d26:	dc07      	bgt.n	8005d38 <__sflush_r+0xfc>
 8005d28:	89a2      	ldrh	r2, [r4, #12]
 8005d2a:	2340      	movs	r3, #64	@ 0x40
 8005d2c:	2001      	movs	r0, #1
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	b21b      	sxth	r3, r3
 8005d32:	81a3      	strh	r3, [r4, #12]
 8005d34:	4240      	negs	r0, r0
 8005d36:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005d38:	9b01      	ldr	r3, [sp, #4]
 8005d3a:	1836      	adds	r6, r6, r0
 8005d3c:	1a1b      	subs	r3, r3, r0
 8005d3e:	9301      	str	r3, [sp, #4]
 8005d40:	e7e6      	b.n	8005d10 <__sflush_r+0xd4>
 8005d42:	46c0      	nop			@ (mov r8, r8)
 8005d44:	dfbffffe 	.word	0xdfbffffe

08005d48 <_fflush_r>:
 8005d48:	690b      	ldr	r3, [r1, #16]
 8005d4a:	b570      	push	{r4, r5, r6, lr}
 8005d4c:	0005      	movs	r5, r0
 8005d4e:	000c      	movs	r4, r1
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d102      	bne.n	8005d5a <_fflush_r+0x12>
 8005d54:	2500      	movs	r5, #0
 8005d56:	0028      	movs	r0, r5
 8005d58:	bd70      	pop	{r4, r5, r6, pc}
 8005d5a:	2800      	cmp	r0, #0
 8005d5c:	d004      	beq.n	8005d68 <_fflush_r+0x20>
 8005d5e:	6a03      	ldr	r3, [r0, #32]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d101      	bne.n	8005d68 <_fflush_r+0x20>
 8005d64:	f7ff f998 	bl	8005098 <__sinit>
 8005d68:	220c      	movs	r2, #12
 8005d6a:	5ea3      	ldrsh	r3, [r4, r2]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d0f1      	beq.n	8005d54 <_fflush_r+0xc>
 8005d70:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005d72:	07d2      	lsls	r2, r2, #31
 8005d74:	d404      	bmi.n	8005d80 <_fflush_r+0x38>
 8005d76:	059b      	lsls	r3, r3, #22
 8005d78:	d402      	bmi.n	8005d80 <_fflush_r+0x38>
 8005d7a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d7c:	f7ff fb9d 	bl	80054ba <__retarget_lock_acquire_recursive>
 8005d80:	0028      	movs	r0, r5
 8005d82:	0021      	movs	r1, r4
 8005d84:	f7ff ff5a 	bl	8005c3c <__sflush_r>
 8005d88:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005d8a:	0005      	movs	r5, r0
 8005d8c:	07db      	lsls	r3, r3, #31
 8005d8e:	d4e2      	bmi.n	8005d56 <_fflush_r+0xe>
 8005d90:	89a3      	ldrh	r3, [r4, #12]
 8005d92:	059b      	lsls	r3, r3, #22
 8005d94:	d4df      	bmi.n	8005d56 <_fflush_r+0xe>
 8005d96:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d98:	f7ff fb90 	bl	80054bc <__retarget_lock_release_recursive>
 8005d9c:	e7db      	b.n	8005d56 <_fflush_r+0xe>
	...

08005da0 <__swhatbuf_r>:
 8005da0:	b570      	push	{r4, r5, r6, lr}
 8005da2:	000e      	movs	r6, r1
 8005da4:	001d      	movs	r5, r3
 8005da6:	230e      	movs	r3, #14
 8005da8:	5ec9      	ldrsh	r1, [r1, r3]
 8005daa:	0014      	movs	r4, r2
 8005dac:	b096      	sub	sp, #88	@ 0x58
 8005dae:	2900      	cmp	r1, #0
 8005db0:	da0c      	bge.n	8005dcc <__swhatbuf_r+0x2c>
 8005db2:	89b2      	ldrh	r2, [r6, #12]
 8005db4:	2380      	movs	r3, #128	@ 0x80
 8005db6:	0011      	movs	r1, r2
 8005db8:	4019      	ands	r1, r3
 8005dba:	421a      	tst	r2, r3
 8005dbc:	d114      	bne.n	8005de8 <__swhatbuf_r+0x48>
 8005dbe:	2380      	movs	r3, #128	@ 0x80
 8005dc0:	00db      	lsls	r3, r3, #3
 8005dc2:	2000      	movs	r0, #0
 8005dc4:	6029      	str	r1, [r5, #0]
 8005dc6:	6023      	str	r3, [r4, #0]
 8005dc8:	b016      	add	sp, #88	@ 0x58
 8005dca:	bd70      	pop	{r4, r5, r6, pc}
 8005dcc:	466a      	mov	r2, sp
 8005dce:	f000 f853 	bl	8005e78 <_fstat_r>
 8005dd2:	2800      	cmp	r0, #0
 8005dd4:	dbed      	blt.n	8005db2 <__swhatbuf_r+0x12>
 8005dd6:	23f0      	movs	r3, #240	@ 0xf0
 8005dd8:	9901      	ldr	r1, [sp, #4]
 8005dda:	021b      	lsls	r3, r3, #8
 8005ddc:	4019      	ands	r1, r3
 8005dde:	4b04      	ldr	r3, [pc, #16]	@ (8005df0 <__swhatbuf_r+0x50>)
 8005de0:	18c9      	adds	r1, r1, r3
 8005de2:	424b      	negs	r3, r1
 8005de4:	4159      	adcs	r1, r3
 8005de6:	e7ea      	b.n	8005dbe <__swhatbuf_r+0x1e>
 8005de8:	2100      	movs	r1, #0
 8005dea:	2340      	movs	r3, #64	@ 0x40
 8005dec:	e7e9      	b.n	8005dc2 <__swhatbuf_r+0x22>
 8005dee:	46c0      	nop			@ (mov r8, r8)
 8005df0:	ffffe000 	.word	0xffffe000

08005df4 <__smakebuf_r>:
 8005df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005df6:	2602      	movs	r6, #2
 8005df8:	898b      	ldrh	r3, [r1, #12]
 8005dfa:	0005      	movs	r5, r0
 8005dfc:	000c      	movs	r4, r1
 8005dfe:	b085      	sub	sp, #20
 8005e00:	4233      	tst	r3, r6
 8005e02:	d007      	beq.n	8005e14 <__smakebuf_r+0x20>
 8005e04:	0023      	movs	r3, r4
 8005e06:	3347      	adds	r3, #71	@ 0x47
 8005e08:	6023      	str	r3, [r4, #0]
 8005e0a:	6123      	str	r3, [r4, #16]
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	6163      	str	r3, [r4, #20]
 8005e10:	b005      	add	sp, #20
 8005e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e14:	ab03      	add	r3, sp, #12
 8005e16:	aa02      	add	r2, sp, #8
 8005e18:	f7ff ffc2 	bl	8005da0 <__swhatbuf_r>
 8005e1c:	9f02      	ldr	r7, [sp, #8]
 8005e1e:	9001      	str	r0, [sp, #4]
 8005e20:	0039      	movs	r1, r7
 8005e22:	0028      	movs	r0, r5
 8005e24:	f7ff fbb8 	bl	8005598 <_malloc_r>
 8005e28:	2800      	cmp	r0, #0
 8005e2a:	d108      	bne.n	8005e3e <__smakebuf_r+0x4a>
 8005e2c:	220c      	movs	r2, #12
 8005e2e:	5ea3      	ldrsh	r3, [r4, r2]
 8005e30:	059a      	lsls	r2, r3, #22
 8005e32:	d4ed      	bmi.n	8005e10 <__smakebuf_r+0x1c>
 8005e34:	2203      	movs	r2, #3
 8005e36:	4393      	bics	r3, r2
 8005e38:	431e      	orrs	r6, r3
 8005e3a:	81a6      	strh	r6, [r4, #12]
 8005e3c:	e7e2      	b.n	8005e04 <__smakebuf_r+0x10>
 8005e3e:	2380      	movs	r3, #128	@ 0x80
 8005e40:	89a2      	ldrh	r2, [r4, #12]
 8005e42:	6020      	str	r0, [r4, #0]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	81a3      	strh	r3, [r4, #12]
 8005e48:	9b03      	ldr	r3, [sp, #12]
 8005e4a:	6120      	str	r0, [r4, #16]
 8005e4c:	6167      	str	r7, [r4, #20]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d00c      	beq.n	8005e6c <__smakebuf_r+0x78>
 8005e52:	0028      	movs	r0, r5
 8005e54:	230e      	movs	r3, #14
 8005e56:	5ee1      	ldrsh	r1, [r4, r3]
 8005e58:	f000 f820 	bl	8005e9c <_isatty_r>
 8005e5c:	2800      	cmp	r0, #0
 8005e5e:	d005      	beq.n	8005e6c <__smakebuf_r+0x78>
 8005e60:	2303      	movs	r3, #3
 8005e62:	89a2      	ldrh	r2, [r4, #12]
 8005e64:	439a      	bics	r2, r3
 8005e66:	3b02      	subs	r3, #2
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	81a3      	strh	r3, [r4, #12]
 8005e6c:	89a3      	ldrh	r3, [r4, #12]
 8005e6e:	9a01      	ldr	r2, [sp, #4]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	81a3      	strh	r3, [r4, #12]
 8005e74:	e7cc      	b.n	8005e10 <__smakebuf_r+0x1c>
	...

08005e78 <_fstat_r>:
 8005e78:	2300      	movs	r3, #0
 8005e7a:	b570      	push	{r4, r5, r6, lr}
 8005e7c:	4d06      	ldr	r5, [pc, #24]	@ (8005e98 <_fstat_r+0x20>)
 8005e7e:	0004      	movs	r4, r0
 8005e80:	0008      	movs	r0, r1
 8005e82:	0011      	movs	r1, r2
 8005e84:	602b      	str	r3, [r5, #0]
 8005e86:	f7fb fd5a 	bl	800193e <_fstat>
 8005e8a:	1c43      	adds	r3, r0, #1
 8005e8c:	d103      	bne.n	8005e96 <_fstat_r+0x1e>
 8005e8e:	682b      	ldr	r3, [r5, #0]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d000      	beq.n	8005e96 <_fstat_r+0x1e>
 8005e94:	6023      	str	r3, [r4, #0]
 8005e96:	bd70      	pop	{r4, r5, r6, pc}
 8005e98:	200003a0 	.word	0x200003a0

08005e9c <_isatty_r>:
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	b570      	push	{r4, r5, r6, lr}
 8005ea0:	4d06      	ldr	r5, [pc, #24]	@ (8005ebc <_isatty_r+0x20>)
 8005ea2:	0004      	movs	r4, r0
 8005ea4:	0008      	movs	r0, r1
 8005ea6:	602b      	str	r3, [r5, #0]
 8005ea8:	f7fb fd57 	bl	800195a <_isatty>
 8005eac:	1c43      	adds	r3, r0, #1
 8005eae:	d103      	bne.n	8005eb8 <_isatty_r+0x1c>
 8005eb0:	682b      	ldr	r3, [r5, #0]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d000      	beq.n	8005eb8 <_isatty_r+0x1c>
 8005eb6:	6023      	str	r3, [r4, #0]
 8005eb8:	bd70      	pop	{r4, r5, r6, pc}
 8005eba:	46c0      	nop			@ (mov r8, r8)
 8005ebc:	200003a0 	.word	0x200003a0

08005ec0 <_sbrk_r>:
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	b570      	push	{r4, r5, r6, lr}
 8005ec4:	4d06      	ldr	r5, [pc, #24]	@ (8005ee0 <_sbrk_r+0x20>)
 8005ec6:	0004      	movs	r4, r0
 8005ec8:	0008      	movs	r0, r1
 8005eca:	602b      	str	r3, [r5, #0]
 8005ecc:	f7fb fd5a 	bl	8001984 <_sbrk>
 8005ed0:	1c43      	adds	r3, r0, #1
 8005ed2:	d103      	bne.n	8005edc <_sbrk_r+0x1c>
 8005ed4:	682b      	ldr	r3, [r5, #0]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d000      	beq.n	8005edc <_sbrk_r+0x1c>
 8005eda:	6023      	str	r3, [r4, #0]
 8005edc:	bd70      	pop	{r4, r5, r6, pc}
 8005ede:	46c0      	nop			@ (mov r8, r8)
 8005ee0:	200003a0 	.word	0x200003a0

08005ee4 <memchr>:
 8005ee4:	b2c9      	uxtb	r1, r1
 8005ee6:	1882      	adds	r2, r0, r2
 8005ee8:	4290      	cmp	r0, r2
 8005eea:	d101      	bne.n	8005ef0 <memchr+0xc>
 8005eec:	2000      	movs	r0, #0
 8005eee:	4770      	bx	lr
 8005ef0:	7803      	ldrb	r3, [r0, #0]
 8005ef2:	428b      	cmp	r3, r1
 8005ef4:	d0fb      	beq.n	8005eee <memchr+0xa>
 8005ef6:	3001      	adds	r0, #1
 8005ef8:	e7f6      	b.n	8005ee8 <memchr+0x4>
	...

08005efc <_init>:
 8005efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005efe:	46c0      	nop			@ (mov r8, r8)
 8005f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f02:	bc08      	pop	{r3}
 8005f04:	469e      	mov	lr, r3
 8005f06:	4770      	bx	lr

08005f08 <_fini>:
 8005f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f0a:	46c0      	nop			@ (mov r8, r8)
 8005f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f0e:	bc08      	pop	{r3}
 8005f10:	469e      	mov	lr, r3
 8005f12:	4770      	bx	lr
