
Joystick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cb8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08006d78  08006d78  00007d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ebc  08006ebc  00008070  2**0
                  CONTENTS
  4 .ARM          00000008  08006ebc  08006ebc  00007ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ec4  08006ec4  00008070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ec4  08006ec4  00007ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006ec8  08006ec8  00007ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08006ecc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ec  20000070  08006f3c  00008070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000045c  08006f3c  0000845c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000126e5  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002aea  00000000  00000000  0001a77d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001140  00000000  00000000  0001d268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d76  00000000  00000000  0001e3a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001674f  00000000  00000000  0001f11e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015a28  00000000  00000000  0003586d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000864fd  00000000  00000000  0004b295  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d1792  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045d4  00000000  00000000  000d17d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000d5dac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006d60 	.word	0x08006d60

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08006d60 	.word	0x08006d60

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	@ (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	@ (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			@ (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f834 	bl	80002d0 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			@ (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4699      	mov	r9, r3
 800027a:	0c03      	lsrs	r3, r0, #16
 800027c:	469c      	mov	ip, r3
 800027e:	0413      	lsls	r3, r2, #16
 8000280:	4647      	mov	r7, r8
 8000282:	0c1b      	lsrs	r3, r3, #16
 8000284:	001d      	movs	r5, r3
 8000286:	000e      	movs	r6, r1
 8000288:	4661      	mov	r1, ip
 800028a:	0404      	lsls	r4, r0, #16
 800028c:	0c24      	lsrs	r4, r4, #16
 800028e:	b580      	push	{r7, lr}
 8000290:	0007      	movs	r7, r0
 8000292:	0c10      	lsrs	r0, r2, #16
 8000294:	434b      	muls	r3, r1
 8000296:	4365      	muls	r5, r4
 8000298:	4341      	muls	r1, r0
 800029a:	4360      	muls	r0, r4
 800029c:	0c2c      	lsrs	r4, r5, #16
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	1824      	adds	r4, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	42a3      	cmp	r3, r4
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	@ 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4356      	muls	r6, r2
 80002b6:	0c23      	lsrs	r3, r4, #16
 80002b8:	042d      	lsls	r5, r5, #16
 80002ba:	0c2d      	lsrs	r5, r5, #16
 80002bc:	1989      	adds	r1, r1, r6
 80002be:	4463      	add	r3, ip
 80002c0:	0424      	lsls	r4, r4, #16
 80002c2:	1960      	adds	r0, r4, r5
 80002c4:	18c9      	adds	r1, r1, r3
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			@ (mov r8, r8)

080002d0 <__udivmoddi4>:
 80002d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d2:	4657      	mov	r7, sl
 80002d4:	464e      	mov	r6, r9
 80002d6:	4645      	mov	r5, r8
 80002d8:	46de      	mov	lr, fp
 80002da:	b5e0      	push	{r5, r6, r7, lr}
 80002dc:	0004      	movs	r4, r0
 80002de:	000d      	movs	r5, r1
 80002e0:	4692      	mov	sl, r2
 80002e2:	4699      	mov	r9, r3
 80002e4:	b083      	sub	sp, #12
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d830      	bhi.n	800034c <__udivmoddi4+0x7c>
 80002ea:	d02d      	beq.n	8000348 <__udivmoddi4+0x78>
 80002ec:	4649      	mov	r1, r9
 80002ee:	4650      	mov	r0, sl
 80002f0:	f000 f8ba 	bl	8000468 <__clzdi2>
 80002f4:	0029      	movs	r1, r5
 80002f6:	0006      	movs	r6, r0
 80002f8:	0020      	movs	r0, r4
 80002fa:	f000 f8b5 	bl	8000468 <__clzdi2>
 80002fe:	1a33      	subs	r3, r6, r0
 8000300:	4698      	mov	r8, r3
 8000302:	3b20      	subs	r3, #32
 8000304:	d434      	bmi.n	8000370 <__udivmoddi4+0xa0>
 8000306:	469b      	mov	fp, r3
 8000308:	4653      	mov	r3, sl
 800030a:	465a      	mov	r2, fp
 800030c:	4093      	lsls	r3, r2
 800030e:	4642      	mov	r2, r8
 8000310:	001f      	movs	r7, r3
 8000312:	4653      	mov	r3, sl
 8000314:	4093      	lsls	r3, r2
 8000316:	001e      	movs	r6, r3
 8000318:	42af      	cmp	r7, r5
 800031a:	d83b      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800031c:	42af      	cmp	r7, r5
 800031e:	d100      	bne.n	8000322 <__udivmoddi4+0x52>
 8000320:	e079      	b.n	8000416 <__udivmoddi4+0x146>
 8000322:	465b      	mov	r3, fp
 8000324:	1ba4      	subs	r4, r4, r6
 8000326:	41bd      	sbcs	r5, r7
 8000328:	2b00      	cmp	r3, #0
 800032a:	da00      	bge.n	800032e <__udivmoddi4+0x5e>
 800032c:	e076      	b.n	800041c <__udivmoddi4+0x14c>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	2301      	movs	r3, #1
 8000338:	465a      	mov	r2, fp
 800033a:	4093      	lsls	r3, r2
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2301      	movs	r3, #1
 8000340:	4642      	mov	r2, r8
 8000342:	4093      	lsls	r3, r2
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	e029      	b.n	800039c <__udivmoddi4+0xcc>
 8000348:	4282      	cmp	r2, r0
 800034a:	d9cf      	bls.n	80002ec <__udivmoddi4+0x1c>
 800034c:	2200      	movs	r2, #0
 800034e:	2300      	movs	r3, #0
 8000350:	9200      	str	r2, [sp, #0]
 8000352:	9301      	str	r3, [sp, #4]
 8000354:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <__udivmoddi4+0x8e>
 800035a:	601c      	str	r4, [r3, #0]
 800035c:	605d      	str	r5, [r3, #4]
 800035e:	9800      	ldr	r0, [sp, #0]
 8000360:	9901      	ldr	r1, [sp, #4]
 8000362:	b003      	add	sp, #12
 8000364:	bcf0      	pop	{r4, r5, r6, r7}
 8000366:	46bb      	mov	fp, r7
 8000368:	46b2      	mov	sl, r6
 800036a:	46a9      	mov	r9, r5
 800036c:	46a0      	mov	r8, r4
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000370:	4642      	mov	r2, r8
 8000372:	469b      	mov	fp, r3
 8000374:	2320      	movs	r3, #32
 8000376:	1a9b      	subs	r3, r3, r2
 8000378:	4652      	mov	r2, sl
 800037a:	40da      	lsrs	r2, r3
 800037c:	4641      	mov	r1, r8
 800037e:	0013      	movs	r3, r2
 8000380:	464a      	mov	r2, r9
 8000382:	408a      	lsls	r2, r1
 8000384:	0017      	movs	r7, r2
 8000386:	4642      	mov	r2, r8
 8000388:	431f      	orrs	r7, r3
 800038a:	4653      	mov	r3, sl
 800038c:	4093      	lsls	r3, r2
 800038e:	001e      	movs	r6, r3
 8000390:	42af      	cmp	r7, r5
 8000392:	d9c3      	bls.n	800031c <__udivmoddi4+0x4c>
 8000394:	2200      	movs	r2, #0
 8000396:	2300      	movs	r3, #0
 8000398:	9200      	str	r2, [sp, #0]
 800039a:	9301      	str	r3, [sp, #4]
 800039c:	4643      	mov	r3, r8
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d0d8      	beq.n	8000354 <__udivmoddi4+0x84>
 80003a2:	07fb      	lsls	r3, r7, #31
 80003a4:	0872      	lsrs	r2, r6, #1
 80003a6:	431a      	orrs	r2, r3
 80003a8:	4646      	mov	r6, r8
 80003aa:	087b      	lsrs	r3, r7, #1
 80003ac:	e00e      	b.n	80003cc <__udivmoddi4+0xfc>
 80003ae:	42ab      	cmp	r3, r5
 80003b0:	d101      	bne.n	80003b6 <__udivmoddi4+0xe6>
 80003b2:	42a2      	cmp	r2, r4
 80003b4:	d80c      	bhi.n	80003d0 <__udivmoddi4+0x100>
 80003b6:	1aa4      	subs	r4, r4, r2
 80003b8:	419d      	sbcs	r5, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2100      	movs	r1, #0
 80003c2:	3e01      	subs	r6, #1
 80003c4:	1824      	adds	r4, r4, r0
 80003c6:	414d      	adcs	r5, r1
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d006      	beq.n	80003da <__udivmoddi4+0x10a>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d9ee      	bls.n	80003ae <__udivmoddi4+0xde>
 80003d0:	3e01      	subs	r6, #1
 80003d2:	1924      	adds	r4, r4, r4
 80003d4:	416d      	adcs	r5, r5
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d1f8      	bne.n	80003cc <__udivmoddi4+0xfc>
 80003da:	9800      	ldr	r0, [sp, #0]
 80003dc:	9901      	ldr	r1, [sp, #4]
 80003de:	465b      	mov	r3, fp
 80003e0:	1900      	adds	r0, r0, r4
 80003e2:	4169      	adcs	r1, r5
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db24      	blt.n	8000432 <__udivmoddi4+0x162>
 80003e8:	002b      	movs	r3, r5
 80003ea:	465a      	mov	r2, fp
 80003ec:	4644      	mov	r4, r8
 80003ee:	40d3      	lsrs	r3, r2
 80003f0:	002a      	movs	r2, r5
 80003f2:	40e2      	lsrs	r2, r4
 80003f4:	001c      	movs	r4, r3
 80003f6:	465b      	mov	r3, fp
 80003f8:	0015      	movs	r5, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	db2a      	blt.n	8000454 <__udivmoddi4+0x184>
 80003fe:	0026      	movs	r6, r4
 8000400:	409e      	lsls	r6, r3
 8000402:	0033      	movs	r3, r6
 8000404:	0026      	movs	r6, r4
 8000406:	4647      	mov	r7, r8
 8000408:	40be      	lsls	r6, r7
 800040a:	0032      	movs	r2, r6
 800040c:	1a80      	subs	r0, r0, r2
 800040e:	4199      	sbcs	r1, r3
 8000410:	9000      	str	r0, [sp, #0]
 8000412:	9101      	str	r1, [sp, #4]
 8000414:	e79e      	b.n	8000354 <__udivmoddi4+0x84>
 8000416:	42a3      	cmp	r3, r4
 8000418:	d8bc      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800041a:	e782      	b.n	8000322 <__udivmoddi4+0x52>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	2100      	movs	r1, #0
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	2200      	movs	r2, #0
 8000426:	9100      	str	r1, [sp, #0]
 8000428:	9201      	str	r2, [sp, #4]
 800042a:	2201      	movs	r2, #1
 800042c:	40da      	lsrs	r2, r3
 800042e:	9201      	str	r2, [sp, #4]
 8000430:	e785      	b.n	800033e <__udivmoddi4+0x6e>
 8000432:	4642      	mov	r2, r8
 8000434:	2320      	movs	r3, #32
 8000436:	1a9b      	subs	r3, r3, r2
 8000438:	002a      	movs	r2, r5
 800043a:	4646      	mov	r6, r8
 800043c:	409a      	lsls	r2, r3
 800043e:	0023      	movs	r3, r4
 8000440:	40f3      	lsrs	r3, r6
 8000442:	4644      	mov	r4, r8
 8000444:	4313      	orrs	r3, r2
 8000446:	002a      	movs	r2, r5
 8000448:	40e2      	lsrs	r2, r4
 800044a:	001c      	movs	r4, r3
 800044c:	465b      	mov	r3, fp
 800044e:	0015      	movs	r5, r2
 8000450:	2b00      	cmp	r3, #0
 8000452:	dad4      	bge.n	80003fe <__udivmoddi4+0x12e>
 8000454:	4642      	mov	r2, r8
 8000456:	002f      	movs	r7, r5
 8000458:	2320      	movs	r3, #32
 800045a:	0026      	movs	r6, r4
 800045c:	4097      	lsls	r7, r2
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	40de      	lsrs	r6, r3
 8000462:	003b      	movs	r3, r7
 8000464:	4333      	orrs	r3, r6
 8000466:	e7cd      	b.n	8000404 <__udivmoddi4+0x134>

08000468 <__clzdi2>:
 8000468:	b510      	push	{r4, lr}
 800046a:	2900      	cmp	r1, #0
 800046c:	d103      	bne.n	8000476 <__clzdi2+0xe>
 800046e:	f000 f807 	bl	8000480 <__clzsi2>
 8000472:	3020      	adds	r0, #32
 8000474:	e002      	b.n	800047c <__clzdi2+0x14>
 8000476:	0008      	movs	r0, r1
 8000478:	f000 f802 	bl	8000480 <__clzsi2>
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__clzsi2>:
 8000480:	211c      	movs	r1, #28
 8000482:	2301      	movs	r3, #1
 8000484:	041b      	lsls	r3, r3, #16
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0xe>
 800048a:	0c00      	lsrs	r0, r0, #16
 800048c:	3910      	subs	r1, #16
 800048e:	0a1b      	lsrs	r3, r3, #8
 8000490:	4298      	cmp	r0, r3
 8000492:	d301      	bcc.n	8000498 <__clzsi2+0x18>
 8000494:	0a00      	lsrs	r0, r0, #8
 8000496:	3908      	subs	r1, #8
 8000498:	091b      	lsrs	r3, r3, #4
 800049a:	4298      	cmp	r0, r3
 800049c:	d301      	bcc.n	80004a2 <__clzsi2+0x22>
 800049e:	0900      	lsrs	r0, r0, #4
 80004a0:	3904      	subs	r1, #4
 80004a2:	a202      	add	r2, pc, #8	@ (adr r2, 80004ac <__clzsi2+0x2c>)
 80004a4:	5c10      	ldrb	r0, [r2, r0]
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	4770      	bx	lr
 80004aa:	46c0      	nop			@ (mov r8, r8)
 80004ac:	02020304 	.word	0x02020304
 80004b0:	01010101 	.word	0x01010101
	...

080004bc <TM1651_Init>:

// Level table for display
static int8_t LevelTab[] = {0x00, 0x40, 0x60, 0x70, 0x78, 0x7C, 0x7E, 0x7F}; // Level 0~7

// Initialize TM1651
void TM1651_Init(TM1651* tm, GPIO_TypeDef* clkPort, uint16_t clkPin, GPIO_TypeDef* dataPort, uint16_t dataPin) {
 80004bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004be:	b08b      	sub	sp, #44	@ 0x2c
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	60f8      	str	r0, [r7, #12]
 80004c4:	60b9      	str	r1, [r7, #8]
 80004c6:	603b      	str	r3, [r7, #0]
 80004c8:	1dbb      	adds	r3, r7, #6
 80004ca:	801a      	strh	r2, [r3, #0]
    tm->ClkPort = clkPort;
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	68ba      	ldr	r2, [r7, #8]
 80004d0:	601a      	str	r2, [r3, #0]
    tm->ClkPin = clkPin;
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	1dba      	adds	r2, r7, #6
 80004d6:	8812      	ldrh	r2, [r2, #0]
 80004d8:	809a      	strh	r2, [r3, #4]
    tm->DataPort = dataPort;
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	683a      	ldr	r2, [r7, #0]
 80004de:	609a      	str	r2, [r3, #8]
    tm->DataPin = dataPin;
 80004e0:	68fa      	ldr	r2, [r7, #12]
 80004e2:	2530      	movs	r5, #48	@ 0x30
 80004e4:	2608      	movs	r6, #8
 80004e6:	19ab      	adds	r3, r5, r6
 80004e8:	2108      	movs	r1, #8
 80004ea:	468c      	mov	ip, r1
 80004ec:	44bc      	add	ip, r7
 80004ee:	4463      	add	r3, ip
 80004f0:	881b      	ldrh	r3, [r3, #0]
 80004f2:	8193      	strh	r3, [r2, #12]

    // Configure CLK and DIO pins as output
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f4:	2414      	movs	r4, #20
 80004f6:	193b      	adds	r3, r7, r4
 80004f8:	0018      	movs	r0, r3
 80004fa:	2314      	movs	r3, #20
 80004fc:	001a      	movs	r2, r3
 80004fe:	2100      	movs	r1, #0
 8000500:	f005 fe8c 	bl	800621c <memset>
    GPIO_InitStruct.Pin = clkPin | dataPin;
 8000504:	1dba      	adds	r2, r7, #6
 8000506:	19ab      	adds	r3, r5, r6
 8000508:	2108      	movs	r1, #8
 800050a:	468c      	mov	ip, r1
 800050c:	44bc      	add	ip, r7
 800050e:	4463      	add	r3, ip
 8000510:	8812      	ldrh	r2, [r2, #0]
 8000512:	881b      	ldrh	r3, [r3, #0]
 8000514:	4313      	orrs	r3, r2
 8000516:	b29b      	uxth	r3, r3
 8000518:	001a      	movs	r2, r3
 800051a:	0021      	movs	r1, r4
 800051c:	187b      	adds	r3, r7, r1
 800051e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000520:	187b      	adds	r3, r7, r1
 8000522:	2201      	movs	r2, #1
 8000524:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000526:	187b      	adds	r3, r7, r1
 8000528:	2200      	movs	r2, #0
 800052a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800052c:	187b      	adds	r3, r7, r1
 800052e:	2200      	movs	r2, #0
 8000530:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(clkPort, &GPIO_InitStruct);
 8000532:	187a      	adds	r2, r7, r1
 8000534:	68bb      	ldr	r3, [r7, #8]
 8000536:	0011      	movs	r1, r2
 8000538:	0018      	movs	r0, r3
 800053a:	f002 fc2f 	bl	8002d9c <HAL_GPIO_Init>

    // Set default brightness and clear display
    TM1651_Set(tm, BRIGHT_TYPICAL, ADDR_AUTO, STARTADDR);
 800053e:	68f8      	ldr	r0, [r7, #12]
 8000540:	23c0      	movs	r3, #192	@ 0xc0
 8000542:	2240      	movs	r2, #64	@ 0x40
 8000544:	2102      	movs	r1, #2
 8000546:	f000 f9a3 	bl	8000890 <TM1651_Set>
    TM1651_ClearDisplay(tm);
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	0018      	movs	r0, r3
 800054e:	f000 f98d 	bl	800086c <TM1651_ClearDisplay>
}
 8000552:	46c0      	nop			@ (mov r8, r8)
 8000554:	46bd      	mov	sp, r7
 8000556:	b00b      	add	sp, #44	@ 0x2c
 8000558:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800055a <TM1651_WriteByte>:

/*
 * The TM1651 uses a bit-banging protocol for serial communication
 */
// Write a byte to TM1651
void TM1651_WriteByte(TM1651* tm, int8_t wr_data) {
 800055a:	b5b0      	push	{r4, r5, r7, lr}
 800055c:	b088      	sub	sp, #32
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
 8000562:	000a      	movs	r2, r1
 8000564:	1cfb      	adds	r3, r7, #3
 8000566:	701a      	strb	r2, [r3, #0]
    uint8_t data = wr_data;
 8000568:	231f      	movs	r3, #31
 800056a:	18fb      	adds	r3, r7, r3
 800056c:	1cfa      	adds	r2, r7, #3
 800056e:	7812      	ldrb	r2, [r2, #0]
 8000570:	701a      	strb	r2, [r3, #0]

    // 8 Data Bits
    for (uint8_t i = 0; i < 8; i++) {
 8000572:	231e      	movs	r3, #30
 8000574:	18fb      	adds	r3, r7, r3
 8000576:	2200      	movs	r2, #0
 8000578:	701a      	strb	r2, [r3, #0]
 800057a:	e038      	b.n	80005ee <TM1651_WriteByte+0x94>
        // CLK low
        HAL_GPIO_WritePin(tm->ClkPort, tm->ClkPin, GPIO_PIN_RESET);
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	6818      	ldr	r0, [r3, #0]
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	889b      	ldrh	r3, [r3, #4]
 8000584:	2200      	movs	r2, #0
 8000586:	0019      	movs	r1, r3
 8000588:	f002 fd9b 	bl	80030c2 <HAL_GPIO_WritePin>
        TM1651_BitDelay();
 800058c:	f000 f9a2 	bl	80008d4 <TM1651_BitDelay>

        // Set data bit
        if (data & 0x01)
 8000590:	231f      	movs	r3, #31
 8000592:	18fb      	adds	r3, r7, r3
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	2201      	movs	r2, #1
 8000598:	4013      	ands	r3, r2
 800059a:	d008      	beq.n	80005ae <TM1651_WriteByte+0x54>
            HAL_GPIO_WritePin(tm->DataPort, tm->DataPin, GPIO_PIN_SET);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	6898      	ldr	r0, [r3, #8]
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	899b      	ldrh	r3, [r3, #12]
 80005a4:	2201      	movs	r2, #1
 80005a6:	0019      	movs	r1, r3
 80005a8:	f002 fd8b 	bl	80030c2 <HAL_GPIO_WritePin>
 80005ac:	e007      	b.n	80005be <TM1651_WriteByte+0x64>
        else
            HAL_GPIO_WritePin(tm->DataPort, tm->DataPin, GPIO_PIN_RESET);
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	6898      	ldr	r0, [r3, #8]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	899b      	ldrh	r3, [r3, #12]
 80005b6:	2200      	movs	r2, #0
 80005b8:	0019      	movs	r1, r3
 80005ba:	f002 fd82 	bl	80030c2 <HAL_GPIO_WritePin>

        TM1651_BitDelay();
 80005be:	f000 f989 	bl	80008d4 <TM1651_BitDelay>

        // CLK high
        HAL_GPIO_WritePin(tm->ClkPort, tm->ClkPin, GPIO_PIN_SET);
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	6818      	ldr	r0, [r3, #0]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	889b      	ldrh	r3, [r3, #4]
 80005ca:	2201      	movs	r2, #1
 80005cc:	0019      	movs	r1, r3
 80005ce:	f002 fd78 	bl	80030c2 <HAL_GPIO_WritePin>
        TM1651_BitDelay();
 80005d2:	f000 f97f 	bl	80008d4 <TM1651_BitDelay>
        data = data >> 1;
 80005d6:	221f      	movs	r2, #31
 80005d8:	18bb      	adds	r3, r7, r2
 80005da:	18ba      	adds	r2, r7, r2
 80005dc:	7812      	ldrb	r2, [r2, #0]
 80005de:	0852      	lsrs	r2, r2, #1
 80005e0:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 8; i++) {
 80005e2:	211e      	movs	r1, #30
 80005e4:	187b      	adds	r3, r7, r1
 80005e6:	781a      	ldrb	r2, [r3, #0]
 80005e8:	187b      	adds	r3, r7, r1
 80005ea:	3201      	adds	r2, #1
 80005ec:	701a      	strb	r2, [r3, #0]
 80005ee:	231e      	movs	r3, #30
 80005f0:	18fb      	adds	r3, r7, r3
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b07      	cmp	r3, #7
 80005f6:	d9c1      	bls.n	800057c <TM1651_WriteByte+0x22>
    }

    // Wait for acknowledge
    // CLK low
    HAL_GPIO_WritePin(tm->ClkPort, tm->ClkPin, GPIO_PIN_RESET);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	6818      	ldr	r0, [r3, #0]
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	889b      	ldrh	r3, [r3, #4]
 8000600:	2200      	movs	r2, #0
 8000602:	0019      	movs	r1, r3
 8000604:	f002 fd5d 	bl	80030c2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(tm->DataPort, tm->DataPin, GPIO_PIN_SET); // Release data line
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	6898      	ldr	r0, [r3, #8]
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	899b      	ldrh	r3, [r3, #12]
 8000610:	2201      	movs	r2, #1
 8000612:	0019      	movs	r1, r3
 8000614:	f002 fd55 	bl	80030c2 <HAL_GPIO_WritePin>
    TM1651_BitDelay();
 8000618:	f000 f95c 	bl	80008d4 <TM1651_BitDelay>

    // CLK high
    HAL_GPIO_WritePin(tm->ClkPort, tm->ClkPin, GPIO_PIN_SET);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	6818      	ldr	r0, [r3, #0]
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	889b      	ldrh	r3, [r3, #4]
 8000624:	2201      	movs	r2, #1
 8000626:	0019      	movs	r1, r3
 8000628:	f002 fd4b 	bl	80030c2 <HAL_GPIO_WritePin>
    TM1651_BitDelay();
 800062c:	f000 f952 	bl	80008d4 <TM1651_BitDelay>

    // Read acknowledge
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000630:	2408      	movs	r4, #8
 8000632:	193b      	adds	r3, r7, r4
 8000634:	0018      	movs	r0, r3
 8000636:	2314      	movs	r3, #20
 8000638:	001a      	movs	r2, r3
 800063a:	2100      	movs	r1, #0
 800063c:	f005 fdee 	bl	800621c <memset>
    GPIO_InitStruct.Pin = tm->DataPin;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	899b      	ldrh	r3, [r3, #12]
 8000644:	001a      	movs	r2, r3
 8000646:	0025      	movs	r5, r4
 8000648:	197b      	adds	r3, r7, r5
 800064a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800064c:	197b      	adds	r3, r7, r5
 800064e:	2200      	movs	r2, #0
 8000650:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000652:	197b      	adds	r3, r7, r5
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(tm->DataPort, &GPIO_InitStruct);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	689b      	ldr	r3, [r3, #8]
 800065c:	197a      	adds	r2, r7, r5
 800065e:	0011      	movs	r1, r2
 8000660:	0018      	movs	r0, r3
 8000662:	f002 fb9b 	bl	8002d9c <HAL_GPIO_Init>

    TM1651_BitDelay();
 8000666:	f000 f935 	bl	80008d4 <TM1651_BitDelay>
    uint8_t ack = HAL_GPIO_ReadPin(tm->DataPort, tm->DataPin);
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	689a      	ldr	r2, [r3, #8]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	899b      	ldrh	r3, [r3, #12]
 8000672:	211d      	movs	r1, #29
 8000674:	187c      	adds	r4, r7, r1
 8000676:	0019      	movs	r1, r3
 8000678:	0010      	movs	r0, r2
 800067a:	f002 fd05 	bl	8003088 <HAL_GPIO_ReadPin>
 800067e:	0003      	movs	r3, r0
 8000680:	7023      	strb	r3, [r4, #0]

    // Restore data pin to output
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000682:	197b      	adds	r3, r7, r5
 8000684:	2201      	movs	r2, #1
 8000686:	605a      	str	r2, [r3, #4]
    HAL_GPIO_Init(tm->DataPort, &GPIO_InitStruct);
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	689b      	ldr	r3, [r3, #8]
 800068c:	197a      	adds	r2, r7, r5
 800068e:	0011      	movs	r1, r2
 8000690:	0018      	movs	r0, r3
 8000692:	f002 fb83 	bl	8002d9c <HAL_GPIO_Init>

    TM1651_BitDelay();
 8000696:	f000 f91d 	bl	80008d4 <TM1651_BitDelay>
    HAL_GPIO_WritePin(tm->ClkPort, tm->ClkPin, GPIO_PIN_RESET);
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	6818      	ldr	r0, [r3, #0]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	889b      	ldrh	r3, [r3, #4]
 80006a2:	2200      	movs	r2, #0
 80006a4:	0019      	movs	r1, r3
 80006a6:	f002 fd0c 	bl	80030c2 <HAL_GPIO_WritePin>
    TM1651_BitDelay();
 80006aa:	f000 f913 	bl	80008d4 <TM1651_BitDelay>
}
 80006ae:	46c0      	nop			@ (mov r8, r8)
 80006b0:	46bd      	mov	sp, r7
 80006b2:	b008      	add	sp, #32
 80006b4:	bdb0      	pop	{r4, r5, r7, pc}

080006b6 <TM1651_Start>:

// Send start signal
void TM1651_Start(TM1651* tm) {
 80006b6:	b580      	push	{r7, lr}
 80006b8:	b082      	sub	sp, #8
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(tm->DataPort, tm->DataPin, GPIO_PIN_RESET);
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	6898      	ldr	r0, [r3, #8]
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	899b      	ldrh	r3, [r3, #12]
 80006c6:	2200      	movs	r2, #0
 80006c8:	0019      	movs	r1, r3
 80006ca:	f002 fcfa 	bl	80030c2 <HAL_GPIO_WritePin>
    TM1651_BitDelay();
 80006ce:	f000 f901 	bl	80008d4 <TM1651_BitDelay>
}
 80006d2:	46c0      	nop			@ (mov r8, r8)
 80006d4:	46bd      	mov	sp, r7
 80006d6:	b002      	add	sp, #8
 80006d8:	bd80      	pop	{r7, pc}

080006da <TM1651_Stop>:

// Send stop signal
void TM1651_Stop(TM1651* tm) {
 80006da:	b580      	push	{r7, lr}
 80006dc:	b082      	sub	sp, #8
 80006de:	af00      	add	r7, sp, #0
 80006e0:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(tm->DataPort, tm->DataPin, GPIO_PIN_RESET);
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	6898      	ldr	r0, [r3, #8]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	899b      	ldrh	r3, [r3, #12]
 80006ea:	2200      	movs	r2, #0
 80006ec:	0019      	movs	r1, r3
 80006ee:	f002 fce8 	bl	80030c2 <HAL_GPIO_WritePin>
    TM1651_BitDelay();
 80006f2:	f000 f8ef 	bl	80008d4 <TM1651_BitDelay>
    HAL_GPIO_WritePin(tm->ClkPort, tm->ClkPin, GPIO_PIN_SET);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	6818      	ldr	r0, [r3, #0]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	889b      	ldrh	r3, [r3, #4]
 80006fe:	2201      	movs	r2, #1
 8000700:	0019      	movs	r1, r3
 8000702:	f002 fcde 	bl	80030c2 <HAL_GPIO_WritePin>
    TM1651_BitDelay();
 8000706:	f000 f8e5 	bl	80008d4 <TM1651_BitDelay>
    HAL_GPIO_WritePin(tm->DataPort, tm->DataPin, GPIO_PIN_SET);
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	6898      	ldr	r0, [r3, #8]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	899b      	ldrh	r3, [r3, #12]
 8000712:	2201      	movs	r2, #1
 8000714:	0019      	movs	r1, r3
 8000716:	f002 fcd4 	bl	80030c2 <HAL_GPIO_WritePin>
    TM1651_BitDelay();
 800071a:	f000 f8db 	bl	80008d4 <TM1651_BitDelay>
}
 800071e:	46c0      	nop			@ (mov r8, r8)
 8000720:	46bd      	mov	sp, r7
 8000722:	b002      	add	sp, #8
 8000724:	bd80      	pop	{r7, pc}
	...

08000728 <TM1651_DisplayLevel>:

// Display level (0-7)
void TM1651_DisplayLevel(TM1651* tm, uint8_t level) {
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	000a      	movs	r2, r1
 8000732:	1cfb      	adds	r3, r7, #3
 8000734:	701a      	strb	r2, [r3, #0]
    if (level > 7) return; // Level should be 0~7
 8000736:	1cfb      	adds	r3, r7, #3
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	2b07      	cmp	r3, #7
 800073c:	d835      	bhi.n	80007aa <TM1651_DisplayLevel+0x82>

    TM1651_Start(tm);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	0018      	movs	r0, r3
 8000742:	f7ff ffb8 	bl	80006b6 <TM1651_Start>
    TM1651_WriteByte(tm, ADDR_FIXED);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	2144      	movs	r1, #68	@ 0x44
 800074a:	0018      	movs	r0, r3
 800074c:	f7ff ff05 	bl	800055a <TM1651_WriteByte>
    TM1651_Stop(tm);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	0018      	movs	r0, r3
 8000754:	f7ff ffc1 	bl	80006da <TM1651_Stop>

    TM1651_Start(tm);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	0018      	movs	r0, r3
 800075c:	f7ff ffab 	bl	80006b6 <TM1651_Start>
    TM1651_WriteByte(tm, 0xC0);
 8000760:	2340      	movs	r3, #64	@ 0x40
 8000762:	425a      	negs	r2, r3
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	0011      	movs	r1, r2
 8000768:	0018      	movs	r0, r3
 800076a:	f7ff fef6 	bl	800055a <TM1651_WriteByte>
    TM1651_WriteByte(tm, LevelTab[level]);
 800076e:	1cfb      	adds	r3, r7, #3
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	4a10      	ldr	r2, [pc, #64]	@ (80007b4 <TM1651_DisplayLevel+0x8c>)
 8000774:	56d2      	ldrsb	r2, [r2, r3]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	0011      	movs	r1, r2
 800077a:	0018      	movs	r0, r3
 800077c:	f7ff feed 	bl	800055a <TM1651_WriteByte>
    TM1651_Stop(tm);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	0018      	movs	r0, r3
 8000784:	f7ff ffa9 	bl	80006da <TM1651_Stop>

    TM1651_Start(tm);
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	0018      	movs	r0, r3
 800078c:	f7ff ff93 	bl	80006b6 <TM1651_Start>
    TM1651_WriteByte(tm, tm->Cmd_DispCtrl);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	7c1b      	ldrb	r3, [r3, #16]
 8000794:	b25a      	sxtb	r2, r3
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	0011      	movs	r1, r2
 800079a:	0018      	movs	r0, r3
 800079c:	f7ff fedd 	bl	800055a <TM1651_WriteByte>
    TM1651_Stop(tm);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	0018      	movs	r0, r3
 80007a4:	f7ff ff99 	bl	80006da <TM1651_Stop>
 80007a8:	e000      	b.n	80007ac <TM1651_DisplayLevel+0x84>
    if (level > 7) return; // Level should be 0~7
 80007aa:	46c0      	nop			@ (mov r8, r8)
}
 80007ac:	46bd      	mov	sp, r7
 80007ae:	b002      	add	sp, #8
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	46c0      	nop			@ (mov r8, r8)
 80007b4:	20000000 	.word	0x20000000

080007b8 <TM1651_Frame>:

// Control frame display
void TM1651_Frame(TM1651* tm, bool frameFlag) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	000a      	movs	r2, r1
 80007c2:	1cfb      	adds	r3, r7, #3
 80007c4:	701a      	strb	r2, [r3, #0]
    int8_t segData = (frameFlag == true) ? 0x40 : 0x00;
 80007c6:	1cfb      	adds	r3, r7, #3
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <TM1651_Frame+0x1a>
 80007ce:	2240      	movs	r2, #64	@ 0x40
 80007d0:	e000      	b.n	80007d4 <TM1651_Frame+0x1c>
 80007d2:	2200      	movs	r2, #0
 80007d4:	230e      	movs	r3, #14
 80007d6:	18fb      	adds	r3, r7, r3
 80007d8:	701a      	strb	r2, [r3, #0]

    TM1651_Start(tm);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	0018      	movs	r0, r3
 80007de:	f7ff ff6a 	bl	80006b6 <TM1651_Start>
    TM1651_WriteByte(tm, ADDR_AUTO);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2140      	movs	r1, #64	@ 0x40
 80007e6:	0018      	movs	r0, r3
 80007e8:	f7ff feb7 	bl	800055a <TM1651_WriteByte>
    TM1651_Stop(tm);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	0018      	movs	r0, r3
 80007f0:	f7ff ff73 	bl	80006da <TM1651_Stop>

    TM1651_Start(tm);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	0018      	movs	r0, r3
 80007f8:	f7ff ff5d 	bl	80006b6 <TM1651_Start>
    TM1651_WriteByte(tm, 0xC1);
 80007fc:	233f      	movs	r3, #63	@ 0x3f
 80007fe:	425a      	negs	r2, r3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	0011      	movs	r1, r2
 8000804:	0018      	movs	r0, r3
 8000806:	f7ff fea8 	bl	800055a <TM1651_WriteByte>
    for (uint8_t i = 0; i < 3; i++) {
 800080a:	230f      	movs	r3, #15
 800080c:	18fb      	adds	r3, r7, r3
 800080e:	2200      	movs	r2, #0
 8000810:	701a      	strb	r2, [r3, #0]
 8000812:	e00e      	b.n	8000832 <TM1651_Frame+0x7a>
        TM1651_WriteByte(tm, segData);
 8000814:	230e      	movs	r3, #14
 8000816:	18fb      	adds	r3, r7, r3
 8000818:	2200      	movs	r2, #0
 800081a:	569a      	ldrsb	r2, [r3, r2]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	0011      	movs	r1, r2
 8000820:	0018      	movs	r0, r3
 8000822:	f7ff fe9a 	bl	800055a <TM1651_WriteByte>
    for (uint8_t i = 0; i < 3; i++) {
 8000826:	210f      	movs	r1, #15
 8000828:	187b      	adds	r3, r7, r1
 800082a:	781a      	ldrb	r2, [r3, #0]
 800082c:	187b      	adds	r3, r7, r1
 800082e:	3201      	adds	r2, #1
 8000830:	701a      	strb	r2, [r3, #0]
 8000832:	230f      	movs	r3, #15
 8000834:	18fb      	adds	r3, r7, r3
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	2b02      	cmp	r3, #2
 800083a:	d9eb      	bls.n	8000814 <TM1651_Frame+0x5c>
    }
    TM1651_Stop(tm);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	0018      	movs	r0, r3
 8000840:	f7ff ff4b 	bl	80006da <TM1651_Stop>

    TM1651_Start(tm);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	0018      	movs	r0, r3
 8000848:	f7ff ff35 	bl	80006b6 <TM1651_Start>
    TM1651_WriteByte(tm, tm->Cmd_DispCtrl);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	7c1b      	ldrb	r3, [r3, #16]
 8000850:	b25a      	sxtb	r2, r3
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	0011      	movs	r1, r2
 8000856:	0018      	movs	r0, r3
 8000858:	f7ff fe7f 	bl	800055a <TM1651_WriteByte>
    TM1651_Stop(tm);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	0018      	movs	r0, r3
 8000860:	f7ff ff3b 	bl	80006da <TM1651_Stop>
}
 8000864:	46c0      	nop			@ (mov r8, r8)
 8000866:	46bd      	mov	sp, r7
 8000868:	b004      	add	sp, #16
 800086a:	bd80      	pop	{r7, pc}

0800086c <TM1651_ClearDisplay>:

// Clear display
void TM1651_ClearDisplay(TM1651* tm) {
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
    TM1651_DisplayLevel(tm, 0);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2100      	movs	r1, #0
 8000878:	0018      	movs	r0, r3
 800087a:	f7ff ff55 	bl	8000728 <TM1651_DisplayLevel>
    TM1651_Frame(tm, FRAME_OFF);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2100      	movs	r1, #0
 8000882:	0018      	movs	r0, r3
 8000884:	f7ff ff98 	bl	80007b8 <TM1651_Frame>
}
 8000888:	46c0      	nop			@ (mov r8, r8)
 800088a:	46bd      	mov	sp, r7
 800088c:	b002      	add	sp, #8
 800088e:	bd80      	pop	{r7, pc}

08000890 <TM1651_Set>:

// Set brightness and display mode
void TM1651_Set(TM1651* tm, uint8_t brightness, uint8_t setData, uint8_t setAddr) {
 8000890:	b590      	push	{r4, r7, lr}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	000c      	movs	r4, r1
 800089a:	0010      	movs	r0, r2
 800089c:	0019      	movs	r1, r3
 800089e:	1cfb      	adds	r3, r7, #3
 80008a0:	1c22      	adds	r2, r4, #0
 80008a2:	701a      	strb	r2, [r3, #0]
 80008a4:	1cbb      	adds	r3, r7, #2
 80008a6:	1c02      	adds	r2, r0, #0
 80008a8:	701a      	strb	r2, [r3, #0]
 80008aa:	1c7b      	adds	r3, r7, #1
 80008ac:	1c0a      	adds	r2, r1, #0
 80008ae:	701a      	strb	r2, [r3, #0]
    tm->Cmd_SetData = setData;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	1cba      	adds	r2, r7, #2
 80008b4:	7812      	ldrb	r2, [r2, #0]
 80008b6:	739a      	strb	r2, [r3, #14]
    tm->Cmd_SetAddr = setAddr;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	1c7a      	adds	r2, r7, #1
 80008bc:	7812      	ldrb	r2, [r2, #0]
 80008be:	73da      	strb	r2, [r3, #15]
    tm->Cmd_DispCtrl = 0x88 + brightness; // Set brightness
 80008c0:	1cfb      	adds	r3, r7, #3
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	3b78      	subs	r3, #120	@ 0x78
 80008c6:	b2da      	uxtb	r2, r3
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	741a      	strb	r2, [r3, #16]
}
 80008cc:	46c0      	nop			@ (mov r8, r8)
 80008ce:	46bd      	mov	sp, r7
 80008d0:	b003      	add	sp, #12
 80008d2:	bd90      	pop	{r4, r7, pc}

080008d4 <TM1651_BitDelay>:

// Bit delay (50us)
void TM1651_BitDelay(void) {
 80008d4:	b590      	push	{r4, r7, lr}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
    DELAY_US(50);
 80008da:	4b12      	ldr	r3, [pc, #72]	@ (8000924 <TM1651_BitDelay+0x50>)
 80008dc:	689b      	ldr	r3, [r3, #8]
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	4b11      	ldr	r3, [pc, #68]	@ (8000928 <TM1651_BitDelay+0x54>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4911      	ldr	r1, [pc, #68]	@ (800092c <TM1651_BitDelay+0x58>)
 80008e6:	0018      	movs	r0, r3
 80008e8:	f7ff fc18 	bl	800011c <__udivsi3>
 80008ec:	0003      	movs	r3, r0
 80008ee:	001a      	movs	r2, r3
 80008f0:	2332      	movs	r3, #50	@ 0x32
 80008f2:	4353      	muls	r3, r2
 80008f4:	001c      	movs	r4, r3
 80008f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000928 <TM1651_BitDelay+0x54>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	490c      	ldr	r1, [pc, #48]	@ (800092c <TM1651_BitDelay+0x58>)
 80008fc:	0018      	movs	r0, r3
 80008fe:	f7ff fc0d 	bl	800011c <__udivsi3>
 8000902:	0003      	movs	r3, r0
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	1ae3      	subs	r3, r4, r3
 8000908:	603b      	str	r3, [r7, #0]
 800090a:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <TM1651_BitDelay+0x50>)
 800090c:	689b      	ldr	r3, [r3, #8]
 800090e:	687a      	ldr	r2, [r7, #4]
 8000910:	1ad3      	subs	r3, r2, r3
 8000912:	683a      	ldr	r2, [r7, #0]
 8000914:	429a      	cmp	r2, r3
 8000916:	d8f8      	bhi.n	800090a <TM1651_BitDelay+0x36>
}
 8000918:	46c0      	nop			@ (mov r8, r8)
 800091a:	46c0      	nop			@ (mov r8, r8)
 800091c:	46bd      	mov	sp, r7
 800091e:	b003      	add	sp, #12
 8000920:	bd90      	pop	{r4, r7, pc}
 8000922:	46c0      	nop			@ (mov r8, r8)
 8000924:	e000e010 	.word	0xe000e010
 8000928:	20000008 	.word	0x20000008
 800092c:	000f4240 	.word	0x000f4240

08000930 <HT16K33_Init>:
#include "ht16k33.h"

void HT16K33_Init(HT16K33_HandleTypeDef *hdev, I2C_HandleTypeDef *hi2c) {
 8000930:	b580      	push	{r7, lr}
 8000932:	b086      	sub	sp, #24
 8000934:	af02      	add	r7, sp, #8
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	6039      	str	r1, [r7, #0]
    hdev->hi2c = hi2c;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	683a      	ldr	r2, [r7, #0]
 800093e:	601a      	str	r2, [r3, #0]

    // Turn on oscillator
    uint8_t buffer[1] = {0x21};
 8000940:	210c      	movs	r1, #12
 8000942:	187b      	adds	r3, r7, r1
 8000944:	4a13      	ldr	r2, [pc, #76]	@ (8000994 <HT16K33_Init+0x64>)
 8000946:	7812      	ldrb	r2, [r2, #0]
 8000948:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit(hdev->hi2c, HT16K33_ADDRESS << 1, buffer, 1, HAL_MAX_DELAY);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	6818      	ldr	r0, [r3, #0]
 800094e:	187a      	adds	r2, r7, r1
 8000950:	2301      	movs	r3, #1
 8000952:	425b      	negs	r3, r3
 8000954:	9300      	str	r3, [sp, #0]
 8000956:	2301      	movs	r3, #1
 8000958:	21e0      	movs	r1, #224	@ 0xe0
 800095a:	f002 fc9d 	bl	8003298 <HAL_I2C_Master_Transmit>

    // Clear display buffer and update display
    HT16K33_Clear(hdev);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	0018      	movs	r0, r3
 8000962:	f000 f889 	bl	8000a78 <HT16K33_Clear>
    HT16K33_WriteDisplay(hdev);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	0018      	movs	r0, r3
 800096a:	f000 f8a6 	bl	8000aba <HT16K33_WriteDisplay>

    // Set default settings
    HT16K33_BlinkRate(hdev, HT16K33_BLINK_OFF);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	2100      	movs	r1, #0
 8000972:	0018      	movs	r0, r3
 8000974:	f000 f858 	bl	8000a28 <HT16K33_BlinkRate>
    HT16K33_SetBrightness(hdev, 15); // Max brightness
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	210f      	movs	r1, #15
 800097c:	0018      	movs	r0, r3
 800097e:	f000 f82e 	bl	80009de <HT16K33_SetBrightness>
    HT16K33_SetDisplayState(hdev, true);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2101      	movs	r1, #1
 8000986:	0018      	movs	r0, r3
 8000988:	f000 f806 	bl	8000998 <HT16K33_SetDisplayState>
}
 800098c:	46c0      	nop			@ (mov r8, r8)
 800098e:	46bd      	mov	sp, r7
 8000990:	b004      	add	sp, #16
 8000992:	bd80      	pop	{r7, pc}
 8000994:	08006d78 	.word	0x08006d78

08000998 <HT16K33_SetDisplayState>:

void HT16K33_SetDisplayState(HT16K33_HandleTypeDef *hdev, bool state) {
 8000998:	b580      	push	{r7, lr}
 800099a:	b086      	sub	sp, #24
 800099c:	af02      	add	r7, sp, #8
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	000a      	movs	r2, r1
 80009a2:	1cfb      	adds	r3, r7, #3
 80009a4:	701a      	strb	r2, [r3, #0]
    uint8_t buffer;
    if (state)
 80009a6:	1cfb      	adds	r3, r7, #3
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d004      	beq.n	80009b8 <HT16K33_SetDisplayState+0x20>
        buffer = HT16K33_BLINK_CMD | HT16K33_BLINK_DISPLAYON;
 80009ae:	230f      	movs	r3, #15
 80009b0:	18fb      	adds	r3, r7, r3
 80009b2:	2281      	movs	r2, #129	@ 0x81
 80009b4:	701a      	strb	r2, [r3, #0]
 80009b6:	e003      	b.n	80009c0 <HT16K33_SetDisplayState+0x28>
    else
        buffer = HT16K33_BLINK_CMD;
 80009b8:	230f      	movs	r3, #15
 80009ba:	18fb      	adds	r3, r7, r3
 80009bc:	2280      	movs	r2, #128	@ 0x80
 80009be:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit(hdev->hi2c, HT16K33_ADDRESS << 1, &buffer, 1, HAL_MAX_DELAY);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	6818      	ldr	r0, [r3, #0]
 80009c4:	230f      	movs	r3, #15
 80009c6:	18fa      	adds	r2, r7, r3
 80009c8:	2301      	movs	r3, #1
 80009ca:	425b      	negs	r3, r3
 80009cc:	9300      	str	r3, [sp, #0]
 80009ce:	2301      	movs	r3, #1
 80009d0:	21e0      	movs	r1, #224	@ 0xe0
 80009d2:	f002 fc61 	bl	8003298 <HAL_I2C_Master_Transmit>
}
 80009d6:	46c0      	nop			@ (mov r8, r8)
 80009d8:	46bd      	mov	sp, r7
 80009da:	b004      	add	sp, #16
 80009dc:	bd80      	pop	{r7, pc}

080009de <HT16K33_SetBrightness>:

void HT16K33_SetBrightness(HT16K33_HandleTypeDef *hdev, uint8_t brightness) {
 80009de:	b580      	push	{r7, lr}
 80009e0:	b086      	sub	sp, #24
 80009e2:	af02      	add	r7, sp, #8
 80009e4:	6078      	str	r0, [r7, #4]
 80009e6:	000a      	movs	r2, r1
 80009e8:	1cfb      	adds	r3, r7, #3
 80009ea:	701a      	strb	r2, [r3, #0]
    if (brightness > 15) brightness = 15;
 80009ec:	1cfb      	adds	r3, r7, #3
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	2b0f      	cmp	r3, #15
 80009f2:	d902      	bls.n	80009fa <HT16K33_SetBrightness+0x1c>
 80009f4:	1cfb      	adds	r3, r7, #3
 80009f6:	220f      	movs	r2, #15
 80009f8:	701a      	strb	r2, [r3, #0]
    uint8_t buffer = HT16K33_CMD_BRIGHTNESS | brightness;
 80009fa:	1cfb      	adds	r3, r7, #3
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	2220      	movs	r2, #32
 8000a00:	4252      	negs	r2, r2
 8000a02:	4313      	orrs	r3, r2
 8000a04:	b2da      	uxtb	r2, r3
 8000a06:	210f      	movs	r1, #15
 8000a08:	187b      	adds	r3, r7, r1
 8000a0a:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit(hdev->hi2c, HT16K33_ADDRESS << 1, &buffer, 1, HAL_MAX_DELAY);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	6818      	ldr	r0, [r3, #0]
 8000a10:	187a      	adds	r2, r7, r1
 8000a12:	2301      	movs	r3, #1
 8000a14:	425b      	negs	r3, r3
 8000a16:	9300      	str	r3, [sp, #0]
 8000a18:	2301      	movs	r3, #1
 8000a1a:	21e0      	movs	r1, #224	@ 0xe0
 8000a1c:	f002 fc3c 	bl	8003298 <HAL_I2C_Master_Transmit>
}
 8000a20:	46c0      	nop			@ (mov r8, r8)
 8000a22:	46bd      	mov	sp, r7
 8000a24:	b004      	add	sp, #16
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <HT16K33_BlinkRate>:

void HT16K33_BlinkRate(HT16K33_HandleTypeDef *hdev, uint8_t rate) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af02      	add	r7, sp, #8
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	000a      	movs	r2, r1
 8000a32:	1cfb      	adds	r3, r7, #3
 8000a34:	701a      	strb	r2, [r3, #0]
    if (rate > 3) rate = 0;
 8000a36:	1cfb      	adds	r3, r7, #3
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2b03      	cmp	r3, #3
 8000a3c:	d902      	bls.n	8000a44 <HT16K33_BlinkRate+0x1c>
 8000a3e:	1cfb      	adds	r3, r7, #3
 8000a40:	2200      	movs	r2, #0
 8000a42:	701a      	strb	r2, [r3, #0]
    uint8_t buffer = HT16K33_BLINK_CMD | HT16K33_BLINK_DISPLAYON | (rate << 1);
 8000a44:	1cfb      	adds	r3, r7, #3
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	005b      	lsls	r3, r3, #1
 8000a4a:	b25b      	sxtb	r3, r3
 8000a4c:	227f      	movs	r2, #127	@ 0x7f
 8000a4e:	4252      	negs	r2, r2
 8000a50:	4313      	orrs	r3, r2
 8000a52:	b25b      	sxtb	r3, r3
 8000a54:	b2da      	uxtb	r2, r3
 8000a56:	210f      	movs	r1, #15
 8000a58:	187b      	adds	r3, r7, r1
 8000a5a:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit(hdev->hi2c, HT16K33_ADDRESS << 1, &buffer, 1, HAL_MAX_DELAY);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	6818      	ldr	r0, [r3, #0]
 8000a60:	187a      	adds	r2, r7, r1
 8000a62:	2301      	movs	r3, #1
 8000a64:	425b      	negs	r3, r3
 8000a66:	9300      	str	r3, [sp, #0]
 8000a68:	2301      	movs	r3, #1
 8000a6a:	21e0      	movs	r1, #224	@ 0xe0
 8000a6c:	f002 fc14 	bl	8003298 <HAL_I2C_Master_Transmit>
}
 8000a70:	46c0      	nop			@ (mov r8, r8)
 8000a72:	46bd      	mov	sp, r7
 8000a74:	b004      	add	sp, #16
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <HT16K33_Clear>:

void HT16K33_Clear(HT16K33_HandleTypeDef *hdev) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < 8; i++) {
 8000a80:	230f      	movs	r3, #15
 8000a82:	18fb      	adds	r3, r7, r3
 8000a84:	2200      	movs	r2, #0
 8000a86:	701a      	strb	r2, [r3, #0]
 8000a88:	e00d      	b.n	8000aa6 <HT16K33_Clear+0x2e>
        hdev->displayBuffer[i] = 0;
 8000a8a:	210f      	movs	r1, #15
 8000a8c:	187b      	adds	r3, r7, r1
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	687a      	ldr	r2, [r7, #4]
 8000a92:	005b      	lsls	r3, r3, #1
 8000a94:	18d3      	adds	r3, r2, r3
 8000a96:	3304      	adds	r3, #4
 8000a98:	2200      	movs	r2, #0
 8000a9a:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < 8; i++) {
 8000a9c:	187b      	adds	r3, r7, r1
 8000a9e:	781a      	ldrb	r2, [r3, #0]
 8000aa0:	187b      	adds	r3, r7, r1
 8000aa2:	3201      	adds	r2, #1
 8000aa4:	701a      	strb	r2, [r3, #0]
 8000aa6:	230f      	movs	r3, #15
 8000aa8:	18fb      	adds	r3, r7, r3
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	2b07      	cmp	r3, #7
 8000aae:	d9ec      	bls.n	8000a8a <HT16K33_Clear+0x12>
    }
}
 8000ab0:	46c0      	nop			@ (mov r8, r8)
 8000ab2:	46c0      	nop			@ (mov r8, r8)
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	b004      	add	sp, #16
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <HT16K33_WriteDisplay>:

void HT16K33_WriteDisplay(HT16K33_HandleTypeDef *hdev) {
 8000aba:	b590      	push	{r4, r7, lr}
 8000abc:	b08b      	sub	sp, #44	@ 0x2c
 8000abe:	af02      	add	r7, sp, #8
 8000ac0:	6078      	str	r0, [r7, #4]
    uint8_t buffer[17];
    buffer[0] = 0x00; // Start at address $00
 8000ac2:	230c      	movs	r3, #12
 8000ac4:	18fb      	adds	r3, r7, r3
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	701a      	strb	r2, [r3, #0]

    for (uint8_t i = 0; i < 8; i++) {
 8000aca:	231f      	movs	r3, #31
 8000acc:	18fb      	adds	r3, r7, r3
 8000ace:	2200      	movs	r2, #0
 8000ad0:	701a      	strb	r2, [r3, #0]
 8000ad2:	e024      	b.n	8000b1e <HT16K33_WriteDisplay+0x64>
        buffer[1 + 2 * i] = hdev->displayBuffer[i] & 0xFF; // Lower byte
 8000ad4:	201f      	movs	r0, #31
 8000ad6:	183b      	adds	r3, r7, r0
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	687a      	ldr	r2, [r7, #4]
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	18d3      	adds	r3, r2, r3
 8000ae0:	3304      	adds	r3, #4
 8000ae2:	881a      	ldrh	r2, [r3, #0]
 8000ae4:	183b      	adds	r3, r7, r0
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	005b      	lsls	r3, r3, #1
 8000aea:	3301      	adds	r3, #1
 8000aec:	b2d1      	uxtb	r1, r2
 8000aee:	240c      	movs	r4, #12
 8000af0:	193a      	adds	r2, r7, r4
 8000af2:	54d1      	strb	r1, [r2, r3]
        buffer[2 + 2 * i] = hdev->displayBuffer[i] >> 8;  // Upper byte
 8000af4:	183b      	adds	r3, r7, r0
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	687a      	ldr	r2, [r7, #4]
 8000afa:	005b      	lsls	r3, r3, #1
 8000afc:	18d3      	adds	r3, r2, r3
 8000afe:	3304      	adds	r3, #4
 8000b00:	881b      	ldrh	r3, [r3, #0]
 8000b02:	0a1b      	lsrs	r3, r3, #8
 8000b04:	b29a      	uxth	r2, r3
 8000b06:	183b      	adds	r3, r7, r0
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	005b      	lsls	r3, r3, #1
 8000b0e:	b2d1      	uxtb	r1, r2
 8000b10:	193a      	adds	r2, r7, r4
 8000b12:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < 8; i++) {
 8000b14:	183b      	adds	r3, r7, r0
 8000b16:	781a      	ldrb	r2, [r3, #0]
 8000b18:	183b      	adds	r3, r7, r0
 8000b1a:	3201      	adds	r2, #1
 8000b1c:	701a      	strb	r2, [r3, #0]
 8000b1e:	231f      	movs	r3, #31
 8000b20:	18fb      	adds	r3, r7, r3
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	2b07      	cmp	r3, #7
 8000b26:	d9d5      	bls.n	8000ad4 <HT16K33_WriteDisplay+0x1a>
    }

    HAL_I2C_Master_Transmit(hdev->hi2c, HT16K33_ADDRESS << 1, buffer, 17, HAL_MAX_DELAY);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6818      	ldr	r0, [r3, #0]
 8000b2c:	230c      	movs	r3, #12
 8000b2e:	18fa      	adds	r2, r7, r3
 8000b30:	2301      	movs	r3, #1
 8000b32:	425b      	negs	r3, r3
 8000b34:	9300      	str	r3, [sp, #0]
 8000b36:	2311      	movs	r3, #17
 8000b38:	21e0      	movs	r1, #224	@ 0xe0
 8000b3a:	f002 fbad 	bl	8003298 <HAL_I2C_Master_Transmit>
}
 8000b3e:	46c0      	nop			@ (mov r8, r8)
 8000b40:	46bd      	mov	sp, r7
 8000b42:	b009      	add	sp, #36	@ 0x24
 8000b44:	bd90      	pop	{r4, r7, pc}

08000b46 <HT16K33_DrawPixel>:

void HT16K33_DrawPixel(HT16K33_HandleTypeDef *hdev, uint8_t x, uint8_t y, bool state) {
 8000b46:	b590      	push	{r4, r7, lr}
 8000b48:	b083      	sub	sp, #12
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
 8000b4e:	000c      	movs	r4, r1
 8000b50:	0010      	movs	r0, r2
 8000b52:	0019      	movs	r1, r3
 8000b54:	1cfb      	adds	r3, r7, #3
 8000b56:	1c22      	adds	r2, r4, #0
 8000b58:	701a      	strb	r2, [r3, #0]
 8000b5a:	1cbb      	adds	r3, r7, #2
 8000b5c:	1c02      	adds	r2, r0, #0
 8000b5e:	701a      	strb	r2, [r3, #0]
 8000b60:	1c7b      	adds	r3, r7, #1
 8000b62:	1c0a      	adds	r2, r1, #0
 8000b64:	701a      	strb	r2, [r3, #0]
    if (x >= 16 || y >= 8) return; // Out of bounds
 8000b66:	1cfb      	adds	r3, r7, #3
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	2b0f      	cmp	r3, #15
 8000b6c:	d83d      	bhi.n	8000bea <HT16K33_DrawPixel+0xa4>
 8000b6e:	1cbb      	adds	r3, r7, #2
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	2b07      	cmp	r3, #7
 8000b74:	d839      	bhi.n	8000bea <HT16K33_DrawPixel+0xa4>

    if (state)
 8000b76:	1c7b      	adds	r3, r7, #1
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d019      	beq.n	8000bb2 <HT16K33_DrawPixel+0x6c>
        hdev->displayBuffer[y] |= (1 << x);
 8000b7e:	1cbb      	adds	r3, r7, #2
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	687a      	ldr	r2, [r7, #4]
 8000b84:	005b      	lsls	r3, r3, #1
 8000b86:	18d3      	adds	r3, r2, r3
 8000b88:	3304      	adds	r3, #4
 8000b8a:	881b      	ldrh	r3, [r3, #0]
 8000b8c:	b21a      	sxth	r2, r3
 8000b8e:	1cfb      	adds	r3, r7, #3
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	2101      	movs	r1, #1
 8000b94:	4099      	lsls	r1, r3
 8000b96:	000b      	movs	r3, r1
 8000b98:	b21b      	sxth	r3, r3
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	b21a      	sxth	r2, r3
 8000b9e:	1cbb      	adds	r3, r7, #2
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	b291      	uxth	r1, r2
 8000ba4:	687a      	ldr	r2, [r7, #4]
 8000ba6:	005b      	lsls	r3, r3, #1
 8000ba8:	18d3      	adds	r3, r2, r3
 8000baa:	3304      	adds	r3, #4
 8000bac:	1c0a      	adds	r2, r1, #0
 8000bae:	801a      	strh	r2, [r3, #0]
 8000bb0:	e01c      	b.n	8000bec <HT16K33_DrawPixel+0xa6>
    else
        hdev->displayBuffer[y] &= ~(1 << x);
 8000bb2:	1cbb      	adds	r3, r7, #2
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	18d3      	adds	r3, r2, r3
 8000bbc:	3304      	adds	r3, #4
 8000bbe:	881b      	ldrh	r3, [r3, #0]
 8000bc0:	b21b      	sxth	r3, r3
 8000bc2:	1cfa      	adds	r2, r7, #3
 8000bc4:	7812      	ldrb	r2, [r2, #0]
 8000bc6:	2101      	movs	r1, #1
 8000bc8:	4091      	lsls	r1, r2
 8000bca:	000a      	movs	r2, r1
 8000bcc:	b212      	sxth	r2, r2
 8000bce:	43d2      	mvns	r2, r2
 8000bd0:	b212      	sxth	r2, r2
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	b21a      	sxth	r2, r3
 8000bd6:	1cbb      	adds	r3, r7, #2
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	b291      	uxth	r1, r2
 8000bdc:	687a      	ldr	r2, [r7, #4]
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	18d3      	adds	r3, r2, r3
 8000be2:	3304      	adds	r3, #4
 8000be4:	1c0a      	adds	r2, r1, #0
 8000be6:	801a      	strh	r2, [r3, #0]
 8000be8:	e000      	b.n	8000bec <HT16K33_DrawPixel+0xa6>
    if (x >= 16 || y >= 8) return; // Out of bounds
 8000bea:	46c0      	nop			@ (mov r8, r8)
}
 8000bec:	46bd      	mov	sp, r7
 8000bee:	b003      	add	sp, #12
 8000bf0:	bd90      	pop	{r4, r7, pc}
	...

08000bf4 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Function to send data over UART (for debugging)
int __io_putchar(int ch) {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	425b      	negs	r3, r3
 8000c00:	1d39      	adds	r1, r7, #4
 8000c02:	4804      	ldr	r0, [pc, #16]	@ (8000c14 <__io_putchar+0x20>)
 8000c04:	2201      	movs	r2, #1
 8000c06:	f004 fb9b 	bl	8005340 <HAL_UART_Transmit>
	return ch;
 8000c0a:	687b      	ldr	r3, [r7, #4]
}
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	b002      	add	sp, #8
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	20000254 	.word	0x20000254

08000c18 <DisplayBitmapWithRotate>:

void DisplayBitmapWithRotate(const uint8_t *bitmap, int8_t rotateDirection) {
 8000c18:	b590      	push	{r4, r7, lr}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	000a      	movs	r2, r1
 8000c22:	1cfb      	adds	r3, r7, #3
 8000c24:	701a      	strb	r2, [r3, #0]
    static uint8_t rotateOffset = 0; // Tracks the current rotation position

    // Update the rotate offset based on the direction
    if (rotateDirection == 1) {
 8000c26:	1cfb      	adds	r3, r7, #3
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	b25b      	sxtb	r3, r3
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d10e      	bne.n	8000c4e <DisplayBitmapWithRotate+0x36>
        rotateOffset = (rotateOffset + 1) % 16; // Rotate right
 8000c30:	4b33      	ldr	r3, [pc, #204]	@ (8000d00 <DisplayBitmapWithRotate+0xe8>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	3301      	adds	r3, #1
 8000c36:	4a33      	ldr	r2, [pc, #204]	@ (8000d04 <DisplayBitmapWithRotate+0xec>)
 8000c38:	4013      	ands	r3, r2
 8000c3a:	d504      	bpl.n	8000c46 <DisplayBitmapWithRotate+0x2e>
 8000c3c:	3b01      	subs	r3, #1
 8000c3e:	2210      	movs	r2, #16
 8000c40:	4252      	negs	r2, r2
 8000c42:	4313      	orrs	r3, r2
 8000c44:	3301      	adds	r3, #1
 8000c46:	b2da      	uxtb	r2, r3
 8000c48:	4b2d      	ldr	r3, [pc, #180]	@ (8000d00 <DisplayBitmapWithRotate+0xe8>)
 8000c4a:	701a      	strb	r2, [r3, #0]
 8000c4c:	e012      	b.n	8000c74 <DisplayBitmapWithRotate+0x5c>
    } else if (rotateDirection == -1) {
 8000c4e:	1cfb      	adds	r3, r7, #3
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	b25b      	sxtb	r3, r3
 8000c54:	3301      	adds	r3, #1
 8000c56:	d10d      	bne.n	8000c74 <DisplayBitmapWithRotate+0x5c>
        rotateOffset = (rotateOffset - 1 + 16) % 16; // Rotate left
 8000c58:	4b29      	ldr	r3, [pc, #164]	@ (8000d00 <DisplayBitmapWithRotate+0xe8>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	330f      	adds	r3, #15
 8000c5e:	4a29      	ldr	r2, [pc, #164]	@ (8000d04 <DisplayBitmapWithRotate+0xec>)
 8000c60:	4013      	ands	r3, r2
 8000c62:	d504      	bpl.n	8000c6e <DisplayBitmapWithRotate+0x56>
 8000c64:	3b01      	subs	r3, #1
 8000c66:	2210      	movs	r2, #16
 8000c68:	4252      	negs	r2, r2
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	b2da      	uxtb	r2, r3
 8000c70:	4b23      	ldr	r3, [pc, #140]	@ (8000d00 <DisplayBitmapWithRotate+0xe8>)
 8000c72:	701a      	strb	r2, [r3, #0]
    }
    // If rotateDirection is 0, rotateOffset remains unchanged (static display)

    // Convert the 8x8 bitmap into the 8x16 display buffer with rotation
    for (uint8_t y = 0; y < 8; y++) {
 8000c74:	230f      	movs	r3, #15
 8000c76:	18fb      	adds	r3, r7, r3
 8000c78:	2200      	movs	r2, #0
 8000c7a:	701a      	strb	r2, [r3, #0]
 8000c7c:	e033      	b.n	8000ce6 <DisplayBitmapWithRotate+0xce>
        // Center the 8x8 bitmap by shifting it left by 4 bits
        uint16_t rowData = (uint16_t)bitmap[y] << 4;
 8000c7e:	230f      	movs	r3, #15
 8000c80:	18fb      	adds	r3, r7, r3
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	687a      	ldr	r2, [r7, #4]
 8000c86:	18d3      	adds	r3, r2, r3
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	001a      	movs	r2, r3
 8000c8c:	240c      	movs	r4, #12
 8000c8e:	193b      	adds	r3, r7, r4
 8000c90:	0112      	lsls	r2, r2, #4
 8000c92:	801a      	strh	r2, [r3, #0]

        // Apply the rotation by shifting the row data based on rotateOffset
        if (rotateDirection != 0) {
 8000c94:	1cfb      	adds	r3, r7, #3
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	b25b      	sxtb	r3, r3
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d013      	beq.n	8000cc6 <DisplayBitmapWithRotate+0xae>
            // Rotate the row data by rotateOffset bits
            rowData = (rowData << rotateOffset) | (rowData >> (16 - rotateOffset));
 8000c9e:	193b      	adds	r3, r7, r4
 8000ca0:	881b      	ldrh	r3, [r3, #0]
 8000ca2:	4a17      	ldr	r2, [pc, #92]	@ (8000d00 <DisplayBitmapWithRotate+0xe8>)
 8000ca4:	7812      	ldrb	r2, [r2, #0]
 8000ca6:	4093      	lsls	r3, r2
 8000ca8:	b21a      	sxth	r2, r3
 8000caa:	193b      	adds	r3, r7, r4
 8000cac:	8819      	ldrh	r1, [r3, #0]
 8000cae:	4b14      	ldr	r3, [pc, #80]	@ (8000d00 <DisplayBitmapWithRotate+0xe8>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	2310      	movs	r3, #16
 8000cb6:	1a1b      	subs	r3, r3, r0
 8000cb8:	4119      	asrs	r1, r3
 8000cba:	000b      	movs	r3, r1
 8000cbc:	b21b      	sxth	r3, r3
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	b21a      	sxth	r2, r3
 8000cc2:	193b      	adds	r3, r7, r4
 8000cc4:	801a      	strh	r2, [r3, #0]
        }

        // Store the rotated row data in the display buffer
        hdev.displayBuffer[y] = rowData;
 8000cc6:	210f      	movs	r1, #15
 8000cc8:	187b      	adds	r3, r7, r1
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	4a0e      	ldr	r2, [pc, #56]	@ (8000d08 <DisplayBitmapWithRotate+0xf0>)
 8000cce:	005b      	lsls	r3, r3, #1
 8000cd0:	18d3      	adds	r3, r2, r3
 8000cd2:	3304      	adds	r3, #4
 8000cd4:	220c      	movs	r2, #12
 8000cd6:	18ba      	adds	r2, r7, r2
 8000cd8:	8812      	ldrh	r2, [r2, #0]
 8000cda:	801a      	strh	r2, [r3, #0]
    for (uint8_t y = 0; y < 8; y++) {
 8000cdc:	187b      	adds	r3, r7, r1
 8000cde:	781a      	ldrb	r2, [r3, #0]
 8000ce0:	187b      	adds	r3, r7, r1
 8000ce2:	3201      	adds	r2, #1
 8000ce4:	701a      	strb	r2, [r3, #0]
 8000ce6:	230f      	movs	r3, #15
 8000ce8:	18fb      	adds	r3, r7, r3
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	2b07      	cmp	r3, #7
 8000cee:	d9c6      	bls.n	8000c7e <DisplayBitmapWithRotate+0x66>
    }

    HT16K33_WriteDisplay(&hdev); // Update the display
 8000cf0:	4b05      	ldr	r3, [pc, #20]	@ (8000d08 <DisplayBitmapWithRotate+0xf0>)
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f7ff fee1 	bl	8000aba <HT16K33_WriteDisplay>
}
 8000cf8:	46c0      	nop			@ (mov r8, r8)
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	b005      	add	sp, #20
 8000cfe:	bd90      	pop	{r4, r7, pc}
 8000d00:	20000300 	.word	0x20000300
 8000d04:	8000000f 	.word	0x8000000f
 8000d08:	200000c0 	.word	0x200000c0

08000d0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d0c:	b590      	push	{r4, r7, lr}
 8000d0e:	b087      	sub	sp, #28
 8000d10:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d12:	f000 ff6d 	bl	8001bf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d16:	f000 f969 	bl	8000fec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d1a:	f000 fb6b 	bl	80013f4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d1e:	f000 fb43 	bl	80013a8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000d22:	f000 fb11 	bl	8001348 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000d26:	f000 fa49 	bl	80011bc <MX_I2C1_Init>
  MX_TIM2_Init();
 8000d2a:	f000 fa87 	bl	800123c <MX_TIM2_Init>
  MX_ADC_Init();
 8000d2e:	f000 f9d1 	bl	80010d4 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
	RotaryEncoder_Init(&encoder, GPIOA, GPIO_PIN_10, GPIOB, GPIO_PIN_3, GPIOB,
 8000d32:	4c95      	ldr	r4, [pc, #596]	@ (8000f88 <main+0x27c>)
 8000d34:	2380      	movs	r3, #128	@ 0x80
 8000d36:	00da      	lsls	r2, r3, #3
 8000d38:	23a0      	movs	r3, #160	@ 0xa0
 8000d3a:	05d9      	lsls	r1, r3, #23
 8000d3c:	4893      	ldr	r0, [pc, #588]	@ (8000f8c <main+0x280>)
 8000d3e:	2320      	movs	r3, #32
 8000d40:	9302      	str	r3, [sp, #8]
 8000d42:	4b91      	ldr	r3, [pc, #580]	@ (8000f88 <main+0x27c>)
 8000d44:	9301      	str	r3, [sp, #4]
 8000d46:	2308      	movs	r3, #8
 8000d48:	9300      	str	r3, [sp, #0]
 8000d4a:	0023      	movs	r3, r4
 8000d4c:	f000 fc10 	bl	8001570 <RotaryEncoder_Init>
	GPIO_PIN_5);
	pos = 0;
 8000d50:	4b8f      	ldr	r3, [pc, #572]	@ (8000f90 <main+0x284>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	701a      	strb	r2, [r3, #0]
	// Initialize TM1651 with CLK on PA6 and DIO on PA7
	TM1651_Init(&tm, GPIOA, GPIO_PIN_6, GPIOA, GPIO_PIN_7);
 8000d56:	23a0      	movs	r3, #160	@ 0xa0
 8000d58:	05db      	lsls	r3, r3, #23
 8000d5a:	22a0      	movs	r2, #160	@ 0xa0
 8000d5c:	05d1      	lsls	r1, r2, #23
 8000d5e:	488d      	ldr	r0, [pc, #564]	@ (8000f94 <main+0x288>)
 8000d60:	2280      	movs	r2, #128	@ 0x80
 8000d62:	9200      	str	r2, [sp, #0]
 8000d64:	2240      	movs	r2, #64	@ 0x40
 8000d66:	f7ff fba9 	bl	80004bc <TM1651_Init>

	// Display level 5
	TM1651_DisplayLevel(&tm, 1);
 8000d6a:	4b8a      	ldr	r3, [pc, #552]	@ (8000f94 <main+0x288>)
 8000d6c:	2101      	movs	r1, #1
 8000d6e:	0018      	movs	r0, r3
 8000d70:	f7ff fcda 	bl	8000728 <TM1651_DisplayLevel>

	// Initialize HT16K33
	HT16K33_Init(&hdev, &hi2c1);
 8000d74:	4a88      	ldr	r2, [pc, #544]	@ (8000f98 <main+0x28c>)
 8000d76:	4b89      	ldr	r3, [pc, #548]	@ (8000f9c <main+0x290>)
 8000d78:	0011      	movs	r1, r2
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	f7ff fdd8 	bl	8000930 <HT16K33_Init>

	// Draw a pattern on the LED matrix
	for (uint8_t i = 0; i < 8; i++) {
 8000d80:	1dfb      	adds	r3, r7, #7
 8000d82:	2200      	movs	r2, #0
 8000d84:	701a      	strb	r2, [r3, #0]
 8000d86:	e00c      	b.n	8000da2 <main+0x96>
		HT16K33_DrawPixel(&hdev, i, i, true); // Diagonal line
 8000d88:	1dfb      	adds	r3, r7, #7
 8000d8a:	781a      	ldrb	r2, [r3, #0]
 8000d8c:	1dfb      	adds	r3, r7, #7
 8000d8e:	7819      	ldrb	r1, [r3, #0]
 8000d90:	4882      	ldr	r0, [pc, #520]	@ (8000f9c <main+0x290>)
 8000d92:	2301      	movs	r3, #1
 8000d94:	f7ff fed7 	bl	8000b46 <HT16K33_DrawPixel>
	for (uint8_t i = 0; i < 8; i++) {
 8000d98:	1dfb      	adds	r3, r7, #7
 8000d9a:	781a      	ldrb	r2, [r3, #0]
 8000d9c:	1dfb      	adds	r3, r7, #7
 8000d9e:	3201      	adds	r2, #1
 8000da0:	701a      	strb	r2, [r3, #0]
 8000da2:	1dfb      	adds	r3, r7, #7
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	2b07      	cmp	r3, #7
 8000da8:	d9ee      	bls.n	8000d88 <main+0x7c>
	}
	HT16K33_WriteDisplay(&hdev);
 8000daa:	4b7c      	ldr	r3, [pc, #496]	@ (8000f9c <main+0x290>)
 8000dac:	0018      	movs	r0, r3
 8000dae:	f7ff fe84 	bl	8000aba <HT16K33_WriteDisplay>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (HAL_GetTick() > t0_i2c_scan) {
 8000db2:	f000 ff83 	bl	8001cbc <HAL_GetTick>
 8000db6:	0002      	movs	r2, r0
 8000db8:	4b79      	ldr	r3, [pc, #484]	@ (8000fa0 <main+0x294>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d906      	bls.n	8000dce <main+0xc2>
			t0_i2c_scan = HAL_GetTick() + 5000;
 8000dc0:	f000 ff7c 	bl	8001cbc <HAL_GetTick>
 8000dc4:	0003      	movs	r3, r0
 8000dc6:	4a77      	ldr	r2, [pc, #476]	@ (8000fa4 <main+0x298>)
 8000dc8:	189a      	adds	r2, r3, r2
 8000dca:	4b75      	ldr	r3, [pc, #468]	@ (8000fa0 <main+0x294>)
 8000dcc:	601a      	str	r2, [r3, #0]
			//I2C_Scan();
		}
		if (HAL_GetTick() > t1_encoder_scan) {
 8000dce:	f000 ff75 	bl	8001cbc <HAL_GetTick>
 8000dd2:	0002      	movs	r2, r0
 8000dd4:	4b74      	ldr	r3, [pc, #464]	@ (8000fa8 <main+0x29c>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d967      	bls.n	8000eac <main+0x1a0>
			t1_encoder_scan = HAL_GetTick() + 50;
 8000ddc:	f000 ff6e 	bl	8001cbc <HAL_GetTick>
 8000de0:	0003      	movs	r3, r0
 8000de2:	3332      	adds	r3, #50	@ 0x32
 8000de4:	001a      	movs	r2, r3
 8000de6:	4b70      	ldr	r3, [pc, #448]	@ (8000fa8 <main+0x29c>)
 8000de8:	601a      	str	r2, [r3, #0]
			sw_state_new = RotaryEncoder_ReadSwitch(&encoder);
 8000dea:	4b68      	ldr	r3, [pc, #416]	@ (8000f8c <main+0x280>)
 8000dec:	0018      	movs	r0, r3
 8000dee:	f000 fc26 	bl	800163e <RotaryEncoder_ReadSwitch>
 8000df2:	0003      	movs	r3, r0
 8000df4:	001a      	movs	r2, r3
 8000df6:	4b6d      	ldr	r3, [pc, #436]	@ (8000fac <main+0x2a0>)
 8000df8:	701a      	strb	r2, [r3, #0]
			if (sw_state_old == GPIO_PIN_RESET
 8000dfa:	4b6d      	ldr	r3, [pc, #436]	@ (8000fb0 <main+0x2a4>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d107      	bne.n	8000e12 <main+0x106>
					&& sw_state_new == GPIO_PIN_SET) {
 8000e02:	4b6a      	ldr	r3, [pc, #424]	@ (8000fac <main+0x2a0>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d103      	bne.n	8000e12 <main+0x106>
				printf("Button Pressed!\n");
 8000e0a:	4b6a      	ldr	r3, [pc, #424]	@ (8000fb4 <main+0x2a8>)
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	f005 f90f 	bl	8006030 <puts>
			}
			sw_state_old = sw_state_new;
 8000e12:	4b66      	ldr	r3, [pc, #408]	@ (8000fac <main+0x2a0>)
 8000e14:	781a      	ldrb	r2, [r3, #0]
 8000e16:	4b66      	ldr	r3, [pc, #408]	@ (8000fb0 <main+0x2a4>)
 8000e18:	701a      	strb	r2, [r3, #0]

			if (encoder.direction != ROTARY_NONE) {
 8000e1a:	4b5c      	ldr	r3, [pc, #368]	@ (8000f8c <main+0x280>)
 8000e1c:	7f1b      	ldrb	r3, [r3, #28]
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d043      	beq.n	8000eac <main+0x1a0>
				printf("Encoder Direction: %s\n",
						encoder.direction == ROTARY_CW ? "CW" : "CCW");
 8000e24:	4b59      	ldr	r3, [pc, #356]	@ (8000f8c <main+0x280>)
 8000e26:	7f1b      	ldrb	r3, [r3, #28]
 8000e28:	b2db      	uxtb	r3, r3
				printf("Encoder Direction: %s\n",
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d101      	bne.n	8000e32 <main+0x126>
 8000e2e:	4b62      	ldr	r3, [pc, #392]	@ (8000fb8 <main+0x2ac>)
 8000e30:	e000      	b.n	8000e34 <main+0x128>
 8000e32:	4b62      	ldr	r3, [pc, #392]	@ (8000fbc <main+0x2b0>)
 8000e34:	4a62      	ldr	r2, [pc, #392]	@ (8000fc0 <main+0x2b4>)
 8000e36:	0019      	movs	r1, r3
 8000e38:	0010      	movs	r0, r2
 8000e3a:	f005 f893 	bl	8005f64 <iprintf>
				if (encoder.direction == ROTARY_CW) {
 8000e3e:	4b53      	ldr	r3, [pc, #332]	@ (8000f8c <main+0x280>)
 8000e40:	7f1b      	ldrb	r3, [r3, #28]
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d114      	bne.n	8000e72 <main+0x166>
					if (++pos > 5)
 8000e48:	4b51      	ldr	r3, [pc, #324]	@ (8000f90 <main+0x284>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	b25b      	sxtb	r3, r3
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	3301      	adds	r3, #1
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	b25a      	sxtb	r2, r3
 8000e56:	4b4e      	ldr	r3, [pc, #312]	@ (8000f90 <main+0x284>)
 8000e58:	701a      	strb	r2, [r3, #0]
 8000e5a:	4b4d      	ldr	r3, [pc, #308]	@ (8000f90 <main+0x284>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	b25b      	sxtb	r3, r3
 8000e60:	2b05      	cmp	r3, #5
 8000e62:	dd02      	ble.n	8000e6a <main+0x15e>
						pos = 5;
 8000e64:	4b4a      	ldr	r3, [pc, #296]	@ (8000f90 <main+0x284>)
 8000e66:	2205      	movs	r2, #5
 8000e68:	701a      	strb	r2, [r3, #0]
					encoder.direction = ROTARY_NONE;
 8000e6a:	4b48      	ldr	r3, [pc, #288]	@ (8000f8c <main+0x280>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	771a      	strb	r2, [r3, #28]
 8000e70:	e013      	b.n	8000e9a <main+0x18e>
				} else {
					if (--pos < 0)
 8000e72:	4b47      	ldr	r3, [pc, #284]	@ (8000f90 <main+0x284>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	b25b      	sxtb	r3, r3
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	b25a      	sxtb	r2, r3
 8000e80:	4b43      	ldr	r3, [pc, #268]	@ (8000f90 <main+0x284>)
 8000e82:	701a      	strb	r2, [r3, #0]
 8000e84:	4b42      	ldr	r3, [pc, #264]	@ (8000f90 <main+0x284>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	b25b      	sxtb	r3, r3
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	da02      	bge.n	8000e94 <main+0x188>
						pos = 0;
 8000e8e:	4b40      	ldr	r3, [pc, #256]	@ (8000f90 <main+0x284>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	701a      	strb	r2, [r3, #0]
					encoder.direction = ROTARY_NONE;
 8000e94:	4b3d      	ldr	r3, [pc, #244]	@ (8000f8c <main+0x280>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	771a      	strb	r2, [r3, #28]
				}
				printf("Encoder Pos: %d\n", pos);
 8000e9a:	4b3d      	ldr	r3, [pc, #244]	@ (8000f90 <main+0x284>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	b25b      	sxtb	r3, r3
 8000ea0:	001a      	movs	r2, r3
 8000ea2:	4b48      	ldr	r3, [pc, #288]	@ (8000fc4 <main+0x2b8>)
 8000ea4:	0011      	movs	r1, r2
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	f005 f85c 	bl	8005f64 <iprintf>
			}
		}
		if (HAL_GetTick() > t2_led_push) {
 8000eac:	f000 ff06 	bl	8001cbc <HAL_GetTick>
 8000eb0:	0002      	movs	r2, r0
 8000eb2:	4b45      	ldr	r3, [pc, #276]	@ (8000fc8 <main+0x2bc>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	d90d      	bls.n	8000ed6 <main+0x1ca>
			t2_led_push = HAL_GetTick() + 1000;
 8000eba:	f000 feff 	bl	8001cbc <HAL_GetTick>
 8000ebe:	0003      	movs	r3, r0
 8000ec0:	22fa      	movs	r2, #250	@ 0xfa
 8000ec2:	0092      	lsls	r2, r2, #2
 8000ec4:	189a      	adds	r2, r3, r2
 8000ec6:	4b40      	ldr	r3, [pc, #256]	@ (8000fc8 <main+0x2bc>)
 8000ec8:	601a      	str	r2, [r3, #0]
			HAL_ADC_Start_DMA(&hadc, (uint32_t*) adc_raw, sizeof(adc_raw));
 8000eca:	4940      	ldr	r1, [pc, #256]	@ (8000fcc <main+0x2c0>)
 8000ecc:	4b40      	ldr	r3, [pc, #256]	@ (8000fd0 <main+0x2c4>)
 8000ece:	2204      	movs	r2, #4
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	f001 f871 	bl	8001fb8 <HAL_ADC_Start_DMA>
			//printf("x:%d\ty:%d\n",adc_raw[0], adc_raw[1]);

		}
		if (HAL_GetTick() > t3_led_toggle) {
 8000ed6:	f000 fef1 	bl	8001cbc <HAL_GetTick>
 8000eda:	0002      	movs	r2, r0
 8000edc:	4b3d      	ldr	r3, [pc, #244]	@ (8000fd4 <main+0x2c8>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d90c      	bls.n	8000efe <main+0x1f2>
			t3_led_toggle = HAL_GetTick() + 200;
 8000ee4:	f000 feea 	bl	8001cbc <HAL_GetTick>
 8000ee8:	0003      	movs	r3, r0
 8000eea:	33c8      	adds	r3, #200	@ 0xc8
 8000eec:	001a      	movs	r2, r3
 8000eee:	4b39      	ldr	r3, [pc, #228]	@ (8000fd4 <main+0x2c8>)
 8000ef0:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000ef2:	23a0      	movs	r3, #160	@ 0xa0
 8000ef4:	05db      	lsls	r3, r3, #23
 8000ef6:	2120      	movs	r1, #32
 8000ef8:	0018      	movs	r0, r3
 8000efa:	f002 f8ff 	bl	80030fc <HAL_GPIO_TogglePin>
		}
		if (HAL_GetTick() > t4_tm1651_run) {
 8000efe:	f000 fedd 	bl	8001cbc <HAL_GetTick>
 8000f02:	0002      	movs	r2, r0
 8000f04:	4b34      	ldr	r3, [pc, #208]	@ (8000fd8 <main+0x2cc>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d91b      	bls.n	8000f44 <main+0x238>
			t4_tm1651_run = HAL_GetTick() + 1000;
 8000f0c:	f000 fed6 	bl	8001cbc <HAL_GetTick>
 8000f10:	0003      	movs	r3, r0
 8000f12:	22fa      	movs	r2, #250	@ 0xfa
 8000f14:	0092      	lsls	r2, r2, #2
 8000f16:	189a      	adds	r2, r3, r2
 8000f18:	4b2f      	ldr	r3, [pc, #188]	@ (8000fd8 <main+0x2cc>)
 8000f1a:	601a      	str	r2, [r3, #0]

			if (++level > 7)
 8000f1c:	4b2f      	ldr	r3, [pc, #188]	@ (8000fdc <main+0x2d0>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	3301      	adds	r3, #1
 8000f22:	b2da      	uxtb	r2, r3
 8000f24:	4b2d      	ldr	r3, [pc, #180]	@ (8000fdc <main+0x2d0>)
 8000f26:	701a      	strb	r2, [r3, #0]
 8000f28:	4b2c      	ldr	r3, [pc, #176]	@ (8000fdc <main+0x2d0>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	2b07      	cmp	r3, #7
 8000f2e:	d902      	bls.n	8000f36 <main+0x22a>
				level = 0;
 8000f30:	4b2a      	ldr	r3, [pc, #168]	@ (8000fdc <main+0x2d0>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	701a      	strb	r2, [r3, #0]
			TM1651_DisplayLevel(&tm, level);
 8000f36:	4b29      	ldr	r3, [pc, #164]	@ (8000fdc <main+0x2d0>)
 8000f38:	781a      	ldrb	r2, [r3, #0]
 8000f3a:	4b16      	ldr	r3, [pc, #88]	@ (8000f94 <main+0x288>)
 8000f3c:	0011      	movs	r1, r2
 8000f3e:	0018      	movs	r0, r3
 8000f40:	f7ff fbf2 	bl	8000728 <TM1651_DisplayLevel>
		}
		if (HAL_GetTick() > t5_display_dot) {
 8000f44:	f000 feba 	bl	8001cbc <HAL_GetTick>
 8000f48:	0002      	movs	r2, r0
 8000f4a:	4b25      	ldr	r3, [pc, #148]	@ (8000fe0 <main+0x2d4>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d800      	bhi.n	8000f54 <main+0x248>
 8000f52:	e72e      	b.n	8000db2 <main+0xa6>
			t5_display_dot = HAL_GetTick() + 250;
 8000f54:	f000 feb2 	bl	8001cbc <HAL_GetTick>
 8000f58:	0003      	movs	r3, r0
 8000f5a:	33fa      	adds	r3, #250	@ 0xfa
 8000f5c:	001a      	movs	r2, r3
 8000f5e:	4b20      	ldr	r3, [pc, #128]	@ (8000fe0 <main+0x2d4>)
 8000f60:	601a      	str	r2, [r3, #0]
			static uint8_t i;
			if (++i > 16)
 8000f62:	4b20      	ldr	r3, [pc, #128]	@ (8000fe4 <main+0x2d8>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	3301      	adds	r3, #1
 8000f68:	b2da      	uxtb	r2, r3
 8000f6a:	4b1e      	ldr	r3, [pc, #120]	@ (8000fe4 <main+0x2d8>)
 8000f6c:	701a      	strb	r2, [r3, #0]
 8000f6e:	4b1d      	ldr	r3, [pc, #116]	@ (8000fe4 <main+0x2d8>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	2b10      	cmp	r3, #16
 8000f74:	d902      	bls.n	8000f7c <main+0x270>
				i = 0;
 8000f76:	4b1b      	ldr	r3, [pc, #108]	@ (8000fe4 <main+0x2d8>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	701a      	strb	r2, [r3, #0]
			//DisplayBitmapWithRotate(smile_bmp, (pos>2)?1:-1); // Shift left
			DisplayBitmapWithRotate(smile_bmp, 1); // Shift left
 8000f7c:	4b1a      	ldr	r3, [pc, #104]	@ (8000fe8 <main+0x2dc>)
 8000f7e:	2101      	movs	r1, #1
 8000f80:	0018      	movs	r0, r3
 8000f82:	f7ff fe49 	bl	8000c18 <DisplayBitmapWithRotate>
		if (HAL_GetTick() > t0_i2c_scan) {
 8000f86:	e714      	b.n	8000db2 <main+0xa6>
 8000f88:	50000400 	.word	0x50000400
 8000f8c:	2000008c 	.word	0x2000008c
 8000f90:	200002dc 	.word	0x200002dc
 8000f94:	200000ac 	.word	0x200000ac
 8000f98:	20000178 	.word	0x20000178
 8000f9c:	200000c0 	.word	0x200000c0
 8000fa0:	200002e0 	.word	0x200002e0
 8000fa4:	00001388 	.word	0x00001388
 8000fa8:	200002e4 	.word	0x200002e4
 8000fac:	200002dd 	.word	0x200002dd
 8000fb0:	200002de 	.word	0x200002de
 8000fb4:	08006d7c 	.word	0x08006d7c
 8000fb8:	08006d8c 	.word	0x08006d8c
 8000fbc:	08006d90 	.word	0x08006d90
 8000fc0:	08006d94 	.word	0x08006d94
 8000fc4:	08006dac 	.word	0x08006dac
 8000fc8:	200002e8 	.word	0x200002e8
 8000fcc:	200002fc 	.word	0x200002fc
 8000fd0:	200000d4 	.word	0x200000d4
 8000fd4:	200002ec 	.word	0x200002ec
 8000fd8:	200002f0 	.word	0x200002f0
 8000fdc:	200002f8 	.word	0x200002f8
 8000fe0:	200002f4 	.word	0x200002f4
 8000fe4:	20000301 	.word	0x20000301
 8000fe8:	08006e14 	.word	0x08006e14

08000fec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fec:	b590      	push	{r4, r7, lr}
 8000fee:	b09d      	sub	sp, #116	@ 0x74
 8000ff0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ff2:	2438      	movs	r4, #56	@ 0x38
 8000ff4:	193b      	adds	r3, r7, r4
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	2338      	movs	r3, #56	@ 0x38
 8000ffa:	001a      	movs	r2, r3
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	f005 f90d 	bl	800621c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001002:	2324      	movs	r3, #36	@ 0x24
 8001004:	18fb      	adds	r3, r7, r3
 8001006:	0018      	movs	r0, r3
 8001008:	2314      	movs	r3, #20
 800100a:	001a      	movs	r2, r3
 800100c:	2100      	movs	r1, #0
 800100e:	f005 f905 	bl	800621c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001012:	003b      	movs	r3, r7
 8001014:	0018      	movs	r0, r3
 8001016:	2324      	movs	r3, #36	@ 0x24
 8001018:	001a      	movs	r2, r3
 800101a:	2100      	movs	r1, #0
 800101c:	f005 f8fe 	bl	800621c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001020:	4b2a      	ldr	r3, [pc, #168]	@ (80010cc <SystemClock_Config+0xe0>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a2a      	ldr	r2, [pc, #168]	@ (80010d0 <SystemClock_Config+0xe4>)
 8001026:	401a      	ands	r2, r3
 8001028:	4b28      	ldr	r3, [pc, #160]	@ (80010cc <SystemClock_Config+0xe0>)
 800102a:	2180      	movs	r1, #128	@ 0x80
 800102c:	0109      	lsls	r1, r1, #4
 800102e:	430a      	orrs	r2, r1
 8001030:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001032:	0021      	movs	r1, r4
 8001034:	187b      	adds	r3, r7, r1
 8001036:	2202      	movs	r2, #2
 8001038:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800103a:	187b      	adds	r3, r7, r1
 800103c:	2201      	movs	r2, #1
 800103e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001040:	187b      	adds	r3, r7, r1
 8001042:	2210      	movs	r2, #16
 8001044:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001046:	187b      	adds	r3, r7, r1
 8001048:	2202      	movs	r2, #2
 800104a:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800104c:	187b      	adds	r3, r7, r1
 800104e:	2200      	movs	r2, #0
 8001050:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 8001052:	187b      	adds	r3, r7, r1
 8001054:	2200      	movs	r2, #0
 8001056:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8001058:	187b      	adds	r3, r7, r1
 800105a:	2280      	movs	r2, #128	@ 0x80
 800105c:	03d2      	lsls	r2, r2, #15
 800105e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001060:	187b      	adds	r3, r7, r1
 8001062:	0018      	movs	r0, r3
 8001064:	f002 fce4 	bl	8003a30 <HAL_RCC_OscConfig>
 8001068:	1e03      	subs	r3, r0, #0
 800106a:	d001      	beq.n	8001070 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800106c:	f000 fa7a 	bl	8001564 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001070:	2124      	movs	r1, #36	@ 0x24
 8001072:	187b      	adds	r3, r7, r1
 8001074:	220f      	movs	r2, #15
 8001076:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001078:	187b      	adds	r3, r7, r1
 800107a:	2203      	movs	r2, #3
 800107c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800107e:	187b      	adds	r3, r7, r1
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001084:	187b      	adds	r3, r7, r1
 8001086:	2200      	movs	r2, #0
 8001088:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800108a:	187b      	adds	r3, r7, r1
 800108c:	2200      	movs	r2, #0
 800108e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001090:	187b      	adds	r3, r7, r1
 8001092:	2101      	movs	r1, #1
 8001094:	0018      	movs	r0, r3
 8001096:	f003 f88f 	bl	80041b8 <HAL_RCC_ClockConfig>
 800109a:	1e03      	subs	r3, r0, #0
 800109c:	d001      	beq.n	80010a2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800109e:	f000 fa61 	bl	8001564 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80010a2:	003b      	movs	r3, r7
 80010a4:	220a      	movs	r2, #10
 80010a6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010a8:	003b      	movs	r3, r7
 80010aa:	2200      	movs	r2, #0
 80010ac:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80010ae:	003b      	movs	r3, r7
 80010b0:	2200      	movs	r2, #0
 80010b2:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010b4:	003b      	movs	r3, r7
 80010b6:	0018      	movs	r0, r3
 80010b8:	f003 faa2 	bl	8004600 <HAL_RCCEx_PeriphCLKConfig>
 80010bc:	1e03      	subs	r3, r0, #0
 80010be:	d001      	beq.n	80010c4 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80010c0:	f000 fa50 	bl	8001564 <Error_Handler>
  }
}
 80010c4:	46c0      	nop			@ (mov r8, r8)
 80010c6:	46bd      	mov	sp, r7
 80010c8:	b01d      	add	sp, #116	@ 0x74
 80010ca:	bd90      	pop	{r4, r7, pc}
 80010cc:	40007000 	.word	0x40007000
 80010d0:	ffffe7ff 	.word	0xffffe7ff

080010d4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010da:	003b      	movs	r3, r7
 80010dc:	0018      	movs	r0, r3
 80010de:	2308      	movs	r3, #8
 80010e0:	001a      	movs	r2, r3
 80010e2:	2100      	movs	r1, #0
 80010e4:	f005 f89a 	bl	800621c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80010e8:	4b30      	ldr	r3, [pc, #192]	@ (80011ac <MX_ADC_Init+0xd8>)
 80010ea:	4a31      	ldr	r2, [pc, #196]	@ (80011b0 <MX_ADC_Init+0xdc>)
 80010ec:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80010ee:	4b2f      	ldr	r3, [pc, #188]	@ (80011ac <MX_ADC_Init+0xd8>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV64;
 80010f4:	4b2d      	ldr	r3, [pc, #180]	@ (80011ac <MX_ADC_Init+0xd8>)
 80010f6:	2290      	movs	r2, #144	@ 0x90
 80010f8:	0392      	lsls	r2, r2, #14
 80010fa:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80010fc:	4b2b      	ldr	r3, [pc, #172]	@ (80011ac <MX_ADC_Init+0xd8>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_3CYCLES_5;
 8001102:	4b2a      	ldr	r3, [pc, #168]	@ (80011ac <MX_ADC_Init+0xd8>)
 8001104:	2201      	movs	r2, #1
 8001106:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001108:	4b28      	ldr	r3, [pc, #160]	@ (80011ac <MX_ADC_Init+0xd8>)
 800110a:	2201      	movs	r2, #1
 800110c:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800110e:	4b27      	ldr	r3, [pc, #156]	@ (80011ac <MX_ADC_Init+0xd8>)
 8001110:	2200      	movs	r2, #0
 8001112:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 8001114:	4b25      	ldr	r3, [pc, #148]	@ (80011ac <MX_ADC_Init+0xd8>)
 8001116:	2220      	movs	r2, #32
 8001118:	2101      	movs	r1, #1
 800111a:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800111c:	4b23      	ldr	r3, [pc, #140]	@ (80011ac <MX_ADC_Init+0xd8>)
 800111e:	2221      	movs	r2, #33	@ 0x21
 8001120:	2100      	movs	r1, #0
 8001122:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001124:	4b21      	ldr	r3, [pc, #132]	@ (80011ac <MX_ADC_Init+0xd8>)
 8001126:	2200      	movs	r2, #0
 8001128:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800112a:	4b20      	ldr	r3, [pc, #128]	@ (80011ac <MX_ADC_Init+0xd8>)
 800112c:	22c2      	movs	r2, #194	@ 0xc2
 800112e:	32ff      	adds	r2, #255	@ 0xff
 8001130:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 8001132:	4b1e      	ldr	r3, [pc, #120]	@ (80011ac <MX_ADC_Init+0xd8>)
 8001134:	222c      	movs	r2, #44	@ 0x2c
 8001136:	2101      	movs	r1, #1
 8001138:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800113a:	4b1c      	ldr	r3, [pc, #112]	@ (80011ac <MX_ADC_Init+0xd8>)
 800113c:	2204      	movs	r2, #4
 800113e:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001140:	4b1a      	ldr	r3, [pc, #104]	@ (80011ac <MX_ADC_Init+0xd8>)
 8001142:	2200      	movs	r2, #0
 8001144:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001146:	4b19      	ldr	r3, [pc, #100]	@ (80011ac <MX_ADC_Init+0xd8>)
 8001148:	2200      	movs	r2, #0
 800114a:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 800114c:	4b17      	ldr	r3, [pc, #92]	@ (80011ac <MX_ADC_Init+0xd8>)
 800114e:	2201      	movs	r2, #1
 8001150:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001152:	4b16      	ldr	r3, [pc, #88]	@ (80011ac <MX_ADC_Init+0xd8>)
 8001154:	2200      	movs	r2, #0
 8001156:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001158:	4b14      	ldr	r3, [pc, #80]	@ (80011ac <MX_ADC_Init+0xd8>)
 800115a:	0018      	movs	r0, r3
 800115c:	f000 fdb8 	bl	8001cd0 <HAL_ADC_Init>
 8001160:	1e03      	subs	r3, r0, #0
 8001162:	d001      	beq.n	8001168 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8001164:	f000 f9fe 	bl	8001564 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001168:	003b      	movs	r3, r7
 800116a:	4a12      	ldr	r2, [pc, #72]	@ (80011b4 <MX_ADC_Init+0xe0>)
 800116c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800116e:	003b      	movs	r3, r7
 8001170:	2280      	movs	r2, #128	@ 0x80
 8001172:	0152      	lsls	r2, r2, #5
 8001174:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001176:	003a      	movs	r2, r7
 8001178:	4b0c      	ldr	r3, [pc, #48]	@ (80011ac <MX_ADC_Init+0xd8>)
 800117a:	0011      	movs	r1, r2
 800117c:	0018      	movs	r0, r3
 800117e:	f001 f8d5 	bl	800232c <HAL_ADC_ConfigChannel>
 8001182:	1e03      	subs	r3, r0, #0
 8001184:	d001      	beq.n	800118a <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8001186:	f000 f9ed 	bl	8001564 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800118a:	003b      	movs	r3, r7
 800118c:	4a0a      	ldr	r2, [pc, #40]	@ (80011b8 <MX_ADC_Init+0xe4>)
 800118e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001190:	003a      	movs	r2, r7
 8001192:	4b06      	ldr	r3, [pc, #24]	@ (80011ac <MX_ADC_Init+0xd8>)
 8001194:	0011      	movs	r1, r2
 8001196:	0018      	movs	r0, r3
 8001198:	f001 f8c8 	bl	800232c <HAL_ADC_ConfigChannel>
 800119c:	1e03      	subs	r3, r0, #0
 800119e:	d001      	beq.n	80011a4 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 80011a0:	f000 f9e0 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80011a4:	46c0      	nop			@ (mov r8, r8)
 80011a6:	46bd      	mov	sp, r7
 80011a8:	b002      	add	sp, #8
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	200000d4 	.word	0x200000d4
 80011b0:	40012400 	.word	0x40012400
 80011b4:	04000002 	.word	0x04000002
 80011b8:	10000010 	.word	0x10000010

080011bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001230 <MX_I2C1_Init+0x74>)
 80011c2:	4a1c      	ldr	r2, [pc, #112]	@ (8001234 <MX_I2C1_Init+0x78>)
 80011c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00805C87;
 80011c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001230 <MX_I2C1_Init+0x74>)
 80011c8:	4a1b      	ldr	r2, [pc, #108]	@ (8001238 <MX_I2C1_Init+0x7c>)
 80011ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011cc:	4b18      	ldr	r3, [pc, #96]	@ (8001230 <MX_I2C1_Init+0x74>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011d2:	4b17      	ldr	r3, [pc, #92]	@ (8001230 <MX_I2C1_Init+0x74>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011d8:	4b15      	ldr	r3, [pc, #84]	@ (8001230 <MX_I2C1_Init+0x74>)
 80011da:	2200      	movs	r2, #0
 80011dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011de:	4b14      	ldr	r3, [pc, #80]	@ (8001230 <MX_I2C1_Init+0x74>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011e4:	4b12      	ldr	r3, [pc, #72]	@ (8001230 <MX_I2C1_Init+0x74>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011ea:	4b11      	ldr	r3, [pc, #68]	@ (8001230 <MX_I2C1_Init+0x74>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001230 <MX_I2C1_Init+0x74>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001230 <MX_I2C1_Init+0x74>)
 80011f8:	0018      	movs	r0, r3
 80011fa:	f001 ffb7 	bl	800316c <HAL_I2C_Init>
 80011fe:	1e03      	subs	r3, r0, #0
 8001200:	d001      	beq.n	8001206 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001202:	f000 f9af 	bl	8001564 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001206:	4b0a      	ldr	r3, [pc, #40]	@ (8001230 <MX_I2C1_Init+0x74>)
 8001208:	2100      	movs	r1, #0
 800120a:	0018      	movs	r0, r3
 800120c:	f002 fb78 	bl	8003900 <HAL_I2CEx_ConfigAnalogFilter>
 8001210:	1e03      	subs	r3, r0, #0
 8001212:	d001      	beq.n	8001218 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001214:	f000 f9a6 	bl	8001564 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001218:	4b05      	ldr	r3, [pc, #20]	@ (8001230 <MX_I2C1_Init+0x74>)
 800121a:	2100      	movs	r1, #0
 800121c:	0018      	movs	r0, r3
 800121e:	f002 fbbb 	bl	8003998 <HAL_I2CEx_ConfigDigitalFilter>
 8001222:	1e03      	subs	r3, r0, #0
 8001224:	d001      	beq.n	800122a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001226:	f000 f99d 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800122a:	46c0      	nop			@ (mov r8, r8)
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20000178 	.word	0x20000178
 8001234:	40005400 	.word	0x40005400
 8001238:	00805c87 	.word	0x00805c87

0800123c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08a      	sub	sp, #40	@ 0x28
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001242:	2318      	movs	r3, #24
 8001244:	18fb      	adds	r3, r7, r3
 8001246:	0018      	movs	r0, r3
 8001248:	2310      	movs	r3, #16
 800124a:	001a      	movs	r2, r3
 800124c:	2100      	movs	r1, #0
 800124e:	f004 ffe5 	bl	800621c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001252:	2310      	movs	r3, #16
 8001254:	18fb      	adds	r3, r7, r3
 8001256:	0018      	movs	r0, r3
 8001258:	2308      	movs	r3, #8
 800125a:	001a      	movs	r2, r3
 800125c:	2100      	movs	r1, #0
 800125e:	f004 ffdd 	bl	800621c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001262:	003b      	movs	r3, r7
 8001264:	0018      	movs	r0, r3
 8001266:	2310      	movs	r3, #16
 8001268:	001a      	movs	r2, r3
 800126a:	2100      	movs	r1, #0
 800126c:	f004 ffd6 	bl	800621c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001270:	4b34      	ldr	r3, [pc, #208]	@ (8001344 <MX_TIM2_Init+0x108>)
 8001272:	2280      	movs	r2, #128	@ 0x80
 8001274:	05d2      	lsls	r2, r2, #23
 8001276:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001278:	4b32      	ldr	r3, [pc, #200]	@ (8001344 <MX_TIM2_Init+0x108>)
 800127a:	2200      	movs	r2, #0
 800127c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800127e:	4b31      	ldr	r3, [pc, #196]	@ (8001344 <MX_TIM2_Init+0x108>)
 8001280:	2200      	movs	r2, #0
 8001282:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 30-1;
 8001284:	4b2f      	ldr	r3, [pc, #188]	@ (8001344 <MX_TIM2_Init+0x108>)
 8001286:	221d      	movs	r2, #29
 8001288:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800128a:	4b2e      	ldr	r3, [pc, #184]	@ (8001344 <MX_TIM2_Init+0x108>)
 800128c:	2200      	movs	r2, #0
 800128e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001290:	4b2c      	ldr	r3, [pc, #176]	@ (8001344 <MX_TIM2_Init+0x108>)
 8001292:	2200      	movs	r2, #0
 8001294:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001296:	4b2b      	ldr	r3, [pc, #172]	@ (8001344 <MX_TIM2_Init+0x108>)
 8001298:	0018      	movs	r0, r3
 800129a:	f003 fb3f 	bl	800491c <HAL_TIM_Base_Init>
 800129e:	1e03      	subs	r3, r0, #0
 80012a0:	d001      	beq.n	80012a6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80012a2:	f000 f95f 	bl	8001564 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012a6:	2118      	movs	r1, #24
 80012a8:	187b      	adds	r3, r7, r1
 80012aa:	2280      	movs	r2, #128	@ 0x80
 80012ac:	0152      	lsls	r2, r2, #5
 80012ae:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012b0:	187a      	adds	r2, r7, r1
 80012b2:	4b24      	ldr	r3, [pc, #144]	@ (8001344 <MX_TIM2_Init+0x108>)
 80012b4:	0011      	movs	r1, r2
 80012b6:	0018      	movs	r0, r3
 80012b8:	f003 fcd0 	bl	8004c5c <HAL_TIM_ConfigClockSource>
 80012bc:	1e03      	subs	r3, r0, #0
 80012be:	d001      	beq.n	80012c4 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80012c0:	f000 f950 	bl	8001564 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001344 <MX_TIM2_Init+0x108>)
 80012c6:	0018      	movs	r0, r3
 80012c8:	f003 fb68 	bl	800499c <HAL_TIM_PWM_Init>
 80012cc:	1e03      	subs	r3, r0, #0
 80012ce:	d001      	beq.n	80012d4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80012d0:	f000 f948 	bl	8001564 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 80012d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001344 <MX_TIM2_Init+0x108>)
 80012d6:	2108      	movs	r1, #8
 80012d8:	0018      	movs	r0, r3
 80012da:	f003 fba7 	bl	8004a2c <HAL_TIM_OnePulse_Init>
 80012de:	1e03      	subs	r3, r0, #0
 80012e0:	d001      	beq.n	80012e6 <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 80012e2:	f000 f93f 	bl	8001564 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e6:	2110      	movs	r1, #16
 80012e8:	187b      	adds	r3, r7, r1
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ee:	187b      	adds	r3, r7, r1
 80012f0:	2200      	movs	r2, #0
 80012f2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012f4:	187a      	adds	r2, r7, r1
 80012f6:	4b13      	ldr	r3, [pc, #76]	@ (8001344 <MX_TIM2_Init+0x108>)
 80012f8:	0011      	movs	r1, r2
 80012fa:	0018      	movs	r0, r3
 80012fc:	f003 ff74 	bl	80051e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001300:	1e03      	subs	r3, r0, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8001304:	f000 f92e 	bl	8001564 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001308:	003b      	movs	r3, r7
 800130a:	2260      	movs	r2, #96	@ 0x60
 800130c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800130e:	003b      	movs	r3, r7
 8001310:	2200      	movs	r2, #0
 8001312:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001314:	003b      	movs	r3, r7
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800131a:	003b      	movs	r3, r7
 800131c:	2200      	movs	r2, #0
 800131e:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001320:	0039      	movs	r1, r7
 8001322:	4b08      	ldr	r3, [pc, #32]	@ (8001344 <MX_TIM2_Init+0x108>)
 8001324:	2200      	movs	r2, #0
 8001326:	0018      	movs	r0, r3
 8001328:	f003 fbd2 	bl	8004ad0 <HAL_TIM_PWM_ConfigChannel>
 800132c:	1e03      	subs	r3, r0, #0
 800132e:	d001      	beq.n	8001334 <MX_TIM2_Init+0xf8>
  {
    Error_Handler();
 8001330:	f000 f918 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001334:	4b03      	ldr	r3, [pc, #12]	@ (8001344 <MX_TIM2_Init+0x108>)
 8001336:	0018      	movs	r0, r3
 8001338:	f000 fac2 	bl	80018c0 <HAL_TIM_MspPostInit>

}
 800133c:	46c0      	nop			@ (mov r8, r8)
 800133e:	46bd      	mov	sp, r7
 8001340:	b00a      	add	sp, #40	@ 0x28
 8001342:	bd80      	pop	{r7, pc}
 8001344:	200001cc 	.word	0x200001cc

08001348 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800134c:	4b14      	ldr	r3, [pc, #80]	@ (80013a0 <MX_USART2_UART_Init+0x58>)
 800134e:	4a15      	ldr	r2, [pc, #84]	@ (80013a4 <MX_USART2_UART_Init+0x5c>)
 8001350:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001352:	4b13      	ldr	r3, [pc, #76]	@ (80013a0 <MX_USART2_UART_Init+0x58>)
 8001354:	22e1      	movs	r2, #225	@ 0xe1
 8001356:	0252      	lsls	r2, r2, #9
 8001358:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800135a:	4b11      	ldr	r3, [pc, #68]	@ (80013a0 <MX_USART2_UART_Init+0x58>)
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001360:	4b0f      	ldr	r3, [pc, #60]	@ (80013a0 <MX_USART2_UART_Init+0x58>)
 8001362:	2200      	movs	r2, #0
 8001364:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001366:	4b0e      	ldr	r3, [pc, #56]	@ (80013a0 <MX_USART2_UART_Init+0x58>)
 8001368:	2200      	movs	r2, #0
 800136a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800136c:	4b0c      	ldr	r3, [pc, #48]	@ (80013a0 <MX_USART2_UART_Init+0x58>)
 800136e:	220c      	movs	r2, #12
 8001370:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001372:	4b0b      	ldr	r3, [pc, #44]	@ (80013a0 <MX_USART2_UART_Init+0x58>)
 8001374:	2200      	movs	r2, #0
 8001376:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001378:	4b09      	ldr	r3, [pc, #36]	@ (80013a0 <MX_USART2_UART_Init+0x58>)
 800137a:	2200      	movs	r2, #0
 800137c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800137e:	4b08      	ldr	r3, [pc, #32]	@ (80013a0 <MX_USART2_UART_Init+0x58>)
 8001380:	2200      	movs	r2, #0
 8001382:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001384:	4b06      	ldr	r3, [pc, #24]	@ (80013a0 <MX_USART2_UART_Init+0x58>)
 8001386:	2200      	movs	r2, #0
 8001388:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800138a:	4b05      	ldr	r3, [pc, #20]	@ (80013a0 <MX_USART2_UART_Init+0x58>)
 800138c:	0018      	movs	r0, r3
 800138e:	f003 ff83 	bl	8005298 <HAL_UART_Init>
 8001392:	1e03      	subs	r3, r0, #0
 8001394:	d001      	beq.n	800139a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001396:	f000 f8e5 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800139a:	46c0      	nop			@ (mov r8, r8)
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	20000254 	.word	0x20000254
 80013a4:	40004400 	.word	0x40004400

080013a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013ae:	4b10      	ldr	r3, [pc, #64]	@ (80013f0 <MX_DMA_Init+0x48>)
 80013b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013b2:	4b0f      	ldr	r3, [pc, #60]	@ (80013f0 <MX_DMA_Init+0x48>)
 80013b4:	2101      	movs	r1, #1
 80013b6:	430a      	orrs	r2, r1
 80013b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80013ba:	4b0d      	ldr	r3, [pc, #52]	@ (80013f0 <MX_DMA_Init+0x48>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013be:	2201      	movs	r2, #1
 80013c0:	4013      	ands	r3, r2
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2100      	movs	r1, #0
 80013ca:	2009      	movs	r0, #9
 80013cc:	f001 faba 	bl	8002944 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80013d0:	2009      	movs	r0, #9
 80013d2:	f001 facc 	bl	800296e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2100      	movs	r1, #0
 80013da:	200b      	movs	r0, #11
 80013dc:	f001 fab2 	bl	8002944 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80013e0:	200b      	movs	r0, #11
 80013e2:	f001 fac4 	bl	800296e <HAL_NVIC_EnableIRQ>

}
 80013e6:	46c0      	nop			@ (mov r8, r8)
 80013e8:	46bd      	mov	sp, r7
 80013ea:	b002      	add	sp, #8
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	46c0      	nop			@ (mov r8, r8)
 80013f0:	40021000 	.word	0x40021000

080013f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013f4:	b590      	push	{r4, r7, lr}
 80013f6:	b08b      	sub	sp, #44	@ 0x2c
 80013f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fa:	2414      	movs	r4, #20
 80013fc:	193b      	adds	r3, r7, r4
 80013fe:	0018      	movs	r0, r3
 8001400:	2314      	movs	r3, #20
 8001402:	001a      	movs	r2, r3
 8001404:	2100      	movs	r1, #0
 8001406:	f004 ff09 	bl	800621c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800140a:	4b4d      	ldr	r3, [pc, #308]	@ (8001540 <MX_GPIO_Init+0x14c>)
 800140c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800140e:	4b4c      	ldr	r3, [pc, #304]	@ (8001540 <MX_GPIO_Init+0x14c>)
 8001410:	2104      	movs	r1, #4
 8001412:	430a      	orrs	r2, r1
 8001414:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001416:	4b4a      	ldr	r3, [pc, #296]	@ (8001540 <MX_GPIO_Init+0x14c>)
 8001418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800141a:	2204      	movs	r2, #4
 800141c:	4013      	ands	r3, r2
 800141e:	613b      	str	r3, [r7, #16]
 8001420:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001422:	4b47      	ldr	r3, [pc, #284]	@ (8001540 <MX_GPIO_Init+0x14c>)
 8001424:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001426:	4b46      	ldr	r3, [pc, #280]	@ (8001540 <MX_GPIO_Init+0x14c>)
 8001428:	2180      	movs	r1, #128	@ 0x80
 800142a:	430a      	orrs	r2, r1
 800142c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800142e:	4b44      	ldr	r3, [pc, #272]	@ (8001540 <MX_GPIO_Init+0x14c>)
 8001430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001432:	2280      	movs	r2, #128	@ 0x80
 8001434:	4013      	ands	r3, r2
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800143a:	4b41      	ldr	r3, [pc, #260]	@ (8001540 <MX_GPIO_Init+0x14c>)
 800143c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800143e:	4b40      	ldr	r3, [pc, #256]	@ (8001540 <MX_GPIO_Init+0x14c>)
 8001440:	2101      	movs	r1, #1
 8001442:	430a      	orrs	r2, r1
 8001444:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001446:	4b3e      	ldr	r3, [pc, #248]	@ (8001540 <MX_GPIO_Init+0x14c>)
 8001448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800144a:	2201      	movs	r2, #1
 800144c:	4013      	ands	r3, r2
 800144e:	60bb      	str	r3, [r7, #8]
 8001450:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001452:	4b3b      	ldr	r3, [pc, #236]	@ (8001540 <MX_GPIO_Init+0x14c>)
 8001454:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001456:	4b3a      	ldr	r3, [pc, #232]	@ (8001540 <MX_GPIO_Init+0x14c>)
 8001458:	2102      	movs	r1, #2
 800145a:	430a      	orrs	r2, r1
 800145c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800145e:	4b38      	ldr	r3, [pc, #224]	@ (8001540 <MX_GPIO_Init+0x14c>)
 8001460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001462:	2202      	movs	r2, #2
 8001464:	4013      	ands	r3, r2
 8001466:	607b      	str	r3, [r7, #4]
 8001468:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|TM1651_CLK_Pin|TM1651_DIO_Pin, GPIO_PIN_RESET);
 800146a:	23a0      	movs	r3, #160	@ 0xa0
 800146c:	05db      	lsls	r3, r3, #23
 800146e:	2200      	movs	r2, #0
 8001470:	21e0      	movs	r1, #224	@ 0xe0
 8001472:	0018      	movs	r0, r3
 8001474:	f001 fe25 	bl	80030c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001478:	193b      	adds	r3, r7, r4
 800147a:	2280      	movs	r2, #128	@ 0x80
 800147c:	0192      	lsls	r2, r2, #6
 800147e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001480:	193b      	adds	r3, r7, r4
 8001482:	2284      	movs	r2, #132	@ 0x84
 8001484:	0392      	lsls	r2, r2, #14
 8001486:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	193b      	adds	r3, r7, r4
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800148e:	193b      	adds	r3, r7, r4
 8001490:	4a2c      	ldr	r2, [pc, #176]	@ (8001544 <MX_GPIO_Init+0x150>)
 8001492:	0019      	movs	r1, r3
 8001494:	0010      	movs	r0, r2
 8001496:	f001 fc81 	bl	8002d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800149a:	193b      	adds	r3, r7, r4
 800149c:	2220      	movs	r2, #32
 800149e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a0:	193b      	adds	r3, r7, r4
 80014a2:	2201      	movs	r2, #1
 80014a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	193b      	adds	r3, r7, r4
 80014a8:	2200      	movs	r2, #0
 80014aa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ac:	193b      	adds	r3, r7, r4
 80014ae:	2200      	movs	r2, #0
 80014b0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014b2:	193a      	adds	r2, r7, r4
 80014b4:	23a0      	movs	r3, #160	@ 0xa0
 80014b6:	05db      	lsls	r3, r3, #23
 80014b8:	0011      	movs	r1, r2
 80014ba:	0018      	movs	r0, r3
 80014bc:	f001 fc6e 	bl	8002d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : TM1651_CLK_Pin TM1651_DIO_Pin */
  GPIO_InitStruct.Pin = TM1651_CLK_Pin|TM1651_DIO_Pin;
 80014c0:	193b      	adds	r3, r7, r4
 80014c2:	22c0      	movs	r2, #192	@ 0xc0
 80014c4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c6:	193b      	adds	r3, r7, r4
 80014c8:	2201      	movs	r2, #1
 80014ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	193b      	adds	r3, r7, r4
 80014ce:	2200      	movs	r2, #0
 80014d0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d2:	193b      	adds	r3, r7, r4
 80014d4:	2203      	movs	r2, #3
 80014d6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d8:	193a      	adds	r2, r7, r4
 80014da:	23a0      	movs	r3, #160	@ 0xa0
 80014dc:	05db      	lsls	r3, r3, #23
 80014de:	0011      	movs	r1, r2
 80014e0:	0018      	movs	r0, r3
 80014e2:	f001 fc5b 	bl	8002d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : Encoder_Sig_A_Pin */
  GPIO_InitStruct.Pin = Encoder_Sig_A_Pin;
 80014e6:	193b      	adds	r3, r7, r4
 80014e8:	2280      	movs	r2, #128	@ 0x80
 80014ea:	00d2      	lsls	r2, r2, #3
 80014ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80014ee:	193b      	adds	r3, r7, r4
 80014f0:	22c4      	movs	r2, #196	@ 0xc4
 80014f2:	0392      	lsls	r2, r2, #14
 80014f4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	193b      	adds	r3, r7, r4
 80014f8:	2200      	movs	r2, #0
 80014fa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Encoder_Sig_A_GPIO_Port, &GPIO_InitStruct);
 80014fc:	193a      	adds	r2, r7, r4
 80014fe:	23a0      	movs	r3, #160	@ 0xa0
 8001500:	05db      	lsls	r3, r3, #23
 8001502:	0011      	movs	r1, r2
 8001504:	0018      	movs	r0, r3
 8001506:	f001 fc49 	bl	8002d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : Encoder_Sig_B_Pin Encoder_SW_Pin */
  GPIO_InitStruct.Pin = Encoder_Sig_B_Pin|Encoder_SW_Pin;
 800150a:	193b      	adds	r3, r7, r4
 800150c:	2228      	movs	r2, #40	@ 0x28
 800150e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001510:	193b      	adds	r3, r7, r4
 8001512:	2200      	movs	r2, #0
 8001514:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	193b      	adds	r3, r7, r4
 8001518:	2200      	movs	r2, #0
 800151a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800151c:	193b      	adds	r3, r7, r4
 800151e:	4a0a      	ldr	r2, [pc, #40]	@ (8001548 <MX_GPIO_Init+0x154>)
 8001520:	0019      	movs	r1, r3
 8001522:	0010      	movs	r0, r2
 8001524:	f001 fc3a 	bl	8002d9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001528:	2200      	movs	r2, #0
 800152a:	2100      	movs	r1, #0
 800152c:	2007      	movs	r0, #7
 800152e:	f001 fa09 	bl	8002944 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001532:	2007      	movs	r0, #7
 8001534:	f001 fa1b 	bl	800296e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001538:	46c0      	nop			@ (mov r8, r8)
 800153a:	46bd      	mov	sp, r7
 800153c:	b00b      	add	sp, #44	@ 0x2c
 800153e:	bd90      	pop	{r4, r7, pc}
 8001540:	40021000 	.word	0x40021000
 8001544:	50000800 	.word	0x50000800
 8001548:	50000400 	.word	0x50000400

0800154c <HAL_ADC_ConvCpltCallback>:
	}
	printf("I2C Scan Complete.\r\n");
}

//ADC Callback function
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_DMA(hadc);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	0018      	movs	r0, r3
 8001558:	f000 fdb0 	bl	80020bc <HAL_ADC_Stop_DMA>
}
 800155c:	46c0      	nop			@ (mov r8, r8)
 800155e:	46bd      	mov	sp, r7
 8001560:	b002      	add	sp, #8
 8001562:	bd80      	pop	{r7, pc}

08001564 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001568:	b672      	cpsid	i
}
 800156a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800156c:	46c0      	nop			@ (mov r8, r8)
 800156e:	e7fd      	b.n	800156c <Error_Handler+0x8>

08001570 <RotaryEncoder_Init>:

static RotaryEncoder_t *encoder_instance = NULL;

void RotaryEncoder_Init(RotaryEncoder_t *encoder, GPIO_TypeDef *A_Port,
		uint16_t A_Pin, GPIO_TypeDef *B_Port, uint16_t B_Pin,
		GPIO_TypeDef *SW_Port, uint16_t SW_Pin) {
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	603b      	str	r3, [r7, #0]
 800157c:	1dbb      	adds	r3, r7, #6
 800157e:	801a      	strh	r2, [r3, #0]
	encoder->A_Port = A_Port;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	68ba      	ldr	r2, [r7, #8]
 8001584:	601a      	str	r2, [r3, #0]
	encoder->A_Pin = A_Pin;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	1dba      	adds	r2, r7, #6
 800158a:	8812      	ldrh	r2, [r2, #0]
 800158c:	809a      	strh	r2, [r3, #4]

	encoder->B_Port = B_Port;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	683a      	ldr	r2, [r7, #0]
 8001592:	609a      	str	r2, [r3, #8]
	encoder->B_Pin = B_Pin;
 8001594:	68fa      	ldr	r2, [r7, #12]
 8001596:	2318      	movs	r3, #24
 8001598:	18fb      	adds	r3, r7, r3
 800159a:	881b      	ldrh	r3, [r3, #0]
 800159c:	8193      	strh	r3, [r2, #12]

	encoder->SW_Port = SW_Port;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	69fa      	ldr	r2, [r7, #28]
 80015a2:	611a      	str	r2, [r3, #16]
	encoder->SW_Pin = SW_Pin;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	2220      	movs	r2, #32
 80015a8:	18ba      	adds	r2, r7, r2
 80015aa:	8812      	ldrh	r2, [r2, #0]
 80015ac:	829a      	strh	r2, [r3, #20]

	encoder->counter = 0;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	2200      	movs	r2, #0
 80015b2:	619a      	str	r2, [r3, #24]
	encoder->direction = ROTARY_NONE;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	2200      	movs	r2, #0
 80015b8:	771a      	strb	r2, [r3, #28]

	encoder_instance = encoder;
 80015ba:	4b03      	ldr	r3, [pc, #12]	@ (80015c8 <RotaryEncoder_Init+0x58>)
 80015bc:	68fa      	ldr	r2, [r7, #12]
 80015be:	601a      	str	r2, [r3, #0]
}
 80015c0:	46c0      	nop			@ (mov r8, r8)
 80015c2:	46bd      	mov	sp, r7
 80015c4:	b004      	add	sp, #16
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20000304 	.word	0x20000304

080015cc <RotaryEncoder_Update>:

// Function to handle encoder movement
void RotaryEncoder_Update(RotaryEncoder_t *encoder) {
 80015cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
	uint8_t A_State = HAL_GPIO_ReadPin(encoder->A_Port, encoder->A_Pin);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	889b      	ldrh	r3, [r3, #4]
 80015dc:	250f      	movs	r5, #15
 80015de:	197c      	adds	r4, r7, r5
 80015e0:	0019      	movs	r1, r3
 80015e2:	0010      	movs	r0, r2
 80015e4:	f001 fd50 	bl	8003088 <HAL_GPIO_ReadPin>
 80015e8:	0003      	movs	r3, r0
 80015ea:	7023      	strb	r3, [r4, #0]
	uint8_t B_State = HAL_GPIO_ReadPin(encoder->B_Port, encoder->B_Pin);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689a      	ldr	r2, [r3, #8]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	899b      	ldrh	r3, [r3, #12]
 80015f4:	260e      	movs	r6, #14
 80015f6:	19bc      	adds	r4, r7, r6
 80015f8:	0019      	movs	r1, r3
 80015fa:	0010      	movs	r0, r2
 80015fc:	f001 fd44 	bl	8003088 <HAL_GPIO_ReadPin>
 8001600:	0003      	movs	r3, r0
 8001602:	7023      	strb	r3, [r4, #0]

	if (A_State) {
 8001604:	197b      	adds	r3, r7, r5
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d014      	beq.n	8001636 <RotaryEncoder_Update+0x6a>
		if (B_State) {
 800160c:	19bb      	adds	r3, r7, r6
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d008      	beq.n	8001626 <RotaryEncoder_Update+0x5a>
			encoder->direction = ROTARY_CCW;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2202      	movs	r2, #2
 8001618:	771a      	strb	r2, [r3, #28]
			encoder->counter--;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	1e5a      	subs	r2, r3, #1
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	619a      	str	r2, [r3, #24]
		} else {
			encoder->direction = ROTARY_CW;
			encoder->counter++;
		}
	}
}
 8001624:	e007      	b.n	8001636 <RotaryEncoder_Update+0x6a>
			encoder->direction = ROTARY_CW;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2201      	movs	r2, #1
 800162a:	771a      	strb	r2, [r3, #28]
			encoder->counter++;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	1c5a      	adds	r2, r3, #1
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	619a      	str	r2, [r3, #24]
}
 8001636:	46c0      	nop			@ (mov r8, r8)
 8001638:	46bd      	mov	sp, r7
 800163a:	b005      	add	sp, #20
 800163c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800163e <RotaryEncoder_ReadSwitch>:

// Read switch state
uint8_t RotaryEncoder_ReadSwitch(RotaryEncoder_t *encoder) {
 800163e:	b580      	push	{r7, lr}
 8001640:	b082      	sub	sp, #8
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(encoder->SW_Port, encoder->SW_Pin);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	691a      	ldr	r2, [r3, #16]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	8a9b      	ldrh	r3, [r3, #20]
 800164e:	0019      	movs	r1, r3
 8001650:	0010      	movs	r0, r2
 8001652:	f001 fd19 	bl	8003088 <HAL_GPIO_ReadPin>
 8001656:	0003      	movs	r3, r0
}
 8001658:	0018      	movs	r0, r3
 800165a:	46bd      	mov	sp, r7
 800165c:	b002      	add	sp, #8
 800165e:	bd80      	pop	{r7, pc}

08001660 <HAL_GPIO_EXTI_Callback>:

// EXTI Callback (Must be placed inside stm32l0xx_it.c)
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	0002      	movs	r2, r0
 8001668:	1dbb      	adds	r3, r7, #6
 800166a:	801a      	strh	r2, [r3, #0]
	if (encoder_instance == NULL)
 800166c:	4b0a      	ldr	r3, [pc, #40]	@ (8001698 <HAL_GPIO_EXTI_Callback+0x38>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d00c      	beq.n	800168e <HAL_GPIO_EXTI_Callback+0x2e>
		return;

	if (GPIO_Pin == encoder_instance->A_Pin) {
 8001674:	4b08      	ldr	r3, [pc, #32]	@ (8001698 <HAL_GPIO_EXTI_Callback+0x38>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	889b      	ldrh	r3, [r3, #4]
 800167a:	1dba      	adds	r2, r7, #6
 800167c:	8812      	ldrh	r2, [r2, #0]
 800167e:	429a      	cmp	r2, r3
 8001680:	d106      	bne.n	8001690 <HAL_GPIO_EXTI_Callback+0x30>
		RotaryEncoder_Update(encoder_instance);
 8001682:	4b05      	ldr	r3, [pc, #20]	@ (8001698 <HAL_GPIO_EXTI_Callback+0x38>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	0018      	movs	r0, r3
 8001688:	f7ff ffa0 	bl	80015cc <RotaryEncoder_Update>
 800168c:	e000      	b.n	8001690 <HAL_GPIO_EXTI_Callback+0x30>
		return;
 800168e:	46c0      	nop			@ (mov r8, r8)
	}
}
 8001690:	46bd      	mov	sp, r7
 8001692:	b002      	add	sp, #8
 8001694:	bd80      	pop	{r7, pc}
 8001696:	46c0      	nop			@ (mov r8, r8)
 8001698:	20000304 	.word	0x20000304

0800169c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016a0:	4b07      	ldr	r3, [pc, #28]	@ (80016c0 <HAL_MspInit+0x24>)
 80016a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016a4:	4b06      	ldr	r3, [pc, #24]	@ (80016c0 <HAL_MspInit+0x24>)
 80016a6:	2101      	movs	r1, #1
 80016a8:	430a      	orrs	r2, r1
 80016aa:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ac:	4b04      	ldr	r3, [pc, #16]	@ (80016c0 <HAL_MspInit+0x24>)
 80016ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80016b0:	4b03      	ldr	r3, [pc, #12]	@ (80016c0 <HAL_MspInit+0x24>)
 80016b2:	2180      	movs	r1, #128	@ 0x80
 80016b4:	0549      	lsls	r1, r1, #21
 80016b6:	430a      	orrs	r2, r1
 80016b8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ba:	46c0      	nop			@ (mov r8, r8)
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40021000 	.word	0x40021000

080016c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016c4:	b590      	push	{r4, r7, lr}
 80016c6:	b089      	sub	sp, #36	@ 0x24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016cc:	240c      	movs	r4, #12
 80016ce:	193b      	adds	r3, r7, r4
 80016d0:	0018      	movs	r0, r3
 80016d2:	2314      	movs	r3, #20
 80016d4:	001a      	movs	r2, r3
 80016d6:	2100      	movs	r1, #0
 80016d8:	f004 fda0 	bl	800621c <memset>
  if(hadc->Instance==ADC1)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a2e      	ldr	r2, [pc, #184]	@ (800179c <HAL_ADC_MspInit+0xd8>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d155      	bne.n	8001792 <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016e6:	4b2e      	ldr	r3, [pc, #184]	@ (80017a0 <HAL_ADC_MspInit+0xdc>)
 80016e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016ea:	4b2d      	ldr	r3, [pc, #180]	@ (80017a0 <HAL_ADC_MspInit+0xdc>)
 80016ec:	2180      	movs	r1, #128	@ 0x80
 80016ee:	0089      	lsls	r1, r1, #2
 80016f0:	430a      	orrs	r2, r1
 80016f2:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f4:	4b2a      	ldr	r3, [pc, #168]	@ (80017a0 <HAL_ADC_MspInit+0xdc>)
 80016f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016f8:	4b29      	ldr	r3, [pc, #164]	@ (80017a0 <HAL_ADC_MspInit+0xdc>)
 80016fa:	2101      	movs	r1, #1
 80016fc:	430a      	orrs	r2, r1
 80016fe:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001700:	4b27      	ldr	r3, [pc, #156]	@ (80017a0 <HAL_ADC_MspInit+0xdc>)
 8001702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001704:	2201      	movs	r2, #1
 8001706:	4013      	ands	r3, r2
 8001708:	60bb      	str	r3, [r7, #8]
 800170a:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    PA4     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = JOY_X_Pin|JOY_Y_Pin;
 800170c:	193b      	adds	r3, r7, r4
 800170e:	2212      	movs	r2, #18
 8001710:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001712:	193b      	adds	r3, r7, r4
 8001714:	2203      	movs	r2, #3
 8001716:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	193b      	adds	r3, r7, r4
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171e:	193a      	adds	r2, r7, r4
 8001720:	23a0      	movs	r3, #160	@ 0xa0
 8001722:	05db      	lsls	r3, r3, #23
 8001724:	0011      	movs	r1, r2
 8001726:	0018      	movs	r0, r3
 8001728:	f001 fb38 	bl	8002d9c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 800172c:	4b1d      	ldr	r3, [pc, #116]	@ (80017a4 <HAL_ADC_MspInit+0xe0>)
 800172e:	4a1e      	ldr	r2, [pc, #120]	@ (80017a8 <HAL_ADC_MspInit+0xe4>)
 8001730:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 8001732:	4b1c      	ldr	r3, [pc, #112]	@ (80017a4 <HAL_ADC_MspInit+0xe0>)
 8001734:	2200      	movs	r2, #0
 8001736:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001738:	4b1a      	ldr	r3, [pc, #104]	@ (80017a4 <HAL_ADC_MspInit+0xe0>)
 800173a:	2200      	movs	r2, #0
 800173c:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800173e:	4b19      	ldr	r3, [pc, #100]	@ (80017a4 <HAL_ADC_MspInit+0xe0>)
 8001740:	2200      	movs	r2, #0
 8001742:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001744:	4b17      	ldr	r3, [pc, #92]	@ (80017a4 <HAL_ADC_MspInit+0xe0>)
 8001746:	2280      	movs	r2, #128	@ 0x80
 8001748:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800174a:	4b16      	ldr	r3, [pc, #88]	@ (80017a4 <HAL_ADC_MspInit+0xe0>)
 800174c:	2280      	movs	r2, #128	@ 0x80
 800174e:	0052      	lsls	r2, r2, #1
 8001750:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001752:	4b14      	ldr	r3, [pc, #80]	@ (80017a4 <HAL_ADC_MspInit+0xe0>)
 8001754:	2280      	movs	r2, #128	@ 0x80
 8001756:	00d2      	lsls	r2, r2, #3
 8001758:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_NORMAL;
 800175a:	4b12      	ldr	r3, [pc, #72]	@ (80017a4 <HAL_ADC_MspInit+0xe0>)
 800175c:	2200      	movs	r2, #0
 800175e:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8001760:	4b10      	ldr	r3, [pc, #64]	@ (80017a4 <HAL_ADC_MspInit+0xe0>)
 8001762:	2200      	movs	r2, #0
 8001764:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001766:	4b0f      	ldr	r3, [pc, #60]	@ (80017a4 <HAL_ADC_MspInit+0xe0>)
 8001768:	0018      	movs	r0, r3
 800176a:	f001 f91d 	bl	80029a8 <HAL_DMA_Init>
 800176e:	1e03      	subs	r3, r0, #0
 8001770:	d001      	beq.n	8001776 <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 8001772:	f7ff fef7 	bl	8001564 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a0a      	ldr	r2, [pc, #40]	@ (80017a4 <HAL_ADC_MspInit+0xe0>)
 800177a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800177c:	4b09      	ldr	r3, [pc, #36]	@ (80017a4 <HAL_ADC_MspInit+0xe0>)
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	629a      	str	r2, [r3, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8001782:	2200      	movs	r2, #0
 8001784:	2100      	movs	r1, #0
 8001786:	200c      	movs	r0, #12
 8001788:	f001 f8dc 	bl	8002944 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 800178c:	200c      	movs	r0, #12
 800178e:	f001 f8ee 	bl	800296e <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001792:	46c0      	nop			@ (mov r8, r8)
 8001794:	46bd      	mov	sp, r7
 8001796:	b009      	add	sp, #36	@ 0x24
 8001798:	bd90      	pop	{r4, r7, pc}
 800179a:	46c0      	nop			@ (mov r8, r8)
 800179c:	40012400 	.word	0x40012400
 80017a0:	40021000 	.word	0x40021000
 80017a4:	20000130 	.word	0x20000130
 80017a8:	40020008 	.word	0x40020008

080017ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017ac:	b590      	push	{r4, r7, lr}
 80017ae:	b089      	sub	sp, #36	@ 0x24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b4:	240c      	movs	r4, #12
 80017b6:	193b      	adds	r3, r7, r4
 80017b8:	0018      	movs	r0, r3
 80017ba:	2314      	movs	r3, #20
 80017bc:	001a      	movs	r2, r3
 80017be:	2100      	movs	r1, #0
 80017c0:	f004 fd2c 	bl	800621c <memset>
  if(hi2c->Instance==I2C1)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a17      	ldr	r2, [pc, #92]	@ (8001828 <HAL_I2C_MspInit+0x7c>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d128      	bne.n	8001820 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ce:	4b17      	ldr	r3, [pc, #92]	@ (800182c <HAL_I2C_MspInit+0x80>)
 80017d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017d2:	4b16      	ldr	r3, [pc, #88]	@ (800182c <HAL_I2C_MspInit+0x80>)
 80017d4:	2102      	movs	r1, #2
 80017d6:	430a      	orrs	r2, r1
 80017d8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80017da:	4b14      	ldr	r3, [pc, #80]	@ (800182c <HAL_I2C_MspInit+0x80>)
 80017dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017de:	2202      	movs	r2, #2
 80017e0:	4013      	ands	r3, r2
 80017e2:	60bb      	str	r3, [r7, #8]
 80017e4:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017e6:	0021      	movs	r1, r4
 80017e8:	187b      	adds	r3, r7, r1
 80017ea:	22c0      	movs	r2, #192	@ 0xc0
 80017ec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017ee:	187b      	adds	r3, r7, r1
 80017f0:	2212      	movs	r2, #18
 80017f2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f4:	187b      	adds	r3, r7, r1
 80017f6:	2200      	movs	r2, #0
 80017f8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fa:	187b      	adds	r3, r7, r1
 80017fc:	2203      	movs	r2, #3
 80017fe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001800:	187b      	adds	r3, r7, r1
 8001802:	2201      	movs	r2, #1
 8001804:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001806:	187b      	adds	r3, r7, r1
 8001808:	4a09      	ldr	r2, [pc, #36]	@ (8001830 <HAL_I2C_MspInit+0x84>)
 800180a:	0019      	movs	r1, r3
 800180c:	0010      	movs	r0, r2
 800180e:	f001 fac5 	bl	8002d9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001812:	4b06      	ldr	r3, [pc, #24]	@ (800182c <HAL_I2C_MspInit+0x80>)
 8001814:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001816:	4b05      	ldr	r3, [pc, #20]	@ (800182c <HAL_I2C_MspInit+0x80>)
 8001818:	2180      	movs	r1, #128	@ 0x80
 800181a:	0389      	lsls	r1, r1, #14
 800181c:	430a      	orrs	r2, r1
 800181e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001820:	46c0      	nop			@ (mov r8, r8)
 8001822:	46bd      	mov	sp, r7
 8001824:	b009      	add	sp, #36	@ 0x24
 8001826:	bd90      	pop	{r4, r7, pc}
 8001828:	40005400 	.word	0x40005400
 800182c:	40021000 	.word	0x40021000
 8001830:	50000400 	.word	0x50000400

08001834 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	2380      	movs	r3, #128	@ 0x80
 8001842:	05db      	lsls	r3, r3, #23
 8001844:	429a      	cmp	r2, r3
 8001846:	d130      	bne.n	80018aa <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001848:	4b1a      	ldr	r3, [pc, #104]	@ (80018b4 <HAL_TIM_Base_MspInit+0x80>)
 800184a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800184c:	4b19      	ldr	r3, [pc, #100]	@ (80018b4 <HAL_TIM_Base_MspInit+0x80>)
 800184e:	2101      	movs	r1, #1
 8001850:	430a      	orrs	r2, r1
 8001852:	639a      	str	r2, [r3, #56]	@ 0x38

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8001854:	4b18      	ldr	r3, [pc, #96]	@ (80018b8 <HAL_TIM_Base_MspInit+0x84>)
 8001856:	4a19      	ldr	r2, [pc, #100]	@ (80018bc <HAL_TIM_Base_MspInit+0x88>)
 8001858:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_8;
 800185a:	4b17      	ldr	r3, [pc, #92]	@ (80018b8 <HAL_TIM_Base_MspInit+0x84>)
 800185c:	2208      	movs	r2, #8
 800185e:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001860:	4b15      	ldr	r3, [pc, #84]	@ (80018b8 <HAL_TIM_Base_MspInit+0x84>)
 8001862:	2210      	movs	r2, #16
 8001864:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001866:	4b14      	ldr	r3, [pc, #80]	@ (80018b8 <HAL_TIM_Base_MspInit+0x84>)
 8001868:	2200      	movs	r2, #0
 800186a:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800186c:	4b12      	ldr	r3, [pc, #72]	@ (80018b8 <HAL_TIM_Base_MspInit+0x84>)
 800186e:	2280      	movs	r2, #128	@ 0x80
 8001870:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001872:	4b11      	ldr	r3, [pc, #68]	@ (80018b8 <HAL_TIM_Base_MspInit+0x84>)
 8001874:	2280      	movs	r2, #128	@ 0x80
 8001876:	0052      	lsls	r2, r2, #1
 8001878:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800187a:	4b0f      	ldr	r3, [pc, #60]	@ (80018b8 <HAL_TIM_Base_MspInit+0x84>)
 800187c:	2280      	movs	r2, #128	@ 0x80
 800187e:	00d2      	lsls	r2, r2, #3
 8001880:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8001882:	4b0d      	ldr	r3, [pc, #52]	@ (80018b8 <HAL_TIM_Base_MspInit+0x84>)
 8001884:	2200      	movs	r2, #0
 8001886:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001888:	4b0b      	ldr	r3, [pc, #44]	@ (80018b8 <HAL_TIM_Base_MspInit+0x84>)
 800188a:	2200      	movs	r2, #0
 800188c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 800188e:	4b0a      	ldr	r3, [pc, #40]	@ (80018b8 <HAL_TIM_Base_MspInit+0x84>)
 8001890:	0018      	movs	r0, r3
 8001892:	f001 f889 	bl	80029a8 <HAL_DMA_Init>
 8001896:	1e03      	subs	r3, r0, #0
 8001898:	d001      	beq.n	800189e <HAL_TIM_Base_MspInit+0x6a>
    {
      Error_Handler();
 800189a:	f7ff fe63 	bl	8001564 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a05      	ldr	r2, [pc, #20]	@ (80018b8 <HAL_TIM_Base_MspInit+0x84>)
 80018a2:	621a      	str	r2, [r3, #32]
 80018a4:	4b04      	ldr	r3, [pc, #16]	@ (80018b8 <HAL_TIM_Base_MspInit+0x84>)
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80018aa:	46c0      	nop			@ (mov r8, r8)
 80018ac:	46bd      	mov	sp, r7
 80018ae:	b002      	add	sp, #8
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	46c0      	nop			@ (mov r8, r8)
 80018b4:	40021000 	.word	0x40021000
 80018b8:	2000020c 	.word	0x2000020c
 80018bc:	40020058 	.word	0x40020058

080018c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018c0:	b590      	push	{r4, r7, lr}
 80018c2:	b089      	sub	sp, #36	@ 0x24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c8:	240c      	movs	r4, #12
 80018ca:	193b      	adds	r3, r7, r4
 80018cc:	0018      	movs	r0, r3
 80018ce:	2314      	movs	r3, #20
 80018d0:	001a      	movs	r2, r3
 80018d2:	2100      	movs	r1, #0
 80018d4:	f004 fca2 	bl	800621c <memset>
  if(htim->Instance==TIM2)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	2380      	movs	r3, #128	@ 0x80
 80018de:	05db      	lsls	r3, r3, #23
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d122      	bne.n	800192a <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e4:	4b13      	ldr	r3, [pc, #76]	@ (8001934 <HAL_TIM_MspPostInit+0x74>)
 80018e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018e8:	4b12      	ldr	r3, [pc, #72]	@ (8001934 <HAL_TIM_MspPostInit+0x74>)
 80018ea:	2101      	movs	r1, #1
 80018ec:	430a      	orrs	r2, r1
 80018ee:	62da      	str	r2, [r3, #44]	@ 0x2c
 80018f0:	4b10      	ldr	r3, [pc, #64]	@ (8001934 <HAL_TIM_MspPostInit+0x74>)
 80018f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018f4:	2201      	movs	r2, #1
 80018f6:	4013      	ands	r3, r2
 80018f8:	60bb      	str	r3, [r7, #8]
 80018fa:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018fc:	0021      	movs	r1, r4
 80018fe:	187b      	adds	r3, r7, r1
 8001900:	2201      	movs	r2, #1
 8001902:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001904:	187b      	adds	r3, r7, r1
 8001906:	2202      	movs	r2, #2
 8001908:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190a:	187b      	adds	r3, r7, r1
 800190c:	2200      	movs	r2, #0
 800190e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001910:	187b      	adds	r3, r7, r1
 8001912:	2200      	movs	r2, #0
 8001914:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001916:	187b      	adds	r3, r7, r1
 8001918:	2202      	movs	r2, #2
 800191a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191c:	187a      	adds	r2, r7, r1
 800191e:	23a0      	movs	r3, #160	@ 0xa0
 8001920:	05db      	lsls	r3, r3, #23
 8001922:	0011      	movs	r1, r2
 8001924:	0018      	movs	r0, r3
 8001926:	f001 fa39 	bl	8002d9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800192a:	46c0      	nop			@ (mov r8, r8)
 800192c:	46bd      	mov	sp, r7
 800192e:	b009      	add	sp, #36	@ 0x24
 8001930:	bd90      	pop	{r4, r7, pc}
 8001932:	46c0      	nop			@ (mov r8, r8)
 8001934:	40021000 	.word	0x40021000

08001938 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001938:	b590      	push	{r4, r7, lr}
 800193a:	b089      	sub	sp, #36	@ 0x24
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001940:	240c      	movs	r4, #12
 8001942:	193b      	adds	r3, r7, r4
 8001944:	0018      	movs	r0, r3
 8001946:	2314      	movs	r3, #20
 8001948:	001a      	movs	r2, r3
 800194a:	2100      	movs	r1, #0
 800194c:	f004 fc66 	bl	800621c <memset>
  if(huart->Instance==USART2)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a18      	ldr	r2, [pc, #96]	@ (80019b8 <HAL_UART_MspInit+0x80>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d129      	bne.n	80019ae <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800195a:	4b18      	ldr	r3, [pc, #96]	@ (80019bc <HAL_UART_MspInit+0x84>)
 800195c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800195e:	4b17      	ldr	r3, [pc, #92]	@ (80019bc <HAL_UART_MspInit+0x84>)
 8001960:	2180      	movs	r1, #128	@ 0x80
 8001962:	0289      	lsls	r1, r1, #10
 8001964:	430a      	orrs	r2, r1
 8001966:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001968:	4b14      	ldr	r3, [pc, #80]	@ (80019bc <HAL_UART_MspInit+0x84>)
 800196a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800196c:	4b13      	ldr	r3, [pc, #76]	@ (80019bc <HAL_UART_MspInit+0x84>)
 800196e:	2101      	movs	r1, #1
 8001970:	430a      	orrs	r2, r1
 8001972:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001974:	4b11      	ldr	r3, [pc, #68]	@ (80019bc <HAL_UART_MspInit+0x84>)
 8001976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001978:	2201      	movs	r2, #1
 800197a:	4013      	ands	r3, r2
 800197c:	60bb      	str	r3, [r7, #8]
 800197e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001980:	0021      	movs	r1, r4
 8001982:	187b      	adds	r3, r7, r1
 8001984:	220c      	movs	r2, #12
 8001986:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001988:	187b      	adds	r3, r7, r1
 800198a:	2202      	movs	r2, #2
 800198c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	187b      	adds	r3, r7, r1
 8001990:	2200      	movs	r2, #0
 8001992:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001994:	187b      	adds	r3, r7, r1
 8001996:	2203      	movs	r2, #3
 8001998:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800199a:	187b      	adds	r3, r7, r1
 800199c:	2204      	movs	r2, #4
 800199e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a0:	187a      	adds	r2, r7, r1
 80019a2:	23a0      	movs	r3, #160	@ 0xa0
 80019a4:	05db      	lsls	r3, r3, #23
 80019a6:	0011      	movs	r1, r2
 80019a8:	0018      	movs	r0, r3
 80019aa:	f001 f9f7 	bl	8002d9c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80019ae:	46c0      	nop			@ (mov r8, r8)
 80019b0:	46bd      	mov	sp, r7
 80019b2:	b009      	add	sp, #36	@ 0x24
 80019b4:	bd90      	pop	{r4, r7, pc}
 80019b6:	46c0      	nop			@ (mov r8, r8)
 80019b8:	40004400 	.word	0x40004400
 80019bc:	40021000 	.word	0x40021000

080019c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019c4:	46c0      	nop			@ (mov r8, r8)
 80019c6:	e7fd      	b.n	80019c4 <NMI_Handler+0x4>

080019c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019cc:	46c0      	nop			@ (mov r8, r8)
 80019ce:	e7fd      	b.n	80019cc <HardFault_Handler+0x4>

080019d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80019d4:	46c0      	nop			@ (mov r8, r8)
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019de:	46c0      	nop			@ (mov r8, r8)
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019e8:	f000 f956 	bl	8001c98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019ec:	46c0      	nop			@ (mov r8, r8)
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encoder_Sig_A_Pin);
 80019f6:	2380      	movs	r3, #128	@ 0x80
 80019f8:	00db      	lsls	r3, r3, #3
 80019fa:	0018      	movs	r0, r3
 80019fc:	f001 fb9a 	bl	8003134 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001a00:	2380      	movs	r3, #128	@ 0x80
 8001a02:	019b      	lsls	r3, r3, #6
 8001a04:	0018      	movs	r0, r3
 8001a06:	f001 fb95 	bl	8003134 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001a0a:	46c0      	nop			@ (mov r8, r8)
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001a14:	4b03      	ldr	r3, [pc, #12]	@ (8001a24 <DMA1_Channel1_IRQHandler+0x14>)
 8001a16:	0018      	movs	r0, r3
 8001a18:	f001 f8e4 	bl	8002be4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001a1c:	46c0      	nop			@ (mov r8, r8)
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	46c0      	nop			@ (mov r8, r8)
 8001a24:	20000130 	.word	0x20000130

08001a28 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001a2c:	4b03      	ldr	r3, [pc, #12]	@ (8001a3c <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 8001a2e:	0018      	movs	r0, r3
 8001a30:	f001 f8d8 	bl	8002be4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8001a34:	46c0      	nop			@ (mov r8, r8)
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	46c0      	nop			@ (mov r8, r8)
 8001a3c:	2000020c 	.word	0x2000020c

08001a40 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8001a44:	4b03      	ldr	r3, [pc, #12]	@ (8001a54 <ADC1_COMP_IRQHandler+0x14>)
 8001a46:	0018      	movs	r0, r3
 8001a48:	f000 fbae 	bl	80021a8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8001a4c:	46c0      	nop			@ (mov r8, r8)
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	46c0      	nop			@ (mov r8, r8)
 8001a54:	200000d4 	.word	0x200000d4

08001a58 <_read>:
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
 8001a64:	2300      	movs	r3, #0
 8001a66:	617b      	str	r3, [r7, #20]
 8001a68:	e00a      	b.n	8001a80 <_read+0x28>
 8001a6a:	e000      	b.n	8001a6e <_read+0x16>
 8001a6c:	bf00      	nop
 8001a6e:	0001      	movs	r1, r0
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	1c5a      	adds	r2, r3, #1
 8001a74:	60ba      	str	r2, [r7, #8]
 8001a76:	b2ca      	uxtb	r2, r1
 8001a78:	701a      	strb	r2, [r3, #0]
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	617b      	str	r3, [r7, #20]
 8001a80:	697a      	ldr	r2, [r7, #20]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	dbf0      	blt.n	8001a6a <_read+0x12>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	0018      	movs	r0, r3
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	b006      	add	sp, #24
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <_write>:
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b086      	sub	sp, #24
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	60f8      	str	r0, [r7, #12]
 8001a9a:	60b9      	str	r1, [r7, #8]
 8001a9c:	607a      	str	r2, [r7, #4]
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	617b      	str	r3, [r7, #20]
 8001aa2:	e009      	b.n	8001ab8 <_write+0x26>
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	1c5a      	adds	r2, r3, #1
 8001aa8:	60ba      	str	r2, [r7, #8]
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	0018      	movs	r0, r3
 8001aae:	f7ff f8a1 	bl	8000bf4 <__io_putchar>
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	617b      	str	r3, [r7, #20]
 8001ab8:	697a      	ldr	r2, [r7, #20]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	dbf1      	blt.n	8001aa4 <_write+0x12>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	0018      	movs	r0, r3
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	b006      	add	sp, #24
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <_close>:
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b082      	sub	sp, #8
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	425b      	negs	r3, r3
 8001ad6:	0018      	movs	r0, r3
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	b002      	add	sp, #8
 8001adc:	bd80      	pop	{r7, pc}

08001ade <_fstat>:
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b082      	sub	sp, #8
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
 8001ae6:	6039      	str	r1, [r7, #0]
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	2280      	movs	r2, #128	@ 0x80
 8001aec:	0192      	lsls	r2, r2, #6
 8001aee:	605a      	str	r2, [r3, #4]
 8001af0:	2300      	movs	r3, #0
 8001af2:	0018      	movs	r0, r3
 8001af4:	46bd      	mov	sp, r7
 8001af6:	b002      	add	sp, #8
 8001af8:	bd80      	pop	{r7, pc}

08001afa <_isatty>:
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b082      	sub	sp, #8
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
 8001b02:	2301      	movs	r3, #1
 8001b04:	0018      	movs	r0, r3
 8001b06:	46bd      	mov	sp, r7
 8001b08:	b002      	add	sp, #8
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <_lseek>:
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
 8001b18:	2300      	movs	r3, #0
 8001b1a:	0018      	movs	r0, r3
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	b004      	add	sp, #16
 8001b20:	bd80      	pop	{r7, pc}
	...

08001b24 <_sbrk>:
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	4a14      	ldr	r2, [pc, #80]	@ (8001b80 <_sbrk+0x5c>)
 8001b2e:	4b15      	ldr	r3, [pc, #84]	@ (8001b84 <_sbrk+0x60>)
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	617b      	str	r3, [r7, #20]
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	613b      	str	r3, [r7, #16]
 8001b38:	4b13      	ldr	r3, [pc, #76]	@ (8001b88 <_sbrk+0x64>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d102      	bne.n	8001b46 <_sbrk+0x22>
 8001b40:	4b11      	ldr	r3, [pc, #68]	@ (8001b88 <_sbrk+0x64>)
 8001b42:	4a12      	ldr	r2, [pc, #72]	@ (8001b8c <_sbrk+0x68>)
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	4b10      	ldr	r3, [pc, #64]	@ (8001b88 <_sbrk+0x64>)
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	18d3      	adds	r3, r2, r3
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d207      	bcs.n	8001b64 <_sbrk+0x40>
 8001b54:	f004 fbb8 	bl	80062c8 <__errno>
 8001b58:	0003      	movs	r3, r0
 8001b5a:	220c      	movs	r2, #12
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	2301      	movs	r3, #1
 8001b60:	425b      	negs	r3, r3
 8001b62:	e009      	b.n	8001b78 <_sbrk+0x54>
 8001b64:	4b08      	ldr	r3, [pc, #32]	@ (8001b88 <_sbrk+0x64>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	4b07      	ldr	r3, [pc, #28]	@ (8001b88 <_sbrk+0x64>)
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	18d2      	adds	r2, r2, r3
 8001b72:	4b05      	ldr	r3, [pc, #20]	@ (8001b88 <_sbrk+0x64>)
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	0018      	movs	r0, r3
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	b006      	add	sp, #24
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	20002000 	.word	0x20002000
 8001b84:	00000400 	.word	0x00000400
 8001b88:	20000308 	.word	0x20000308
 8001b8c:	20000460 	.word	0x20000460

08001b90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b94:	46c0      	nop			@ (mov r8, r8)
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
	...

08001b9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8001b9c:	480d      	ldr	r0, [pc, #52]	@ (8001bd4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b9e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ba0:	f7ff fff6 	bl	8001b90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ba4:	480c      	ldr	r0, [pc, #48]	@ (8001bd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ba6:	490d      	ldr	r1, [pc, #52]	@ (8001bdc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ba8:	4a0d      	ldr	r2, [pc, #52]	@ (8001be0 <LoopForever+0xe>)
  movs r3, #0
 8001baa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bac:	e002      	b.n	8001bb4 <LoopCopyDataInit>

08001bae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bb2:	3304      	adds	r3, #4

08001bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bb8:	d3f9      	bcc.n	8001bae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bba:	4a0a      	ldr	r2, [pc, #40]	@ (8001be4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bbc:	4c0a      	ldr	r4, [pc, #40]	@ (8001be8 <LoopForever+0x16>)
  movs r3, #0
 8001bbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bc0:	e001      	b.n	8001bc6 <LoopFillZerobss>

08001bc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bc4:	3204      	adds	r2, #4

08001bc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bc8:	d3fb      	bcc.n	8001bc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bca:	f004 fb83 	bl	80062d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bce:	f7ff f89d 	bl	8000d0c <main>

08001bd2 <LoopForever>:

LoopForever:
    b LoopForever
 8001bd2:	e7fe      	b.n	8001bd2 <LoopForever>
  ldr   r0, =_estack
 8001bd4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001bd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bdc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001be0:	08006ecc 	.word	0x08006ecc
  ldr r2, =_sbss
 8001be4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001be8:	2000045c 	.word	0x2000045c

08001bec <DMA1_Channel2_3_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bec:	e7fe      	b.n	8001bec <DMA1_Channel2_3_IRQHandler>
	...

08001bf0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bf6:	1dfb      	adds	r3, r7, #7
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8001c2c <HAL_Init+0x3c>)
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	4b0a      	ldr	r3, [pc, #40]	@ (8001c2c <HAL_Init+0x3c>)
 8001c02:	2140      	movs	r1, #64	@ 0x40
 8001c04:	430a      	orrs	r2, r1
 8001c06:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c08:	2000      	movs	r0, #0
 8001c0a:	f000 f811 	bl	8001c30 <HAL_InitTick>
 8001c0e:	1e03      	subs	r3, r0, #0
 8001c10:	d003      	beq.n	8001c1a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001c12:	1dfb      	adds	r3, r7, #7
 8001c14:	2201      	movs	r2, #1
 8001c16:	701a      	strb	r2, [r3, #0]
 8001c18:	e001      	b.n	8001c1e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c1a:	f7ff fd3f 	bl	800169c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c1e:	1dfb      	adds	r3, r7, #7
 8001c20:	781b      	ldrb	r3, [r3, #0]
}
 8001c22:	0018      	movs	r0, r3
 8001c24:	46bd      	mov	sp, r7
 8001c26:	b002      	add	sp, #8
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	46c0      	nop			@ (mov r8, r8)
 8001c2c:	40022000 	.word	0x40022000

08001c30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c30:	b590      	push	{r4, r7, lr}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c38:	4b14      	ldr	r3, [pc, #80]	@ (8001c8c <HAL_InitTick+0x5c>)
 8001c3a:	681c      	ldr	r4, [r3, #0]
 8001c3c:	4b14      	ldr	r3, [pc, #80]	@ (8001c90 <HAL_InitTick+0x60>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	0019      	movs	r1, r3
 8001c42:	23fa      	movs	r3, #250	@ 0xfa
 8001c44:	0098      	lsls	r0, r3, #2
 8001c46:	f7fe fa69 	bl	800011c <__udivsi3>
 8001c4a:	0003      	movs	r3, r0
 8001c4c:	0019      	movs	r1, r3
 8001c4e:	0020      	movs	r0, r4
 8001c50:	f7fe fa64 	bl	800011c <__udivsi3>
 8001c54:	0003      	movs	r3, r0
 8001c56:	0018      	movs	r0, r3
 8001c58:	f000 fe99 	bl	800298e <HAL_SYSTICK_Config>
 8001c5c:	1e03      	subs	r3, r0, #0
 8001c5e:	d001      	beq.n	8001c64 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e00f      	b.n	8001c84 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2b03      	cmp	r3, #3
 8001c68:	d80b      	bhi.n	8001c82 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c6a:	6879      	ldr	r1, [r7, #4]
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	425b      	negs	r3, r3
 8001c70:	2200      	movs	r2, #0
 8001c72:	0018      	movs	r0, r3
 8001c74:	f000 fe66 	bl	8002944 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c78:	4b06      	ldr	r3, [pc, #24]	@ (8001c94 <HAL_InitTick+0x64>)
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	e000      	b.n	8001c84 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
}
 8001c84:	0018      	movs	r0, r3
 8001c86:	46bd      	mov	sp, r7
 8001c88:	b003      	add	sp, #12
 8001c8a:	bd90      	pop	{r4, r7, pc}
 8001c8c:	20000008 	.word	0x20000008
 8001c90:	20000010 	.word	0x20000010
 8001c94:	2000000c 	.word	0x2000000c

08001c98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c9c:	4b05      	ldr	r3, [pc, #20]	@ (8001cb4 <HAL_IncTick+0x1c>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	001a      	movs	r2, r3
 8001ca2:	4b05      	ldr	r3, [pc, #20]	@ (8001cb8 <HAL_IncTick+0x20>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	18d2      	adds	r2, r2, r3
 8001ca8:	4b03      	ldr	r3, [pc, #12]	@ (8001cb8 <HAL_IncTick+0x20>)
 8001caa:	601a      	str	r2, [r3, #0]
}
 8001cac:	46c0      	nop			@ (mov r8, r8)
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	46c0      	nop			@ (mov r8, r8)
 8001cb4:	20000010 	.word	0x20000010
 8001cb8:	2000030c 	.word	0x2000030c

08001cbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8001cc0:	4b02      	ldr	r3, [pc, #8]	@ (8001ccc <HAL_GetTick+0x10>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
}
 8001cc4:	0018      	movs	r0, r3
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	46c0      	nop			@ (mov r8, r8)
 8001ccc:	2000030c 	.word	0x2000030c

08001cd0 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e159      	b.n	8001f96 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d10a      	bne.n	8001d00 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2250      	movs	r2, #80	@ 0x50
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	0018      	movs	r0, r3
 8001cfc:	f7ff fce2 	bl	80016c4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d04:	2210      	movs	r2, #16
 8001d06:	4013      	ands	r3, r2
 8001d08:	2b10      	cmp	r3, #16
 8001d0a:	d005      	beq.n	8001d18 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	2204      	movs	r2, #4
 8001d14:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001d16:	d00b      	beq.n	8001d30 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d1c:	2210      	movs	r2, #16
 8001d1e:	431a      	orrs	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2250      	movs	r2, #80	@ 0x50
 8001d28:	2100      	movs	r1, #0
 8001d2a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e132      	b.n	8001f96 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d34:	4a9a      	ldr	r2, [pc, #616]	@ (8001fa0 <HAL_ADC_Init+0x2d0>)
 8001d36:	4013      	ands	r3, r2
 8001d38:	2202      	movs	r2, #2
 8001d3a:	431a      	orrs	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	2203      	movs	r2, #3
 8001d48:	4013      	ands	r3, r2
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d108      	bne.n	8001d60 <HAL_ADC_Init+0x90>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2201      	movs	r2, #1
 8001d56:	4013      	ands	r3, r2
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d101      	bne.n	8001d60 <HAL_ADC_Init+0x90>
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e000      	b.n	8001d62 <HAL_ADC_Init+0x92>
 8001d60:	2300      	movs	r3, #0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d149      	bne.n	8001dfa <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685a      	ldr	r2, [r3, #4]
 8001d6a:	23c0      	movs	r3, #192	@ 0xc0
 8001d6c:	061b      	lsls	r3, r3, #24
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d00b      	beq.n	8001d8a <HAL_ADC_Init+0xba>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685a      	ldr	r2, [r3, #4]
 8001d76:	2380      	movs	r3, #128	@ 0x80
 8001d78:	05db      	lsls	r3, r3, #23
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d005      	beq.n	8001d8a <HAL_ADC_Init+0xba>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685a      	ldr	r2, [r3, #4]
 8001d82:	2380      	movs	r3, #128	@ 0x80
 8001d84:	061b      	lsls	r3, r3, #24
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d111      	bne.n	8001dae <HAL_ADC_Init+0xde>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	691a      	ldr	r2, [r3, #16]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	0092      	lsls	r2, r2, #2
 8001d96:	0892      	lsrs	r2, r2, #2
 8001d98:	611a      	str	r2, [r3, #16]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	6919      	ldr	r1, [r3, #16]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685a      	ldr	r2, [r3, #4]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	430a      	orrs	r2, r1
 8001daa:	611a      	str	r2, [r3, #16]
 8001dac:	e014      	b.n	8001dd8 <HAL_ADC_Init+0x108>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	691a      	ldr	r2, [r3, #16]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	0092      	lsls	r2, r2, #2
 8001dba:	0892      	lsrs	r2, r2, #2
 8001dbc:	611a      	str	r2, [r3, #16]
 8001dbe:	4b79      	ldr	r3, [pc, #484]	@ (8001fa4 <HAL_ADC_Init+0x2d4>)
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	4b78      	ldr	r3, [pc, #480]	@ (8001fa4 <HAL_ADC_Init+0x2d4>)
 8001dc4:	4978      	ldr	r1, [pc, #480]	@ (8001fa8 <HAL_ADC_Init+0x2d8>)
 8001dc6:	400a      	ands	r2, r1
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	4b76      	ldr	r3, [pc, #472]	@ (8001fa4 <HAL_ADC_Init+0x2d4>)
 8001dcc:	6819      	ldr	r1, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685a      	ldr	r2, [r3, #4]
 8001dd2:	4b74      	ldr	r3, [pc, #464]	@ (8001fa4 <HAL_ADC_Init+0x2d4>)
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	68da      	ldr	r2, [r3, #12]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2118      	movs	r1, #24
 8001de4:	438a      	bics	r2, r1
 8001de6:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68d9      	ldr	r1, [r3, #12]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	689a      	ldr	r2, [r3, #8]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	430a      	orrs	r2, r1
 8001df8:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8001dfa:	4b6a      	ldr	r3, [pc, #424]	@ (8001fa4 <HAL_ADC_Init+0x2d4>)
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	4b69      	ldr	r3, [pc, #420]	@ (8001fa4 <HAL_ADC_Init+0x2d4>)
 8001e00:	496a      	ldr	r1, [pc, #424]	@ (8001fac <HAL_ADC_Init+0x2dc>)
 8001e02:	400a      	ands	r2, r1
 8001e04:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8001e06:	4b67      	ldr	r3, [pc, #412]	@ (8001fa4 <HAL_ADC_Init+0x2d4>)
 8001e08:	6819      	ldr	r1, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e0e:	065a      	lsls	r2, r3, #25
 8001e10:	4b64      	ldr	r3, [pc, #400]	@ (8001fa4 <HAL_ADC_Init+0x2d4>)
 8001e12:	430a      	orrs	r2, r1
 8001e14:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	689a      	ldr	r2, [r3, #8]
 8001e1c:	2380      	movs	r3, #128	@ 0x80
 8001e1e:	055b      	lsls	r3, r3, #21
 8001e20:	4013      	ands	r3, r2
 8001e22:	d108      	bne.n	8001e36 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	689a      	ldr	r2, [r3, #8]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2180      	movs	r1, #128	@ 0x80
 8001e30:	0549      	lsls	r1, r1, #21
 8001e32:	430a      	orrs	r2, r1
 8001e34:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	68da      	ldr	r2, [r3, #12]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	495b      	ldr	r1, [pc, #364]	@ (8001fb0 <HAL_ADC_Init+0x2e0>)
 8001e42:	400a      	ands	r2, r1
 8001e44:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68d9      	ldr	r1, [r3, #12]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d101      	bne.n	8001e5c <HAL_ADC_Init+0x18c>
 8001e58:	2304      	movs	r3, #4
 8001e5a:	e000      	b.n	8001e5e <HAL_ADC_Init+0x18e>
 8001e5c:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001e5e:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2020      	movs	r0, #32
 8001e64:	5c1b      	ldrb	r3, [r3, r0]
 8001e66:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001e68:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	202c      	movs	r0, #44	@ 0x2c
 8001e6e:	5c1b      	ldrb	r3, [r3, r0]
 8001e70:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001e72:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001e78:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8001e80:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001e88:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e96:	23c2      	movs	r3, #194	@ 0xc2
 8001e98:	33ff      	adds	r3, #255	@ 0xff
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d00b      	beq.n	8001eb6 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68d9      	ldr	r1, [r3, #12]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001eac:	431a      	orrs	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2221      	movs	r2, #33	@ 0x21
 8001eba:	5c9b      	ldrb	r3, [r3, r2]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d11a      	bne.n	8001ef6 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2220      	movs	r2, #32
 8001ec4:	5c9b      	ldrb	r3, [r3, r2]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d109      	bne.n	8001ede <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68da      	ldr	r2, [r3, #12]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2180      	movs	r1, #128	@ 0x80
 8001ed6:	0249      	lsls	r1, r1, #9
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	60da      	str	r2, [r3, #12]
 8001edc:	e00b      	b.n	8001ef6 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ee2:	2220      	movs	r2, #32
 8001ee4:	431a      	orrs	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eee:	2201      	movs	r2, #1
 8001ef0:	431a      	orrs	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d11f      	bne.n	8001f3e <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	691a      	ldr	r2, [r3, #16]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	492a      	ldr	r1, [pc, #168]	@ (8001fb4 <HAL_ADC_Init+0x2e4>)
 8001f0a:	400a      	ands	r2, r1
 8001f0c:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	6919      	ldr	r1, [r3, #16]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001f1c:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8001f22:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	691a      	ldr	r2, [r3, #16]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2101      	movs	r1, #1
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	611a      	str	r2, [r3, #16]
 8001f3c:	e00e      	b.n	8001f5c <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	2201      	movs	r2, #1
 8001f46:	4013      	ands	r3, r2
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d107      	bne.n	8001f5c <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	691a      	ldr	r2, [r3, #16]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2101      	movs	r1, #1
 8001f58:	438a      	bics	r2, r1
 8001f5a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	695a      	ldr	r2, [r3, #20]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2107      	movs	r1, #7
 8001f68:	438a      	bics	r2, r1
 8001f6a:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6959      	ldr	r1, [r3, #20]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f88:	2203      	movs	r2, #3
 8001f8a:	4393      	bics	r3, r2
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	0018      	movs	r0, r3
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	b002      	add	sp, #8
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	46c0      	nop			@ (mov r8, r8)
 8001fa0:	fffffefd 	.word	0xfffffefd
 8001fa4:	40012708 	.word	0x40012708
 8001fa8:	ffc3ffff 	.word	0xffc3ffff
 8001fac:	fdffffff 	.word	0xfdffffff
 8001fb0:	fffe0219 	.word	0xfffe0219
 8001fb4:	fffffc03 	.word	0xfffffc03

08001fb8 <HAL_ADC_Start_DMA>:
  * @param  pData Destination Buffer address.
  * @param  Length Length of data to be transferred from ADC peripheral to memory (in bytes)
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001fb8:	b590      	push	{r4, r7, lr}
 8001fba:	b087      	sub	sp, #28
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fc4:	2317      	movs	r3, #23
 8001fc6:	18fb      	adds	r3, r7, r3
 8001fc8:	2200      	movs	r2, #0
 8001fca:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	2204      	movs	r2, #4
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	d15e      	bne.n	8002096 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2250      	movs	r2, #80	@ 0x50
 8001fdc:	5c9b      	ldrb	r3, [r3, r2]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d101      	bne.n	8001fe6 <HAL_ADC_Start_DMA+0x2e>
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	e05e      	b.n	80020a4 <HAL_ADC_Start_DMA+0xec>
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2250      	movs	r2, #80	@ 0x50
 8001fea:	2101      	movs	r1, #1
 8001fec:	5499      	strb	r1, [r3, r2]

    /* Enable ADC DMA mode */
    hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	68da      	ldr	r2, [r3, #12]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2101      	movs	r1, #1
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	60da      	str	r2, [r3, #12]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d007      	beq.n	8002016 <HAL_ADC_Start_DMA+0x5e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002006:	2317      	movs	r3, #23
 8002008:	18fc      	adds	r4, r7, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	0018      	movs	r0, r3
 800200e:	f000 fa2d 	bl	800246c <ADC_Enable>
 8002012:	0003      	movs	r3, r0
 8002014:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002016:	2317      	movs	r3, #23
 8002018:	18fb      	adds	r3, r7, r3
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d13e      	bne.n	800209e <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002024:	4a21      	ldr	r2, [pc, #132]	@ (80020ac <HAL_ADC_Start_DMA+0xf4>)
 8002026:	4013      	ands	r3, r2
 8002028:	2280      	movs	r2, #128	@ 0x80
 800202a:	0052      	lsls	r2, r2, #1
 800202c:	431a      	orrs	r2, r3
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2200      	movs	r2, #0
 8002036:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2250      	movs	r2, #80	@ 0x50
 800203c:	2100      	movs	r1, #0
 800203e:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002044:	4a1a      	ldr	r2, [pc, #104]	@ (80020b0 <HAL_ADC_Start_DMA+0xf8>)
 8002046:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800204c:	4a19      	ldr	r2, [pc, #100]	@ (80020b4 <HAL_ADC_Start_DMA+0xfc>)
 800204e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002054:	4a18      	ldr	r2, [pc, #96]	@ (80020b8 <HAL_ADC_Start_DMA+0x100>)
 8002056:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	221c      	movs	r2, #28
 800205e:	601a      	str	r2, [r3, #0]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	685a      	ldr	r2, [r3, #4]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2110      	movs	r1, #16
 800206c:	430a      	orrs	r2, r1
 800206e:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	3340      	adds	r3, #64	@ 0x40
 800207a:	0019      	movs	r1, r3
 800207c:	68ba      	ldr	r2, [r7, #8]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f000 fd0a 	bl	8002a98 <HAL_DMA_Start_IT>

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	689a      	ldr	r2, [r3, #8]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2104      	movs	r1, #4
 8002090:	430a      	orrs	r2, r1
 8002092:	609a      	str	r2, [r3, #8]
 8002094:	e003      	b.n	800209e <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002096:	2317      	movs	r3, #23
 8002098:	18fb      	adds	r3, r7, r3
 800209a:	2202      	movs	r2, #2
 800209c:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800209e:	2317      	movs	r3, #23
 80020a0:	18fb      	adds	r3, r7, r3
 80020a2:	781b      	ldrb	r3, [r3, #0]
}
 80020a4:	0018      	movs	r0, r3
 80020a6:	46bd      	mov	sp, r7
 80020a8:	b007      	add	sp, #28
 80020aa:	bd90      	pop	{r4, r7, pc}
 80020ac:	fffff0fe 	.word	0xfffff0fe
 80020b0:	080026a5 	.word	0x080026a5
 80020b4:	08002759 	.word	0x08002759
 80020b8:	08002777 	.word	0x08002777

080020bc <HAL_ADC_Stop_DMA>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80020bc:	b5b0      	push	{r4, r5, r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020c4:	230f      	movs	r3, #15
 80020c6:	18fb      	adds	r3, r7, r3
 80020c8:	2200      	movs	r2, #0
 80020ca:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2250      	movs	r2, #80	@ 0x50
 80020d0:	5c9b      	ldrb	r3, [r3, r2]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d101      	bne.n	80020da <HAL_ADC_Stop_DMA+0x1e>
 80020d6:	2302      	movs	r3, #2
 80020d8:	e05f      	b.n	800219a <HAL_ADC_Stop_DMA+0xde>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2250      	movs	r2, #80	@ 0x50
 80020de:	2101      	movs	r1, #1
 80020e0:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80020e2:	250f      	movs	r5, #15
 80020e4:	197c      	adds	r4, r7, r5
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	0018      	movs	r0, r3
 80020ea:	f000 fa8e 	bl	800260a <ADC_ConversionStop>
 80020ee:	0003      	movs	r3, r0
 80020f0:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80020f2:	0028      	movs	r0, r5
 80020f4:	183b      	adds	r3, r7, r0
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d147      	bne.n	800218c <HAL_ADC_Stop_DMA+0xd0>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68da      	ldr	r2, [r3, #12]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2101      	movs	r1, #1
 8002108:	438a      	bics	r2, r1
 800210a:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002110:	2225      	movs	r2, #37	@ 0x25
 8002112:	5c9b      	ldrb	r3, [r3, r2]
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d112      	bne.n	8002140 <HAL_ADC_Stop_DMA+0x84>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800211e:	0005      	movs	r5, r0
 8002120:	183c      	adds	r4, r7, r0
 8002122:	0018      	movs	r0, r3
 8002124:	f000 fd1e 	bl	8002b64 <HAL_DMA_Abort>
 8002128:	0003      	movs	r3, r0
 800212a:	7023      	strb	r3, [r4, #0]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800212c:	197b      	adds	r3, r7, r5
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d005      	beq.n	8002140 <HAL_ADC_Stop_DMA+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002138:	2240      	movs	r2, #64	@ 0x40
 800213a:	431a      	orrs	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	685a      	ldr	r2, [r3, #4]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2110      	movs	r1, #16
 800214c:	438a      	bics	r2, r1
 800214e:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed, to keep  */
    /* in memory a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 8002150:	220f      	movs	r2, #15
 8002152:	18bb      	adds	r3, r7, r2
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d107      	bne.n	800216a <HAL_ADC_Stop_DMA+0xae>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800215a:	18bc      	adds	r4, r7, r2
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	0018      	movs	r0, r3
 8002160:	f000 f9ec 	bl	800253c <ADC_Disable>
 8002164:	0003      	movs	r3, r0
 8002166:	7023      	strb	r3, [r4, #0]
 8002168:	e003      	b.n	8002172 <HAL_ADC_Stop_DMA+0xb6>
    }
    else
    {
      ADC_Disable(hadc);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	0018      	movs	r0, r3
 800216e:	f000 f9e5 	bl	800253c <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002172:	230f      	movs	r3, #15
 8002174:	18fb      	adds	r3, r7, r3
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d107      	bne.n	800218c <HAL_ADC_Stop_DMA+0xd0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002180:	4a08      	ldr	r2, [pc, #32]	@ (80021a4 <HAL_ADC_Stop_DMA+0xe8>)
 8002182:	4013      	ands	r3, r2
 8002184:	2201      	movs	r2, #1
 8002186:	431a      	orrs	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2250      	movs	r2, #80	@ 0x50
 8002190:	2100      	movs	r1, #0
 8002192:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8002194:	230f      	movs	r3, #15
 8002196:	18fb      	adds	r3, r7, r3
 8002198:	781b      	ldrb	r3, [r3, #0]
}
 800219a:	0018      	movs	r0, r3
 800219c:	46bd      	mov	sp, r7
 800219e:	b004      	add	sp, #16
 80021a0:	bdb0      	pop	{r4, r5, r7, pc}
 80021a2:	46c0      	nop			@ (mov r8, r8)
 80021a4:	fffffefe 	.word	0xfffffefe

080021a8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_ier = hadc->Instance->IER;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Conversion flag for regular group ========== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2204      	movs	r2, #4
 80021c4:	4013      	ands	r3, r2
 80021c6:	d003      	beq.n	80021d0 <HAL_ADC_IRQHandler+0x28>
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	2204      	movs	r2, #4
 80021cc:	4013      	ands	r3, r2
 80021ce:	d107      	bne.n	80021e0 <HAL_ADC_IRQHandler+0x38>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2208      	movs	r2, #8
 80021d4:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80021d6:	d04e      	beq.n	8002276 <HAL_ADC_IRQHandler+0xce>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	2208      	movs	r2, #8
 80021dc:	4013      	ands	r3, r2
 80021de:	d04a      	beq.n	8002276 <HAL_ADC_IRQHandler+0xce>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021e4:	2210      	movs	r2, #16
 80021e6:	4013      	ands	r3, r2
 80021e8:	d106      	bne.n	80021f8 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021ee:	2280      	movs	r2, #128	@ 0x80
 80021f0:	0092      	lsls	r2, r2, #2
 80021f2:	431a      	orrs	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	68da      	ldr	r2, [r3, #12]
 80021fe:	23c0      	movs	r3, #192	@ 0xc0
 8002200:	011b      	lsls	r3, r3, #4
 8002202:	4013      	ands	r3, r2
 8002204:	d12b      	bne.n	800225e <HAL_ADC_IRQHandler+0xb6>
        (hadc->Init.ContinuousConvMode == DISABLE))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2220      	movs	r2, #32
 800220a:	5c9b      	ldrb	r3, [r3, r2]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800220c:	2b00      	cmp	r3, #0
 800220e:	d126      	bne.n	800225e <HAL_ADC_IRQHandler+0xb6>
    {
      /* If End of Sequence is reached, disable interrupts */
      if ((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2208      	movs	r2, #8
 8002214:	4013      	ands	r3, r2
 8002216:	d022      	beq.n	800225e <HAL_ADC_IRQHandler+0xb6>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	2204      	movs	r2, #4
 8002220:	4013      	ands	r3, r2
 8002222:	d110      	bne.n	8002246 <HAL_ADC_IRQHandler+0x9e>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	685a      	ldr	r2, [r3, #4]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	210c      	movs	r1, #12
 8002230:	438a      	bics	r2, r1
 8002232:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002238:	4a2f      	ldr	r2, [pc, #188]	@ (80022f8 <HAL_ADC_IRQHandler+0x150>)
 800223a:	4013      	ands	r3, r2
 800223c:	2201      	movs	r2, #1
 800223e:	431a      	orrs	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	655a      	str	r2, [r3, #84]	@ 0x54
 8002244:	e00b      	b.n	800225e <HAL_ADC_IRQHandler+0xb6>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800224a:	2220      	movs	r2, #32
 800224c:	431a      	orrs	r2, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002256:	2201      	movs	r2, #1
 8002258:	431a      	orrs	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	0018      	movs	r0, r3
 8002262:	f7ff f973 	bl	800154c <HAL_ADC_ConvCpltCallback>
    /* Note: Management of low power auto-wait enabled: flags must be cleared */
    /*       by user when fetching ADC conversion data.                       */
    /*       This case is managed in IRQ handler, but this low-power mode     */
    /*       should not be used with programming model IT or DMA.             */
    /*       Refer to comment of parameter "LowPowerAutoWait".                */
    if (hadc->Init.LowPowerAutoWait != ENABLE)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d003      	beq.n	8002276 <HAL_ADC_IRQHandler+0xce>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	220c      	movs	r2, #12
 8002274:	601a      	str	r2, [r3, #0]
    }
  }

  /* ========== Check analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD) == ADC_FLAG_AWD) && ((tmp_ier & ADC_IT_AWD) == ADC_IT_AWD))
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2280      	movs	r2, #128	@ 0x80
 800227a:	4013      	ands	r3, r2
 800227c:	d012      	beq.n	80022a4 <HAL_ADC_IRQHandler+0xfc>
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	2280      	movs	r2, #128	@ 0x80
 8002282:	4013      	ands	r3, r2
 8002284:	d00e      	beq.n	80022a4 <HAL_ADC_IRQHandler+0xfc>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800228a:	2280      	movs	r2, #128	@ 0x80
 800228c:	0252      	lsls	r2, r2, #9
 800228e:	431a      	orrs	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	655a      	str	r2, [r3, #84]	@ 0x54

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	0018      	movs	r0, r3
 8002298:	f000 f838 	bl	800230c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2280      	movs	r2, #128	@ 0x80
 80022a2:	601a      	str	r2, [r3, #0]

  }


  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2210      	movs	r2, #16
 80022a8:	4013      	ands	r3, r2
 80022aa:	d020      	beq.n	80022ee <HAL_ADC_IRQHandler+0x146>
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	2210      	movs	r2, #16
 80022b0:	4013      	ands	r3, r2
 80022b2:	d01c      	beq.n	80022ee <HAL_ADC_IRQHandler+0x146>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d006      	beq.n	80022ca <HAL_ADC_IRQHandler+0x122>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	2201      	movs	r2, #1
 80022c4:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d10d      	bne.n	80022e6 <HAL_ADC_IRQHandler+0x13e>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ce:	2202      	movs	r2, #2
 80022d0:	431a      	orrs	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2210      	movs	r2, #16
 80022dc:	601a      	str	r2, [r3, #0]

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	0018      	movs	r0, r3
 80022e2:	f000 f81b 	bl	800231c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2210      	movs	r2, #16
 80022ec:	601a      	str	r2, [r3, #0]
  }

}
 80022ee:	46c0      	nop			@ (mov r8, r8)
 80022f0:	46bd      	mov	sp, r7
 80022f2:	b004      	add	sp, #16
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	46c0      	nop			@ (mov r8, r8)
 80022f8:	fffffefe 	.word	0xfffffefe

080022fc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002304:	46c0      	nop			@ (mov r8, r8)
 8002306:	46bd      	mov	sp, r7
 8002308:	b002      	add	sp, #8
 800230a:	bd80      	pop	{r7, pc}

0800230c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002314:	46c0      	nop			@ (mov r8, r8)
 8002316:	46bd      	mov	sp, r7
 8002318:	b002      	add	sp, #8
 800231a:	bd80      	pop	{r7, pc}

0800231c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002324:	46c0      	nop			@ (mov r8, r8)
 8002326:	46bd      	mov	sp, r7
 8002328:	b002      	add	sp, #8
 800232a:	bd80      	pop	{r7, pc}

0800232c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2250      	movs	r2, #80	@ 0x50
 800233a:	5c9b      	ldrb	r3, [r3, r2]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d101      	bne.n	8002344 <HAL_ADC_ConfigChannel+0x18>
 8002340:	2302      	movs	r3, #2
 8002342:	e085      	b.n	8002450 <HAL_ADC_ConfigChannel+0x124>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2250      	movs	r2, #80	@ 0x50
 8002348:	2101      	movs	r1, #1
 800234a:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	2204      	movs	r2, #4
 8002354:	4013      	ands	r3, r2
 8002356:	d00b      	beq.n	8002370 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800235c:	2220      	movs	r2, #32
 800235e:	431a      	orrs	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2250      	movs	r2, #80	@ 0x50
 8002368:	2100      	movs	r1, #0
 800236a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e06f      	b.n	8002450 <HAL_ADC_ConfigChannel+0x124>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	4a38      	ldr	r2, [pc, #224]	@ (8002458 <HAL_ADC_ConfigChannel+0x12c>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d035      	beq.n	80023e6 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	035b      	lsls	r3, r3, #13
 8002386:	0b5a      	lsrs	r2, r3, #13
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	430a      	orrs	r2, r1
 800238e:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	2380      	movs	r3, #128	@ 0x80
 8002396:	02db      	lsls	r3, r3, #11
 8002398:	4013      	ands	r3, r2
 800239a:	d009      	beq.n	80023b0 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 800239c:	4b2f      	ldr	r3, [pc, #188]	@ (800245c <HAL_ADC_ConfigChannel+0x130>)
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	4b2e      	ldr	r3, [pc, #184]	@ (800245c <HAL_ADC_ConfigChannel+0x130>)
 80023a2:	2180      	movs	r1, #128	@ 0x80
 80023a4:	0409      	lsls	r1, r1, #16
 80023a6:	430a      	orrs	r2, r1
 80023a8:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80023aa:	200a      	movs	r0, #10
 80023ac:	f000 f9fe 	bl	80027ac <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	2380      	movs	r3, #128	@ 0x80
 80023b6:	029b      	lsls	r3, r3, #10
 80023b8:	4013      	ands	r3, r2
 80023ba:	d006      	beq.n	80023ca <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 80023bc:	4b27      	ldr	r3, [pc, #156]	@ (800245c <HAL_ADC_ConfigChannel+0x130>)
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	4b26      	ldr	r3, [pc, #152]	@ (800245c <HAL_ADC_ConfigChannel+0x130>)
 80023c2:	2180      	movs	r1, #128	@ 0x80
 80023c4:	03c9      	lsls	r1, r1, #15
 80023c6:	430a      	orrs	r2, r1
 80023c8:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	2380      	movs	r3, #128	@ 0x80
 80023d0:	025b      	lsls	r3, r3, #9
 80023d2:	4013      	ands	r3, r2
 80023d4:	d037      	beq.n	8002446 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;
 80023d6:	4b21      	ldr	r3, [pc, #132]	@ (800245c <HAL_ADC_ConfigChannel+0x130>)
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	4b20      	ldr	r3, [pc, #128]	@ (800245c <HAL_ADC_ConfigChannel+0x130>)
 80023dc:	2180      	movs	r1, #128	@ 0x80
 80023de:	0449      	lsls	r1, r1, #17
 80023e0:	430a      	orrs	r2, r1
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	e02f      	b.n	8002446 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	035b      	lsls	r3, r3, #13
 80023f2:	0b5b      	lsrs	r3, r3, #13
 80023f4:	43d9      	mvns	r1, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	400a      	ands	r2, r1
 80023fc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	2380      	movs	r3, #128	@ 0x80
 8002404:	02db      	lsls	r3, r3, #11
 8002406:	4013      	ands	r3, r2
 8002408:	d005      	beq.n	8002416 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 800240a:	4b14      	ldr	r3, [pc, #80]	@ (800245c <HAL_ADC_ConfigChannel+0x130>)
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	4b13      	ldr	r3, [pc, #76]	@ (800245c <HAL_ADC_ConfigChannel+0x130>)
 8002410:	4913      	ldr	r1, [pc, #76]	@ (8002460 <HAL_ADC_ConfigChannel+0x134>)
 8002412:	400a      	ands	r2, r1
 8002414:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	2380      	movs	r3, #128	@ 0x80
 800241c:	029b      	lsls	r3, r3, #10
 800241e:	4013      	ands	r3, r2
 8002420:	d005      	beq.n	800242e <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8002422:	4b0e      	ldr	r3, [pc, #56]	@ (800245c <HAL_ADC_ConfigChannel+0x130>)
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	4b0d      	ldr	r3, [pc, #52]	@ (800245c <HAL_ADC_ConfigChannel+0x130>)
 8002428:	490e      	ldr	r1, [pc, #56]	@ (8002464 <HAL_ADC_ConfigChannel+0x138>)
 800242a:	400a      	ands	r2, r1
 800242c:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	2380      	movs	r3, #128	@ 0x80
 8002434:	025b      	lsls	r3, r3, #9
 8002436:	4013      	ands	r3, r2
 8002438:	d005      	beq.n	8002446 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;
 800243a:	4b08      	ldr	r3, [pc, #32]	@ (800245c <HAL_ADC_ConfigChannel+0x130>)
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	4b07      	ldr	r3, [pc, #28]	@ (800245c <HAL_ADC_ConfigChannel+0x130>)
 8002440:	4909      	ldr	r1, [pc, #36]	@ (8002468 <HAL_ADC_ConfigChannel+0x13c>)
 8002442:	400a      	ands	r2, r1
 8002444:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2250      	movs	r2, #80	@ 0x50
 800244a:	2100      	movs	r1, #0
 800244c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800244e:	2300      	movs	r3, #0
}
 8002450:	0018      	movs	r0, r3
 8002452:	46bd      	mov	sp, r7
 8002454:	b002      	add	sp, #8
 8002456:	bd80      	pop	{r7, pc}
 8002458:	00001001 	.word	0x00001001
 800245c:	40012708 	.word	0x40012708
 8002460:	ff7fffff 	.word	0xff7fffff
 8002464:	ffbfffff 	.word	0xffbfffff
 8002468:	feffffff 	.word	0xfeffffff

0800246c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002474:	2300      	movs	r3, #0
 8002476:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	2203      	movs	r2, #3
 8002480:	4013      	ands	r3, r2
 8002482:	2b01      	cmp	r3, #1
 8002484:	d108      	bne.n	8002498 <ADC_Enable+0x2c>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2201      	movs	r2, #1
 800248e:	4013      	ands	r3, r2
 8002490:	2b01      	cmp	r3, #1
 8002492:	d101      	bne.n	8002498 <ADC_Enable+0x2c>
 8002494:	2301      	movs	r3, #1
 8002496:	e000      	b.n	800249a <ADC_Enable+0x2e>
 8002498:	2300      	movs	r3, #0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d146      	bne.n	800252c <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	4a24      	ldr	r2, [pc, #144]	@ (8002538 <ADC_Enable+0xcc>)
 80024a6:	4013      	ands	r3, r2
 80024a8:	d00d      	beq.n	80024c6 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024ae:	2210      	movs	r2, #16
 80024b0:	431a      	orrs	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ba:	2201      	movs	r2, #1
 80024bc:	431a      	orrs	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e033      	b.n	800252e <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2101      	movs	r1, #1
 80024d2:	430a      	orrs	r2, r1
 80024d4:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80024d6:	2001      	movs	r0, #1
 80024d8:	f000 f968 	bl	80027ac <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80024dc:	f7ff fbee 	bl	8001cbc <HAL_GetTick>
 80024e0:	0003      	movs	r3, r0
 80024e2:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80024e4:	e01b      	b.n	800251e <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80024e6:	f7ff fbe9 	bl	8001cbc <HAL_GetTick>
 80024ea:	0002      	movs	r2, r0
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b0a      	cmp	r3, #10
 80024f2:	d914      	bls.n	800251e <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2201      	movs	r2, #1
 80024fc:	4013      	ands	r3, r2
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d00d      	beq.n	800251e <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002506:	2210      	movs	r2, #16
 8002508:	431a      	orrs	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002512:	2201      	movs	r2, #1
 8002514:	431a      	orrs	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e007      	b.n	800252e <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2201      	movs	r2, #1
 8002526:	4013      	ands	r3, r2
 8002528:	2b01      	cmp	r3, #1
 800252a:	d1dc      	bne.n	80024e6 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	0018      	movs	r0, r3
 8002530:	46bd      	mov	sp, r7
 8002532:	b004      	add	sp, #16
 8002534:	bd80      	pop	{r7, pc}
 8002536:	46c0      	nop			@ (mov r8, r8)
 8002538:	80000017 	.word	0x80000017

0800253c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002544:	2300      	movs	r3, #0
 8002546:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	2203      	movs	r2, #3
 8002550:	4013      	ands	r3, r2
 8002552:	2b01      	cmp	r3, #1
 8002554:	d108      	bne.n	8002568 <ADC_Disable+0x2c>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2201      	movs	r2, #1
 800255e:	4013      	ands	r3, r2
 8002560:	2b01      	cmp	r3, #1
 8002562:	d101      	bne.n	8002568 <ADC_Disable+0x2c>
 8002564:	2301      	movs	r3, #1
 8002566:	e000      	b.n	800256a <ADC_Disable+0x2e>
 8002568:	2300      	movs	r3, #0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d048      	beq.n	8002600 <ADC_Disable+0xc4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	2205      	movs	r2, #5
 8002576:	4013      	ands	r3, r2
 8002578:	2b01      	cmp	r3, #1
 800257a:	d110      	bne.n	800259e <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	689a      	ldr	r2, [r3, #8]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2102      	movs	r1, #2
 8002588:	430a      	orrs	r2, r1
 800258a:	609a      	str	r2, [r3, #8]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2203      	movs	r2, #3
 8002592:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002594:	f7ff fb92 	bl	8001cbc <HAL_GetTick>
 8002598:	0003      	movs	r3, r0
 800259a:	60fb      	str	r3, [r7, #12]

    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800259c:	e029      	b.n	80025f2 <ADC_Disable+0xb6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025a2:	2210      	movs	r2, #16
 80025a4:	431a      	orrs	r2, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ae:	2201      	movs	r2, #1
 80025b0:	431a      	orrs	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e023      	b.n	8002602 <ADC_Disable+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80025ba:	f7ff fb7f 	bl	8001cbc <HAL_GetTick>
 80025be:	0002      	movs	r2, r0
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b0a      	cmp	r3, #10
 80025c6:	d914      	bls.n	80025f2 <ADC_Disable+0xb6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	2201      	movs	r2, #1
 80025d0:	4013      	ands	r3, r2
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d10d      	bne.n	80025f2 <ADC_Disable+0xb6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025da:	2210      	movs	r2, #16
 80025dc:	431a      	orrs	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025e6:	2201      	movs	r2, #1
 80025e8:	431a      	orrs	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e007      	b.n	8002602 <ADC_Disable+0xc6>
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	2201      	movs	r2, #1
 80025fa:	4013      	ands	r3, r2
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d0dc      	beq.n	80025ba <ADC_Disable+0x7e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	0018      	movs	r0, r3
 8002604:	46bd      	mov	sp, r7
 8002606:	b004      	add	sp, #16
 8002608:	bd80      	pop	{r7, pc}

0800260a <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b084      	sub	sp, #16
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002612:	2300      	movs	r3, #0
 8002614:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	2204      	movs	r2, #4
 800261e:	4013      	ands	r3, r2
 8002620:	d03a      	beq.n	8002698 <ADC_ConversionStop+0x8e>
  {

    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	2204      	movs	r2, #4
 800262a:	4013      	ands	r3, r2
 800262c:	2b04      	cmp	r3, #4
 800262e:	d10d      	bne.n	800264c <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	2202      	movs	r2, #2
 8002638:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 800263a:	d107      	bne.n	800264c <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	689a      	ldr	r2, [r3, #8]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2110      	movs	r1, #16
 8002648:	430a      	orrs	r2, r1
 800264a:	609a      	str	r2, [r3, #8]
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800264c:	f7ff fb36 	bl	8001cbc <HAL_GetTick>
 8002650:	0003      	movs	r3, r0
 8002652:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002654:	e01a      	b.n	800268c <ADC_ConversionStop+0x82>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002656:	f7ff fb31 	bl	8001cbc <HAL_GetTick>
 800265a:	0002      	movs	r2, r0
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b0a      	cmp	r3, #10
 8002662:	d913      	bls.n	800268c <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	2204      	movs	r2, #4
 800266c:	4013      	ands	r3, r2
 800266e:	d00d      	beq.n	800268c <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002674:	2210      	movs	r2, #16
 8002676:	431a      	orrs	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002680:	2201      	movs	r2, #1
 8002682:	431a      	orrs	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e006      	b.n	800269a <ADC_ConversionStop+0x90>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	2204      	movs	r2, #4
 8002694:	4013      	ands	r3, r2
 8002696:	d1de      	bne.n	8002656 <ADC_ConversionStop+0x4c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	0018      	movs	r0, r3
 800269c:	46bd      	mov	sp, r7
 800269e:	b004      	add	sp, #16
 80026a0:	bd80      	pop	{r7, pc}
	...

080026a4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026b0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026b6:	2250      	movs	r2, #80	@ 0x50
 80026b8:	4013      	ands	r3, r2
 80026ba:	d141      	bne.n	8002740 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026c0:	2280      	movs	r2, #128	@ 0x80
 80026c2:	0092      	lsls	r2, r2, #2
 80026c4:	431a      	orrs	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68da      	ldr	r2, [r3, #12]
 80026d0:	23c0      	movs	r3, #192	@ 0xc0
 80026d2:	011b      	lsls	r3, r3, #4
 80026d4:	4013      	ands	r3, r2
 80026d6:	d12e      	bne.n	8002736 <ADC_DMAConvCplt+0x92>
        (hadc->Init.ContinuousConvMode == DISABLE))
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2220      	movs	r2, #32
 80026dc:	5c9b      	ldrb	r3, [r3, r2]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d129      	bne.n	8002736 <ADC_DMAConvCplt+0x92>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2208      	movs	r2, #8
 80026ea:	4013      	ands	r3, r2
 80026ec:	2b08      	cmp	r3, #8
 80026ee:	d122      	bne.n	8002736 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	2204      	movs	r2, #4
 80026f8:	4013      	ands	r3, r2
 80026fa:	d110      	bne.n	800271e <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	685a      	ldr	r2, [r3, #4]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	210c      	movs	r1, #12
 8002708:	438a      	bics	r2, r1
 800270a:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002710:	4a10      	ldr	r2, [pc, #64]	@ (8002754 <ADC_DMAConvCplt+0xb0>)
 8002712:	4013      	ands	r3, r2
 8002714:	2201      	movs	r2, #1
 8002716:	431a      	orrs	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	655a      	str	r2, [r3, #84]	@ 0x54
 800271c:	e00b      	b.n	8002736 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002722:	2220      	movs	r2, #32
 8002724:	431a      	orrs	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800272e:	2201      	movs	r2, #1
 8002730:	431a      	orrs	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	0018      	movs	r0, r3
 800273a:	f7fe ff07 	bl	800154c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800273e:	e005      	b.n	800274c <ADC_DMAConvCplt+0xa8>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002744:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	0010      	movs	r0, r2
 800274a:	4798      	blx	r3
}
 800274c:	46c0      	nop			@ (mov r8, r8)
 800274e:	46bd      	mov	sp, r7
 8002750:	b004      	add	sp, #16
 8002752:	bd80      	pop	{r7, pc}
 8002754:	fffffefe 	.word	0xfffffefe

08002758 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002764:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	0018      	movs	r0, r3
 800276a:	f7ff fdc7 	bl	80022fc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800276e:	46c0      	nop			@ (mov r8, r8)
 8002770:	46bd      	mov	sp, r7
 8002772:	b004      	add	sp, #16
 8002774:	bd80      	pop	{r7, pc}

08002776 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b084      	sub	sp, #16
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002782:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002788:	2240      	movs	r2, #64	@ 0x40
 800278a:	431a      	orrs	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002794:	2204      	movs	r2, #4
 8002796:	431a      	orrs	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	0018      	movs	r0, r3
 80027a0:	f7ff fdbc 	bl	800231c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027a4:	46c0      	nop			@ (mov r8, r8)
 80027a6:	46bd      	mov	sp, r7
 80027a8:	b004      	add	sp, #16
 80027aa:	bd80      	pop	{r7, pc}

080027ac <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80027b4:	4b0b      	ldr	r3, [pc, #44]	@ (80027e4 <ADC_DelayMicroSecond+0x38>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	490b      	ldr	r1, [pc, #44]	@ (80027e8 <ADC_DelayMicroSecond+0x3c>)
 80027ba:	0018      	movs	r0, r3
 80027bc:	f7fd fcae 	bl	800011c <__udivsi3>
 80027c0:	0003      	movs	r3, r0
 80027c2:	001a      	movs	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4353      	muls	r3, r2
 80027c8:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 80027ca:	e002      	b.n	80027d2 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	3b01      	subs	r3, #1
 80027d0:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1f9      	bne.n	80027cc <ADC_DelayMicroSecond+0x20>
  }
}
 80027d8:	46c0      	nop			@ (mov r8, r8)
 80027da:	46c0      	nop			@ (mov r8, r8)
 80027dc:	46bd      	mov	sp, r7
 80027de:	b004      	add	sp, #16
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	46c0      	nop			@ (mov r8, r8)
 80027e4:	20000008 	.word	0x20000008
 80027e8:	000f4240 	.word	0x000f4240

080027ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	0002      	movs	r2, r0
 80027f4:	1dfb      	adds	r3, r7, #7
 80027f6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80027f8:	1dfb      	adds	r3, r7, #7
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	2b7f      	cmp	r3, #127	@ 0x7f
 80027fe:	d809      	bhi.n	8002814 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002800:	1dfb      	adds	r3, r7, #7
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	001a      	movs	r2, r3
 8002806:	231f      	movs	r3, #31
 8002808:	401a      	ands	r2, r3
 800280a:	4b04      	ldr	r3, [pc, #16]	@ (800281c <__NVIC_EnableIRQ+0x30>)
 800280c:	2101      	movs	r1, #1
 800280e:	4091      	lsls	r1, r2
 8002810:	000a      	movs	r2, r1
 8002812:	601a      	str	r2, [r3, #0]
  }
}
 8002814:	46c0      	nop			@ (mov r8, r8)
 8002816:	46bd      	mov	sp, r7
 8002818:	b002      	add	sp, #8
 800281a:	bd80      	pop	{r7, pc}
 800281c:	e000e100 	.word	0xe000e100

08002820 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002820:	b590      	push	{r4, r7, lr}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	0002      	movs	r2, r0
 8002828:	6039      	str	r1, [r7, #0]
 800282a:	1dfb      	adds	r3, r7, #7
 800282c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800282e:	1dfb      	adds	r3, r7, #7
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	2b7f      	cmp	r3, #127	@ 0x7f
 8002834:	d828      	bhi.n	8002888 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002836:	4a2f      	ldr	r2, [pc, #188]	@ (80028f4 <__NVIC_SetPriority+0xd4>)
 8002838:	1dfb      	adds	r3, r7, #7
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	b25b      	sxtb	r3, r3
 800283e:	089b      	lsrs	r3, r3, #2
 8002840:	33c0      	adds	r3, #192	@ 0xc0
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	589b      	ldr	r3, [r3, r2]
 8002846:	1dfa      	adds	r2, r7, #7
 8002848:	7812      	ldrb	r2, [r2, #0]
 800284a:	0011      	movs	r1, r2
 800284c:	2203      	movs	r2, #3
 800284e:	400a      	ands	r2, r1
 8002850:	00d2      	lsls	r2, r2, #3
 8002852:	21ff      	movs	r1, #255	@ 0xff
 8002854:	4091      	lsls	r1, r2
 8002856:	000a      	movs	r2, r1
 8002858:	43d2      	mvns	r2, r2
 800285a:	401a      	ands	r2, r3
 800285c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	019b      	lsls	r3, r3, #6
 8002862:	22ff      	movs	r2, #255	@ 0xff
 8002864:	401a      	ands	r2, r3
 8002866:	1dfb      	adds	r3, r7, #7
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	0018      	movs	r0, r3
 800286c:	2303      	movs	r3, #3
 800286e:	4003      	ands	r3, r0
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002874:	481f      	ldr	r0, [pc, #124]	@ (80028f4 <__NVIC_SetPriority+0xd4>)
 8002876:	1dfb      	adds	r3, r7, #7
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	b25b      	sxtb	r3, r3
 800287c:	089b      	lsrs	r3, r3, #2
 800287e:	430a      	orrs	r2, r1
 8002880:	33c0      	adds	r3, #192	@ 0xc0
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002886:	e031      	b.n	80028ec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002888:	4a1b      	ldr	r2, [pc, #108]	@ (80028f8 <__NVIC_SetPriority+0xd8>)
 800288a:	1dfb      	adds	r3, r7, #7
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	0019      	movs	r1, r3
 8002890:	230f      	movs	r3, #15
 8002892:	400b      	ands	r3, r1
 8002894:	3b08      	subs	r3, #8
 8002896:	089b      	lsrs	r3, r3, #2
 8002898:	3306      	adds	r3, #6
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	18d3      	adds	r3, r2, r3
 800289e:	3304      	adds	r3, #4
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	1dfa      	adds	r2, r7, #7
 80028a4:	7812      	ldrb	r2, [r2, #0]
 80028a6:	0011      	movs	r1, r2
 80028a8:	2203      	movs	r2, #3
 80028aa:	400a      	ands	r2, r1
 80028ac:	00d2      	lsls	r2, r2, #3
 80028ae:	21ff      	movs	r1, #255	@ 0xff
 80028b0:	4091      	lsls	r1, r2
 80028b2:	000a      	movs	r2, r1
 80028b4:	43d2      	mvns	r2, r2
 80028b6:	401a      	ands	r2, r3
 80028b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	019b      	lsls	r3, r3, #6
 80028be:	22ff      	movs	r2, #255	@ 0xff
 80028c0:	401a      	ands	r2, r3
 80028c2:	1dfb      	adds	r3, r7, #7
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	0018      	movs	r0, r3
 80028c8:	2303      	movs	r3, #3
 80028ca:	4003      	ands	r3, r0
 80028cc:	00db      	lsls	r3, r3, #3
 80028ce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028d0:	4809      	ldr	r0, [pc, #36]	@ (80028f8 <__NVIC_SetPriority+0xd8>)
 80028d2:	1dfb      	adds	r3, r7, #7
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	001c      	movs	r4, r3
 80028d8:	230f      	movs	r3, #15
 80028da:	4023      	ands	r3, r4
 80028dc:	3b08      	subs	r3, #8
 80028de:	089b      	lsrs	r3, r3, #2
 80028e0:	430a      	orrs	r2, r1
 80028e2:	3306      	adds	r3, #6
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	18c3      	adds	r3, r0, r3
 80028e8:	3304      	adds	r3, #4
 80028ea:	601a      	str	r2, [r3, #0]
}
 80028ec:	46c0      	nop			@ (mov r8, r8)
 80028ee:	46bd      	mov	sp, r7
 80028f0:	b003      	add	sp, #12
 80028f2:	bd90      	pop	{r4, r7, pc}
 80028f4:	e000e100 	.word	0xe000e100
 80028f8:	e000ed00 	.word	0xe000ed00

080028fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	1e5a      	subs	r2, r3, #1
 8002908:	2380      	movs	r3, #128	@ 0x80
 800290a:	045b      	lsls	r3, r3, #17
 800290c:	429a      	cmp	r2, r3
 800290e:	d301      	bcc.n	8002914 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002910:	2301      	movs	r3, #1
 8002912:	e010      	b.n	8002936 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002914:	4b0a      	ldr	r3, [pc, #40]	@ (8002940 <SysTick_Config+0x44>)
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	3a01      	subs	r2, #1
 800291a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800291c:	2301      	movs	r3, #1
 800291e:	425b      	negs	r3, r3
 8002920:	2103      	movs	r1, #3
 8002922:	0018      	movs	r0, r3
 8002924:	f7ff ff7c 	bl	8002820 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002928:	4b05      	ldr	r3, [pc, #20]	@ (8002940 <SysTick_Config+0x44>)
 800292a:	2200      	movs	r2, #0
 800292c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800292e:	4b04      	ldr	r3, [pc, #16]	@ (8002940 <SysTick_Config+0x44>)
 8002930:	2207      	movs	r2, #7
 8002932:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002934:	2300      	movs	r3, #0
}
 8002936:	0018      	movs	r0, r3
 8002938:	46bd      	mov	sp, r7
 800293a:	b002      	add	sp, #8
 800293c:	bd80      	pop	{r7, pc}
 800293e:	46c0      	nop			@ (mov r8, r8)
 8002940:	e000e010 	.word	0xe000e010

08002944 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	60b9      	str	r1, [r7, #8]
 800294c:	607a      	str	r2, [r7, #4]
 800294e:	210f      	movs	r1, #15
 8002950:	187b      	adds	r3, r7, r1
 8002952:	1c02      	adds	r2, r0, #0
 8002954:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002956:	68ba      	ldr	r2, [r7, #8]
 8002958:	187b      	adds	r3, r7, r1
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	b25b      	sxtb	r3, r3
 800295e:	0011      	movs	r1, r2
 8002960:	0018      	movs	r0, r3
 8002962:	f7ff ff5d 	bl	8002820 <__NVIC_SetPriority>
}
 8002966:	46c0      	nop			@ (mov r8, r8)
 8002968:	46bd      	mov	sp, r7
 800296a:	b004      	add	sp, #16
 800296c:	bd80      	pop	{r7, pc}

0800296e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b082      	sub	sp, #8
 8002972:	af00      	add	r7, sp, #0
 8002974:	0002      	movs	r2, r0
 8002976:	1dfb      	adds	r3, r7, #7
 8002978:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800297a:	1dfb      	adds	r3, r7, #7
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	b25b      	sxtb	r3, r3
 8002980:	0018      	movs	r0, r3
 8002982:	f7ff ff33 	bl	80027ec <__NVIC_EnableIRQ>
}
 8002986:	46c0      	nop			@ (mov r8, r8)
 8002988:	46bd      	mov	sp, r7
 800298a:	b002      	add	sp, #8
 800298c:	bd80      	pop	{r7, pc}

0800298e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b082      	sub	sp, #8
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	0018      	movs	r0, r3
 800299a:	f7ff ffaf 	bl	80028fc <SysTick_Config>
 800299e:	0003      	movs	r3, r0
}
 80029a0:	0018      	movs	r0, r3
 80029a2:	46bd      	mov	sp, r7
 80029a4:	b002      	add	sp, #8
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e061      	b.n	8002a7e <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a32      	ldr	r2, [pc, #200]	@ (8002a88 <HAL_DMA_Init+0xe0>)
 80029c0:	4694      	mov	ip, r2
 80029c2:	4463      	add	r3, ip
 80029c4:	2114      	movs	r1, #20
 80029c6:	0018      	movs	r0, r3
 80029c8:	f7fd fba8 	bl	800011c <__udivsi3>
 80029cc:	0003      	movs	r3, r0
 80029ce:	009a      	lsls	r2, r3, #2
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a2d      	ldr	r2, [pc, #180]	@ (8002a8c <HAL_DMA_Init+0xe4>)
 80029d8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2225      	movs	r2, #37	@ 0x25
 80029de:	2102      	movs	r1, #2
 80029e0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	4a28      	ldr	r2, [pc, #160]	@ (8002a90 <HAL_DMA_Init+0xe8>)
 80029ee:	4013      	ands	r3, r2
 80029f0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80029fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	691b      	ldr	r3, [r3, #16]
 8002a00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a1b      	ldr	r3, [r3, #32]
 8002a18:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	2380      	movs	r3, #128	@ 0x80
 8002a2e:	01db      	lsls	r3, r3, #7
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d018      	beq.n	8002a66 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002a34:	4b17      	ldr	r3, [pc, #92]	@ (8002a94 <HAL_DMA_Init+0xec>)
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a3c:	211c      	movs	r1, #28
 8002a3e:	400b      	ands	r3, r1
 8002a40:	210f      	movs	r1, #15
 8002a42:	4099      	lsls	r1, r3
 8002a44:	000b      	movs	r3, r1
 8002a46:	43d9      	mvns	r1, r3
 8002a48:	4b12      	ldr	r3, [pc, #72]	@ (8002a94 <HAL_DMA_Init+0xec>)
 8002a4a:	400a      	ands	r2, r1
 8002a4c:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002a4e:	4b11      	ldr	r3, [pc, #68]	@ (8002a94 <HAL_DMA_Init+0xec>)
 8002a50:	6819      	ldr	r1, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685a      	ldr	r2, [r3, #4]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a5a:	201c      	movs	r0, #28
 8002a5c:	4003      	ands	r3, r0
 8002a5e:	409a      	lsls	r2, r3
 8002a60:	4b0c      	ldr	r3, [pc, #48]	@ (8002a94 <HAL_DMA_Init+0xec>)
 8002a62:	430a      	orrs	r2, r1
 8002a64:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2225      	movs	r2, #37	@ 0x25
 8002a70:	2101      	movs	r1, #1
 8002a72:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2224      	movs	r2, #36	@ 0x24
 8002a78:	2100      	movs	r1, #0
 8002a7a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	0018      	movs	r0, r3
 8002a80:	46bd      	mov	sp, r7
 8002a82:	b004      	add	sp, #16
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	46c0      	nop			@ (mov r8, r8)
 8002a88:	bffdfff8 	.word	0xbffdfff8
 8002a8c:	40020000 	.word	0x40020000
 8002a90:	ffff800f 	.word	0xffff800f
 8002a94:	400200a8 	.word	0x400200a8

08002a98 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
 8002aa4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002aa6:	2317      	movs	r3, #23
 8002aa8:	18fb      	adds	r3, r7, r3
 8002aaa:	2200      	movs	r2, #0
 8002aac:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2224      	movs	r2, #36	@ 0x24
 8002ab2:	5c9b      	ldrb	r3, [r3, r2]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d101      	bne.n	8002abc <HAL_DMA_Start_IT+0x24>
 8002ab8:	2302      	movs	r3, #2
 8002aba:	e04f      	b.n	8002b5c <HAL_DMA_Start_IT+0xc4>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2224      	movs	r2, #36	@ 0x24
 8002ac0:	2101      	movs	r1, #1
 8002ac2:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2225      	movs	r2, #37	@ 0x25
 8002ac8:	5c9b      	ldrb	r3, [r3, r2]
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d13a      	bne.n	8002b46 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2225      	movs	r2, #37	@ 0x25
 8002ad4:	2102      	movs	r1, #2
 8002ad6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2101      	movs	r1, #1
 8002aea:	438a      	bics	r2, r1
 8002aec:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	68b9      	ldr	r1, [r7, #8]
 8002af4:	68f8      	ldr	r0, [r7, #12]
 8002af6:	f000 f923 	bl	8002d40 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d008      	beq.n	8002b14 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	210e      	movs	r1, #14
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	601a      	str	r2, [r3, #0]
 8002b12:	e00f      	b.n	8002b34 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2104      	movs	r1, #4
 8002b20:	438a      	bics	r2, r1
 8002b22:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	210a      	movs	r1, #10
 8002b30:	430a      	orrs	r2, r1
 8002b32:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2101      	movs	r1, #1
 8002b40:	430a      	orrs	r2, r1
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	e007      	b.n	8002b56 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2224      	movs	r2, #36	@ 0x24
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002b4e:	2317      	movs	r3, #23
 8002b50:	18fb      	adds	r3, r7, r3
 8002b52:	2202      	movs	r2, #2
 8002b54:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8002b56:	2317      	movs	r3, #23
 8002b58:	18fb      	adds	r3, r7, r3
 8002b5a:	781b      	ldrb	r3, [r3, #0]
}
 8002b5c:	0018      	movs	r0, r3
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	b006      	add	sp, #24
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b6c:	230f      	movs	r3, #15
 8002b6e:	18fb      	adds	r3, r7, r3
 8002b70:	2200      	movs	r2, #0
 8002b72:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2225      	movs	r2, #37	@ 0x25
 8002b78:	5c9b      	ldrb	r3, [r3, r2]
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d008      	beq.n	8002b92 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2204      	movs	r2, #4
 8002b84:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2224      	movs	r2, #36	@ 0x24
 8002b8a:	2100      	movs	r1, #0
 8002b8c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e024      	b.n	8002bdc <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	210e      	movs	r1, #14
 8002b9e:	438a      	bics	r2, r1
 8002ba0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2101      	movs	r1, #1
 8002bae:	438a      	bics	r2, r1
 8002bb0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bb6:	221c      	movs	r2, #28
 8002bb8:	401a      	ands	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	4091      	lsls	r1, r2
 8002bc2:	000a      	movs	r2, r1
 8002bc4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2225      	movs	r2, #37	@ 0x25
 8002bca:	2101      	movs	r1, #1
 8002bcc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2224      	movs	r2, #36	@ 0x24
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	5499      	strb	r1, [r3, r2]

    return status;
 8002bd6:	230f      	movs	r3, #15
 8002bd8:	18fb      	adds	r3, r7, r3
 8002bda:	781b      	ldrb	r3, [r3, #0]
  }
}
 8002bdc:	0018      	movs	r0, r3
 8002bde:	46bd      	mov	sp, r7
 8002be0:	b004      	add	sp, #16
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c00:	221c      	movs	r2, #28
 8002c02:	4013      	ands	r3, r2
 8002c04:	2204      	movs	r2, #4
 8002c06:	409a      	lsls	r2, r3
 8002c08:	0013      	movs	r3, r2
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	d026      	beq.n	8002c5e <HAL_DMA_IRQHandler+0x7a>
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	2204      	movs	r2, #4
 8002c14:	4013      	ands	r3, r2
 8002c16:	d022      	beq.n	8002c5e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2220      	movs	r2, #32
 8002c20:	4013      	ands	r3, r2
 8002c22:	d107      	bne.n	8002c34 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2104      	movs	r1, #4
 8002c30:	438a      	bics	r2, r1
 8002c32:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c38:	221c      	movs	r2, #28
 8002c3a:	401a      	ands	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c40:	2104      	movs	r1, #4
 8002c42:	4091      	lsls	r1, r2
 8002c44:	000a      	movs	r2, r1
 8002c46:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d100      	bne.n	8002c52 <HAL_DMA_IRQHandler+0x6e>
 8002c50:	e071      	b.n	8002d36 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	0010      	movs	r0, r2
 8002c5a:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8002c5c:	e06b      	b.n	8002d36 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c62:	221c      	movs	r2, #28
 8002c64:	4013      	ands	r3, r2
 8002c66:	2202      	movs	r2, #2
 8002c68:	409a      	lsls	r2, r3
 8002c6a:	0013      	movs	r3, r2
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	d02d      	beq.n	8002cce <HAL_DMA_IRQHandler+0xea>
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	2202      	movs	r2, #2
 8002c76:	4013      	ands	r3, r2
 8002c78:	d029      	beq.n	8002cce <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2220      	movs	r2, #32
 8002c82:	4013      	ands	r3, r2
 8002c84:	d10b      	bne.n	8002c9e <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	210a      	movs	r1, #10
 8002c92:	438a      	bics	r2, r1
 8002c94:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2225      	movs	r2, #37	@ 0x25
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ca2:	221c      	movs	r2, #28
 8002ca4:	401a      	ands	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002caa:	2102      	movs	r1, #2
 8002cac:	4091      	lsls	r1, r2
 8002cae:	000a      	movs	r2, r1
 8002cb0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2224      	movs	r2, #36	@ 0x24
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d039      	beq.n	8002d36 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	0010      	movs	r0, r2
 8002cca:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002ccc:	e033      	b.n	8002d36 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cd2:	221c      	movs	r2, #28
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	2208      	movs	r2, #8
 8002cd8:	409a      	lsls	r2, r3
 8002cda:	0013      	movs	r3, r2
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	4013      	ands	r3, r2
 8002ce0:	d02a      	beq.n	8002d38 <HAL_DMA_IRQHandler+0x154>
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	2208      	movs	r2, #8
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	d026      	beq.n	8002d38 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	210e      	movs	r1, #14
 8002cf6:	438a      	bics	r2, r1
 8002cf8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cfe:	221c      	movs	r2, #28
 8002d00:	401a      	ands	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d06:	2101      	movs	r1, #1
 8002d08:	4091      	lsls	r1, r2
 8002d0a:	000a      	movs	r2, r1
 8002d0c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2201      	movs	r2, #1
 8002d12:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2225      	movs	r2, #37	@ 0x25
 8002d18:	2101      	movs	r1, #1
 8002d1a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2224      	movs	r2, #36	@ 0x24
 8002d20:	2100      	movs	r1, #0
 8002d22:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d005      	beq.n	8002d38 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	0010      	movs	r0, r2
 8002d34:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002d36:	46c0      	nop			@ (mov r8, r8)
 8002d38:	46c0      	nop			@ (mov r8, r8)
}
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	b004      	add	sp, #16
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
 8002d4c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d52:	221c      	movs	r2, #28
 8002d54:	401a      	ands	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5a:	2101      	movs	r1, #1
 8002d5c:	4091      	lsls	r1, r2
 8002d5e:	000a      	movs	r2, r1
 8002d60:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	683a      	ldr	r2, [r7, #0]
 8002d68:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	2b10      	cmp	r3, #16
 8002d70:	d108      	bne.n	8002d84 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68ba      	ldr	r2, [r7, #8]
 8002d80:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002d82:	e007      	b.n	8002d94 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68ba      	ldr	r2, [r7, #8]
 8002d8a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	60da      	str	r2, [r3, #12]
}
 8002d94:	46c0      	nop			@ (mov r8, r8)
 8002d96:	46bd      	mov	sp, r7
 8002d98:	b004      	add	sp, #16
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002da6:	2300      	movs	r3, #0
 8002da8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002daa:	2300      	movs	r3, #0
 8002dac:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002dae:	2300      	movs	r3, #0
 8002db0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002db2:	e14f      	b.n	8003054 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2101      	movs	r1, #1
 8002dba:	697a      	ldr	r2, [r7, #20]
 8002dbc:	4091      	lsls	r1, r2
 8002dbe:	000a      	movs	r2, r1
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d100      	bne.n	8002dcc <HAL_GPIO_Init+0x30>
 8002dca:	e140      	b.n	800304e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	2203      	movs	r2, #3
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d005      	beq.n	8002de4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	2203      	movs	r2, #3
 8002dde:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d130      	bne.n	8002e46 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	2203      	movs	r2, #3
 8002df0:	409a      	lsls	r2, r3
 8002df2:	0013      	movs	r3, r2
 8002df4:	43da      	mvns	r2, r3
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	4013      	ands	r3, r2
 8002dfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	68da      	ldr	r2, [r3, #12]
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	409a      	lsls	r2, r3
 8002e06:	0013      	movs	r3, r2
 8002e08:	693a      	ldr	r2, [r7, #16]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	409a      	lsls	r2, r3
 8002e20:	0013      	movs	r3, r2
 8002e22:	43da      	mvns	r2, r3
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	4013      	ands	r3, r2
 8002e28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	091b      	lsrs	r3, r3, #4
 8002e30:	2201      	movs	r2, #1
 8002e32:	401a      	ands	r2, r3
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	409a      	lsls	r2, r3
 8002e38:	0013      	movs	r3, r2
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2203      	movs	r2, #3
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	2b03      	cmp	r3, #3
 8002e50:	d017      	beq.n	8002e82 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	2203      	movs	r2, #3
 8002e5e:	409a      	lsls	r2, r3
 8002e60:	0013      	movs	r3, r2
 8002e62:	43da      	mvns	r2, r3
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	4013      	ands	r3, r2
 8002e68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	689a      	ldr	r2, [r3, #8]
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	409a      	lsls	r2, r3
 8002e74:	0013      	movs	r3, r2
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	693a      	ldr	r2, [r7, #16]
 8002e80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	2203      	movs	r2, #3
 8002e88:	4013      	ands	r3, r2
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d123      	bne.n	8002ed6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	08da      	lsrs	r2, r3, #3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	3208      	adds	r2, #8
 8002e96:	0092      	lsls	r2, r2, #2
 8002e98:	58d3      	ldr	r3, [r2, r3]
 8002e9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	2207      	movs	r2, #7
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	220f      	movs	r2, #15
 8002ea6:	409a      	lsls	r2, r3
 8002ea8:	0013      	movs	r3, r2
 8002eaa:	43da      	mvns	r2, r3
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	691a      	ldr	r2, [r3, #16]
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	2107      	movs	r1, #7
 8002eba:	400b      	ands	r3, r1
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	409a      	lsls	r2, r3
 8002ec0:	0013      	movs	r3, r2
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	08da      	lsrs	r2, r3, #3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	3208      	adds	r2, #8
 8002ed0:	0092      	lsls	r2, r2, #2
 8002ed2:	6939      	ldr	r1, [r7, #16]
 8002ed4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	2203      	movs	r2, #3
 8002ee2:	409a      	lsls	r2, r3
 8002ee4:	0013      	movs	r3, r2
 8002ee6:	43da      	mvns	r2, r3
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	4013      	ands	r3, r2
 8002eec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	2203      	movs	r2, #3
 8002ef4:	401a      	ands	r2, r3
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	409a      	lsls	r2, r3
 8002efc:	0013      	movs	r3, r2
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	693a      	ldr	r2, [r7, #16]
 8002f08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	685a      	ldr	r2, [r3, #4]
 8002f0e:	23c0      	movs	r3, #192	@ 0xc0
 8002f10:	029b      	lsls	r3, r3, #10
 8002f12:	4013      	ands	r3, r2
 8002f14:	d100      	bne.n	8002f18 <HAL_GPIO_Init+0x17c>
 8002f16:	e09a      	b.n	800304e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f18:	4b54      	ldr	r3, [pc, #336]	@ (800306c <HAL_GPIO_Init+0x2d0>)
 8002f1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f1c:	4b53      	ldr	r3, [pc, #332]	@ (800306c <HAL_GPIO_Init+0x2d0>)
 8002f1e:	2101      	movs	r1, #1
 8002f20:	430a      	orrs	r2, r1
 8002f22:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f24:	4a52      	ldr	r2, [pc, #328]	@ (8003070 <HAL_GPIO_Init+0x2d4>)
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	089b      	lsrs	r3, r3, #2
 8002f2a:	3302      	adds	r3, #2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	589b      	ldr	r3, [r3, r2]
 8002f30:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	2203      	movs	r2, #3
 8002f36:	4013      	ands	r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	220f      	movs	r2, #15
 8002f3c:	409a      	lsls	r2, r3
 8002f3e:	0013      	movs	r3, r2
 8002f40:	43da      	mvns	r2, r3
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	4013      	ands	r3, r2
 8002f46:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	23a0      	movs	r3, #160	@ 0xa0
 8002f4c:	05db      	lsls	r3, r3, #23
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d019      	beq.n	8002f86 <HAL_GPIO_Init+0x1ea>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a47      	ldr	r2, [pc, #284]	@ (8003074 <HAL_GPIO_Init+0x2d8>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d013      	beq.n	8002f82 <HAL_GPIO_Init+0x1e6>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a46      	ldr	r2, [pc, #280]	@ (8003078 <HAL_GPIO_Init+0x2dc>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d00d      	beq.n	8002f7e <HAL_GPIO_Init+0x1e2>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a45      	ldr	r2, [pc, #276]	@ (800307c <HAL_GPIO_Init+0x2e0>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d007      	beq.n	8002f7a <HAL_GPIO_Init+0x1de>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a44      	ldr	r2, [pc, #272]	@ (8003080 <HAL_GPIO_Init+0x2e4>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d101      	bne.n	8002f76 <HAL_GPIO_Init+0x1da>
 8002f72:	2305      	movs	r3, #5
 8002f74:	e008      	b.n	8002f88 <HAL_GPIO_Init+0x1ec>
 8002f76:	2306      	movs	r3, #6
 8002f78:	e006      	b.n	8002f88 <HAL_GPIO_Init+0x1ec>
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e004      	b.n	8002f88 <HAL_GPIO_Init+0x1ec>
 8002f7e:	2302      	movs	r3, #2
 8002f80:	e002      	b.n	8002f88 <HAL_GPIO_Init+0x1ec>
 8002f82:	2301      	movs	r3, #1
 8002f84:	e000      	b.n	8002f88 <HAL_GPIO_Init+0x1ec>
 8002f86:	2300      	movs	r3, #0
 8002f88:	697a      	ldr	r2, [r7, #20]
 8002f8a:	2103      	movs	r1, #3
 8002f8c:	400a      	ands	r2, r1
 8002f8e:	0092      	lsls	r2, r2, #2
 8002f90:	4093      	lsls	r3, r2
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f98:	4935      	ldr	r1, [pc, #212]	@ (8003070 <HAL_GPIO_Init+0x2d4>)
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	089b      	lsrs	r3, r3, #2
 8002f9e:	3302      	adds	r3, #2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fa6:	4b37      	ldr	r3, [pc, #220]	@ (8003084 <HAL_GPIO_Init+0x2e8>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	43da      	mvns	r2, r3
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685a      	ldr	r2, [r3, #4]
 8002fba:	2380      	movs	r3, #128	@ 0x80
 8002fbc:	035b      	lsls	r3, r3, #13
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	d003      	beq.n	8002fca <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002fca:	4b2e      	ldr	r3, [pc, #184]	@ (8003084 <HAL_GPIO_Init+0x2e8>)
 8002fcc:	693a      	ldr	r2, [r7, #16]
 8002fce:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002fd0:	4b2c      	ldr	r3, [pc, #176]	@ (8003084 <HAL_GPIO_Init+0x2e8>)
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	43da      	mvns	r2, r3
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	4013      	ands	r3, r2
 8002fde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	2380      	movs	r3, #128	@ 0x80
 8002fe6:	039b      	lsls	r3, r3, #14
 8002fe8:	4013      	ands	r3, r2
 8002fea:	d003      	beq.n	8002ff4 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8002fec:	693a      	ldr	r2, [r7, #16]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002ff4:	4b23      	ldr	r3, [pc, #140]	@ (8003084 <HAL_GPIO_Init+0x2e8>)
 8002ff6:	693a      	ldr	r2, [r7, #16]
 8002ff8:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8002ffa:	4b22      	ldr	r3, [pc, #136]	@ (8003084 <HAL_GPIO_Init+0x2e8>)
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	43da      	mvns	r2, r3
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	4013      	ands	r3, r2
 8003008:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685a      	ldr	r2, [r3, #4]
 800300e:	2380      	movs	r3, #128	@ 0x80
 8003010:	029b      	lsls	r3, r3, #10
 8003012:	4013      	ands	r3, r2
 8003014:	d003      	beq.n	800301e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	4313      	orrs	r3, r2
 800301c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800301e:	4b19      	ldr	r3, [pc, #100]	@ (8003084 <HAL_GPIO_Init+0x2e8>)
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003024:	4b17      	ldr	r3, [pc, #92]	@ (8003084 <HAL_GPIO_Init+0x2e8>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	43da      	mvns	r2, r3
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	4013      	ands	r3, r2
 8003032:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685a      	ldr	r2, [r3, #4]
 8003038:	2380      	movs	r3, #128	@ 0x80
 800303a:	025b      	lsls	r3, r3, #9
 800303c:	4013      	ands	r3, r2
 800303e:	d003      	beq.n	8003048 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	4313      	orrs	r3, r2
 8003046:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003048:	4b0e      	ldr	r3, [pc, #56]	@ (8003084 <HAL_GPIO_Init+0x2e8>)
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	3301      	adds	r3, #1
 8003052:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	40da      	lsrs	r2, r3
 800305c:	1e13      	subs	r3, r2, #0
 800305e:	d000      	beq.n	8003062 <HAL_GPIO_Init+0x2c6>
 8003060:	e6a8      	b.n	8002db4 <HAL_GPIO_Init+0x18>
  }
}
 8003062:	46c0      	nop			@ (mov r8, r8)
 8003064:	46c0      	nop			@ (mov r8, r8)
 8003066:	46bd      	mov	sp, r7
 8003068:	b006      	add	sp, #24
 800306a:	bd80      	pop	{r7, pc}
 800306c:	40021000 	.word	0x40021000
 8003070:	40010000 	.word	0x40010000
 8003074:	50000400 	.word	0x50000400
 8003078:	50000800 	.word	0x50000800
 800307c:	50000c00 	.word	0x50000c00
 8003080:	50001c00 	.word	0x50001c00
 8003084:	40010400 	.word	0x40010400

08003088 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	000a      	movs	r2, r1
 8003092:	1cbb      	adds	r3, r7, #2
 8003094:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	1cba      	adds	r2, r7, #2
 800309c:	8812      	ldrh	r2, [r2, #0]
 800309e:	4013      	ands	r3, r2
 80030a0:	d004      	beq.n	80030ac <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80030a2:	230f      	movs	r3, #15
 80030a4:	18fb      	adds	r3, r7, r3
 80030a6:	2201      	movs	r2, #1
 80030a8:	701a      	strb	r2, [r3, #0]
 80030aa:	e003      	b.n	80030b4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80030ac:	230f      	movs	r3, #15
 80030ae:	18fb      	adds	r3, r7, r3
 80030b0:	2200      	movs	r2, #0
 80030b2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80030b4:	230f      	movs	r3, #15
 80030b6:	18fb      	adds	r3, r7, r3
 80030b8:	781b      	ldrb	r3, [r3, #0]
}
 80030ba:	0018      	movs	r0, r3
 80030bc:	46bd      	mov	sp, r7
 80030be:	b004      	add	sp, #16
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b082      	sub	sp, #8
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
 80030ca:	0008      	movs	r0, r1
 80030cc:	0011      	movs	r1, r2
 80030ce:	1cbb      	adds	r3, r7, #2
 80030d0:	1c02      	adds	r2, r0, #0
 80030d2:	801a      	strh	r2, [r3, #0]
 80030d4:	1c7b      	adds	r3, r7, #1
 80030d6:	1c0a      	adds	r2, r1, #0
 80030d8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030da:	1c7b      	adds	r3, r7, #1
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d004      	beq.n	80030ec <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030e2:	1cbb      	adds	r3, r7, #2
 80030e4:	881a      	ldrh	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80030ea:	e003      	b.n	80030f4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80030ec:	1cbb      	adds	r3, r7, #2
 80030ee:	881a      	ldrh	r2, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80030f4:	46c0      	nop			@ (mov r8, r8)
 80030f6:	46bd      	mov	sp, r7
 80030f8:	b002      	add	sp, #8
 80030fa:	bd80      	pop	{r7, pc}

080030fc <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	000a      	movs	r2, r1
 8003106:	1cbb      	adds	r3, r7, #2
 8003108:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003110:	1cbb      	adds	r3, r7, #2
 8003112:	881b      	ldrh	r3, [r3, #0]
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	4013      	ands	r3, r2
 8003118:	041a      	lsls	r2, r3, #16
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	43db      	mvns	r3, r3
 800311e:	1cb9      	adds	r1, r7, #2
 8003120:	8809      	ldrh	r1, [r1, #0]
 8003122:	400b      	ands	r3, r1
 8003124:	431a      	orrs	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	619a      	str	r2, [r3, #24]
}
 800312a:	46c0      	nop			@ (mov r8, r8)
 800312c:	46bd      	mov	sp, r7
 800312e:	b004      	add	sp, #16
 8003130:	bd80      	pop	{r7, pc}
	...

08003134 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	0002      	movs	r2, r0
 800313c:	1dbb      	adds	r3, r7, #6
 800313e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003140:	4b09      	ldr	r3, [pc, #36]	@ (8003168 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003142:	695b      	ldr	r3, [r3, #20]
 8003144:	1dba      	adds	r2, r7, #6
 8003146:	8812      	ldrh	r2, [r2, #0]
 8003148:	4013      	ands	r3, r2
 800314a:	d008      	beq.n	800315e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800314c:	4b06      	ldr	r3, [pc, #24]	@ (8003168 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800314e:	1dba      	adds	r2, r7, #6
 8003150:	8812      	ldrh	r2, [r2, #0]
 8003152:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003154:	1dbb      	adds	r3, r7, #6
 8003156:	881b      	ldrh	r3, [r3, #0]
 8003158:	0018      	movs	r0, r3
 800315a:	f7fe fa81 	bl	8001660 <HAL_GPIO_EXTI_Callback>
  }
}
 800315e:	46c0      	nop			@ (mov r8, r8)
 8003160:	46bd      	mov	sp, r7
 8003162:	b002      	add	sp, #8
 8003164:	bd80      	pop	{r7, pc}
 8003166:	46c0      	nop			@ (mov r8, r8)
 8003168:	40010400 	.word	0x40010400

0800316c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e082      	b.n	8003284 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2241      	movs	r2, #65	@ 0x41
 8003182:	5c9b      	ldrb	r3, [r3, r2]
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b00      	cmp	r3, #0
 8003188:	d107      	bne.n	800319a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2240      	movs	r2, #64	@ 0x40
 800318e:	2100      	movs	r1, #0
 8003190:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	0018      	movs	r0, r3
 8003196:	f7fe fb09 	bl	80017ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2241      	movs	r2, #65	@ 0x41
 800319e:	2124      	movs	r1, #36	@ 0x24
 80031a0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2101      	movs	r1, #1
 80031ae:	438a      	bics	r2, r1
 80031b0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685a      	ldr	r2, [r3, #4]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4934      	ldr	r1, [pc, #208]	@ (800328c <HAL_I2C_Init+0x120>)
 80031bc:	400a      	ands	r2, r1
 80031be:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689a      	ldr	r2, [r3, #8]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4931      	ldr	r1, [pc, #196]	@ (8003290 <HAL_I2C_Init+0x124>)
 80031cc:	400a      	ands	r2, r1
 80031ce:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d108      	bne.n	80031ea <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2180      	movs	r1, #128	@ 0x80
 80031e2:	0209      	lsls	r1, r1, #8
 80031e4:	430a      	orrs	r2, r1
 80031e6:	609a      	str	r2, [r3, #8]
 80031e8:	e007      	b.n	80031fa <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	689a      	ldr	r2, [r3, #8]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2184      	movs	r1, #132	@ 0x84
 80031f4:	0209      	lsls	r1, r1, #8
 80031f6:	430a      	orrs	r2, r1
 80031f8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d104      	bne.n	800320c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2280      	movs	r2, #128	@ 0x80
 8003208:	0112      	lsls	r2, r2, #4
 800320a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	685a      	ldr	r2, [r3, #4]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	491f      	ldr	r1, [pc, #124]	@ (8003294 <HAL_I2C_Init+0x128>)
 8003218:	430a      	orrs	r2, r1
 800321a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68da      	ldr	r2, [r3, #12]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	491a      	ldr	r1, [pc, #104]	@ (8003290 <HAL_I2C_Init+0x124>)
 8003228:	400a      	ands	r2, r1
 800322a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	691a      	ldr	r2, [r3, #16]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	695b      	ldr	r3, [r3, #20]
 8003234:	431a      	orrs	r2, r3
 8003236:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	430a      	orrs	r2, r1
 8003244:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	69d9      	ldr	r1, [r3, #28]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a1a      	ldr	r2, [r3, #32]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	430a      	orrs	r2, r1
 8003254:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2101      	movs	r1, #1
 8003262:	430a      	orrs	r2, r1
 8003264:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2241      	movs	r2, #65	@ 0x41
 8003270:	2120      	movs	r1, #32
 8003272:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2242      	movs	r2, #66	@ 0x42
 800327e:	2100      	movs	r1, #0
 8003280:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003282:	2300      	movs	r3, #0
}
 8003284:	0018      	movs	r0, r3
 8003286:	46bd      	mov	sp, r7
 8003288:	b002      	add	sp, #8
 800328a:	bd80      	pop	{r7, pc}
 800328c:	f0ffffff 	.word	0xf0ffffff
 8003290:	ffff7fff 	.word	0xffff7fff
 8003294:	02008000 	.word	0x02008000

08003298 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003298:	b590      	push	{r4, r7, lr}
 800329a:	b089      	sub	sp, #36	@ 0x24
 800329c:	af02      	add	r7, sp, #8
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	0008      	movs	r0, r1
 80032a2:	607a      	str	r2, [r7, #4]
 80032a4:	0019      	movs	r1, r3
 80032a6:	230a      	movs	r3, #10
 80032a8:	18fb      	adds	r3, r7, r3
 80032aa:	1c02      	adds	r2, r0, #0
 80032ac:	801a      	strh	r2, [r3, #0]
 80032ae:	2308      	movs	r3, #8
 80032b0:	18fb      	adds	r3, r7, r3
 80032b2:	1c0a      	adds	r2, r1, #0
 80032b4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2241      	movs	r2, #65	@ 0x41
 80032ba:	5c9b      	ldrb	r3, [r3, r2]
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b20      	cmp	r3, #32
 80032c0:	d000      	beq.n	80032c4 <HAL_I2C_Master_Transmit+0x2c>
 80032c2:	e0e7      	b.n	8003494 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2240      	movs	r2, #64	@ 0x40
 80032c8:	5c9b      	ldrb	r3, [r3, r2]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d101      	bne.n	80032d2 <HAL_I2C_Master_Transmit+0x3a>
 80032ce:	2302      	movs	r3, #2
 80032d0:	e0e1      	b.n	8003496 <HAL_I2C_Master_Transmit+0x1fe>
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2240      	movs	r2, #64	@ 0x40
 80032d6:	2101      	movs	r1, #1
 80032d8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80032da:	f7fe fcef 	bl	8001cbc <HAL_GetTick>
 80032de:	0003      	movs	r3, r0
 80032e0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80032e2:	2380      	movs	r3, #128	@ 0x80
 80032e4:	0219      	lsls	r1, r3, #8
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	9300      	str	r3, [sp, #0]
 80032ec:	2319      	movs	r3, #25
 80032ee:	2201      	movs	r2, #1
 80032f0:	f000 f8fc 	bl	80034ec <I2C_WaitOnFlagUntilTimeout>
 80032f4:	1e03      	subs	r3, r0, #0
 80032f6:	d001      	beq.n	80032fc <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e0cc      	b.n	8003496 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2241      	movs	r2, #65	@ 0x41
 8003300:	2121      	movs	r1, #33	@ 0x21
 8003302:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2242      	movs	r2, #66	@ 0x42
 8003308:	2110      	movs	r1, #16
 800330a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2208      	movs	r2, #8
 800331c:	18ba      	adds	r2, r7, r2
 800331e:	8812      	ldrh	r2, [r2, #0]
 8003320:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2200      	movs	r2, #0
 8003326:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800332c:	b29b      	uxth	r3, r3
 800332e:	2bff      	cmp	r3, #255	@ 0xff
 8003330:	d911      	bls.n	8003356 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	22ff      	movs	r2, #255	@ 0xff
 8003336:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800333c:	b2da      	uxtb	r2, r3
 800333e:	2380      	movs	r3, #128	@ 0x80
 8003340:	045c      	lsls	r4, r3, #17
 8003342:	230a      	movs	r3, #10
 8003344:	18fb      	adds	r3, r7, r3
 8003346:	8819      	ldrh	r1, [r3, #0]
 8003348:	68f8      	ldr	r0, [r7, #12]
 800334a:	4b55      	ldr	r3, [pc, #340]	@ (80034a0 <HAL_I2C_Master_Transmit+0x208>)
 800334c:	9300      	str	r3, [sp, #0]
 800334e:	0023      	movs	r3, r4
 8003350:	f000 fa9c 	bl	800388c <I2C_TransferConfig>
 8003354:	e075      	b.n	8003442 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800335a:	b29a      	uxth	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003364:	b2da      	uxtb	r2, r3
 8003366:	2380      	movs	r3, #128	@ 0x80
 8003368:	049c      	lsls	r4, r3, #18
 800336a:	230a      	movs	r3, #10
 800336c:	18fb      	adds	r3, r7, r3
 800336e:	8819      	ldrh	r1, [r3, #0]
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	4b4b      	ldr	r3, [pc, #300]	@ (80034a0 <HAL_I2C_Master_Transmit+0x208>)
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	0023      	movs	r3, r4
 8003378:	f000 fa88 	bl	800388c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800337c:	e061      	b.n	8003442 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800337e:	697a      	ldr	r2, [r7, #20]
 8003380:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	0018      	movs	r0, r3
 8003386:	f000 f8ff 	bl	8003588 <I2C_WaitOnTXISFlagUntilTimeout>
 800338a:	1e03      	subs	r3, r0, #0
 800338c:	d001      	beq.n	8003392 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e081      	b.n	8003496 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003396:	781a      	ldrb	r2, [r3, #0]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a2:	1c5a      	adds	r2, r3, #1
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	3b01      	subs	r3, #1
 80033b0:	b29a      	uxth	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033ba:	3b01      	subs	r3, #1
 80033bc:	b29a      	uxth	r2, r3
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d03a      	beq.n	8003442 <HAL_I2C_Master_Transmit+0x1aa>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d136      	bne.n	8003442 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80033d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	9300      	str	r3, [sp, #0]
 80033dc:	0013      	movs	r3, r2
 80033de:	2200      	movs	r2, #0
 80033e0:	2180      	movs	r1, #128	@ 0x80
 80033e2:	f000 f883 	bl	80034ec <I2C_WaitOnFlagUntilTimeout>
 80033e6:	1e03      	subs	r3, r0, #0
 80033e8:	d001      	beq.n	80033ee <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e053      	b.n	8003496 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	2bff      	cmp	r3, #255	@ 0xff
 80033f6:	d911      	bls.n	800341c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	22ff      	movs	r2, #255	@ 0xff
 80033fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003402:	b2da      	uxtb	r2, r3
 8003404:	2380      	movs	r3, #128	@ 0x80
 8003406:	045c      	lsls	r4, r3, #17
 8003408:	230a      	movs	r3, #10
 800340a:	18fb      	adds	r3, r7, r3
 800340c:	8819      	ldrh	r1, [r3, #0]
 800340e:	68f8      	ldr	r0, [r7, #12]
 8003410:	2300      	movs	r3, #0
 8003412:	9300      	str	r3, [sp, #0]
 8003414:	0023      	movs	r3, r4
 8003416:	f000 fa39 	bl	800388c <I2C_TransferConfig>
 800341a:	e012      	b.n	8003442 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003420:	b29a      	uxth	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800342a:	b2da      	uxtb	r2, r3
 800342c:	2380      	movs	r3, #128	@ 0x80
 800342e:	049c      	lsls	r4, r3, #18
 8003430:	230a      	movs	r3, #10
 8003432:	18fb      	adds	r3, r7, r3
 8003434:	8819      	ldrh	r1, [r3, #0]
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	2300      	movs	r3, #0
 800343a:	9300      	str	r3, [sp, #0]
 800343c:	0023      	movs	r3, r4
 800343e:	f000 fa25 	bl	800388c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003446:	b29b      	uxth	r3, r3
 8003448:	2b00      	cmp	r3, #0
 800344a:	d198      	bne.n	800337e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800344c:	697a      	ldr	r2, [r7, #20]
 800344e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	0018      	movs	r0, r3
 8003454:	f000 f8de 	bl	8003614 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003458:	1e03      	subs	r3, r0, #0
 800345a:	d001      	beq.n	8003460 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e01a      	b.n	8003496 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2220      	movs	r2, #32
 8003466:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	685a      	ldr	r2, [r3, #4]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	490c      	ldr	r1, [pc, #48]	@ (80034a4 <HAL_I2C_Master_Transmit+0x20c>)
 8003474:	400a      	ands	r2, r1
 8003476:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2241      	movs	r2, #65	@ 0x41
 800347c:	2120      	movs	r1, #32
 800347e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2242      	movs	r2, #66	@ 0x42
 8003484:	2100      	movs	r1, #0
 8003486:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2240      	movs	r2, #64	@ 0x40
 800348c:	2100      	movs	r1, #0
 800348e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003490:	2300      	movs	r3, #0
 8003492:	e000      	b.n	8003496 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8003494:	2302      	movs	r3, #2
  }
}
 8003496:	0018      	movs	r0, r3
 8003498:	46bd      	mov	sp, r7
 800349a:	b007      	add	sp, #28
 800349c:	bd90      	pop	{r4, r7, pc}
 800349e:	46c0      	nop			@ (mov r8, r8)
 80034a0:	80002000 	.word	0x80002000
 80034a4:	fe00e800 	.word	0xfe00e800

080034a8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	2202      	movs	r2, #2
 80034b8:	4013      	ands	r3, r2
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d103      	bne.n	80034c6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2200      	movs	r2, #0
 80034c4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	2201      	movs	r2, #1
 80034ce:	4013      	ands	r3, r2
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d007      	beq.n	80034e4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	699a      	ldr	r2, [r3, #24]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2101      	movs	r1, #1
 80034e0:	430a      	orrs	r2, r1
 80034e2:	619a      	str	r2, [r3, #24]
  }
}
 80034e4:	46c0      	nop			@ (mov r8, r8)
 80034e6:	46bd      	mov	sp, r7
 80034e8:	b002      	add	sp, #8
 80034ea:	bd80      	pop	{r7, pc}

080034ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	603b      	str	r3, [r7, #0]
 80034f8:	1dfb      	adds	r3, r7, #7
 80034fa:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034fc:	e030      	b.n	8003560 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	3301      	adds	r3, #1
 8003502:	d02d      	beq.n	8003560 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003504:	f7fe fbda 	bl	8001cbc <HAL_GetTick>
 8003508:	0002      	movs	r2, r0
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	683a      	ldr	r2, [r7, #0]
 8003510:	429a      	cmp	r2, r3
 8003512:	d302      	bcc.n	800351a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d122      	bne.n	8003560 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	68ba      	ldr	r2, [r7, #8]
 8003522:	4013      	ands	r3, r2
 8003524:	68ba      	ldr	r2, [r7, #8]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	425a      	negs	r2, r3
 800352a:	4153      	adcs	r3, r2
 800352c:	b2db      	uxtb	r3, r3
 800352e:	001a      	movs	r2, r3
 8003530:	1dfb      	adds	r3, r7, #7
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	429a      	cmp	r2, r3
 8003536:	d113      	bne.n	8003560 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800353c:	2220      	movs	r2, #32
 800353e:	431a      	orrs	r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2241      	movs	r2, #65	@ 0x41
 8003548:	2120      	movs	r1, #32
 800354a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2242      	movs	r2, #66	@ 0x42
 8003550:	2100      	movs	r1, #0
 8003552:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2240      	movs	r2, #64	@ 0x40
 8003558:	2100      	movs	r1, #0
 800355a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e00f      	b.n	8003580 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	4013      	ands	r3, r2
 800356a:	68ba      	ldr	r2, [r7, #8]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	425a      	negs	r2, r3
 8003570:	4153      	adcs	r3, r2
 8003572:	b2db      	uxtb	r3, r3
 8003574:	001a      	movs	r2, r3
 8003576:	1dfb      	adds	r3, r7, #7
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	429a      	cmp	r2, r3
 800357c:	d0bf      	beq.n	80034fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800357e:	2300      	movs	r3, #0
}
 8003580:	0018      	movs	r0, r3
 8003582:	46bd      	mov	sp, r7
 8003584:	b004      	add	sp, #16
 8003586:	bd80      	pop	{r7, pc}

08003588 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003594:	e032      	b.n	80035fc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	68b9      	ldr	r1, [r7, #8]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	0018      	movs	r0, r3
 800359e:	f000 f87d 	bl	800369c <I2C_IsErrorOccurred>
 80035a2:	1e03      	subs	r3, r0, #0
 80035a4:	d001      	beq.n	80035aa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e030      	b.n	800360c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	3301      	adds	r3, #1
 80035ae:	d025      	beq.n	80035fc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035b0:	f7fe fb84 	bl	8001cbc <HAL_GetTick>
 80035b4:	0002      	movs	r2, r0
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	68ba      	ldr	r2, [r7, #8]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d302      	bcc.n	80035c6 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d11a      	bne.n	80035fc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	2202      	movs	r2, #2
 80035ce:	4013      	ands	r3, r2
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d013      	beq.n	80035fc <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035d8:	2220      	movs	r2, #32
 80035da:	431a      	orrs	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2241      	movs	r2, #65	@ 0x41
 80035e4:	2120      	movs	r1, #32
 80035e6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2242      	movs	r2, #66	@ 0x42
 80035ec:	2100      	movs	r1, #0
 80035ee:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2240      	movs	r2, #64	@ 0x40
 80035f4:	2100      	movs	r1, #0
 80035f6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e007      	b.n	800360c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	2202      	movs	r2, #2
 8003604:	4013      	ands	r3, r2
 8003606:	2b02      	cmp	r3, #2
 8003608:	d1c5      	bne.n	8003596 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	0018      	movs	r0, r3
 800360e:	46bd      	mov	sp, r7
 8003610:	b004      	add	sp, #16
 8003612:	bd80      	pop	{r7, pc}

08003614 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003620:	e02f      	b.n	8003682 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	68b9      	ldr	r1, [r7, #8]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	0018      	movs	r0, r3
 800362a:	f000 f837 	bl	800369c <I2C_IsErrorOccurred>
 800362e:	1e03      	subs	r3, r0, #0
 8003630:	d001      	beq.n	8003636 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e02d      	b.n	8003692 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003636:	f7fe fb41 	bl	8001cbc <HAL_GetTick>
 800363a:	0002      	movs	r2, r0
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	68ba      	ldr	r2, [r7, #8]
 8003642:	429a      	cmp	r2, r3
 8003644:	d302      	bcc.n	800364c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d11a      	bne.n	8003682 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	2220      	movs	r2, #32
 8003654:	4013      	ands	r3, r2
 8003656:	2b20      	cmp	r3, #32
 8003658:	d013      	beq.n	8003682 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800365e:	2220      	movs	r2, #32
 8003660:	431a      	orrs	r2, r3
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2241      	movs	r2, #65	@ 0x41
 800366a:	2120      	movs	r1, #32
 800366c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2242      	movs	r2, #66	@ 0x42
 8003672:	2100      	movs	r1, #0
 8003674:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2240      	movs	r2, #64	@ 0x40
 800367a:	2100      	movs	r1, #0
 800367c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e007      	b.n	8003692 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	2220      	movs	r2, #32
 800368a:	4013      	ands	r3, r2
 800368c:	2b20      	cmp	r3, #32
 800368e:	d1c8      	bne.n	8003622 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	0018      	movs	r0, r3
 8003694:	46bd      	mov	sp, r7
 8003696:	b004      	add	sp, #16
 8003698:	bd80      	pop	{r7, pc}
	...

0800369c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b08a      	sub	sp, #40	@ 0x28
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036a8:	2327      	movs	r3, #39	@ 0x27
 80036aa:	18fb      	adds	r3, r7, r3
 80036ac:	2200      	movs	r2, #0
 80036ae:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80036b8:	2300      	movs	r3, #0
 80036ba:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	2210      	movs	r2, #16
 80036c4:	4013      	ands	r3, r2
 80036c6:	d100      	bne.n	80036ca <I2C_IsErrorOccurred+0x2e>
 80036c8:	e079      	b.n	80037be <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2210      	movs	r2, #16
 80036d0:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80036d2:	e057      	b.n	8003784 <I2C_IsErrorOccurred+0xe8>
 80036d4:	2227      	movs	r2, #39	@ 0x27
 80036d6:	18bb      	adds	r3, r7, r2
 80036d8:	18ba      	adds	r2, r7, r2
 80036da:	7812      	ldrb	r2, [r2, #0]
 80036dc:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	3301      	adds	r3, #1
 80036e2:	d04f      	beq.n	8003784 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80036e4:	f7fe faea 	bl	8001cbc <HAL_GetTick>
 80036e8:	0002      	movs	r2, r0
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	68ba      	ldr	r2, [r7, #8]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d302      	bcc.n	80036fa <I2C_IsErrorOccurred+0x5e>
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d144      	bne.n	8003784 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	685a      	ldr	r2, [r3, #4]
 8003700:	2380      	movs	r3, #128	@ 0x80
 8003702:	01db      	lsls	r3, r3, #7
 8003704:	4013      	ands	r3, r2
 8003706:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003708:	2013      	movs	r0, #19
 800370a:	183b      	adds	r3, r7, r0
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	2142      	movs	r1, #66	@ 0x42
 8003710:	5c52      	ldrb	r2, [r2, r1]
 8003712:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	699a      	ldr	r2, [r3, #24]
 800371a:	2380      	movs	r3, #128	@ 0x80
 800371c:	021b      	lsls	r3, r3, #8
 800371e:	401a      	ands	r2, r3
 8003720:	2380      	movs	r3, #128	@ 0x80
 8003722:	021b      	lsls	r3, r3, #8
 8003724:	429a      	cmp	r2, r3
 8003726:	d126      	bne.n	8003776 <I2C_IsErrorOccurred+0xda>
 8003728:	697a      	ldr	r2, [r7, #20]
 800372a:	2380      	movs	r3, #128	@ 0x80
 800372c:	01db      	lsls	r3, r3, #7
 800372e:	429a      	cmp	r2, r3
 8003730:	d021      	beq.n	8003776 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8003732:	183b      	adds	r3, r7, r0
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	2b20      	cmp	r3, #32
 8003738:	d01d      	beq.n	8003776 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	685a      	ldr	r2, [r3, #4]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2180      	movs	r1, #128	@ 0x80
 8003746:	01c9      	lsls	r1, r1, #7
 8003748:	430a      	orrs	r2, r1
 800374a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800374c:	f7fe fab6 	bl	8001cbc <HAL_GetTick>
 8003750:	0003      	movs	r3, r0
 8003752:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003754:	e00f      	b.n	8003776 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003756:	f7fe fab1 	bl	8001cbc <HAL_GetTick>
 800375a:	0002      	movs	r2, r0
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	2b19      	cmp	r3, #25
 8003762:	d908      	bls.n	8003776 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003764:	6a3b      	ldr	r3, [r7, #32]
 8003766:	2220      	movs	r2, #32
 8003768:	4313      	orrs	r3, r2
 800376a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800376c:	2327      	movs	r3, #39	@ 0x27
 800376e:	18fb      	adds	r3, r7, r3
 8003770:	2201      	movs	r2, #1
 8003772:	701a      	strb	r2, [r3, #0]

              break;
 8003774:	e006      	b.n	8003784 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	2220      	movs	r2, #32
 800377e:	4013      	ands	r3, r2
 8003780:	2b20      	cmp	r3, #32
 8003782:	d1e8      	bne.n	8003756 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	2220      	movs	r2, #32
 800378c:	4013      	ands	r3, r2
 800378e:	2b20      	cmp	r3, #32
 8003790:	d004      	beq.n	800379c <I2C_IsErrorOccurred+0x100>
 8003792:	2327      	movs	r3, #39	@ 0x27
 8003794:	18fb      	adds	r3, r7, r3
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d09b      	beq.n	80036d4 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800379c:	2327      	movs	r3, #39	@ 0x27
 800379e:	18fb      	adds	r3, r7, r3
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d103      	bne.n	80037ae <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2220      	movs	r2, #32
 80037ac:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80037ae:	6a3b      	ldr	r3, [r7, #32]
 80037b0:	2204      	movs	r2, #4
 80037b2:	4313      	orrs	r3, r2
 80037b4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80037b6:	2327      	movs	r3, #39	@ 0x27
 80037b8:	18fb      	adds	r3, r7, r3
 80037ba:	2201      	movs	r2, #1
 80037bc:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	2380      	movs	r3, #128	@ 0x80
 80037ca:	005b      	lsls	r3, r3, #1
 80037cc:	4013      	ands	r3, r2
 80037ce:	d00c      	beq.n	80037ea <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80037d0:	6a3b      	ldr	r3, [r7, #32]
 80037d2:	2201      	movs	r2, #1
 80037d4:	4313      	orrs	r3, r2
 80037d6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2280      	movs	r2, #128	@ 0x80
 80037de:	0052      	lsls	r2, r2, #1
 80037e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037e2:	2327      	movs	r3, #39	@ 0x27
 80037e4:	18fb      	adds	r3, r7, r3
 80037e6:	2201      	movs	r2, #1
 80037e8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80037ea:	69ba      	ldr	r2, [r7, #24]
 80037ec:	2380      	movs	r3, #128	@ 0x80
 80037ee:	00db      	lsls	r3, r3, #3
 80037f0:	4013      	ands	r3, r2
 80037f2:	d00c      	beq.n	800380e <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80037f4:	6a3b      	ldr	r3, [r7, #32]
 80037f6:	2208      	movs	r2, #8
 80037f8:	4313      	orrs	r3, r2
 80037fa:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2280      	movs	r2, #128	@ 0x80
 8003802:	00d2      	lsls	r2, r2, #3
 8003804:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003806:	2327      	movs	r3, #39	@ 0x27
 8003808:	18fb      	adds	r3, r7, r3
 800380a:	2201      	movs	r2, #1
 800380c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800380e:	69ba      	ldr	r2, [r7, #24]
 8003810:	2380      	movs	r3, #128	@ 0x80
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	4013      	ands	r3, r2
 8003816:	d00c      	beq.n	8003832 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003818:	6a3b      	ldr	r3, [r7, #32]
 800381a:	2202      	movs	r2, #2
 800381c:	4313      	orrs	r3, r2
 800381e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2280      	movs	r2, #128	@ 0x80
 8003826:	0092      	lsls	r2, r2, #2
 8003828:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800382a:	2327      	movs	r3, #39	@ 0x27
 800382c:	18fb      	adds	r3, r7, r3
 800382e:	2201      	movs	r2, #1
 8003830:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8003832:	2327      	movs	r3, #39	@ 0x27
 8003834:	18fb      	adds	r3, r7, r3
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d01d      	beq.n	8003878 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	0018      	movs	r0, r3
 8003840:	f7ff fe32 	bl	80034a8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	685a      	ldr	r2, [r3, #4]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	490e      	ldr	r1, [pc, #56]	@ (8003888 <I2C_IsErrorOccurred+0x1ec>)
 8003850:	400a      	ands	r2, r1
 8003852:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003858:	6a3b      	ldr	r3, [r7, #32]
 800385a:	431a      	orrs	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2241      	movs	r2, #65	@ 0x41
 8003864:	2120      	movs	r1, #32
 8003866:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2242      	movs	r2, #66	@ 0x42
 800386c:	2100      	movs	r1, #0
 800386e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2240      	movs	r2, #64	@ 0x40
 8003874:	2100      	movs	r1, #0
 8003876:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003878:	2327      	movs	r3, #39	@ 0x27
 800387a:	18fb      	adds	r3, r7, r3
 800387c:	781b      	ldrb	r3, [r3, #0]
}
 800387e:	0018      	movs	r0, r3
 8003880:	46bd      	mov	sp, r7
 8003882:	b00a      	add	sp, #40	@ 0x28
 8003884:	bd80      	pop	{r7, pc}
 8003886:	46c0      	nop			@ (mov r8, r8)
 8003888:	fe00e800 	.word	0xfe00e800

0800388c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800388c:	b590      	push	{r4, r7, lr}
 800388e:	b087      	sub	sp, #28
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	0008      	movs	r0, r1
 8003896:	0011      	movs	r1, r2
 8003898:	607b      	str	r3, [r7, #4]
 800389a:	240a      	movs	r4, #10
 800389c:	193b      	adds	r3, r7, r4
 800389e:	1c02      	adds	r2, r0, #0
 80038a0:	801a      	strh	r2, [r3, #0]
 80038a2:	2009      	movs	r0, #9
 80038a4:	183b      	adds	r3, r7, r0
 80038a6:	1c0a      	adds	r2, r1, #0
 80038a8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038aa:	193b      	adds	r3, r7, r4
 80038ac:	881b      	ldrh	r3, [r3, #0]
 80038ae:	059b      	lsls	r3, r3, #22
 80038b0:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038b2:	183b      	adds	r3, r7, r0
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	0419      	lsls	r1, r3, #16
 80038b8:	23ff      	movs	r3, #255	@ 0xff
 80038ba:	041b      	lsls	r3, r3, #16
 80038bc:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038be:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038c6:	4313      	orrs	r3, r2
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	085b      	lsrs	r3, r3, #1
 80038cc:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80038d6:	0d51      	lsrs	r1, r2, #21
 80038d8:	2280      	movs	r2, #128	@ 0x80
 80038da:	00d2      	lsls	r2, r2, #3
 80038dc:	400a      	ands	r2, r1
 80038de:	4907      	ldr	r1, [pc, #28]	@ (80038fc <I2C_TransferConfig+0x70>)
 80038e0:	430a      	orrs	r2, r1
 80038e2:	43d2      	mvns	r2, r2
 80038e4:	401a      	ands	r2, r3
 80038e6:	0011      	movs	r1, r2
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	430a      	orrs	r2, r1
 80038f0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80038f2:	46c0      	nop			@ (mov r8, r8)
 80038f4:	46bd      	mov	sp, r7
 80038f6:	b007      	add	sp, #28
 80038f8:	bd90      	pop	{r4, r7, pc}
 80038fa:	46c0      	nop			@ (mov r8, r8)
 80038fc:	03ff63ff 	.word	0x03ff63ff

08003900 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2241      	movs	r2, #65	@ 0x41
 800390e:	5c9b      	ldrb	r3, [r3, r2]
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b20      	cmp	r3, #32
 8003914:	d138      	bne.n	8003988 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2240      	movs	r2, #64	@ 0x40
 800391a:	5c9b      	ldrb	r3, [r3, r2]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d101      	bne.n	8003924 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003920:	2302      	movs	r3, #2
 8003922:	e032      	b.n	800398a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2240      	movs	r2, #64	@ 0x40
 8003928:	2101      	movs	r1, #1
 800392a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2241      	movs	r2, #65	@ 0x41
 8003930:	2124      	movs	r1, #36	@ 0x24
 8003932:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2101      	movs	r1, #1
 8003940:	438a      	bics	r2, r1
 8003942:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4911      	ldr	r1, [pc, #68]	@ (8003994 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003950:	400a      	ands	r2, r1
 8003952:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6819      	ldr	r1, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	683a      	ldr	r2, [r7, #0]
 8003960:	430a      	orrs	r2, r1
 8003962:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2101      	movs	r1, #1
 8003970:	430a      	orrs	r2, r1
 8003972:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2241      	movs	r2, #65	@ 0x41
 8003978:	2120      	movs	r1, #32
 800397a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2240      	movs	r2, #64	@ 0x40
 8003980:	2100      	movs	r1, #0
 8003982:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003984:	2300      	movs	r3, #0
 8003986:	e000      	b.n	800398a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003988:	2302      	movs	r3, #2
  }
}
 800398a:	0018      	movs	r0, r3
 800398c:	46bd      	mov	sp, r7
 800398e:	b002      	add	sp, #8
 8003990:	bd80      	pop	{r7, pc}
 8003992:	46c0      	nop			@ (mov r8, r8)
 8003994:	ffffefff 	.word	0xffffefff

08003998 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2241      	movs	r2, #65	@ 0x41
 80039a6:	5c9b      	ldrb	r3, [r3, r2]
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b20      	cmp	r3, #32
 80039ac:	d139      	bne.n	8003a22 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2240      	movs	r2, #64	@ 0x40
 80039b2:	5c9b      	ldrb	r3, [r3, r2]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d101      	bne.n	80039bc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80039b8:	2302      	movs	r3, #2
 80039ba:	e033      	b.n	8003a24 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2240      	movs	r2, #64	@ 0x40
 80039c0:	2101      	movs	r1, #1
 80039c2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2241      	movs	r2, #65	@ 0x41
 80039c8:	2124      	movs	r1, #36	@ 0x24
 80039ca:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2101      	movs	r1, #1
 80039d8:	438a      	bics	r2, r1
 80039da:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	4a11      	ldr	r2, [pc, #68]	@ (8003a2c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80039e8:	4013      	ands	r3, r2
 80039ea:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	021b      	lsls	r3, r3, #8
 80039f0:	68fa      	ldr	r2, [r7, #12]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2101      	movs	r1, #1
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2241      	movs	r2, #65	@ 0x41
 8003a12:	2120      	movs	r1, #32
 8003a14:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2240      	movs	r2, #64	@ 0x40
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	e000      	b.n	8003a24 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a22:	2302      	movs	r3, #2
  }
}
 8003a24:	0018      	movs	r0, r3
 8003a26:	46bd      	mov	sp, r7
 8003a28:	b004      	add	sp, #16
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	fffff0ff 	.word	0xfffff0ff

08003a30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a30:	b5b0      	push	{r4, r5, r7, lr}
 8003a32:	b08a      	sub	sp, #40	@ 0x28
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d102      	bne.n	8003a44 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	f000 fbaf 	bl	80041a2 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a44:	4bcf      	ldr	r3, [pc, #828]	@ (8003d84 <HAL_RCC_OscConfig+0x354>)
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	220c      	movs	r2, #12
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a4e:	4bcd      	ldr	r3, [pc, #820]	@ (8003d84 <HAL_RCC_OscConfig+0x354>)
 8003a50:	68da      	ldr	r2, [r3, #12]
 8003a52:	2380      	movs	r3, #128	@ 0x80
 8003a54:	025b      	lsls	r3, r3, #9
 8003a56:	4013      	ands	r3, r2
 8003a58:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	4013      	ands	r3, r2
 8003a62:	d100      	bne.n	8003a66 <HAL_RCC_OscConfig+0x36>
 8003a64:	e07e      	b.n	8003b64 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a66:	6a3b      	ldr	r3, [r7, #32]
 8003a68:	2b08      	cmp	r3, #8
 8003a6a:	d007      	beq.n	8003a7c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a6c:	6a3b      	ldr	r3, [r7, #32]
 8003a6e:	2b0c      	cmp	r3, #12
 8003a70:	d112      	bne.n	8003a98 <HAL_RCC_OscConfig+0x68>
 8003a72:	69fa      	ldr	r2, [r7, #28]
 8003a74:	2380      	movs	r3, #128	@ 0x80
 8003a76:	025b      	lsls	r3, r3, #9
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d10d      	bne.n	8003a98 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a7c:	4bc1      	ldr	r3, [pc, #772]	@ (8003d84 <HAL_RCC_OscConfig+0x354>)
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	2380      	movs	r3, #128	@ 0x80
 8003a82:	029b      	lsls	r3, r3, #10
 8003a84:	4013      	ands	r3, r2
 8003a86:	d100      	bne.n	8003a8a <HAL_RCC_OscConfig+0x5a>
 8003a88:	e06b      	b.n	8003b62 <HAL_RCC_OscConfig+0x132>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d167      	bne.n	8003b62 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	f000 fb85 	bl	80041a2 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685a      	ldr	r2, [r3, #4]
 8003a9c:	2380      	movs	r3, #128	@ 0x80
 8003a9e:	025b      	lsls	r3, r3, #9
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d107      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x84>
 8003aa4:	4bb7      	ldr	r3, [pc, #732]	@ (8003d84 <HAL_RCC_OscConfig+0x354>)
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	4bb6      	ldr	r3, [pc, #728]	@ (8003d84 <HAL_RCC_OscConfig+0x354>)
 8003aaa:	2180      	movs	r1, #128	@ 0x80
 8003aac:	0249      	lsls	r1, r1, #9
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	601a      	str	r2, [r3, #0]
 8003ab2:	e027      	b.n	8003b04 <HAL_RCC_OscConfig+0xd4>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685a      	ldr	r2, [r3, #4]
 8003ab8:	23a0      	movs	r3, #160	@ 0xa0
 8003aba:	02db      	lsls	r3, r3, #11
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d10e      	bne.n	8003ade <HAL_RCC_OscConfig+0xae>
 8003ac0:	4bb0      	ldr	r3, [pc, #704]	@ (8003d84 <HAL_RCC_OscConfig+0x354>)
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	4baf      	ldr	r3, [pc, #700]	@ (8003d84 <HAL_RCC_OscConfig+0x354>)
 8003ac6:	2180      	movs	r1, #128	@ 0x80
 8003ac8:	02c9      	lsls	r1, r1, #11
 8003aca:	430a      	orrs	r2, r1
 8003acc:	601a      	str	r2, [r3, #0]
 8003ace:	4bad      	ldr	r3, [pc, #692]	@ (8003d84 <HAL_RCC_OscConfig+0x354>)
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	4bac      	ldr	r3, [pc, #688]	@ (8003d84 <HAL_RCC_OscConfig+0x354>)
 8003ad4:	2180      	movs	r1, #128	@ 0x80
 8003ad6:	0249      	lsls	r1, r1, #9
 8003ad8:	430a      	orrs	r2, r1
 8003ada:	601a      	str	r2, [r3, #0]
 8003adc:	e012      	b.n	8003b04 <HAL_RCC_OscConfig+0xd4>
 8003ade:	4ba9      	ldr	r3, [pc, #676]	@ (8003d84 <HAL_RCC_OscConfig+0x354>)
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	4ba8      	ldr	r3, [pc, #672]	@ (8003d84 <HAL_RCC_OscConfig+0x354>)
 8003ae4:	49a8      	ldr	r1, [pc, #672]	@ (8003d88 <HAL_RCC_OscConfig+0x358>)
 8003ae6:	400a      	ands	r2, r1
 8003ae8:	601a      	str	r2, [r3, #0]
 8003aea:	4ba6      	ldr	r3, [pc, #664]	@ (8003d84 <HAL_RCC_OscConfig+0x354>)
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	2380      	movs	r3, #128	@ 0x80
 8003af0:	025b      	lsls	r3, r3, #9
 8003af2:	4013      	ands	r3, r2
 8003af4:	60fb      	str	r3, [r7, #12]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	4ba2      	ldr	r3, [pc, #648]	@ (8003d84 <HAL_RCC_OscConfig+0x354>)
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	4ba1      	ldr	r3, [pc, #644]	@ (8003d84 <HAL_RCC_OscConfig+0x354>)
 8003afe:	49a3      	ldr	r1, [pc, #652]	@ (8003d8c <HAL_RCC_OscConfig+0x35c>)
 8003b00:	400a      	ands	r2, r1
 8003b02:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d015      	beq.n	8003b38 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b0c:	f7fe f8d6 	bl	8001cbc <HAL_GetTick>
 8003b10:	0003      	movs	r3, r0
 8003b12:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b14:	e009      	b.n	8003b2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b16:	f7fe f8d1 	bl	8001cbc <HAL_GetTick>
 8003b1a:	0002      	movs	r2, r0
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	2b64      	cmp	r3, #100	@ 0x64
 8003b22:	d902      	bls.n	8003b2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	f000 fb3c 	bl	80041a2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b2a:	4b96      	ldr	r3, [pc, #600]	@ (8003d84 <HAL_RCC_OscConfig+0x354>)
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	2380      	movs	r3, #128	@ 0x80
 8003b30:	029b      	lsls	r3, r3, #10
 8003b32:	4013      	ands	r3, r2
 8003b34:	d0ef      	beq.n	8003b16 <HAL_RCC_OscConfig+0xe6>
 8003b36:	e015      	b.n	8003b64 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b38:	f7fe f8c0 	bl	8001cbc <HAL_GetTick>
 8003b3c:	0003      	movs	r3, r0
 8003b3e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b40:	e008      	b.n	8003b54 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b42:	f7fe f8bb 	bl	8001cbc <HAL_GetTick>
 8003b46:	0002      	movs	r2, r0
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	2b64      	cmp	r3, #100	@ 0x64
 8003b4e:	d901      	bls.n	8003b54 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e326      	b.n	80041a2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b54:	4b8b      	ldr	r3, [pc, #556]	@ (8003d84 <HAL_RCC_OscConfig+0x354>)
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	2380      	movs	r3, #128	@ 0x80
 8003b5a:	029b      	lsls	r3, r3, #10
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	d1f0      	bne.n	8003b42 <HAL_RCC_OscConfig+0x112>
 8003b60:	e000      	b.n	8003b64 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b62:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2202      	movs	r2, #2
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	d100      	bne.n	8003b70 <HAL_RCC_OscConfig+0x140>
 8003b6e:	e08b      	b.n	8003c88 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b76:	6a3b      	ldr	r3, [r7, #32]
 8003b78:	2b04      	cmp	r3, #4
 8003b7a:	d005      	beq.n	8003b88 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b7c:	6a3b      	ldr	r3, [r7, #32]
 8003b7e:	2b0c      	cmp	r3, #12
 8003b80:	d13e      	bne.n	8003c00 <HAL_RCC_OscConfig+0x1d0>
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d13b      	bne.n	8003c00 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003b88:	4b7e      	ldr	r3, [pc, #504]	@ (8003d84 <HAL_RCC_OscConfig+0x354>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2204      	movs	r2, #4
 8003b8e:	4013      	ands	r3, r2
 8003b90:	d004      	beq.n	8003b9c <HAL_RCC_OscConfig+0x16c>
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d101      	bne.n	8003b9c <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e302      	b.n	80041a2 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b9c:	4b79      	ldr	r3, [pc, #484]	@ (8003d84 <HAL_RCC_OscConfig+0x354>)
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	4a7b      	ldr	r2, [pc, #492]	@ (8003d90 <HAL_RCC_OscConfig+0x360>)
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	0019      	movs	r1, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	021a      	lsls	r2, r3, #8
 8003bac:	4b75      	ldr	r3, [pc, #468]	@ (8003d84 <HAL_RCC_OscConfig+0x354>)
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003bb2:	4b74      	ldr	r3, [pc, #464]	@ (8003d84 <HAL_RCC_OscConfig+0x354>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2209      	movs	r2, #9
 8003bb8:	4393      	bics	r3, r2
 8003bba:	0019      	movs	r1, r3
 8003bbc:	4b71      	ldr	r3, [pc, #452]	@ (8003d84 <HAL_RCC_OscConfig+0x354>)
 8003bbe:	697a      	ldr	r2, [r7, #20]
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bc4:	f000 fc40 	bl	8004448 <HAL_RCC_GetSysClockFreq>
 8003bc8:	0001      	movs	r1, r0
 8003bca:	4b6e      	ldr	r3, [pc, #440]	@ (8003d84 <HAL_RCC_OscConfig+0x354>)
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	091b      	lsrs	r3, r3, #4
 8003bd0:	220f      	movs	r2, #15
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	4a6f      	ldr	r2, [pc, #444]	@ (8003d94 <HAL_RCC_OscConfig+0x364>)
 8003bd6:	5cd3      	ldrb	r3, [r2, r3]
 8003bd8:	000a      	movs	r2, r1
 8003bda:	40da      	lsrs	r2, r3
 8003bdc:	4b6e      	ldr	r3, [pc, #440]	@ (8003d98 <HAL_RCC_OscConfig+0x368>)
 8003bde:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8003be0:	4b6e      	ldr	r3, [pc, #440]	@ (8003d9c <HAL_RCC_OscConfig+0x36c>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2513      	movs	r5, #19
 8003be6:	197c      	adds	r4, r7, r5
 8003be8:	0018      	movs	r0, r3
 8003bea:	f7fe f821 	bl	8001c30 <HAL_InitTick>
 8003bee:	0003      	movs	r3, r0
 8003bf0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8003bf2:	197b      	adds	r3, r7, r5
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d046      	beq.n	8003c88 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8003bfa:	197b      	adds	r3, r7, r5
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	e2d0      	b.n	80041a2 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d027      	beq.n	8003c56 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003c06:	4b5f      	ldr	r3, [pc, #380]	@ (8003d84 <HAL_RCC_OscConfig+0x354>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2209      	movs	r2, #9
 8003c0c:	4393      	bics	r3, r2
 8003c0e:	0019      	movs	r1, r3
 8003c10:	4b5c      	ldr	r3, [pc, #368]	@ (8003d84 <HAL_RCC_OscConfig+0x354>)
 8003c12:	697a      	ldr	r2, [r7, #20]
 8003c14:	430a      	orrs	r2, r1
 8003c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c18:	f7fe f850 	bl	8001cbc <HAL_GetTick>
 8003c1c:	0003      	movs	r3, r0
 8003c1e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c20:	e008      	b.n	8003c34 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c22:	f7fe f84b 	bl	8001cbc <HAL_GetTick>
 8003c26:	0002      	movs	r2, r0
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d901      	bls.n	8003c34 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e2b6      	b.n	80041a2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c34:	4b53      	ldr	r3, [pc, #332]	@ (8003d84 <HAL_RCC_OscConfig+0x354>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2204      	movs	r2, #4
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	d0f1      	beq.n	8003c22 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c3e:	4b51      	ldr	r3, [pc, #324]	@ (8003d84 <HAL_RCC_OscConfig+0x354>)
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	4a53      	ldr	r2, [pc, #332]	@ (8003d90 <HAL_RCC_OscConfig+0x360>)
 8003c44:	4013      	ands	r3, r2
 8003c46:	0019      	movs	r1, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	021a      	lsls	r2, r3, #8
 8003c4e:	4b4d      	ldr	r3, [pc, #308]	@ (8003d84 <HAL_RCC_OscConfig+0x354>)
 8003c50:	430a      	orrs	r2, r1
 8003c52:	605a      	str	r2, [r3, #4]
 8003c54:	e018      	b.n	8003c88 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c56:	4b4b      	ldr	r3, [pc, #300]	@ (8003d84 <HAL_RCC_OscConfig+0x354>)
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	4b4a      	ldr	r3, [pc, #296]	@ (8003d84 <HAL_RCC_OscConfig+0x354>)
 8003c5c:	2101      	movs	r1, #1
 8003c5e:	438a      	bics	r2, r1
 8003c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c62:	f7fe f82b 	bl	8001cbc <HAL_GetTick>
 8003c66:	0003      	movs	r3, r0
 8003c68:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003c6a:	e008      	b.n	8003c7e <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c6c:	f7fe f826 	bl	8001cbc <HAL_GetTick>
 8003c70:	0002      	movs	r2, r0
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e291      	b.n	80041a2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003c7e:	4b41      	ldr	r3, [pc, #260]	@ (8003d84 <HAL_RCC_OscConfig+0x354>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2204      	movs	r2, #4
 8003c84:	4013      	ands	r3, r2
 8003c86:	d1f1      	bne.n	8003c6c <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2210      	movs	r2, #16
 8003c8e:	4013      	ands	r3, r2
 8003c90:	d100      	bne.n	8003c94 <HAL_RCC_OscConfig+0x264>
 8003c92:	e0a1      	b.n	8003dd8 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c94:	6a3b      	ldr	r3, [r7, #32]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d140      	bne.n	8003d1c <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c9a:	4b3a      	ldr	r3, [pc, #232]	@ (8003d84 <HAL_RCC_OscConfig+0x354>)
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	2380      	movs	r3, #128	@ 0x80
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	d005      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x282>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	69db      	ldr	r3, [r3, #28]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d101      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e277      	b.n	80041a2 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cb2:	4b34      	ldr	r3, [pc, #208]	@ (8003d84 <HAL_RCC_OscConfig+0x354>)
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	4a3a      	ldr	r2, [pc, #232]	@ (8003da0 <HAL_RCC_OscConfig+0x370>)
 8003cb8:	4013      	ands	r3, r2
 8003cba:	0019      	movs	r1, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003cc0:	4b30      	ldr	r3, [pc, #192]	@ (8003d84 <HAL_RCC_OscConfig+0x354>)
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cc6:	4b2f      	ldr	r3, [pc, #188]	@ (8003d84 <HAL_RCC_OscConfig+0x354>)
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	021b      	lsls	r3, r3, #8
 8003ccc:	0a19      	lsrs	r1, r3, #8
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	061a      	lsls	r2, r3, #24
 8003cd4:	4b2b      	ldr	r3, [pc, #172]	@ (8003d84 <HAL_RCC_OscConfig+0x354>)
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cde:	0b5b      	lsrs	r3, r3, #13
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	2280      	movs	r2, #128	@ 0x80
 8003ce4:	0212      	lsls	r2, r2, #8
 8003ce6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003ce8:	4b26      	ldr	r3, [pc, #152]	@ (8003d84 <HAL_RCC_OscConfig+0x354>)
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	091b      	lsrs	r3, r3, #4
 8003cee:	210f      	movs	r1, #15
 8003cf0:	400b      	ands	r3, r1
 8003cf2:	4928      	ldr	r1, [pc, #160]	@ (8003d94 <HAL_RCC_OscConfig+0x364>)
 8003cf4:	5ccb      	ldrb	r3, [r1, r3]
 8003cf6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003cf8:	4b27      	ldr	r3, [pc, #156]	@ (8003d98 <HAL_RCC_OscConfig+0x368>)
 8003cfa:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8003cfc:	4b27      	ldr	r3, [pc, #156]	@ (8003d9c <HAL_RCC_OscConfig+0x36c>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2513      	movs	r5, #19
 8003d02:	197c      	adds	r4, r7, r5
 8003d04:	0018      	movs	r0, r3
 8003d06:	f7fd ff93 	bl	8001c30 <HAL_InitTick>
 8003d0a:	0003      	movs	r3, r0
 8003d0c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8003d0e:	197b      	adds	r3, r7, r5
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d060      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8003d16:	197b      	adds	r3, r7, r5
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	e242      	b.n	80041a2 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	69db      	ldr	r3, [r3, #28]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d03f      	beq.n	8003da4 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003d24:	4b17      	ldr	r3, [pc, #92]	@ (8003d84 <HAL_RCC_OscConfig+0x354>)
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	4b16      	ldr	r3, [pc, #88]	@ (8003d84 <HAL_RCC_OscConfig+0x354>)
 8003d2a:	2180      	movs	r1, #128	@ 0x80
 8003d2c:	0049      	lsls	r1, r1, #1
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d32:	f7fd ffc3 	bl	8001cbc <HAL_GetTick>
 8003d36:	0003      	movs	r3, r0
 8003d38:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003d3a:	e008      	b.n	8003d4e <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d3c:	f7fd ffbe 	bl	8001cbc <HAL_GetTick>
 8003d40:	0002      	movs	r2, r0
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e229      	b.n	80041a2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8003d84 <HAL_RCC_OscConfig+0x354>)
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	2380      	movs	r3, #128	@ 0x80
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	4013      	ands	r3, r2
 8003d58:	d0f0      	beq.n	8003d3c <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d5a:	4b0a      	ldr	r3, [pc, #40]	@ (8003d84 <HAL_RCC_OscConfig+0x354>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	4a10      	ldr	r2, [pc, #64]	@ (8003da0 <HAL_RCC_OscConfig+0x370>)
 8003d60:	4013      	ands	r3, r2
 8003d62:	0019      	movs	r1, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d68:	4b06      	ldr	r3, [pc, #24]	@ (8003d84 <HAL_RCC_OscConfig+0x354>)
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d6e:	4b05      	ldr	r3, [pc, #20]	@ (8003d84 <HAL_RCC_OscConfig+0x354>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	021b      	lsls	r3, r3, #8
 8003d74:	0a19      	lsrs	r1, r3, #8
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	061a      	lsls	r2, r3, #24
 8003d7c:	4b01      	ldr	r3, [pc, #4]	@ (8003d84 <HAL_RCC_OscConfig+0x354>)
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	605a      	str	r2, [r3, #4]
 8003d82:	e029      	b.n	8003dd8 <HAL_RCC_OscConfig+0x3a8>
 8003d84:	40021000 	.word	0x40021000
 8003d88:	fffeffff 	.word	0xfffeffff
 8003d8c:	fffbffff 	.word	0xfffbffff
 8003d90:	ffffe0ff 	.word	0xffffe0ff
 8003d94:	08006e1c 	.word	0x08006e1c
 8003d98:	20000008 	.word	0x20000008
 8003d9c:	2000000c 	.word	0x2000000c
 8003da0:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003da4:	4bbd      	ldr	r3, [pc, #756]	@ (800409c <HAL_RCC_OscConfig+0x66c>)
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	4bbc      	ldr	r3, [pc, #752]	@ (800409c <HAL_RCC_OscConfig+0x66c>)
 8003daa:	49bd      	ldr	r1, [pc, #756]	@ (80040a0 <HAL_RCC_OscConfig+0x670>)
 8003dac:	400a      	ands	r2, r1
 8003dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db0:	f7fd ff84 	bl	8001cbc <HAL_GetTick>
 8003db4:	0003      	movs	r3, r0
 8003db6:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003db8:	e008      	b.n	8003dcc <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003dba:	f7fd ff7f 	bl	8001cbc <HAL_GetTick>
 8003dbe:	0002      	movs	r2, r0
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d901      	bls.n	8003dcc <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e1ea      	b.n	80041a2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003dcc:	4bb3      	ldr	r3, [pc, #716]	@ (800409c <HAL_RCC_OscConfig+0x66c>)
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	2380      	movs	r3, #128	@ 0x80
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	d1f0      	bne.n	8003dba <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2208      	movs	r2, #8
 8003dde:	4013      	ands	r3, r2
 8003de0:	d036      	beq.n	8003e50 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d019      	beq.n	8003e1e <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dea:	4bac      	ldr	r3, [pc, #688]	@ (800409c <HAL_RCC_OscConfig+0x66c>)
 8003dec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003dee:	4bab      	ldr	r3, [pc, #684]	@ (800409c <HAL_RCC_OscConfig+0x66c>)
 8003df0:	2101      	movs	r1, #1
 8003df2:	430a      	orrs	r2, r1
 8003df4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003df6:	f7fd ff61 	bl	8001cbc <HAL_GetTick>
 8003dfa:	0003      	movs	r3, r0
 8003dfc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003dfe:	e008      	b.n	8003e12 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e00:	f7fd ff5c 	bl	8001cbc <HAL_GetTick>
 8003e04:	0002      	movs	r2, r0
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e1c7      	b.n	80041a2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003e12:	4ba2      	ldr	r3, [pc, #648]	@ (800409c <HAL_RCC_OscConfig+0x66c>)
 8003e14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e16:	2202      	movs	r2, #2
 8003e18:	4013      	ands	r3, r2
 8003e1a:	d0f1      	beq.n	8003e00 <HAL_RCC_OscConfig+0x3d0>
 8003e1c:	e018      	b.n	8003e50 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e1e:	4b9f      	ldr	r3, [pc, #636]	@ (800409c <HAL_RCC_OscConfig+0x66c>)
 8003e20:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003e22:	4b9e      	ldr	r3, [pc, #632]	@ (800409c <HAL_RCC_OscConfig+0x66c>)
 8003e24:	2101      	movs	r1, #1
 8003e26:	438a      	bics	r2, r1
 8003e28:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e2a:	f7fd ff47 	bl	8001cbc <HAL_GetTick>
 8003e2e:	0003      	movs	r3, r0
 8003e30:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003e32:	e008      	b.n	8003e46 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e34:	f7fd ff42 	bl	8001cbc <HAL_GetTick>
 8003e38:	0002      	movs	r2, r0
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e1ad      	b.n	80041a2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003e46:	4b95      	ldr	r3, [pc, #596]	@ (800409c <HAL_RCC_OscConfig+0x66c>)
 8003e48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e4a:	2202      	movs	r2, #2
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	d1f1      	bne.n	8003e34 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2204      	movs	r2, #4
 8003e56:	4013      	ands	r3, r2
 8003e58:	d100      	bne.n	8003e5c <HAL_RCC_OscConfig+0x42c>
 8003e5a:	e0ae      	b.n	8003fba <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e5c:	2027      	movs	r0, #39	@ 0x27
 8003e5e:	183b      	adds	r3, r7, r0
 8003e60:	2200      	movs	r2, #0
 8003e62:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e64:	4b8d      	ldr	r3, [pc, #564]	@ (800409c <HAL_RCC_OscConfig+0x66c>)
 8003e66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e68:	2380      	movs	r3, #128	@ 0x80
 8003e6a:	055b      	lsls	r3, r3, #21
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	d109      	bne.n	8003e84 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e70:	4b8a      	ldr	r3, [pc, #552]	@ (800409c <HAL_RCC_OscConfig+0x66c>)
 8003e72:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e74:	4b89      	ldr	r3, [pc, #548]	@ (800409c <HAL_RCC_OscConfig+0x66c>)
 8003e76:	2180      	movs	r1, #128	@ 0x80
 8003e78:	0549      	lsls	r1, r1, #21
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8003e7e:	183b      	adds	r3, r7, r0
 8003e80:	2201      	movs	r2, #1
 8003e82:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e84:	4b87      	ldr	r3, [pc, #540]	@ (80040a4 <HAL_RCC_OscConfig+0x674>)
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	2380      	movs	r3, #128	@ 0x80
 8003e8a:	005b      	lsls	r3, r3, #1
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	d11a      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e90:	4b84      	ldr	r3, [pc, #528]	@ (80040a4 <HAL_RCC_OscConfig+0x674>)
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	4b83      	ldr	r3, [pc, #524]	@ (80040a4 <HAL_RCC_OscConfig+0x674>)
 8003e96:	2180      	movs	r1, #128	@ 0x80
 8003e98:	0049      	lsls	r1, r1, #1
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e9e:	f7fd ff0d 	bl	8001cbc <HAL_GetTick>
 8003ea2:	0003      	movs	r3, r0
 8003ea4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ea6:	e008      	b.n	8003eba <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ea8:	f7fd ff08 	bl	8001cbc <HAL_GetTick>
 8003eac:	0002      	movs	r2, r0
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b64      	cmp	r3, #100	@ 0x64
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e173      	b.n	80041a2 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eba:	4b7a      	ldr	r3, [pc, #488]	@ (80040a4 <HAL_RCC_OscConfig+0x674>)
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	2380      	movs	r3, #128	@ 0x80
 8003ec0:	005b      	lsls	r3, r3, #1
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	d0f0      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	689a      	ldr	r2, [r3, #8]
 8003eca:	2380      	movs	r3, #128	@ 0x80
 8003ecc:	005b      	lsls	r3, r3, #1
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d107      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x4b2>
 8003ed2:	4b72      	ldr	r3, [pc, #456]	@ (800409c <HAL_RCC_OscConfig+0x66c>)
 8003ed4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003ed6:	4b71      	ldr	r3, [pc, #452]	@ (800409c <HAL_RCC_OscConfig+0x66c>)
 8003ed8:	2180      	movs	r1, #128	@ 0x80
 8003eda:	0049      	lsls	r1, r1, #1
 8003edc:	430a      	orrs	r2, r1
 8003ede:	651a      	str	r2, [r3, #80]	@ 0x50
 8003ee0:	e031      	b.n	8003f46 <HAL_RCC_OscConfig+0x516>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d10c      	bne.n	8003f04 <HAL_RCC_OscConfig+0x4d4>
 8003eea:	4b6c      	ldr	r3, [pc, #432]	@ (800409c <HAL_RCC_OscConfig+0x66c>)
 8003eec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003eee:	4b6b      	ldr	r3, [pc, #428]	@ (800409c <HAL_RCC_OscConfig+0x66c>)
 8003ef0:	496b      	ldr	r1, [pc, #428]	@ (80040a0 <HAL_RCC_OscConfig+0x670>)
 8003ef2:	400a      	ands	r2, r1
 8003ef4:	651a      	str	r2, [r3, #80]	@ 0x50
 8003ef6:	4b69      	ldr	r3, [pc, #420]	@ (800409c <HAL_RCC_OscConfig+0x66c>)
 8003ef8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003efa:	4b68      	ldr	r3, [pc, #416]	@ (800409c <HAL_RCC_OscConfig+0x66c>)
 8003efc:	496a      	ldr	r1, [pc, #424]	@ (80040a8 <HAL_RCC_OscConfig+0x678>)
 8003efe:	400a      	ands	r2, r1
 8003f00:	651a      	str	r2, [r3, #80]	@ 0x50
 8003f02:	e020      	b.n	8003f46 <HAL_RCC_OscConfig+0x516>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689a      	ldr	r2, [r3, #8]
 8003f08:	23a0      	movs	r3, #160	@ 0xa0
 8003f0a:	00db      	lsls	r3, r3, #3
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d10e      	bne.n	8003f2e <HAL_RCC_OscConfig+0x4fe>
 8003f10:	4b62      	ldr	r3, [pc, #392]	@ (800409c <HAL_RCC_OscConfig+0x66c>)
 8003f12:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003f14:	4b61      	ldr	r3, [pc, #388]	@ (800409c <HAL_RCC_OscConfig+0x66c>)
 8003f16:	2180      	movs	r1, #128	@ 0x80
 8003f18:	00c9      	lsls	r1, r1, #3
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	651a      	str	r2, [r3, #80]	@ 0x50
 8003f1e:	4b5f      	ldr	r3, [pc, #380]	@ (800409c <HAL_RCC_OscConfig+0x66c>)
 8003f20:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003f22:	4b5e      	ldr	r3, [pc, #376]	@ (800409c <HAL_RCC_OscConfig+0x66c>)
 8003f24:	2180      	movs	r1, #128	@ 0x80
 8003f26:	0049      	lsls	r1, r1, #1
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	651a      	str	r2, [r3, #80]	@ 0x50
 8003f2c:	e00b      	b.n	8003f46 <HAL_RCC_OscConfig+0x516>
 8003f2e:	4b5b      	ldr	r3, [pc, #364]	@ (800409c <HAL_RCC_OscConfig+0x66c>)
 8003f30:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003f32:	4b5a      	ldr	r3, [pc, #360]	@ (800409c <HAL_RCC_OscConfig+0x66c>)
 8003f34:	495a      	ldr	r1, [pc, #360]	@ (80040a0 <HAL_RCC_OscConfig+0x670>)
 8003f36:	400a      	ands	r2, r1
 8003f38:	651a      	str	r2, [r3, #80]	@ 0x50
 8003f3a:	4b58      	ldr	r3, [pc, #352]	@ (800409c <HAL_RCC_OscConfig+0x66c>)
 8003f3c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003f3e:	4b57      	ldr	r3, [pc, #348]	@ (800409c <HAL_RCC_OscConfig+0x66c>)
 8003f40:	4959      	ldr	r1, [pc, #356]	@ (80040a8 <HAL_RCC_OscConfig+0x678>)
 8003f42:	400a      	ands	r2, r1
 8003f44:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d015      	beq.n	8003f7a <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f4e:	f7fd feb5 	bl	8001cbc <HAL_GetTick>
 8003f52:	0003      	movs	r3, r0
 8003f54:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f56:	e009      	b.n	8003f6c <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f58:	f7fd feb0 	bl	8001cbc <HAL_GetTick>
 8003f5c:	0002      	movs	r2, r0
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	4a52      	ldr	r2, [pc, #328]	@ (80040ac <HAL_RCC_OscConfig+0x67c>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d901      	bls.n	8003f6c <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e11a      	b.n	80041a2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f6c:	4b4b      	ldr	r3, [pc, #300]	@ (800409c <HAL_RCC_OscConfig+0x66c>)
 8003f6e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003f70:	2380      	movs	r3, #128	@ 0x80
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	4013      	ands	r3, r2
 8003f76:	d0ef      	beq.n	8003f58 <HAL_RCC_OscConfig+0x528>
 8003f78:	e014      	b.n	8003fa4 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f7a:	f7fd fe9f 	bl	8001cbc <HAL_GetTick>
 8003f7e:	0003      	movs	r3, r0
 8003f80:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f82:	e009      	b.n	8003f98 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f84:	f7fd fe9a 	bl	8001cbc <HAL_GetTick>
 8003f88:	0002      	movs	r2, r0
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	4a47      	ldr	r2, [pc, #284]	@ (80040ac <HAL_RCC_OscConfig+0x67c>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d901      	bls.n	8003f98 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e104      	b.n	80041a2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f98:	4b40      	ldr	r3, [pc, #256]	@ (800409c <HAL_RCC_OscConfig+0x66c>)
 8003f9a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003f9c:	2380      	movs	r3, #128	@ 0x80
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	d1ef      	bne.n	8003f84 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003fa4:	2327      	movs	r3, #39	@ 0x27
 8003fa6:	18fb      	adds	r3, r7, r3
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d105      	bne.n	8003fba <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fae:	4b3b      	ldr	r3, [pc, #236]	@ (800409c <HAL_RCC_OscConfig+0x66c>)
 8003fb0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003fb2:	4b3a      	ldr	r3, [pc, #232]	@ (800409c <HAL_RCC_OscConfig+0x66c>)
 8003fb4:	493e      	ldr	r1, [pc, #248]	@ (80040b0 <HAL_RCC_OscConfig+0x680>)
 8003fb6:	400a      	ands	r2, r1
 8003fb8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2220      	movs	r2, #32
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	d049      	beq.n	8004058 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d026      	beq.n	800401a <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003fcc:	4b33      	ldr	r3, [pc, #204]	@ (800409c <HAL_RCC_OscConfig+0x66c>)
 8003fce:	689a      	ldr	r2, [r3, #8]
 8003fd0:	4b32      	ldr	r3, [pc, #200]	@ (800409c <HAL_RCC_OscConfig+0x66c>)
 8003fd2:	2101      	movs	r1, #1
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	609a      	str	r2, [r3, #8]
 8003fd8:	4b30      	ldr	r3, [pc, #192]	@ (800409c <HAL_RCC_OscConfig+0x66c>)
 8003fda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003fdc:	4b2f      	ldr	r3, [pc, #188]	@ (800409c <HAL_RCC_OscConfig+0x66c>)
 8003fde:	2101      	movs	r1, #1
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	635a      	str	r2, [r3, #52]	@ 0x34
 8003fe4:	4b33      	ldr	r3, [pc, #204]	@ (80040b4 <HAL_RCC_OscConfig+0x684>)
 8003fe6:	6a1a      	ldr	r2, [r3, #32]
 8003fe8:	4b32      	ldr	r3, [pc, #200]	@ (80040b4 <HAL_RCC_OscConfig+0x684>)
 8003fea:	2180      	movs	r1, #128	@ 0x80
 8003fec:	0189      	lsls	r1, r1, #6
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff2:	f7fd fe63 	bl	8001cbc <HAL_GetTick>
 8003ff6:	0003      	movs	r3, r0
 8003ff8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003ffa:	e008      	b.n	800400e <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ffc:	f7fd fe5e 	bl	8001cbc <HAL_GetTick>
 8004000:	0002      	movs	r2, r0
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b02      	cmp	r3, #2
 8004008:	d901      	bls.n	800400e <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e0c9      	b.n	80041a2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800400e:	4b23      	ldr	r3, [pc, #140]	@ (800409c <HAL_RCC_OscConfig+0x66c>)
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	2202      	movs	r2, #2
 8004014:	4013      	ands	r3, r2
 8004016:	d0f1      	beq.n	8003ffc <HAL_RCC_OscConfig+0x5cc>
 8004018:	e01e      	b.n	8004058 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800401a:	4b20      	ldr	r3, [pc, #128]	@ (800409c <HAL_RCC_OscConfig+0x66c>)
 800401c:	689a      	ldr	r2, [r3, #8]
 800401e:	4b1f      	ldr	r3, [pc, #124]	@ (800409c <HAL_RCC_OscConfig+0x66c>)
 8004020:	2101      	movs	r1, #1
 8004022:	438a      	bics	r2, r1
 8004024:	609a      	str	r2, [r3, #8]
 8004026:	4b23      	ldr	r3, [pc, #140]	@ (80040b4 <HAL_RCC_OscConfig+0x684>)
 8004028:	6a1a      	ldr	r2, [r3, #32]
 800402a:	4b22      	ldr	r3, [pc, #136]	@ (80040b4 <HAL_RCC_OscConfig+0x684>)
 800402c:	4922      	ldr	r1, [pc, #136]	@ (80040b8 <HAL_RCC_OscConfig+0x688>)
 800402e:	400a      	ands	r2, r1
 8004030:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004032:	f7fd fe43 	bl	8001cbc <HAL_GetTick>
 8004036:	0003      	movs	r3, r0
 8004038:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800403a:	e008      	b.n	800404e <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800403c:	f7fd fe3e 	bl	8001cbc <HAL_GetTick>
 8004040:	0002      	movs	r2, r0
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b02      	cmp	r3, #2
 8004048:	d901      	bls.n	800404e <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e0a9      	b.n	80041a2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800404e:	4b13      	ldr	r3, [pc, #76]	@ (800409c <HAL_RCC_OscConfig+0x66c>)
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	2202      	movs	r2, #2
 8004054:	4013      	ands	r3, r2
 8004056:	d1f1      	bne.n	800403c <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800405c:	2b00      	cmp	r3, #0
 800405e:	d100      	bne.n	8004062 <HAL_RCC_OscConfig+0x632>
 8004060:	e09e      	b.n	80041a0 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004062:	6a3b      	ldr	r3, [r7, #32]
 8004064:	2b0c      	cmp	r3, #12
 8004066:	d100      	bne.n	800406a <HAL_RCC_OscConfig+0x63a>
 8004068:	e077      	b.n	800415a <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800406e:	2b02      	cmp	r3, #2
 8004070:	d158      	bne.n	8004124 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004072:	4b0a      	ldr	r3, [pc, #40]	@ (800409c <HAL_RCC_OscConfig+0x66c>)
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	4b09      	ldr	r3, [pc, #36]	@ (800409c <HAL_RCC_OscConfig+0x66c>)
 8004078:	4910      	ldr	r1, [pc, #64]	@ (80040bc <HAL_RCC_OscConfig+0x68c>)
 800407a:	400a      	ands	r2, r1
 800407c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800407e:	f7fd fe1d 	bl	8001cbc <HAL_GetTick>
 8004082:	0003      	movs	r3, r0
 8004084:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004086:	e01b      	b.n	80040c0 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004088:	f7fd fe18 	bl	8001cbc <HAL_GetTick>
 800408c:	0002      	movs	r2, r0
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	2b02      	cmp	r3, #2
 8004094:	d914      	bls.n	80040c0 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e083      	b.n	80041a2 <HAL_RCC_OscConfig+0x772>
 800409a:	46c0      	nop			@ (mov r8, r8)
 800409c:	40021000 	.word	0x40021000
 80040a0:	fffffeff 	.word	0xfffffeff
 80040a4:	40007000 	.word	0x40007000
 80040a8:	fffffbff 	.word	0xfffffbff
 80040ac:	00001388 	.word	0x00001388
 80040b0:	efffffff 	.word	0xefffffff
 80040b4:	40010000 	.word	0x40010000
 80040b8:	ffffdfff 	.word	0xffffdfff
 80040bc:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80040c0:	4b3a      	ldr	r3, [pc, #232]	@ (80041ac <HAL_RCC_OscConfig+0x77c>)
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	2380      	movs	r3, #128	@ 0x80
 80040c6:	049b      	lsls	r3, r3, #18
 80040c8:	4013      	ands	r3, r2
 80040ca:	d1dd      	bne.n	8004088 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040cc:	4b37      	ldr	r3, [pc, #220]	@ (80041ac <HAL_RCC_OscConfig+0x77c>)
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	4a37      	ldr	r2, [pc, #220]	@ (80041b0 <HAL_RCC_OscConfig+0x780>)
 80040d2:	4013      	ands	r3, r2
 80040d4:	0019      	movs	r1, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040de:	431a      	orrs	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040e4:	431a      	orrs	r2, r3
 80040e6:	4b31      	ldr	r3, [pc, #196]	@ (80041ac <HAL_RCC_OscConfig+0x77c>)
 80040e8:	430a      	orrs	r2, r1
 80040ea:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040ec:	4b2f      	ldr	r3, [pc, #188]	@ (80041ac <HAL_RCC_OscConfig+0x77c>)
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	4b2e      	ldr	r3, [pc, #184]	@ (80041ac <HAL_RCC_OscConfig+0x77c>)
 80040f2:	2180      	movs	r1, #128	@ 0x80
 80040f4:	0449      	lsls	r1, r1, #17
 80040f6:	430a      	orrs	r2, r1
 80040f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040fa:	f7fd fddf 	bl	8001cbc <HAL_GetTick>
 80040fe:	0003      	movs	r3, r0
 8004100:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004102:	e008      	b.n	8004116 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004104:	f7fd fdda 	bl	8001cbc <HAL_GetTick>
 8004108:	0002      	movs	r2, r0
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b02      	cmp	r3, #2
 8004110:	d901      	bls.n	8004116 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e045      	b.n	80041a2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004116:	4b25      	ldr	r3, [pc, #148]	@ (80041ac <HAL_RCC_OscConfig+0x77c>)
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	2380      	movs	r3, #128	@ 0x80
 800411c:	049b      	lsls	r3, r3, #18
 800411e:	4013      	ands	r3, r2
 8004120:	d0f0      	beq.n	8004104 <HAL_RCC_OscConfig+0x6d4>
 8004122:	e03d      	b.n	80041a0 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004124:	4b21      	ldr	r3, [pc, #132]	@ (80041ac <HAL_RCC_OscConfig+0x77c>)
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	4b20      	ldr	r3, [pc, #128]	@ (80041ac <HAL_RCC_OscConfig+0x77c>)
 800412a:	4922      	ldr	r1, [pc, #136]	@ (80041b4 <HAL_RCC_OscConfig+0x784>)
 800412c:	400a      	ands	r2, r1
 800412e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004130:	f7fd fdc4 	bl	8001cbc <HAL_GetTick>
 8004134:	0003      	movs	r3, r0
 8004136:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004138:	e008      	b.n	800414c <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800413a:	f7fd fdbf 	bl	8001cbc <HAL_GetTick>
 800413e:	0002      	movs	r2, r0
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	2b02      	cmp	r3, #2
 8004146:	d901      	bls.n	800414c <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e02a      	b.n	80041a2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800414c:	4b17      	ldr	r3, [pc, #92]	@ (80041ac <HAL_RCC_OscConfig+0x77c>)
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	2380      	movs	r3, #128	@ 0x80
 8004152:	049b      	lsls	r3, r3, #18
 8004154:	4013      	ands	r3, r2
 8004156:	d1f0      	bne.n	800413a <HAL_RCC_OscConfig+0x70a>
 8004158:	e022      	b.n	80041a0 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800415e:	2b01      	cmp	r3, #1
 8004160:	d101      	bne.n	8004166 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e01d      	b.n	80041a2 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004166:	4b11      	ldr	r3, [pc, #68]	@ (80041ac <HAL_RCC_OscConfig+0x77c>)
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800416c:	69fa      	ldr	r2, [r7, #28]
 800416e:	2380      	movs	r3, #128	@ 0x80
 8004170:	025b      	lsls	r3, r3, #9
 8004172:	401a      	ands	r2, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004178:	429a      	cmp	r2, r3
 800417a:	d10f      	bne.n	800419c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800417c:	69fa      	ldr	r2, [r7, #28]
 800417e:	23f0      	movs	r3, #240	@ 0xf0
 8004180:	039b      	lsls	r3, r3, #14
 8004182:	401a      	ands	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004188:	429a      	cmp	r2, r3
 800418a:	d107      	bne.n	800419c <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800418c:	69fa      	ldr	r2, [r7, #28]
 800418e:	23c0      	movs	r3, #192	@ 0xc0
 8004190:	041b      	lsls	r3, r3, #16
 8004192:	401a      	ands	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004198:	429a      	cmp	r2, r3
 800419a:	d001      	beq.n	80041a0 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e000      	b.n	80041a2 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	0018      	movs	r0, r3
 80041a4:	46bd      	mov	sp, r7
 80041a6:	b00a      	add	sp, #40	@ 0x28
 80041a8:	bdb0      	pop	{r4, r5, r7, pc}
 80041aa:	46c0      	nop			@ (mov r8, r8)
 80041ac:	40021000 	.word	0x40021000
 80041b0:	ff02ffff 	.word	0xff02ffff
 80041b4:	feffffff 	.word	0xfeffffff

080041b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041b8:	b5b0      	push	{r4, r5, r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d101      	bne.n	80041cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e128      	b.n	800441e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041cc:	4b96      	ldr	r3, [pc, #600]	@ (8004428 <HAL_RCC_ClockConfig+0x270>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2201      	movs	r2, #1
 80041d2:	4013      	ands	r3, r2
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d91e      	bls.n	8004218 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041da:	4b93      	ldr	r3, [pc, #588]	@ (8004428 <HAL_RCC_ClockConfig+0x270>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2201      	movs	r2, #1
 80041e0:	4393      	bics	r3, r2
 80041e2:	0019      	movs	r1, r3
 80041e4:	4b90      	ldr	r3, [pc, #576]	@ (8004428 <HAL_RCC_ClockConfig+0x270>)
 80041e6:	683a      	ldr	r2, [r7, #0]
 80041e8:	430a      	orrs	r2, r1
 80041ea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80041ec:	f7fd fd66 	bl	8001cbc <HAL_GetTick>
 80041f0:	0003      	movs	r3, r0
 80041f2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041f4:	e009      	b.n	800420a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041f6:	f7fd fd61 	bl	8001cbc <HAL_GetTick>
 80041fa:	0002      	movs	r2, r0
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	4a8a      	ldr	r2, [pc, #552]	@ (800442c <HAL_RCC_ClockConfig+0x274>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d901      	bls.n	800420a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e109      	b.n	800441e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800420a:	4b87      	ldr	r3, [pc, #540]	@ (8004428 <HAL_RCC_ClockConfig+0x270>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2201      	movs	r2, #1
 8004210:	4013      	ands	r3, r2
 8004212:	683a      	ldr	r2, [r7, #0]
 8004214:	429a      	cmp	r2, r3
 8004216:	d1ee      	bne.n	80041f6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2202      	movs	r2, #2
 800421e:	4013      	ands	r3, r2
 8004220:	d009      	beq.n	8004236 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004222:	4b83      	ldr	r3, [pc, #524]	@ (8004430 <HAL_RCC_ClockConfig+0x278>)
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	22f0      	movs	r2, #240	@ 0xf0
 8004228:	4393      	bics	r3, r2
 800422a:	0019      	movs	r1, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689a      	ldr	r2, [r3, #8]
 8004230:	4b7f      	ldr	r3, [pc, #508]	@ (8004430 <HAL_RCC_ClockConfig+0x278>)
 8004232:	430a      	orrs	r2, r1
 8004234:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	2201      	movs	r2, #1
 800423c:	4013      	ands	r3, r2
 800423e:	d100      	bne.n	8004242 <HAL_RCC_ClockConfig+0x8a>
 8004240:	e089      	b.n	8004356 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	2b02      	cmp	r3, #2
 8004248:	d107      	bne.n	800425a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800424a:	4b79      	ldr	r3, [pc, #484]	@ (8004430 <HAL_RCC_ClockConfig+0x278>)
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	2380      	movs	r3, #128	@ 0x80
 8004250:	029b      	lsls	r3, r3, #10
 8004252:	4013      	ands	r3, r2
 8004254:	d120      	bne.n	8004298 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e0e1      	b.n	800441e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	2b03      	cmp	r3, #3
 8004260:	d107      	bne.n	8004272 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004262:	4b73      	ldr	r3, [pc, #460]	@ (8004430 <HAL_RCC_ClockConfig+0x278>)
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	2380      	movs	r3, #128	@ 0x80
 8004268:	049b      	lsls	r3, r3, #18
 800426a:	4013      	ands	r3, r2
 800426c:	d114      	bne.n	8004298 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e0d5      	b.n	800441e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	2b01      	cmp	r3, #1
 8004278:	d106      	bne.n	8004288 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800427a:	4b6d      	ldr	r3, [pc, #436]	@ (8004430 <HAL_RCC_ClockConfig+0x278>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2204      	movs	r2, #4
 8004280:	4013      	ands	r3, r2
 8004282:	d109      	bne.n	8004298 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e0ca      	b.n	800441e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004288:	4b69      	ldr	r3, [pc, #420]	@ (8004430 <HAL_RCC_ClockConfig+0x278>)
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	2380      	movs	r3, #128	@ 0x80
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	4013      	ands	r3, r2
 8004292:	d101      	bne.n	8004298 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e0c2      	b.n	800441e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004298:	4b65      	ldr	r3, [pc, #404]	@ (8004430 <HAL_RCC_ClockConfig+0x278>)
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	2203      	movs	r2, #3
 800429e:	4393      	bics	r3, r2
 80042a0:	0019      	movs	r1, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685a      	ldr	r2, [r3, #4]
 80042a6:	4b62      	ldr	r3, [pc, #392]	@ (8004430 <HAL_RCC_ClockConfig+0x278>)
 80042a8:	430a      	orrs	r2, r1
 80042aa:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042ac:	f7fd fd06 	bl	8001cbc <HAL_GetTick>
 80042b0:	0003      	movs	r3, r0
 80042b2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d111      	bne.n	80042e0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80042bc:	e009      	b.n	80042d2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042be:	f7fd fcfd 	bl	8001cbc <HAL_GetTick>
 80042c2:	0002      	movs	r2, r0
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	4a58      	ldr	r2, [pc, #352]	@ (800442c <HAL_RCC_ClockConfig+0x274>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e0a5      	b.n	800441e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80042d2:	4b57      	ldr	r3, [pc, #348]	@ (8004430 <HAL_RCC_ClockConfig+0x278>)
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	220c      	movs	r2, #12
 80042d8:	4013      	ands	r3, r2
 80042da:	2b08      	cmp	r3, #8
 80042dc:	d1ef      	bne.n	80042be <HAL_RCC_ClockConfig+0x106>
 80042de:	e03a      	b.n	8004356 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	2b03      	cmp	r3, #3
 80042e6:	d111      	bne.n	800430c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042e8:	e009      	b.n	80042fe <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042ea:	f7fd fce7 	bl	8001cbc <HAL_GetTick>
 80042ee:	0002      	movs	r2, r0
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	4a4d      	ldr	r2, [pc, #308]	@ (800442c <HAL_RCC_ClockConfig+0x274>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d901      	bls.n	80042fe <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e08f      	b.n	800441e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042fe:	4b4c      	ldr	r3, [pc, #304]	@ (8004430 <HAL_RCC_ClockConfig+0x278>)
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	220c      	movs	r2, #12
 8004304:	4013      	ands	r3, r2
 8004306:	2b0c      	cmp	r3, #12
 8004308:	d1ef      	bne.n	80042ea <HAL_RCC_ClockConfig+0x132>
 800430a:	e024      	b.n	8004356 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	2b01      	cmp	r3, #1
 8004312:	d11b      	bne.n	800434c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004314:	e009      	b.n	800432a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004316:	f7fd fcd1 	bl	8001cbc <HAL_GetTick>
 800431a:	0002      	movs	r2, r0
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	4a42      	ldr	r2, [pc, #264]	@ (800442c <HAL_RCC_ClockConfig+0x274>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d901      	bls.n	800432a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e079      	b.n	800441e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800432a:	4b41      	ldr	r3, [pc, #260]	@ (8004430 <HAL_RCC_ClockConfig+0x278>)
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	220c      	movs	r2, #12
 8004330:	4013      	ands	r3, r2
 8004332:	2b04      	cmp	r3, #4
 8004334:	d1ef      	bne.n	8004316 <HAL_RCC_ClockConfig+0x15e>
 8004336:	e00e      	b.n	8004356 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004338:	f7fd fcc0 	bl	8001cbc <HAL_GetTick>
 800433c:	0002      	movs	r2, r0
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	4a3a      	ldr	r2, [pc, #232]	@ (800442c <HAL_RCC_ClockConfig+0x274>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d901      	bls.n	800434c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e068      	b.n	800441e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800434c:	4b38      	ldr	r3, [pc, #224]	@ (8004430 <HAL_RCC_ClockConfig+0x278>)
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	220c      	movs	r2, #12
 8004352:	4013      	ands	r3, r2
 8004354:	d1f0      	bne.n	8004338 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004356:	4b34      	ldr	r3, [pc, #208]	@ (8004428 <HAL_RCC_ClockConfig+0x270>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2201      	movs	r2, #1
 800435c:	4013      	ands	r3, r2
 800435e:	683a      	ldr	r2, [r7, #0]
 8004360:	429a      	cmp	r2, r3
 8004362:	d21e      	bcs.n	80043a2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004364:	4b30      	ldr	r3, [pc, #192]	@ (8004428 <HAL_RCC_ClockConfig+0x270>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2201      	movs	r2, #1
 800436a:	4393      	bics	r3, r2
 800436c:	0019      	movs	r1, r3
 800436e:	4b2e      	ldr	r3, [pc, #184]	@ (8004428 <HAL_RCC_ClockConfig+0x270>)
 8004370:	683a      	ldr	r2, [r7, #0]
 8004372:	430a      	orrs	r2, r1
 8004374:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004376:	f7fd fca1 	bl	8001cbc <HAL_GetTick>
 800437a:	0003      	movs	r3, r0
 800437c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800437e:	e009      	b.n	8004394 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004380:	f7fd fc9c 	bl	8001cbc <HAL_GetTick>
 8004384:	0002      	movs	r2, r0
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	4a28      	ldr	r2, [pc, #160]	@ (800442c <HAL_RCC_ClockConfig+0x274>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d901      	bls.n	8004394 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e044      	b.n	800441e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004394:	4b24      	ldr	r3, [pc, #144]	@ (8004428 <HAL_RCC_ClockConfig+0x270>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2201      	movs	r2, #1
 800439a:	4013      	ands	r3, r2
 800439c:	683a      	ldr	r2, [r7, #0]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d1ee      	bne.n	8004380 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2204      	movs	r2, #4
 80043a8:	4013      	ands	r3, r2
 80043aa:	d009      	beq.n	80043c0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043ac:	4b20      	ldr	r3, [pc, #128]	@ (8004430 <HAL_RCC_ClockConfig+0x278>)
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	4a20      	ldr	r2, [pc, #128]	@ (8004434 <HAL_RCC_ClockConfig+0x27c>)
 80043b2:	4013      	ands	r3, r2
 80043b4:	0019      	movs	r1, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	68da      	ldr	r2, [r3, #12]
 80043ba:	4b1d      	ldr	r3, [pc, #116]	@ (8004430 <HAL_RCC_ClockConfig+0x278>)
 80043bc:	430a      	orrs	r2, r1
 80043be:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2208      	movs	r2, #8
 80043c6:	4013      	ands	r3, r2
 80043c8:	d00a      	beq.n	80043e0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80043ca:	4b19      	ldr	r3, [pc, #100]	@ (8004430 <HAL_RCC_ClockConfig+0x278>)
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	4a1a      	ldr	r2, [pc, #104]	@ (8004438 <HAL_RCC_ClockConfig+0x280>)
 80043d0:	4013      	ands	r3, r2
 80043d2:	0019      	movs	r1, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	00da      	lsls	r2, r3, #3
 80043da:	4b15      	ldr	r3, [pc, #84]	@ (8004430 <HAL_RCC_ClockConfig+0x278>)
 80043dc:	430a      	orrs	r2, r1
 80043de:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80043e0:	f000 f832 	bl	8004448 <HAL_RCC_GetSysClockFreq>
 80043e4:	0001      	movs	r1, r0
 80043e6:	4b12      	ldr	r3, [pc, #72]	@ (8004430 <HAL_RCC_ClockConfig+0x278>)
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	091b      	lsrs	r3, r3, #4
 80043ec:	220f      	movs	r2, #15
 80043ee:	4013      	ands	r3, r2
 80043f0:	4a12      	ldr	r2, [pc, #72]	@ (800443c <HAL_RCC_ClockConfig+0x284>)
 80043f2:	5cd3      	ldrb	r3, [r2, r3]
 80043f4:	000a      	movs	r2, r1
 80043f6:	40da      	lsrs	r2, r3
 80043f8:	4b11      	ldr	r3, [pc, #68]	@ (8004440 <HAL_RCC_ClockConfig+0x288>)
 80043fa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80043fc:	4b11      	ldr	r3, [pc, #68]	@ (8004444 <HAL_RCC_ClockConfig+0x28c>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	250b      	movs	r5, #11
 8004402:	197c      	adds	r4, r7, r5
 8004404:	0018      	movs	r0, r3
 8004406:	f7fd fc13 	bl	8001c30 <HAL_InitTick>
 800440a:	0003      	movs	r3, r0
 800440c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800440e:	197b      	adds	r3, r7, r5
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d002      	beq.n	800441c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8004416:	197b      	adds	r3, r7, r5
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	e000      	b.n	800441e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	0018      	movs	r0, r3
 8004420:	46bd      	mov	sp, r7
 8004422:	b004      	add	sp, #16
 8004424:	bdb0      	pop	{r4, r5, r7, pc}
 8004426:	46c0      	nop			@ (mov r8, r8)
 8004428:	40022000 	.word	0x40022000
 800442c:	00001388 	.word	0x00001388
 8004430:	40021000 	.word	0x40021000
 8004434:	fffff8ff 	.word	0xfffff8ff
 8004438:	ffffc7ff 	.word	0xffffc7ff
 800443c:	08006e1c 	.word	0x08006e1c
 8004440:	20000008 	.word	0x20000008
 8004444:	2000000c 	.word	0x2000000c

08004448 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004448:	b5b0      	push	{r4, r5, r7, lr}
 800444a:	b08e      	sub	sp, #56	@ 0x38
 800444c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800444e:	4b4c      	ldr	r3, [pc, #304]	@ (8004580 <HAL_RCC_GetSysClockFreq+0x138>)
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004454:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004456:	230c      	movs	r3, #12
 8004458:	4013      	ands	r3, r2
 800445a:	2b0c      	cmp	r3, #12
 800445c:	d014      	beq.n	8004488 <HAL_RCC_GetSysClockFreq+0x40>
 800445e:	d900      	bls.n	8004462 <HAL_RCC_GetSysClockFreq+0x1a>
 8004460:	e07b      	b.n	800455a <HAL_RCC_GetSysClockFreq+0x112>
 8004462:	2b04      	cmp	r3, #4
 8004464:	d002      	beq.n	800446c <HAL_RCC_GetSysClockFreq+0x24>
 8004466:	2b08      	cmp	r3, #8
 8004468:	d00b      	beq.n	8004482 <HAL_RCC_GetSysClockFreq+0x3a>
 800446a:	e076      	b.n	800455a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800446c:	4b44      	ldr	r3, [pc, #272]	@ (8004580 <HAL_RCC_GetSysClockFreq+0x138>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2210      	movs	r2, #16
 8004472:	4013      	ands	r3, r2
 8004474:	d002      	beq.n	800447c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8004476:	4b43      	ldr	r3, [pc, #268]	@ (8004584 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004478:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800447a:	e07c      	b.n	8004576 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800447c:	4b42      	ldr	r3, [pc, #264]	@ (8004588 <HAL_RCC_GetSysClockFreq+0x140>)
 800447e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8004480:	e079      	b.n	8004576 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004482:	4b42      	ldr	r3, [pc, #264]	@ (800458c <HAL_RCC_GetSysClockFreq+0x144>)
 8004484:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8004486:	e076      	b.n	8004576 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800448a:	0c9a      	lsrs	r2, r3, #18
 800448c:	230f      	movs	r3, #15
 800448e:	401a      	ands	r2, r3
 8004490:	4b3f      	ldr	r3, [pc, #252]	@ (8004590 <HAL_RCC_GetSysClockFreq+0x148>)
 8004492:	5c9b      	ldrb	r3, [r3, r2]
 8004494:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004498:	0d9a      	lsrs	r2, r3, #22
 800449a:	2303      	movs	r3, #3
 800449c:	4013      	ands	r3, r2
 800449e:	3301      	adds	r3, #1
 80044a0:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044a2:	4b37      	ldr	r3, [pc, #220]	@ (8004580 <HAL_RCC_GetSysClockFreq+0x138>)
 80044a4:	68da      	ldr	r2, [r3, #12]
 80044a6:	2380      	movs	r3, #128	@ 0x80
 80044a8:	025b      	lsls	r3, r3, #9
 80044aa:	4013      	ands	r3, r2
 80044ac:	d01a      	beq.n	80044e4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80044ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044b0:	61bb      	str	r3, [r7, #24]
 80044b2:	2300      	movs	r3, #0
 80044b4:	61fb      	str	r3, [r7, #28]
 80044b6:	4a35      	ldr	r2, [pc, #212]	@ (800458c <HAL_RCC_GetSysClockFreq+0x144>)
 80044b8:	2300      	movs	r3, #0
 80044ba:	69b8      	ldr	r0, [r7, #24]
 80044bc:	69f9      	ldr	r1, [r7, #28]
 80044be:	f7fb fed9 	bl	8000274 <__aeabi_lmul>
 80044c2:	0002      	movs	r2, r0
 80044c4:	000b      	movs	r3, r1
 80044c6:	0010      	movs	r0, r2
 80044c8:	0019      	movs	r1, r3
 80044ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044cc:	613b      	str	r3, [r7, #16]
 80044ce:	2300      	movs	r3, #0
 80044d0:	617b      	str	r3, [r7, #20]
 80044d2:	693a      	ldr	r2, [r7, #16]
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	f7fb fead 	bl	8000234 <__aeabi_uldivmod>
 80044da:	0002      	movs	r2, r0
 80044dc:	000b      	movs	r3, r1
 80044de:	0013      	movs	r3, r2
 80044e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80044e2:	e037      	b.n	8004554 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80044e4:	4b26      	ldr	r3, [pc, #152]	@ (8004580 <HAL_RCC_GetSysClockFreq+0x138>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2210      	movs	r2, #16
 80044ea:	4013      	ands	r3, r2
 80044ec:	d01a      	beq.n	8004524 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80044ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044f0:	60bb      	str	r3, [r7, #8]
 80044f2:	2300      	movs	r3, #0
 80044f4:	60fb      	str	r3, [r7, #12]
 80044f6:	4a23      	ldr	r2, [pc, #140]	@ (8004584 <HAL_RCC_GetSysClockFreq+0x13c>)
 80044f8:	2300      	movs	r3, #0
 80044fa:	68b8      	ldr	r0, [r7, #8]
 80044fc:	68f9      	ldr	r1, [r7, #12]
 80044fe:	f7fb feb9 	bl	8000274 <__aeabi_lmul>
 8004502:	0002      	movs	r2, r0
 8004504:	000b      	movs	r3, r1
 8004506:	0010      	movs	r0, r2
 8004508:	0019      	movs	r1, r3
 800450a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800450c:	603b      	str	r3, [r7, #0]
 800450e:	2300      	movs	r3, #0
 8004510:	607b      	str	r3, [r7, #4]
 8004512:	683a      	ldr	r2, [r7, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f7fb fe8d 	bl	8000234 <__aeabi_uldivmod>
 800451a:	0002      	movs	r2, r0
 800451c:	000b      	movs	r3, r1
 800451e:	0013      	movs	r3, r2
 8004520:	637b      	str	r3, [r7, #52]	@ 0x34
 8004522:	e017      	b.n	8004554 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004526:	0018      	movs	r0, r3
 8004528:	2300      	movs	r3, #0
 800452a:	0019      	movs	r1, r3
 800452c:	4a16      	ldr	r2, [pc, #88]	@ (8004588 <HAL_RCC_GetSysClockFreq+0x140>)
 800452e:	2300      	movs	r3, #0
 8004530:	f7fb fea0 	bl	8000274 <__aeabi_lmul>
 8004534:	0002      	movs	r2, r0
 8004536:	000b      	movs	r3, r1
 8004538:	0010      	movs	r0, r2
 800453a:	0019      	movs	r1, r3
 800453c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800453e:	001c      	movs	r4, r3
 8004540:	2300      	movs	r3, #0
 8004542:	001d      	movs	r5, r3
 8004544:	0022      	movs	r2, r4
 8004546:	002b      	movs	r3, r5
 8004548:	f7fb fe74 	bl	8000234 <__aeabi_uldivmod>
 800454c:	0002      	movs	r2, r0
 800454e:	000b      	movs	r3, r1
 8004550:	0013      	movs	r3, r2
 8004552:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8004554:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004556:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8004558:	e00d      	b.n	8004576 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800455a:	4b09      	ldr	r3, [pc, #36]	@ (8004580 <HAL_RCC_GetSysClockFreq+0x138>)
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	0b5b      	lsrs	r3, r3, #13
 8004560:	2207      	movs	r2, #7
 8004562:	4013      	ands	r3, r2
 8004564:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004566:	6a3b      	ldr	r3, [r7, #32]
 8004568:	3301      	adds	r3, #1
 800456a:	2280      	movs	r2, #128	@ 0x80
 800456c:	0212      	lsls	r2, r2, #8
 800456e:	409a      	lsls	r2, r3
 8004570:	0013      	movs	r3, r2
 8004572:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8004574:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8004578:	0018      	movs	r0, r3
 800457a:	46bd      	mov	sp, r7
 800457c:	b00e      	add	sp, #56	@ 0x38
 800457e:	bdb0      	pop	{r4, r5, r7, pc}
 8004580:	40021000 	.word	0x40021000
 8004584:	003d0900 	.word	0x003d0900
 8004588:	00f42400 	.word	0x00f42400
 800458c:	007a1200 	.word	0x007a1200
 8004590:	08006e34 	.word	0x08006e34

08004594 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004598:	4b02      	ldr	r3, [pc, #8]	@ (80045a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800459a:	681b      	ldr	r3, [r3, #0]
}
 800459c:	0018      	movs	r0, r3
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	46c0      	nop			@ (mov r8, r8)
 80045a4:	20000008 	.word	0x20000008

080045a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80045ac:	f7ff fff2 	bl	8004594 <HAL_RCC_GetHCLKFreq>
 80045b0:	0001      	movs	r1, r0
 80045b2:	4b06      	ldr	r3, [pc, #24]	@ (80045cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	0a1b      	lsrs	r3, r3, #8
 80045b8:	2207      	movs	r2, #7
 80045ba:	4013      	ands	r3, r2
 80045bc:	4a04      	ldr	r2, [pc, #16]	@ (80045d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80045be:	5cd3      	ldrb	r3, [r2, r3]
 80045c0:	40d9      	lsrs	r1, r3
 80045c2:	000b      	movs	r3, r1
}
 80045c4:	0018      	movs	r0, r3
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	46c0      	nop			@ (mov r8, r8)
 80045cc:	40021000 	.word	0x40021000
 80045d0:	08006e2c 	.word	0x08006e2c

080045d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80045d8:	f7ff ffdc 	bl	8004594 <HAL_RCC_GetHCLKFreq>
 80045dc:	0001      	movs	r1, r0
 80045de:	4b06      	ldr	r3, [pc, #24]	@ (80045f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	0adb      	lsrs	r3, r3, #11
 80045e4:	2207      	movs	r2, #7
 80045e6:	4013      	ands	r3, r2
 80045e8:	4a04      	ldr	r2, [pc, #16]	@ (80045fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80045ea:	5cd3      	ldrb	r3, [r2, r3]
 80045ec:	40d9      	lsrs	r1, r3
 80045ee:	000b      	movs	r3, r1
}
 80045f0:	0018      	movs	r0, r3
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	46c0      	nop			@ (mov r8, r8)
 80045f8:	40021000 	.word	0x40021000
 80045fc:	08006e2c 	.word	0x08006e2c

08004600 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b086      	sub	sp, #24
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8004608:	2317      	movs	r3, #23
 800460a:	18fb      	adds	r3, r7, r3
 800460c:	2200      	movs	r2, #0
 800460e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2220      	movs	r2, #32
 8004616:	4013      	ands	r3, r2
 8004618:	d106      	bne.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	2380      	movs	r3, #128	@ 0x80
 8004620:	011b      	lsls	r3, r3, #4
 8004622:	4013      	ands	r3, r2
 8004624:	d100      	bne.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8004626:	e104      	b.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004628:	4bb1      	ldr	r3, [pc, #708]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800462a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800462c:	2380      	movs	r3, #128	@ 0x80
 800462e:	055b      	lsls	r3, r3, #21
 8004630:	4013      	ands	r3, r2
 8004632:	d10a      	bne.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004634:	4bae      	ldr	r3, [pc, #696]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004636:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004638:	4bad      	ldr	r3, [pc, #692]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800463a:	2180      	movs	r1, #128	@ 0x80
 800463c:	0549      	lsls	r1, r1, #21
 800463e:	430a      	orrs	r2, r1
 8004640:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8004642:	2317      	movs	r3, #23
 8004644:	18fb      	adds	r3, r7, r3
 8004646:	2201      	movs	r2, #1
 8004648:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800464a:	4baa      	ldr	r3, [pc, #680]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	2380      	movs	r3, #128	@ 0x80
 8004650:	005b      	lsls	r3, r3, #1
 8004652:	4013      	ands	r3, r2
 8004654:	d11a      	bne.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004656:	4ba7      	ldr	r3, [pc, #668]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	4ba6      	ldr	r3, [pc, #664]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800465c:	2180      	movs	r1, #128	@ 0x80
 800465e:	0049      	lsls	r1, r1, #1
 8004660:	430a      	orrs	r2, r1
 8004662:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004664:	f7fd fb2a 	bl	8001cbc <HAL_GetTick>
 8004668:	0003      	movs	r3, r0
 800466a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800466c:	e008      	b.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800466e:	f7fd fb25 	bl	8001cbc <HAL_GetTick>
 8004672:	0002      	movs	r2, r0
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	2b64      	cmp	r3, #100	@ 0x64
 800467a:	d901      	bls.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e133      	b.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004680:	4b9c      	ldr	r3, [pc, #624]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	2380      	movs	r3, #128	@ 0x80
 8004686:	005b      	lsls	r3, r3, #1
 8004688:	4013      	ands	r3, r2
 800468a:	d0f0      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800468c:	4b98      	ldr	r3, [pc, #608]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	23c0      	movs	r3, #192	@ 0xc0
 8004692:	039b      	lsls	r3, r3, #14
 8004694:	4013      	ands	r3, r2
 8004696:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685a      	ldr	r2, [r3, #4]
 800469c:	23c0      	movs	r3, #192	@ 0xc0
 800469e:	039b      	lsls	r3, r3, #14
 80046a0:	4013      	ands	r3, r2
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d107      	bne.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689a      	ldr	r2, [r3, #8]
 80046ac:	23c0      	movs	r3, #192	@ 0xc0
 80046ae:	039b      	lsls	r3, r3, #14
 80046b0:	4013      	ands	r3, r2
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d013      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685a      	ldr	r2, [r3, #4]
 80046bc:	23c0      	movs	r3, #192	@ 0xc0
 80046be:	029b      	lsls	r3, r3, #10
 80046c0:	401a      	ands	r2, r3
 80046c2:	23c0      	movs	r3, #192	@ 0xc0
 80046c4:	029b      	lsls	r3, r3, #10
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d10a      	bne.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80046ca:	4b89      	ldr	r3, [pc, #548]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	2380      	movs	r3, #128	@ 0x80
 80046d0:	029b      	lsls	r3, r3, #10
 80046d2:	401a      	ands	r2, r3
 80046d4:	2380      	movs	r3, #128	@ 0x80
 80046d6:	029b      	lsls	r3, r3, #10
 80046d8:	429a      	cmp	r2, r3
 80046da:	d101      	bne.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e103      	b.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80046e0:	4b83      	ldr	r3, [pc, #524]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80046e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80046e4:	23c0      	movs	r3, #192	@ 0xc0
 80046e6:	029b      	lsls	r3, r3, #10
 80046e8:	4013      	ands	r3, r2
 80046ea:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d049      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685a      	ldr	r2, [r3, #4]
 80046f6:	23c0      	movs	r3, #192	@ 0xc0
 80046f8:	029b      	lsls	r3, r3, #10
 80046fa:	4013      	ands	r3, r2
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d004      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2220      	movs	r2, #32
 8004708:	4013      	ands	r3, r2
 800470a:	d10d      	bne.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689a      	ldr	r2, [r3, #8]
 8004710:	23c0      	movs	r3, #192	@ 0xc0
 8004712:	029b      	lsls	r3, r3, #10
 8004714:	4013      	ands	r3, r2
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	429a      	cmp	r2, r3
 800471a:	d034      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	2380      	movs	r3, #128	@ 0x80
 8004722:	011b      	lsls	r3, r3, #4
 8004724:	4013      	ands	r3, r2
 8004726:	d02e      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004728:	4b71      	ldr	r3, [pc, #452]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800472a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800472c:	4a72      	ldr	r2, [pc, #456]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800472e:	4013      	ands	r3, r2
 8004730:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004732:	4b6f      	ldr	r3, [pc, #444]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004734:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004736:	4b6e      	ldr	r3, [pc, #440]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004738:	2180      	movs	r1, #128	@ 0x80
 800473a:	0309      	lsls	r1, r1, #12
 800473c:	430a      	orrs	r2, r1
 800473e:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004740:	4b6b      	ldr	r3, [pc, #428]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004742:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004744:	4b6a      	ldr	r3, [pc, #424]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004746:	496d      	ldr	r1, [pc, #436]	@ (80048fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8004748:	400a      	ands	r2, r1
 800474a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800474c:	4b68      	ldr	r3, [pc, #416]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	2380      	movs	r3, #128	@ 0x80
 8004756:	005b      	lsls	r3, r3, #1
 8004758:	4013      	ands	r3, r2
 800475a:	d014      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800475c:	f7fd faae 	bl	8001cbc <HAL_GetTick>
 8004760:	0003      	movs	r3, r0
 8004762:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004764:	e009      	b.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004766:	f7fd faa9 	bl	8001cbc <HAL_GetTick>
 800476a:	0002      	movs	r2, r0
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	4a63      	ldr	r2, [pc, #396]	@ (8004900 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d901      	bls.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e0b6      	b.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800477a:	4b5d      	ldr	r3, [pc, #372]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800477c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800477e:	2380      	movs	r3, #128	@ 0x80
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	4013      	ands	r3, r2
 8004784:	d0ef      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	2380      	movs	r3, #128	@ 0x80
 800478c:	011b      	lsls	r3, r3, #4
 800478e:	4013      	ands	r3, r2
 8004790:	d01f      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	689a      	ldr	r2, [r3, #8]
 8004796:	23c0      	movs	r3, #192	@ 0xc0
 8004798:	029b      	lsls	r3, r3, #10
 800479a:	401a      	ands	r2, r3
 800479c:	23c0      	movs	r3, #192	@ 0xc0
 800479e:	029b      	lsls	r3, r3, #10
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d10c      	bne.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80047a4:	4b52      	ldr	r3, [pc, #328]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a56      	ldr	r2, [pc, #344]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80047aa:	4013      	ands	r3, r2
 80047ac:	0019      	movs	r1, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	689a      	ldr	r2, [r3, #8]
 80047b2:	23c0      	movs	r3, #192	@ 0xc0
 80047b4:	039b      	lsls	r3, r3, #14
 80047b6:	401a      	ands	r2, r3
 80047b8:	4b4d      	ldr	r3, [pc, #308]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80047ba:	430a      	orrs	r2, r1
 80047bc:	601a      	str	r2, [r3, #0]
 80047be:	4b4c      	ldr	r3, [pc, #304]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80047c0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	689a      	ldr	r2, [r3, #8]
 80047c6:	23c0      	movs	r3, #192	@ 0xc0
 80047c8:	029b      	lsls	r3, r3, #10
 80047ca:	401a      	ands	r2, r3
 80047cc:	4b48      	ldr	r3, [pc, #288]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80047ce:	430a      	orrs	r2, r1
 80047d0:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2220      	movs	r2, #32
 80047d8:	4013      	ands	r3, r2
 80047da:	d01f      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685a      	ldr	r2, [r3, #4]
 80047e0:	23c0      	movs	r3, #192	@ 0xc0
 80047e2:	029b      	lsls	r3, r3, #10
 80047e4:	401a      	ands	r2, r3
 80047e6:	23c0      	movs	r3, #192	@ 0xc0
 80047e8:	029b      	lsls	r3, r3, #10
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d10c      	bne.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x208>
 80047ee:	4b40      	ldr	r3, [pc, #256]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a44      	ldr	r2, [pc, #272]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80047f4:	4013      	ands	r3, r2
 80047f6:	0019      	movs	r1, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685a      	ldr	r2, [r3, #4]
 80047fc:	23c0      	movs	r3, #192	@ 0xc0
 80047fe:	039b      	lsls	r3, r3, #14
 8004800:	401a      	ands	r2, r3
 8004802:	4b3b      	ldr	r3, [pc, #236]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004804:	430a      	orrs	r2, r1
 8004806:	601a      	str	r2, [r3, #0]
 8004808:	4b39      	ldr	r3, [pc, #228]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800480a:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685a      	ldr	r2, [r3, #4]
 8004810:	23c0      	movs	r3, #192	@ 0xc0
 8004812:	029b      	lsls	r3, r3, #10
 8004814:	401a      	ands	r2, r3
 8004816:	4b36      	ldr	r3, [pc, #216]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004818:	430a      	orrs	r2, r1
 800481a:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800481c:	2317      	movs	r3, #23
 800481e:	18fb      	adds	r3, r7, r3
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	2b01      	cmp	r3, #1
 8004824:	d105      	bne.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004826:	4b32      	ldr	r3, [pc, #200]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004828:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800482a:	4b31      	ldr	r3, [pc, #196]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800482c:	4936      	ldr	r1, [pc, #216]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800482e:	400a      	ands	r2, r1
 8004830:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2201      	movs	r2, #1
 8004838:	4013      	ands	r3, r2
 800483a:	d009      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800483c:	4b2c      	ldr	r3, [pc, #176]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800483e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004840:	2203      	movs	r2, #3
 8004842:	4393      	bics	r3, r2
 8004844:	0019      	movs	r1, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	68da      	ldr	r2, [r3, #12]
 800484a:	4b29      	ldr	r3, [pc, #164]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800484c:	430a      	orrs	r2, r1
 800484e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2202      	movs	r2, #2
 8004856:	4013      	ands	r3, r2
 8004858:	d009      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800485a:	4b25      	ldr	r3, [pc, #148]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800485c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800485e:	220c      	movs	r2, #12
 8004860:	4393      	bics	r3, r2
 8004862:	0019      	movs	r1, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	691a      	ldr	r2, [r3, #16]
 8004868:	4b21      	ldr	r3, [pc, #132]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800486a:	430a      	orrs	r2, r1
 800486c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2204      	movs	r2, #4
 8004874:	4013      	ands	r3, r2
 8004876:	d009      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004878:	4b1d      	ldr	r3, [pc, #116]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800487a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800487c:	4a23      	ldr	r2, [pc, #140]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 800487e:	4013      	ands	r3, r2
 8004880:	0019      	movs	r1, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	695a      	ldr	r2, [r3, #20]
 8004886:	4b1a      	ldr	r3, [pc, #104]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004888:	430a      	orrs	r2, r1
 800488a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2208      	movs	r2, #8
 8004892:	4013      	ands	r3, r2
 8004894:	d009      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004896:	4b16      	ldr	r3, [pc, #88]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800489a:	4a1d      	ldr	r2, [pc, #116]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800489c:	4013      	ands	r3, r2
 800489e:	0019      	movs	r1, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	699a      	ldr	r2, [r3, #24]
 80048a4:	4b12      	ldr	r3, [pc, #72]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80048a6:	430a      	orrs	r2, r1
 80048a8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2240      	movs	r2, #64	@ 0x40
 80048b0:	4013      	ands	r3, r2
 80048b2:	d009      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048b4:	4b0e      	ldr	r3, [pc, #56]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80048b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048b8:	4a16      	ldr	r2, [pc, #88]	@ (8004914 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80048ba:	4013      	ands	r3, r2
 80048bc:	0019      	movs	r1, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a1a      	ldr	r2, [r3, #32]
 80048c2:	4b0b      	ldr	r3, [pc, #44]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80048c4:	430a      	orrs	r2, r1
 80048c6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2280      	movs	r2, #128	@ 0x80
 80048ce:	4013      	ands	r3, r2
 80048d0:	d009      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80048d2:	4b07      	ldr	r3, [pc, #28]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80048d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048d6:	4a10      	ldr	r2, [pc, #64]	@ (8004918 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80048d8:	4013      	ands	r3, r2
 80048da:	0019      	movs	r1, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	69da      	ldr	r2, [r3, #28]
 80048e0:	4b03      	ldr	r3, [pc, #12]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80048e2:	430a      	orrs	r2, r1
 80048e4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	0018      	movs	r0, r3
 80048ea:	46bd      	mov	sp, r7
 80048ec:	b006      	add	sp, #24
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	40021000 	.word	0x40021000
 80048f4:	40007000 	.word	0x40007000
 80048f8:	fffcffff 	.word	0xfffcffff
 80048fc:	fff7ffff 	.word	0xfff7ffff
 8004900:	00001388 	.word	0x00001388
 8004904:	ffcfffff 	.word	0xffcfffff
 8004908:	efffffff 	.word	0xefffffff
 800490c:	fffff3ff 	.word	0xfffff3ff
 8004910:	ffffcfff 	.word	0xffffcfff
 8004914:	fbffffff 	.word	0xfbffffff
 8004918:	fff3ffff 	.word	0xfff3ffff

0800491c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d101      	bne.n	800492e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e032      	b.n	8004994 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2239      	movs	r2, #57	@ 0x39
 8004932:	5c9b      	ldrb	r3, [r3, r2]
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d107      	bne.n	800494a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2238      	movs	r2, #56	@ 0x38
 800493e:	2100      	movs	r1, #0
 8004940:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	0018      	movs	r0, r3
 8004946:	f7fc ff75 	bl	8001834 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2239      	movs	r2, #57	@ 0x39
 800494e:	2102      	movs	r1, #2
 8004950:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	3304      	adds	r3, #4
 800495a:	0019      	movs	r1, r3
 800495c:	0010      	movs	r0, r2
 800495e:	f000 fa51 	bl	8004e04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	223e      	movs	r2, #62	@ 0x3e
 8004966:	2101      	movs	r1, #1
 8004968:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	223a      	movs	r2, #58	@ 0x3a
 800496e:	2101      	movs	r1, #1
 8004970:	5499      	strb	r1, [r3, r2]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	223b      	movs	r2, #59	@ 0x3b
 8004976:	2101      	movs	r1, #1
 8004978:	5499      	strb	r1, [r3, r2]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	223c      	movs	r2, #60	@ 0x3c
 800497e:	2101      	movs	r1, #1
 8004980:	5499      	strb	r1, [r3, r2]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	223d      	movs	r2, #61	@ 0x3d
 8004986:	2101      	movs	r1, #1
 8004988:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2239      	movs	r2, #57	@ 0x39
 800498e:	2101      	movs	r1, #1
 8004990:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004992:	2300      	movs	r3, #0
}
 8004994:	0018      	movs	r0, r3
 8004996:	46bd      	mov	sp, r7
 8004998:	b002      	add	sp, #8
 800499a:	bd80      	pop	{r7, pc}

0800499c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d101      	bne.n	80049ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e032      	b.n	8004a14 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2239      	movs	r2, #57	@ 0x39
 80049b2:	5c9b      	ldrb	r3, [r3, r2]
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d107      	bne.n	80049ca <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2238      	movs	r2, #56	@ 0x38
 80049be:	2100      	movs	r1, #0
 80049c0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	0018      	movs	r0, r3
 80049c6:	f000 f829 	bl	8004a1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2239      	movs	r2, #57	@ 0x39
 80049ce:	2102      	movs	r1, #2
 80049d0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	3304      	adds	r3, #4
 80049da:	0019      	movs	r1, r3
 80049dc:	0010      	movs	r0, r2
 80049de:	f000 fa11 	bl	8004e04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	223e      	movs	r2, #62	@ 0x3e
 80049e6:	2101      	movs	r1, #1
 80049e8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	223a      	movs	r2, #58	@ 0x3a
 80049ee:	2101      	movs	r1, #1
 80049f0:	5499      	strb	r1, [r3, r2]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	223b      	movs	r2, #59	@ 0x3b
 80049f6:	2101      	movs	r1, #1
 80049f8:	5499      	strb	r1, [r3, r2]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	223c      	movs	r2, #60	@ 0x3c
 80049fe:	2101      	movs	r1, #1
 8004a00:	5499      	strb	r1, [r3, r2]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	223d      	movs	r2, #61	@ 0x3d
 8004a06:	2101      	movs	r1, #1
 8004a08:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2239      	movs	r2, #57	@ 0x39
 8004a0e:	2101      	movs	r1, #1
 8004a10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	0018      	movs	r0, r3
 8004a16:	46bd      	mov	sp, r7
 8004a18:	b002      	add	sp, #8
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004a24:	46c0      	nop			@ (mov r8, r8)
 8004a26:	46bd      	mov	sp, r7
 8004a28:	b002      	add	sp, #8
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d101      	bne.n	8004a40 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e03a      	b.n	8004ab6 <HAL_TIM_OnePulse_Init+0x8a>
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2239      	movs	r2, #57	@ 0x39
 8004a44:	5c9b      	ldrb	r3, [r3, r2]
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d107      	bne.n	8004a5c <HAL_TIM_OnePulse_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2238      	movs	r2, #56	@ 0x38
 8004a50:	2100      	movs	r1, #0
 8004a52:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	0018      	movs	r0, r3
 8004a58:	f000 f831 	bl	8004abe <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2239      	movs	r2, #57	@ 0x39
 8004a60:	2102      	movs	r1, #2
 8004a62:	5499      	strb	r1, [r3, r2]

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	3304      	adds	r3, #4
 8004a6c:	0019      	movs	r1, r3
 8004a6e:	0010      	movs	r0, r2
 8004a70:	f000 f9c8 	bl	8004e04 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	2108      	movs	r1, #8
 8004a80:	438a      	bics	r2, r1
 8004a82:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	6819      	ldr	r1, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	683a      	ldr	r2, [r7, #0]
 8004a90:	430a      	orrs	r2, r1
 8004a92:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	223e      	movs	r2, #62	@ 0x3e
 8004a98:	2101      	movs	r1, #1
 8004a9a:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	223a      	movs	r2, #58	@ 0x3a
 8004aa0:	2101      	movs	r1, #1
 8004aa2:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	223b      	movs	r2, #59	@ 0x3b
 8004aa8:	2101      	movs	r1, #1
 8004aaa:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2239      	movs	r2, #57	@ 0x39
 8004ab0:	2101      	movs	r1, #1
 8004ab2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	0018      	movs	r0, r3
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	b002      	add	sp, #8
 8004abc:	bd80      	pop	{r7, pc}

08004abe <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b082      	sub	sp, #8
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8004ac6:	46c0      	nop			@ (mov r8, r8)
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	b002      	add	sp, #8
 8004acc:	bd80      	pop	{r7, pc}
	...

08004ad0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b086      	sub	sp, #24
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004adc:	2317      	movs	r3, #23
 8004ade:	18fb      	adds	r3, r7, r3
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2238      	movs	r2, #56	@ 0x38
 8004ae8:	5c9b      	ldrb	r3, [r3, r2]
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d101      	bne.n	8004af2 <HAL_TIM_PWM_ConfigChannel+0x22>
 8004aee:	2302      	movs	r3, #2
 8004af0:	e0ad      	b.n	8004c4e <HAL_TIM_PWM_ConfigChannel+0x17e>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2238      	movs	r2, #56	@ 0x38
 8004af6:	2101      	movs	r1, #1
 8004af8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2b0c      	cmp	r3, #12
 8004afe:	d100      	bne.n	8004b02 <HAL_TIM_PWM_ConfigChannel+0x32>
 8004b00:	e076      	b.n	8004bf0 <HAL_TIM_PWM_ConfigChannel+0x120>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2b0c      	cmp	r3, #12
 8004b06:	d900      	bls.n	8004b0a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8004b08:	e095      	b.n	8004c36 <HAL_TIM_PWM_ConfigChannel+0x166>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2b08      	cmp	r3, #8
 8004b0e:	d04e      	beq.n	8004bae <HAL_TIM_PWM_ConfigChannel+0xde>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2b08      	cmp	r3, #8
 8004b14:	d900      	bls.n	8004b18 <HAL_TIM_PWM_ConfigChannel+0x48>
 8004b16:	e08e      	b.n	8004c36 <HAL_TIM_PWM_ConfigChannel+0x166>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d003      	beq.n	8004b26 <HAL_TIM_PWM_ConfigChannel+0x56>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2b04      	cmp	r3, #4
 8004b22:	d021      	beq.n	8004b68 <HAL_TIM_PWM_ConfigChannel+0x98>
 8004b24:	e087      	b.n	8004c36 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68ba      	ldr	r2, [r7, #8]
 8004b2c:	0011      	movs	r1, r2
 8004b2e:	0018      	movs	r0, r3
 8004b30:	f000 f9bc 	bl	8004eac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	699a      	ldr	r2, [r3, #24]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2108      	movs	r1, #8
 8004b40:	430a      	orrs	r2, r1
 8004b42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	699a      	ldr	r2, [r3, #24]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2104      	movs	r1, #4
 8004b50:	438a      	bics	r2, r1
 8004b52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6999      	ldr	r1, [r3, #24]
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	68da      	ldr	r2, [r3, #12]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	430a      	orrs	r2, r1
 8004b64:	619a      	str	r2, [r3, #24]
      break;
 8004b66:	e06b      	b.n	8004c40 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68ba      	ldr	r2, [r7, #8]
 8004b6e:	0011      	movs	r1, r2
 8004b70:	0018      	movs	r0, r3
 8004b72:	f000 f9d7 	bl	8004f24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	699a      	ldr	r2, [r3, #24]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2180      	movs	r1, #128	@ 0x80
 8004b82:	0109      	lsls	r1, r1, #4
 8004b84:	430a      	orrs	r2, r1
 8004b86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	699a      	ldr	r2, [r3, #24]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4931      	ldr	r1, [pc, #196]	@ (8004c58 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004b94:	400a      	ands	r2, r1
 8004b96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	6999      	ldr	r1, [r3, #24]
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	021a      	lsls	r2, r3, #8
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	430a      	orrs	r2, r1
 8004baa:	619a      	str	r2, [r3, #24]
      break;
 8004bac:	e048      	b.n	8004c40 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68ba      	ldr	r2, [r7, #8]
 8004bb4:	0011      	movs	r1, r2
 8004bb6:	0018      	movs	r0, r3
 8004bb8:	f000 f9f6 	bl	8004fa8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	69da      	ldr	r2, [r3, #28]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2108      	movs	r1, #8
 8004bc8:	430a      	orrs	r2, r1
 8004bca:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	69da      	ldr	r2, [r3, #28]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2104      	movs	r1, #4
 8004bd8:	438a      	bics	r2, r1
 8004bda:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	69d9      	ldr	r1, [r3, #28]
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	68da      	ldr	r2, [r3, #12]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	430a      	orrs	r2, r1
 8004bec:	61da      	str	r2, [r3, #28]
      break;
 8004bee:	e027      	b.n	8004c40 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68ba      	ldr	r2, [r7, #8]
 8004bf6:	0011      	movs	r1, r2
 8004bf8:	0018      	movs	r0, r3
 8004bfa:	f000 fa15 	bl	8005028 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	69da      	ldr	r2, [r3, #28]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2180      	movs	r1, #128	@ 0x80
 8004c0a:	0109      	lsls	r1, r1, #4
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	69da      	ldr	r2, [r3, #28]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	490f      	ldr	r1, [pc, #60]	@ (8004c58 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8004c1c:	400a      	ands	r2, r1
 8004c1e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	69d9      	ldr	r1, [r3, #28]
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	021a      	lsls	r2, r3, #8
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	430a      	orrs	r2, r1
 8004c32:	61da      	str	r2, [r3, #28]
      break;
 8004c34:	e004      	b.n	8004c40 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8004c36:	2317      	movs	r3, #23
 8004c38:	18fb      	adds	r3, r7, r3
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	701a      	strb	r2, [r3, #0]
      break;
 8004c3e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2238      	movs	r2, #56	@ 0x38
 8004c44:	2100      	movs	r1, #0
 8004c46:	5499      	strb	r1, [r3, r2]

  return status;
 8004c48:	2317      	movs	r3, #23
 8004c4a:	18fb      	adds	r3, r7, r3
 8004c4c:	781b      	ldrb	r3, [r3, #0]
}
 8004c4e:	0018      	movs	r0, r3
 8004c50:	46bd      	mov	sp, r7
 8004c52:	b006      	add	sp, #24
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	46c0      	nop			@ (mov r8, r8)
 8004c58:	fffffbff 	.word	0xfffffbff

08004c5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c66:	230f      	movs	r3, #15
 8004c68:	18fb      	adds	r3, r7, r3
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2238      	movs	r2, #56	@ 0x38
 8004c72:	5c9b      	ldrb	r3, [r3, r2]
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d101      	bne.n	8004c7c <HAL_TIM_ConfigClockSource+0x20>
 8004c78:	2302      	movs	r3, #2
 8004c7a:	e0bc      	b.n	8004df6 <HAL_TIM_ConfigClockSource+0x19a>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2238      	movs	r2, #56	@ 0x38
 8004c80:	2101      	movs	r1, #1
 8004c82:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2239      	movs	r2, #57	@ 0x39
 8004c88:	2102      	movs	r1, #2
 8004c8a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	2277      	movs	r2, #119	@ 0x77
 8004c98:	4393      	bics	r3, r2
 8004c9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	4a58      	ldr	r2, [pc, #352]	@ (8004e00 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68ba      	ldr	r2, [r7, #8]
 8004caa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2280      	movs	r2, #128	@ 0x80
 8004cb2:	0192      	lsls	r2, r2, #6
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d040      	beq.n	8004d3a <HAL_TIM_ConfigClockSource+0xde>
 8004cb8:	2280      	movs	r2, #128	@ 0x80
 8004cba:	0192      	lsls	r2, r2, #6
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d900      	bls.n	8004cc2 <HAL_TIM_ConfigClockSource+0x66>
 8004cc0:	e088      	b.n	8004dd4 <HAL_TIM_ConfigClockSource+0x178>
 8004cc2:	2280      	movs	r2, #128	@ 0x80
 8004cc4:	0152      	lsls	r2, r2, #5
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d100      	bne.n	8004ccc <HAL_TIM_ConfigClockSource+0x70>
 8004cca:	e088      	b.n	8004dde <HAL_TIM_ConfigClockSource+0x182>
 8004ccc:	2280      	movs	r2, #128	@ 0x80
 8004cce:	0152      	lsls	r2, r2, #5
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d900      	bls.n	8004cd6 <HAL_TIM_ConfigClockSource+0x7a>
 8004cd4:	e07e      	b.n	8004dd4 <HAL_TIM_ConfigClockSource+0x178>
 8004cd6:	2b70      	cmp	r3, #112	@ 0x70
 8004cd8:	d018      	beq.n	8004d0c <HAL_TIM_ConfigClockSource+0xb0>
 8004cda:	d900      	bls.n	8004cde <HAL_TIM_ConfigClockSource+0x82>
 8004cdc:	e07a      	b.n	8004dd4 <HAL_TIM_ConfigClockSource+0x178>
 8004cde:	2b60      	cmp	r3, #96	@ 0x60
 8004ce0:	d04f      	beq.n	8004d82 <HAL_TIM_ConfigClockSource+0x126>
 8004ce2:	d900      	bls.n	8004ce6 <HAL_TIM_ConfigClockSource+0x8a>
 8004ce4:	e076      	b.n	8004dd4 <HAL_TIM_ConfigClockSource+0x178>
 8004ce6:	2b50      	cmp	r3, #80	@ 0x50
 8004ce8:	d03b      	beq.n	8004d62 <HAL_TIM_ConfigClockSource+0x106>
 8004cea:	d900      	bls.n	8004cee <HAL_TIM_ConfigClockSource+0x92>
 8004cec:	e072      	b.n	8004dd4 <HAL_TIM_ConfigClockSource+0x178>
 8004cee:	2b40      	cmp	r3, #64	@ 0x40
 8004cf0:	d057      	beq.n	8004da2 <HAL_TIM_ConfigClockSource+0x146>
 8004cf2:	d900      	bls.n	8004cf6 <HAL_TIM_ConfigClockSource+0x9a>
 8004cf4:	e06e      	b.n	8004dd4 <HAL_TIM_ConfigClockSource+0x178>
 8004cf6:	2b30      	cmp	r3, #48	@ 0x30
 8004cf8:	d063      	beq.n	8004dc2 <HAL_TIM_ConfigClockSource+0x166>
 8004cfa:	d86b      	bhi.n	8004dd4 <HAL_TIM_ConfigClockSource+0x178>
 8004cfc:	2b20      	cmp	r3, #32
 8004cfe:	d060      	beq.n	8004dc2 <HAL_TIM_ConfigClockSource+0x166>
 8004d00:	d868      	bhi.n	8004dd4 <HAL_TIM_ConfigClockSource+0x178>
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d05d      	beq.n	8004dc2 <HAL_TIM_ConfigClockSource+0x166>
 8004d06:	2b10      	cmp	r3, #16
 8004d08:	d05b      	beq.n	8004dc2 <HAL_TIM_ConfigClockSource+0x166>
 8004d0a:	e063      	b.n	8004dd4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d1c:	f000 fa44 	bl	80051a8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	2277      	movs	r2, #119	@ 0x77
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68ba      	ldr	r2, [r7, #8]
 8004d36:	609a      	str	r2, [r3, #8]
      break;
 8004d38:	e052      	b.n	8004de0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d4a:	f000 fa2d 	bl	80051a8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	689a      	ldr	r2, [r3, #8]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2180      	movs	r1, #128	@ 0x80
 8004d5a:	01c9      	lsls	r1, r1, #7
 8004d5c:	430a      	orrs	r2, r1
 8004d5e:	609a      	str	r2, [r3, #8]
      break;
 8004d60:	e03e      	b.n	8004de0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d6e:	001a      	movs	r2, r3
 8004d70:	f000 f9a0 	bl	80050b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2150      	movs	r1, #80	@ 0x50
 8004d7a:	0018      	movs	r0, r3
 8004d7c:	f000 f9fa 	bl	8005174 <TIM_ITRx_SetConfig>
      break;
 8004d80:	e02e      	b.n	8004de0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d8e:	001a      	movs	r2, r3
 8004d90:	f000 f9be 	bl	8005110 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2160      	movs	r1, #96	@ 0x60
 8004d9a:	0018      	movs	r0, r3
 8004d9c:	f000 f9ea 	bl	8005174 <TIM_ITRx_SetConfig>
      break;
 8004da0:	e01e      	b.n	8004de0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dae:	001a      	movs	r2, r3
 8004db0:	f000 f980 	bl	80050b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2140      	movs	r1, #64	@ 0x40
 8004dba:	0018      	movs	r0, r3
 8004dbc:	f000 f9da 	bl	8005174 <TIM_ITRx_SetConfig>
      break;
 8004dc0:	e00e      	b.n	8004de0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	0019      	movs	r1, r3
 8004dcc:	0010      	movs	r0, r2
 8004dce:	f000 f9d1 	bl	8005174 <TIM_ITRx_SetConfig>
      break;
 8004dd2:	e005      	b.n	8004de0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004dd4:	230f      	movs	r3, #15
 8004dd6:	18fb      	adds	r3, r7, r3
 8004dd8:	2201      	movs	r2, #1
 8004dda:	701a      	strb	r2, [r3, #0]
      break;
 8004ddc:	e000      	b.n	8004de0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004dde:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2239      	movs	r2, #57	@ 0x39
 8004de4:	2101      	movs	r1, #1
 8004de6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2238      	movs	r2, #56	@ 0x38
 8004dec:	2100      	movs	r1, #0
 8004dee:	5499      	strb	r1, [r3, r2]

  return status;
 8004df0:	230f      	movs	r3, #15
 8004df2:	18fb      	adds	r3, r7, r3
 8004df4:	781b      	ldrb	r3, [r3, #0]
}
 8004df6:	0018      	movs	r0, r3
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	b004      	add	sp, #16
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	46c0      	nop			@ (mov r8, r8)
 8004e00:	ffff00ff 	.word	0xffff00ff

08004e04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	2380      	movs	r3, #128	@ 0x80
 8004e18:	05db      	lsls	r3, r3, #23
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d007      	beq.n	8004e2e <TIM_Base_SetConfig+0x2a>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a1f      	ldr	r2, [pc, #124]	@ (8004ea0 <TIM_Base_SetConfig+0x9c>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d003      	beq.n	8004e2e <TIM_Base_SetConfig+0x2a>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a1e      	ldr	r2, [pc, #120]	@ (8004ea4 <TIM_Base_SetConfig+0xa0>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d108      	bne.n	8004e40 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2270      	movs	r2, #112	@ 0x70
 8004e32:	4393      	bics	r3, r2
 8004e34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	2380      	movs	r3, #128	@ 0x80
 8004e44:	05db      	lsls	r3, r3, #23
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d007      	beq.n	8004e5a <TIM_Base_SetConfig+0x56>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a14      	ldr	r2, [pc, #80]	@ (8004ea0 <TIM_Base_SetConfig+0x9c>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d003      	beq.n	8004e5a <TIM_Base_SetConfig+0x56>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a13      	ldr	r2, [pc, #76]	@ (8004ea4 <TIM_Base_SetConfig+0xa0>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d108      	bne.n	8004e6c <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	4a12      	ldr	r2, [pc, #72]	@ (8004ea8 <TIM_Base_SetConfig+0xa4>)
 8004e5e:	4013      	ands	r3, r2
 8004e60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2280      	movs	r2, #128	@ 0x80
 8004e70:	4393      	bics	r3, r2
 8004e72:	001a      	movs	r2, r3
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	689a      	ldr	r2, [r3, #8]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2201      	movs	r2, #1
 8004e96:	615a      	str	r2, [r3, #20]
}
 8004e98:	46c0      	nop			@ (mov r8, r8)
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	b004      	add	sp, #16
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	40010800 	.word	0x40010800
 8004ea4:	40011400 	.word	0x40011400
 8004ea8:	fffffcff 	.word	0xfffffcff

08004eac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b086      	sub	sp, #24
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a1b      	ldr	r3, [r3, #32]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	4393      	bics	r3, r2
 8004ebe:	001a      	movs	r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a1b      	ldr	r3, [r3, #32]
 8004ec8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	699b      	ldr	r3, [r3, #24]
 8004ed4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2270      	movs	r2, #112	@ 0x70
 8004eda:	4393      	bics	r3, r2
 8004edc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2203      	movs	r2, #3
 8004ee2:	4393      	bics	r3, r2
 8004ee4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	4393      	bics	r3, r2
 8004ef6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	697a      	ldr	r2, [r7, #20]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	693a      	ldr	r2, [r7, #16]
 8004f06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	685a      	ldr	r2, [r3, #4]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	621a      	str	r2, [r3, #32]
}
 8004f1c:	46c0      	nop			@ (mov r8, r8)
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	b006      	add	sp, #24
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b086      	sub	sp, #24
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a1b      	ldr	r3, [r3, #32]
 8004f32:	2210      	movs	r2, #16
 8004f34:	4393      	bics	r3, r2
 8004f36:	001a      	movs	r2, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a1b      	ldr	r3, [r3, #32]
 8004f40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	699b      	ldr	r3, [r3, #24]
 8004f4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	4a13      	ldr	r2, [pc, #76]	@ (8004fa0 <TIM_OC2_SetConfig+0x7c>)
 8004f52:	4013      	ands	r3, r2
 8004f54:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	4a12      	ldr	r2, [pc, #72]	@ (8004fa4 <TIM_OC2_SetConfig+0x80>)
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	021b      	lsls	r3, r3, #8
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	2220      	movs	r2, #32
 8004f6e:	4393      	bics	r3, r2
 8004f70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	011b      	lsls	r3, r3, #4
 8004f78:	697a      	ldr	r2, [r7, #20]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	693a      	ldr	r2, [r7, #16]
 8004f82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	685a      	ldr	r2, [r3, #4]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	697a      	ldr	r2, [r7, #20]
 8004f96:	621a      	str	r2, [r3, #32]
}
 8004f98:	46c0      	nop			@ (mov r8, r8)
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	b006      	add	sp, #24
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	ffff8fff 	.word	0xffff8fff
 8004fa4:	fffffcff 	.word	0xfffffcff

08004fa8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b086      	sub	sp, #24
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
 8004fb6:	4a1a      	ldr	r2, [pc, #104]	@ (8005020 <TIM_OC3_SetConfig+0x78>)
 8004fb8:	401a      	ands	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	69db      	ldr	r3, [r3, #28]
 8004fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2270      	movs	r2, #112	@ 0x70
 8004fd4:	4393      	bics	r3, r2
 8004fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2203      	movs	r2, #3
 8004fdc:	4393      	bics	r3, r2
 8004fde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	4a0d      	ldr	r2, [pc, #52]	@ (8005024 <TIM_OC3_SetConfig+0x7c>)
 8004fee:	4013      	ands	r3, r2
 8004ff0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	021b      	lsls	r3, r3, #8
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	693a      	ldr	r2, [r7, #16]
 8005002:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	68fa      	ldr	r2, [r7, #12]
 8005008:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	685a      	ldr	r2, [r3, #4]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	697a      	ldr	r2, [r7, #20]
 8005016:	621a      	str	r2, [r3, #32]
}
 8005018:	46c0      	nop			@ (mov r8, r8)
 800501a:	46bd      	mov	sp, r7
 800501c:	b006      	add	sp, #24
 800501e:	bd80      	pop	{r7, pc}
 8005020:	fffffeff 	.word	0xfffffeff
 8005024:	fffffdff 	.word	0xfffffdff

08005028 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b086      	sub	sp, #24
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	4a1b      	ldr	r2, [pc, #108]	@ (80050a4 <TIM_OC4_SetConfig+0x7c>)
 8005038:	401a      	ands	r2, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a1b      	ldr	r3, [r3, #32]
 8005042:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	69db      	ldr	r3, [r3, #28]
 800504e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	4a15      	ldr	r2, [pc, #84]	@ (80050a8 <TIM_OC4_SetConfig+0x80>)
 8005054:	4013      	ands	r3, r2
 8005056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	4a14      	ldr	r2, [pc, #80]	@ (80050ac <TIM_OC4_SetConfig+0x84>)
 800505c:	4013      	ands	r3, r2
 800505e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	021b      	lsls	r3, r3, #8
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	4313      	orrs	r3, r2
 800506a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	4a10      	ldr	r2, [pc, #64]	@ (80050b0 <TIM_OC4_SetConfig+0x88>)
 8005070:	4013      	ands	r3, r2
 8005072:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	031b      	lsls	r3, r3, #12
 800507a:	697a      	ldr	r2, [r7, #20]
 800507c:	4313      	orrs	r3, r2
 800507e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	693a      	ldr	r2, [r7, #16]
 8005084:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	685a      	ldr	r2, [r3, #4]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	697a      	ldr	r2, [r7, #20]
 8005098:	621a      	str	r2, [r3, #32]
}
 800509a:	46c0      	nop			@ (mov r8, r8)
 800509c:	46bd      	mov	sp, r7
 800509e:	b006      	add	sp, #24
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	46c0      	nop			@ (mov r8, r8)
 80050a4:	ffffefff 	.word	0xffffefff
 80050a8:	ffff8fff 	.word	0xffff8fff
 80050ac:	fffffcff 	.word	0xfffffcff
 80050b0:	ffffdfff 	.word	0xffffdfff

080050b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b086      	sub	sp, #24
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6a1b      	ldr	r3, [r3, #32]
 80050c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	2201      	movs	r2, #1
 80050cc:	4393      	bics	r3, r2
 80050ce:	001a      	movs	r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	699b      	ldr	r3, [r3, #24]
 80050d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	22f0      	movs	r2, #240	@ 0xf0
 80050de:	4393      	bics	r3, r2
 80050e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	011b      	lsls	r3, r3, #4
 80050e6:	693a      	ldr	r2, [r7, #16]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	220a      	movs	r2, #10
 80050f0:	4393      	bics	r3, r2
 80050f2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050f4:	697a      	ldr	r2, [r7, #20]
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	697a      	ldr	r2, [r7, #20]
 8005106:	621a      	str	r2, [r3, #32]
}
 8005108:	46c0      	nop			@ (mov r8, r8)
 800510a:	46bd      	mov	sp, r7
 800510c:	b006      	add	sp, #24
 800510e:	bd80      	pop	{r7, pc}

08005110 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b086      	sub	sp, #24
 8005114:	af00      	add	r7, sp, #0
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	60b9      	str	r1, [r7, #8]
 800511a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6a1b      	ldr	r3, [r3, #32]
 8005120:	2210      	movs	r2, #16
 8005122:	4393      	bics	r3, r2
 8005124:	001a      	movs	r2, r3
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	699b      	ldr	r3, [r3, #24]
 800512e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6a1b      	ldr	r3, [r3, #32]
 8005134:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	4a0d      	ldr	r2, [pc, #52]	@ (8005170 <TIM_TI2_ConfigInputStage+0x60>)
 800513a:	4013      	ands	r3, r2
 800513c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	031b      	lsls	r3, r3, #12
 8005142:	697a      	ldr	r2, [r7, #20]
 8005144:	4313      	orrs	r3, r2
 8005146:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	22a0      	movs	r2, #160	@ 0xa0
 800514c:	4393      	bics	r3, r2
 800514e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	011b      	lsls	r3, r3, #4
 8005154:	693a      	ldr	r2, [r7, #16]
 8005156:	4313      	orrs	r3, r2
 8005158:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	697a      	ldr	r2, [r7, #20]
 800515e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	693a      	ldr	r2, [r7, #16]
 8005164:	621a      	str	r2, [r3, #32]
}
 8005166:	46c0      	nop			@ (mov r8, r8)
 8005168:	46bd      	mov	sp, r7
 800516a:	b006      	add	sp, #24
 800516c:	bd80      	pop	{r7, pc}
 800516e:	46c0      	nop			@ (mov r8, r8)
 8005170:	ffff0fff 	.word	0xffff0fff

08005174 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2270      	movs	r2, #112	@ 0x70
 8005188:	4393      	bics	r3, r2
 800518a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800518c:	683a      	ldr	r2, [r7, #0]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	4313      	orrs	r3, r2
 8005192:	2207      	movs	r2, #7
 8005194:	4313      	orrs	r3, r2
 8005196:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	609a      	str	r2, [r3, #8]
}
 800519e:	46c0      	nop			@ (mov r8, r8)
 80051a0:	46bd      	mov	sp, r7
 80051a2:	b004      	add	sp, #16
 80051a4:	bd80      	pop	{r7, pc}
	...

080051a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b086      	sub	sp, #24
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	607a      	str	r2, [r7, #4]
 80051b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	4a09      	ldr	r2, [pc, #36]	@ (80051e4 <TIM_ETR_SetConfig+0x3c>)
 80051c0:	4013      	ands	r3, r2
 80051c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	021a      	lsls	r2, r3, #8
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	431a      	orrs	r2, r3
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	697a      	ldr	r2, [r7, #20]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	697a      	ldr	r2, [r7, #20]
 80051da:	609a      	str	r2, [r3, #8]
}
 80051dc:	46c0      	nop			@ (mov r8, r8)
 80051de:	46bd      	mov	sp, r7
 80051e0:	b006      	add	sp, #24
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	ffff00ff 	.word	0xffff00ff

080051e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2238      	movs	r2, #56	@ 0x38
 80051f6:	5c9b      	ldrb	r3, [r3, r2]
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d101      	bne.n	8005200 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051fc:	2302      	movs	r3, #2
 80051fe:	e042      	b.n	8005286 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2238      	movs	r2, #56	@ 0x38
 8005204:	2101      	movs	r1, #1
 8005206:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2239      	movs	r2, #57	@ 0x39
 800520c:	2102      	movs	r1, #2
 800520e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2270      	movs	r2, #112	@ 0x70
 8005224:	4393      	bics	r3, r2
 8005226:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	4313      	orrs	r3, r2
 8005230:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	2380      	movs	r3, #128	@ 0x80
 8005240:	05db      	lsls	r3, r3, #23
 8005242:	429a      	cmp	r2, r3
 8005244:	d009      	beq.n	800525a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a11      	ldr	r2, [pc, #68]	@ (8005290 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d004      	beq.n	800525a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a0f      	ldr	r2, [pc, #60]	@ (8005294 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d10c      	bne.n	8005274 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	2280      	movs	r2, #128	@ 0x80
 800525e:	4393      	bics	r3, r2
 8005260:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	68ba      	ldr	r2, [r7, #8]
 8005268:	4313      	orrs	r3, r2
 800526a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68ba      	ldr	r2, [r7, #8]
 8005272:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2239      	movs	r2, #57	@ 0x39
 8005278:	2101      	movs	r1, #1
 800527a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2238      	movs	r2, #56	@ 0x38
 8005280:	2100      	movs	r1, #0
 8005282:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	0018      	movs	r0, r3
 8005288:	46bd      	mov	sp, r7
 800528a:	b004      	add	sp, #16
 800528c:	bd80      	pop	{r7, pc}
 800528e:	46c0      	nop			@ (mov r8, r8)
 8005290:	40010800 	.word	0x40010800
 8005294:	40011400 	.word	0x40011400

08005298 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b082      	sub	sp, #8
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d101      	bne.n	80052aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e044      	b.n	8005334 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d107      	bne.n	80052c2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2278      	movs	r2, #120	@ 0x78
 80052b6:	2100      	movs	r1, #0
 80052b8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	0018      	movs	r0, r3
 80052be:	f7fc fb3b 	bl	8001938 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2224      	movs	r2, #36	@ 0x24
 80052c6:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2101      	movs	r1, #1
 80052d4:	438a      	bics	r2, r1
 80052d6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	0018      	movs	r0, r3
 80052dc:	f000 f8d0 	bl	8005480 <UART_SetConfig>
 80052e0:	0003      	movs	r3, r0
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d101      	bne.n	80052ea <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e024      	b.n	8005334 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d003      	beq.n	80052fa <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	0018      	movs	r0, r3
 80052f6:	f000 fb47 	bl	8005988 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	685a      	ldr	r2, [r3, #4]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	490d      	ldr	r1, [pc, #52]	@ (800533c <HAL_UART_Init+0xa4>)
 8005306:	400a      	ands	r2, r1
 8005308:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	689a      	ldr	r2, [r3, #8]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	212a      	movs	r1, #42	@ 0x2a
 8005316:	438a      	bics	r2, r1
 8005318:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2101      	movs	r1, #1
 8005326:	430a      	orrs	r2, r1
 8005328:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	0018      	movs	r0, r3
 800532e:	f000 fbdf 	bl	8005af0 <UART_CheckIdleState>
 8005332:	0003      	movs	r3, r0
}
 8005334:	0018      	movs	r0, r3
 8005336:	46bd      	mov	sp, r7
 8005338:	b002      	add	sp, #8
 800533a:	bd80      	pop	{r7, pc}
 800533c:	ffffb7ff 	.word	0xffffb7ff

08005340 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b08a      	sub	sp, #40	@ 0x28
 8005344:	af02      	add	r7, sp, #8
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	603b      	str	r3, [r7, #0]
 800534c:	1dbb      	adds	r3, r7, #6
 800534e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005354:	2b20      	cmp	r3, #32
 8005356:	d000      	beq.n	800535a <HAL_UART_Transmit+0x1a>
 8005358:	e08c      	b.n	8005474 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d003      	beq.n	8005368 <HAL_UART_Transmit+0x28>
 8005360:	1dbb      	adds	r3, r7, #6
 8005362:	881b      	ldrh	r3, [r3, #0]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d101      	bne.n	800536c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e084      	b.n	8005476 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	689a      	ldr	r2, [r3, #8]
 8005370:	2380      	movs	r3, #128	@ 0x80
 8005372:	015b      	lsls	r3, r3, #5
 8005374:	429a      	cmp	r2, r3
 8005376:	d109      	bne.n	800538c <HAL_UART_Transmit+0x4c>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d105      	bne.n	800538c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	2201      	movs	r2, #1
 8005384:	4013      	ands	r3, r2
 8005386:	d001      	beq.n	800538c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e074      	b.n	8005476 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2284      	movs	r2, #132	@ 0x84
 8005390:	2100      	movs	r1, #0
 8005392:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2221      	movs	r2, #33	@ 0x21
 8005398:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800539a:	f7fc fc8f 	bl	8001cbc <HAL_GetTick>
 800539e:	0003      	movs	r3, r0
 80053a0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	1dba      	adds	r2, r7, #6
 80053a6:	2150      	movs	r1, #80	@ 0x50
 80053a8:	8812      	ldrh	r2, [r2, #0]
 80053aa:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	1dba      	adds	r2, r7, #6
 80053b0:	2152      	movs	r1, #82	@ 0x52
 80053b2:	8812      	ldrh	r2, [r2, #0]
 80053b4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	689a      	ldr	r2, [r3, #8]
 80053ba:	2380      	movs	r3, #128	@ 0x80
 80053bc:	015b      	lsls	r3, r3, #5
 80053be:	429a      	cmp	r2, r3
 80053c0:	d108      	bne.n	80053d4 <HAL_UART_Transmit+0x94>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d104      	bne.n	80053d4 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80053ca:	2300      	movs	r3, #0
 80053cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	61bb      	str	r3, [r7, #24]
 80053d2:	e003      	b.n	80053dc <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053d8:	2300      	movs	r3, #0
 80053da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80053dc:	e02f      	b.n	800543e <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	68f8      	ldr	r0, [r7, #12]
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	9300      	str	r3, [sp, #0]
 80053e6:	0013      	movs	r3, r2
 80053e8:	2200      	movs	r2, #0
 80053ea:	2180      	movs	r1, #128	@ 0x80
 80053ec:	f000 fc28 	bl	8005c40 <UART_WaitOnFlagUntilTimeout>
 80053f0:	1e03      	subs	r3, r0, #0
 80053f2:	d004      	beq.n	80053fe <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2220      	movs	r2, #32
 80053f8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e03b      	b.n	8005476 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d10b      	bne.n	800541c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	881b      	ldrh	r3, [r3, #0]
 8005408:	001a      	movs	r2, r3
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	05d2      	lsls	r2, r2, #23
 8005410:	0dd2      	lsrs	r2, r2, #23
 8005412:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	3302      	adds	r3, #2
 8005418:	61bb      	str	r3, [r7, #24]
 800541a:	e007      	b.n	800542c <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	781a      	ldrb	r2, [r3, #0]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	3301      	adds	r3, #1
 800542a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2252      	movs	r2, #82	@ 0x52
 8005430:	5a9b      	ldrh	r3, [r3, r2]
 8005432:	b29b      	uxth	r3, r3
 8005434:	3b01      	subs	r3, #1
 8005436:	b299      	uxth	r1, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2252      	movs	r2, #82	@ 0x52
 800543c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2252      	movs	r2, #82	@ 0x52
 8005442:	5a9b      	ldrh	r3, [r3, r2]
 8005444:	b29b      	uxth	r3, r3
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1c9      	bne.n	80053de <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800544a:	697a      	ldr	r2, [r7, #20]
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	9300      	str	r3, [sp, #0]
 8005452:	0013      	movs	r3, r2
 8005454:	2200      	movs	r2, #0
 8005456:	2140      	movs	r1, #64	@ 0x40
 8005458:	f000 fbf2 	bl	8005c40 <UART_WaitOnFlagUntilTimeout>
 800545c:	1e03      	subs	r3, r0, #0
 800545e:	d004      	beq.n	800546a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2220      	movs	r2, #32
 8005464:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e005      	b.n	8005476 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2220      	movs	r2, #32
 800546e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005470:	2300      	movs	r3, #0
 8005472:	e000      	b.n	8005476 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8005474:	2302      	movs	r3, #2
  }
}
 8005476:	0018      	movs	r0, r3
 8005478:	46bd      	mov	sp, r7
 800547a:	b008      	add	sp, #32
 800547c:	bd80      	pop	{r7, pc}
	...

08005480 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005480:	b5b0      	push	{r4, r5, r7, lr}
 8005482:	b08e      	sub	sp, #56	@ 0x38
 8005484:	af00      	add	r7, sp, #0
 8005486:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005488:	231a      	movs	r3, #26
 800548a:	2218      	movs	r2, #24
 800548c:	189b      	adds	r3, r3, r2
 800548e:	19db      	adds	r3, r3, r7
 8005490:	2200      	movs	r2, #0
 8005492:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	689a      	ldr	r2, [r3, #8]
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	691b      	ldr	r3, [r3, #16]
 800549c:	431a      	orrs	r2, r3
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	431a      	orrs	r2, r3
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	69db      	ldr	r3, [r3, #28]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4ac6      	ldr	r2, [pc, #792]	@ (80057cc <UART_SetConfig+0x34c>)
 80054b4:	4013      	ands	r3, r2
 80054b6:	0019      	movs	r1, r3
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80054be:	430a      	orrs	r2, r1
 80054c0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	4ac1      	ldr	r2, [pc, #772]	@ (80057d0 <UART_SetConfig+0x350>)
 80054ca:	4013      	ands	r3, r2
 80054cc:	0019      	movs	r1, r3
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	68da      	ldr	r2, [r3, #12]
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	430a      	orrs	r2, r1
 80054d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	699b      	ldr	r3, [r3, #24]
 80054de:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4abb      	ldr	r2, [pc, #748]	@ (80057d4 <UART_SetConfig+0x354>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d004      	beq.n	80054f4 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	6a1b      	ldr	r3, [r3, #32]
 80054ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80054f0:	4313      	orrs	r3, r2
 80054f2:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	4ab7      	ldr	r2, [pc, #732]	@ (80057d8 <UART_SetConfig+0x358>)
 80054fc:	4013      	ands	r3, r2
 80054fe:	0019      	movs	r1, r3
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005506:	430a      	orrs	r2, r1
 8005508:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4ab3      	ldr	r2, [pc, #716]	@ (80057dc <UART_SetConfig+0x35c>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d131      	bne.n	8005578 <UART_SetConfig+0xf8>
 8005514:	4bb2      	ldr	r3, [pc, #712]	@ (80057e0 <UART_SetConfig+0x360>)
 8005516:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005518:	2203      	movs	r2, #3
 800551a:	4013      	ands	r3, r2
 800551c:	2b03      	cmp	r3, #3
 800551e:	d01d      	beq.n	800555c <UART_SetConfig+0xdc>
 8005520:	d823      	bhi.n	800556a <UART_SetConfig+0xea>
 8005522:	2b02      	cmp	r3, #2
 8005524:	d00c      	beq.n	8005540 <UART_SetConfig+0xc0>
 8005526:	d820      	bhi.n	800556a <UART_SetConfig+0xea>
 8005528:	2b00      	cmp	r3, #0
 800552a:	d002      	beq.n	8005532 <UART_SetConfig+0xb2>
 800552c:	2b01      	cmp	r3, #1
 800552e:	d00e      	beq.n	800554e <UART_SetConfig+0xce>
 8005530:	e01b      	b.n	800556a <UART_SetConfig+0xea>
 8005532:	231b      	movs	r3, #27
 8005534:	2218      	movs	r2, #24
 8005536:	189b      	adds	r3, r3, r2
 8005538:	19db      	adds	r3, r3, r7
 800553a:	2201      	movs	r2, #1
 800553c:	701a      	strb	r2, [r3, #0]
 800553e:	e09c      	b.n	800567a <UART_SetConfig+0x1fa>
 8005540:	231b      	movs	r3, #27
 8005542:	2218      	movs	r2, #24
 8005544:	189b      	adds	r3, r3, r2
 8005546:	19db      	adds	r3, r3, r7
 8005548:	2202      	movs	r2, #2
 800554a:	701a      	strb	r2, [r3, #0]
 800554c:	e095      	b.n	800567a <UART_SetConfig+0x1fa>
 800554e:	231b      	movs	r3, #27
 8005550:	2218      	movs	r2, #24
 8005552:	189b      	adds	r3, r3, r2
 8005554:	19db      	adds	r3, r3, r7
 8005556:	2204      	movs	r2, #4
 8005558:	701a      	strb	r2, [r3, #0]
 800555a:	e08e      	b.n	800567a <UART_SetConfig+0x1fa>
 800555c:	231b      	movs	r3, #27
 800555e:	2218      	movs	r2, #24
 8005560:	189b      	adds	r3, r3, r2
 8005562:	19db      	adds	r3, r3, r7
 8005564:	2208      	movs	r2, #8
 8005566:	701a      	strb	r2, [r3, #0]
 8005568:	e087      	b.n	800567a <UART_SetConfig+0x1fa>
 800556a:	231b      	movs	r3, #27
 800556c:	2218      	movs	r2, #24
 800556e:	189b      	adds	r3, r3, r2
 8005570:	19db      	adds	r3, r3, r7
 8005572:	2210      	movs	r2, #16
 8005574:	701a      	strb	r2, [r3, #0]
 8005576:	e080      	b.n	800567a <UART_SetConfig+0x1fa>
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a99      	ldr	r2, [pc, #612]	@ (80057e4 <UART_SetConfig+0x364>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d131      	bne.n	80055e6 <UART_SetConfig+0x166>
 8005582:	4b97      	ldr	r3, [pc, #604]	@ (80057e0 <UART_SetConfig+0x360>)
 8005584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005586:	220c      	movs	r2, #12
 8005588:	4013      	ands	r3, r2
 800558a:	2b0c      	cmp	r3, #12
 800558c:	d01d      	beq.n	80055ca <UART_SetConfig+0x14a>
 800558e:	d823      	bhi.n	80055d8 <UART_SetConfig+0x158>
 8005590:	2b08      	cmp	r3, #8
 8005592:	d00c      	beq.n	80055ae <UART_SetConfig+0x12e>
 8005594:	d820      	bhi.n	80055d8 <UART_SetConfig+0x158>
 8005596:	2b00      	cmp	r3, #0
 8005598:	d002      	beq.n	80055a0 <UART_SetConfig+0x120>
 800559a:	2b04      	cmp	r3, #4
 800559c:	d00e      	beq.n	80055bc <UART_SetConfig+0x13c>
 800559e:	e01b      	b.n	80055d8 <UART_SetConfig+0x158>
 80055a0:	231b      	movs	r3, #27
 80055a2:	2218      	movs	r2, #24
 80055a4:	189b      	adds	r3, r3, r2
 80055a6:	19db      	adds	r3, r3, r7
 80055a8:	2200      	movs	r2, #0
 80055aa:	701a      	strb	r2, [r3, #0]
 80055ac:	e065      	b.n	800567a <UART_SetConfig+0x1fa>
 80055ae:	231b      	movs	r3, #27
 80055b0:	2218      	movs	r2, #24
 80055b2:	189b      	adds	r3, r3, r2
 80055b4:	19db      	adds	r3, r3, r7
 80055b6:	2202      	movs	r2, #2
 80055b8:	701a      	strb	r2, [r3, #0]
 80055ba:	e05e      	b.n	800567a <UART_SetConfig+0x1fa>
 80055bc:	231b      	movs	r3, #27
 80055be:	2218      	movs	r2, #24
 80055c0:	189b      	adds	r3, r3, r2
 80055c2:	19db      	adds	r3, r3, r7
 80055c4:	2204      	movs	r2, #4
 80055c6:	701a      	strb	r2, [r3, #0]
 80055c8:	e057      	b.n	800567a <UART_SetConfig+0x1fa>
 80055ca:	231b      	movs	r3, #27
 80055cc:	2218      	movs	r2, #24
 80055ce:	189b      	adds	r3, r3, r2
 80055d0:	19db      	adds	r3, r3, r7
 80055d2:	2208      	movs	r2, #8
 80055d4:	701a      	strb	r2, [r3, #0]
 80055d6:	e050      	b.n	800567a <UART_SetConfig+0x1fa>
 80055d8:	231b      	movs	r3, #27
 80055da:	2218      	movs	r2, #24
 80055dc:	189b      	adds	r3, r3, r2
 80055de:	19db      	adds	r3, r3, r7
 80055e0:	2210      	movs	r2, #16
 80055e2:	701a      	strb	r2, [r3, #0]
 80055e4:	e049      	b.n	800567a <UART_SetConfig+0x1fa>
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a7a      	ldr	r2, [pc, #488]	@ (80057d4 <UART_SetConfig+0x354>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d13e      	bne.n	800566e <UART_SetConfig+0x1ee>
 80055f0:	4b7b      	ldr	r3, [pc, #492]	@ (80057e0 <UART_SetConfig+0x360>)
 80055f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80055f4:	23c0      	movs	r3, #192	@ 0xc0
 80055f6:	011b      	lsls	r3, r3, #4
 80055f8:	4013      	ands	r3, r2
 80055fa:	22c0      	movs	r2, #192	@ 0xc0
 80055fc:	0112      	lsls	r2, r2, #4
 80055fe:	4293      	cmp	r3, r2
 8005600:	d027      	beq.n	8005652 <UART_SetConfig+0x1d2>
 8005602:	22c0      	movs	r2, #192	@ 0xc0
 8005604:	0112      	lsls	r2, r2, #4
 8005606:	4293      	cmp	r3, r2
 8005608:	d82a      	bhi.n	8005660 <UART_SetConfig+0x1e0>
 800560a:	2280      	movs	r2, #128	@ 0x80
 800560c:	0112      	lsls	r2, r2, #4
 800560e:	4293      	cmp	r3, r2
 8005610:	d011      	beq.n	8005636 <UART_SetConfig+0x1b6>
 8005612:	2280      	movs	r2, #128	@ 0x80
 8005614:	0112      	lsls	r2, r2, #4
 8005616:	4293      	cmp	r3, r2
 8005618:	d822      	bhi.n	8005660 <UART_SetConfig+0x1e0>
 800561a:	2b00      	cmp	r3, #0
 800561c:	d004      	beq.n	8005628 <UART_SetConfig+0x1a8>
 800561e:	2280      	movs	r2, #128	@ 0x80
 8005620:	00d2      	lsls	r2, r2, #3
 8005622:	4293      	cmp	r3, r2
 8005624:	d00e      	beq.n	8005644 <UART_SetConfig+0x1c4>
 8005626:	e01b      	b.n	8005660 <UART_SetConfig+0x1e0>
 8005628:	231b      	movs	r3, #27
 800562a:	2218      	movs	r2, #24
 800562c:	189b      	adds	r3, r3, r2
 800562e:	19db      	adds	r3, r3, r7
 8005630:	2200      	movs	r2, #0
 8005632:	701a      	strb	r2, [r3, #0]
 8005634:	e021      	b.n	800567a <UART_SetConfig+0x1fa>
 8005636:	231b      	movs	r3, #27
 8005638:	2218      	movs	r2, #24
 800563a:	189b      	adds	r3, r3, r2
 800563c:	19db      	adds	r3, r3, r7
 800563e:	2202      	movs	r2, #2
 8005640:	701a      	strb	r2, [r3, #0]
 8005642:	e01a      	b.n	800567a <UART_SetConfig+0x1fa>
 8005644:	231b      	movs	r3, #27
 8005646:	2218      	movs	r2, #24
 8005648:	189b      	adds	r3, r3, r2
 800564a:	19db      	adds	r3, r3, r7
 800564c:	2204      	movs	r2, #4
 800564e:	701a      	strb	r2, [r3, #0]
 8005650:	e013      	b.n	800567a <UART_SetConfig+0x1fa>
 8005652:	231b      	movs	r3, #27
 8005654:	2218      	movs	r2, #24
 8005656:	189b      	adds	r3, r3, r2
 8005658:	19db      	adds	r3, r3, r7
 800565a:	2208      	movs	r2, #8
 800565c:	701a      	strb	r2, [r3, #0]
 800565e:	e00c      	b.n	800567a <UART_SetConfig+0x1fa>
 8005660:	231b      	movs	r3, #27
 8005662:	2218      	movs	r2, #24
 8005664:	189b      	adds	r3, r3, r2
 8005666:	19db      	adds	r3, r3, r7
 8005668:	2210      	movs	r2, #16
 800566a:	701a      	strb	r2, [r3, #0]
 800566c:	e005      	b.n	800567a <UART_SetConfig+0x1fa>
 800566e:	231b      	movs	r3, #27
 8005670:	2218      	movs	r2, #24
 8005672:	189b      	adds	r3, r3, r2
 8005674:	19db      	adds	r3, r3, r7
 8005676:	2210      	movs	r2, #16
 8005678:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a55      	ldr	r2, [pc, #340]	@ (80057d4 <UART_SetConfig+0x354>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d000      	beq.n	8005686 <UART_SetConfig+0x206>
 8005684:	e084      	b.n	8005790 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005686:	231b      	movs	r3, #27
 8005688:	2218      	movs	r2, #24
 800568a:	189b      	adds	r3, r3, r2
 800568c:	19db      	adds	r3, r3, r7
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	2b08      	cmp	r3, #8
 8005692:	d01d      	beq.n	80056d0 <UART_SetConfig+0x250>
 8005694:	dc20      	bgt.n	80056d8 <UART_SetConfig+0x258>
 8005696:	2b04      	cmp	r3, #4
 8005698:	d015      	beq.n	80056c6 <UART_SetConfig+0x246>
 800569a:	dc1d      	bgt.n	80056d8 <UART_SetConfig+0x258>
 800569c:	2b00      	cmp	r3, #0
 800569e:	d002      	beq.n	80056a6 <UART_SetConfig+0x226>
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	d005      	beq.n	80056b0 <UART_SetConfig+0x230>
 80056a4:	e018      	b.n	80056d8 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056a6:	f7fe ff7f 	bl	80045a8 <HAL_RCC_GetPCLK1Freq>
 80056aa:	0003      	movs	r3, r0
 80056ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80056ae:	e01c      	b.n	80056ea <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056b0:	4b4b      	ldr	r3, [pc, #300]	@ (80057e0 <UART_SetConfig+0x360>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2210      	movs	r2, #16
 80056b6:	4013      	ands	r3, r2
 80056b8:	d002      	beq.n	80056c0 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80056ba:	4b4b      	ldr	r3, [pc, #300]	@ (80057e8 <UART_SetConfig+0x368>)
 80056bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80056be:	e014      	b.n	80056ea <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 80056c0:	4b4a      	ldr	r3, [pc, #296]	@ (80057ec <UART_SetConfig+0x36c>)
 80056c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80056c4:	e011      	b.n	80056ea <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056c6:	f7fe febf 	bl	8004448 <HAL_RCC_GetSysClockFreq>
 80056ca:	0003      	movs	r3, r0
 80056cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80056ce:	e00c      	b.n	80056ea <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056d0:	2380      	movs	r3, #128	@ 0x80
 80056d2:	021b      	lsls	r3, r3, #8
 80056d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80056d6:	e008      	b.n	80056ea <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 80056d8:	2300      	movs	r3, #0
 80056da:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80056dc:	231a      	movs	r3, #26
 80056de:	2218      	movs	r2, #24
 80056e0:	189b      	adds	r3, r3, r2
 80056e2:	19db      	adds	r3, r3, r7
 80056e4:	2201      	movs	r2, #1
 80056e6:	701a      	strb	r2, [r3, #0]
        break;
 80056e8:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80056ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d100      	bne.n	80056f2 <UART_SetConfig+0x272>
 80056f0:	e132      	b.n	8005958 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	685a      	ldr	r2, [r3, #4]
 80056f6:	0013      	movs	r3, r2
 80056f8:	005b      	lsls	r3, r3, #1
 80056fa:	189b      	adds	r3, r3, r2
 80056fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056fe:	429a      	cmp	r2, r3
 8005700:	d305      	bcc.n	800570e <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005708:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800570a:	429a      	cmp	r2, r3
 800570c:	d906      	bls.n	800571c <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 800570e:	231a      	movs	r3, #26
 8005710:	2218      	movs	r2, #24
 8005712:	189b      	adds	r3, r3, r2
 8005714:	19db      	adds	r3, r3, r7
 8005716:	2201      	movs	r2, #1
 8005718:	701a      	strb	r2, [r3, #0]
 800571a:	e11d      	b.n	8005958 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800571c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800571e:	613b      	str	r3, [r7, #16]
 8005720:	2300      	movs	r3, #0
 8005722:	617b      	str	r3, [r7, #20]
 8005724:	6939      	ldr	r1, [r7, #16]
 8005726:	697a      	ldr	r2, [r7, #20]
 8005728:	000b      	movs	r3, r1
 800572a:	0e1b      	lsrs	r3, r3, #24
 800572c:	0010      	movs	r0, r2
 800572e:	0205      	lsls	r5, r0, #8
 8005730:	431d      	orrs	r5, r3
 8005732:	000b      	movs	r3, r1
 8005734:	021c      	lsls	r4, r3, #8
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	085b      	lsrs	r3, r3, #1
 800573c:	60bb      	str	r3, [r7, #8]
 800573e:	2300      	movs	r3, #0
 8005740:	60fb      	str	r3, [r7, #12]
 8005742:	68b8      	ldr	r0, [r7, #8]
 8005744:	68f9      	ldr	r1, [r7, #12]
 8005746:	1900      	adds	r0, r0, r4
 8005748:	4169      	adcs	r1, r5
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	603b      	str	r3, [r7, #0]
 8005750:	2300      	movs	r3, #0
 8005752:	607b      	str	r3, [r7, #4]
 8005754:	683a      	ldr	r2, [r7, #0]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f7fa fd6c 	bl	8000234 <__aeabi_uldivmod>
 800575c:	0002      	movs	r2, r0
 800575e:	000b      	movs	r3, r1
 8005760:	0013      	movs	r3, r2
 8005762:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005764:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005766:	23c0      	movs	r3, #192	@ 0xc0
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	429a      	cmp	r2, r3
 800576c:	d309      	bcc.n	8005782 <UART_SetConfig+0x302>
 800576e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005770:	2380      	movs	r3, #128	@ 0x80
 8005772:	035b      	lsls	r3, r3, #13
 8005774:	429a      	cmp	r2, r3
 8005776:	d204      	bcs.n	8005782 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800577e:	60da      	str	r2, [r3, #12]
 8005780:	e0ea      	b.n	8005958 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8005782:	231a      	movs	r3, #26
 8005784:	2218      	movs	r2, #24
 8005786:	189b      	adds	r3, r3, r2
 8005788:	19db      	adds	r3, r3, r7
 800578a:	2201      	movs	r2, #1
 800578c:	701a      	strb	r2, [r3, #0]
 800578e:	e0e3      	b.n	8005958 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	69da      	ldr	r2, [r3, #28]
 8005794:	2380      	movs	r3, #128	@ 0x80
 8005796:	021b      	lsls	r3, r3, #8
 8005798:	429a      	cmp	r2, r3
 800579a:	d000      	beq.n	800579e <UART_SetConfig+0x31e>
 800579c:	e085      	b.n	80058aa <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 800579e:	231b      	movs	r3, #27
 80057a0:	2218      	movs	r2, #24
 80057a2:	189b      	adds	r3, r3, r2
 80057a4:	19db      	adds	r3, r3, r7
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	2b08      	cmp	r3, #8
 80057aa:	d837      	bhi.n	800581c <UART_SetConfig+0x39c>
 80057ac:	009a      	lsls	r2, r3, #2
 80057ae:	4b10      	ldr	r3, [pc, #64]	@ (80057f0 <UART_SetConfig+0x370>)
 80057b0:	18d3      	adds	r3, r2, r3
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057b6:	f7fe fef7 	bl	80045a8 <HAL_RCC_GetPCLK1Freq>
 80057ba:	0003      	movs	r3, r0
 80057bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80057be:	e036      	b.n	800582e <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057c0:	f7fe ff08 	bl	80045d4 <HAL_RCC_GetPCLK2Freq>
 80057c4:	0003      	movs	r3, r0
 80057c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80057c8:	e031      	b.n	800582e <UART_SetConfig+0x3ae>
 80057ca:	46c0      	nop			@ (mov r8, r8)
 80057cc:	efff69f3 	.word	0xefff69f3
 80057d0:	ffffcfff 	.word	0xffffcfff
 80057d4:	40004800 	.word	0x40004800
 80057d8:	fffff4ff 	.word	0xfffff4ff
 80057dc:	40013800 	.word	0x40013800
 80057e0:	40021000 	.word	0x40021000
 80057e4:	40004400 	.word	0x40004400
 80057e8:	003d0900 	.word	0x003d0900
 80057ec:	00f42400 	.word	0x00f42400
 80057f0:	08006e40 	.word	0x08006e40
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057f4:	4b60      	ldr	r3, [pc, #384]	@ (8005978 <UART_SetConfig+0x4f8>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	2210      	movs	r2, #16
 80057fa:	4013      	ands	r3, r2
 80057fc:	d002      	beq.n	8005804 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80057fe:	4b5f      	ldr	r3, [pc, #380]	@ (800597c <UART_SetConfig+0x4fc>)
 8005800:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005802:	e014      	b.n	800582e <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8005804:	4b5e      	ldr	r3, [pc, #376]	@ (8005980 <UART_SetConfig+0x500>)
 8005806:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005808:	e011      	b.n	800582e <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800580a:	f7fe fe1d 	bl	8004448 <HAL_RCC_GetSysClockFreq>
 800580e:	0003      	movs	r3, r0
 8005810:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005812:	e00c      	b.n	800582e <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005814:	2380      	movs	r3, #128	@ 0x80
 8005816:	021b      	lsls	r3, r3, #8
 8005818:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800581a:	e008      	b.n	800582e <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 800581c:	2300      	movs	r3, #0
 800581e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8005820:	231a      	movs	r3, #26
 8005822:	2218      	movs	r2, #24
 8005824:	189b      	adds	r3, r3, r2
 8005826:	19db      	adds	r3, r3, r7
 8005828:	2201      	movs	r2, #1
 800582a:	701a      	strb	r2, [r3, #0]
        break;
 800582c:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800582e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005830:	2b00      	cmp	r3, #0
 8005832:	d100      	bne.n	8005836 <UART_SetConfig+0x3b6>
 8005834:	e090      	b.n	8005958 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005838:	005a      	lsls	r2, r3, #1
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	085b      	lsrs	r3, r3, #1
 8005840:	18d2      	adds	r2, r2, r3
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	0019      	movs	r1, r3
 8005848:	0010      	movs	r0, r2
 800584a:	f7fa fc67 	bl	800011c <__udivsi3>
 800584e:	0003      	movs	r3, r0
 8005850:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005854:	2b0f      	cmp	r3, #15
 8005856:	d921      	bls.n	800589c <UART_SetConfig+0x41c>
 8005858:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800585a:	2380      	movs	r3, #128	@ 0x80
 800585c:	025b      	lsls	r3, r3, #9
 800585e:	429a      	cmp	r2, r3
 8005860:	d21c      	bcs.n	800589c <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005864:	b29a      	uxth	r2, r3
 8005866:	200e      	movs	r0, #14
 8005868:	2418      	movs	r4, #24
 800586a:	1903      	adds	r3, r0, r4
 800586c:	19db      	adds	r3, r3, r7
 800586e:	210f      	movs	r1, #15
 8005870:	438a      	bics	r2, r1
 8005872:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005876:	085b      	lsrs	r3, r3, #1
 8005878:	b29b      	uxth	r3, r3
 800587a:	2207      	movs	r2, #7
 800587c:	4013      	ands	r3, r2
 800587e:	b299      	uxth	r1, r3
 8005880:	1903      	adds	r3, r0, r4
 8005882:	19db      	adds	r3, r3, r7
 8005884:	1902      	adds	r2, r0, r4
 8005886:	19d2      	adds	r2, r2, r7
 8005888:	8812      	ldrh	r2, [r2, #0]
 800588a:	430a      	orrs	r2, r1
 800588c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	1902      	adds	r2, r0, r4
 8005894:	19d2      	adds	r2, r2, r7
 8005896:	8812      	ldrh	r2, [r2, #0]
 8005898:	60da      	str	r2, [r3, #12]
 800589a:	e05d      	b.n	8005958 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 800589c:	231a      	movs	r3, #26
 800589e:	2218      	movs	r2, #24
 80058a0:	189b      	adds	r3, r3, r2
 80058a2:	19db      	adds	r3, r3, r7
 80058a4:	2201      	movs	r2, #1
 80058a6:	701a      	strb	r2, [r3, #0]
 80058a8:	e056      	b.n	8005958 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80058aa:	231b      	movs	r3, #27
 80058ac:	2218      	movs	r2, #24
 80058ae:	189b      	adds	r3, r3, r2
 80058b0:	19db      	adds	r3, r3, r7
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	2b08      	cmp	r3, #8
 80058b6:	d822      	bhi.n	80058fe <UART_SetConfig+0x47e>
 80058b8:	009a      	lsls	r2, r3, #2
 80058ba:	4b32      	ldr	r3, [pc, #200]	@ (8005984 <UART_SetConfig+0x504>)
 80058bc:	18d3      	adds	r3, r2, r3
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058c2:	f7fe fe71 	bl	80045a8 <HAL_RCC_GetPCLK1Freq>
 80058c6:	0003      	movs	r3, r0
 80058c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80058ca:	e021      	b.n	8005910 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058cc:	f7fe fe82 	bl	80045d4 <HAL_RCC_GetPCLK2Freq>
 80058d0:	0003      	movs	r3, r0
 80058d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80058d4:	e01c      	b.n	8005910 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058d6:	4b28      	ldr	r3, [pc, #160]	@ (8005978 <UART_SetConfig+0x4f8>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2210      	movs	r2, #16
 80058dc:	4013      	ands	r3, r2
 80058de:	d002      	beq.n	80058e6 <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80058e0:	4b26      	ldr	r3, [pc, #152]	@ (800597c <UART_SetConfig+0x4fc>)
 80058e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80058e4:	e014      	b.n	8005910 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 80058e6:	4b26      	ldr	r3, [pc, #152]	@ (8005980 <UART_SetConfig+0x500>)
 80058e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80058ea:	e011      	b.n	8005910 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058ec:	f7fe fdac 	bl	8004448 <HAL_RCC_GetSysClockFreq>
 80058f0:	0003      	movs	r3, r0
 80058f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80058f4:	e00c      	b.n	8005910 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058f6:	2380      	movs	r3, #128	@ 0x80
 80058f8:	021b      	lsls	r3, r3, #8
 80058fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80058fc:	e008      	b.n	8005910 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 80058fe:	2300      	movs	r3, #0
 8005900:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8005902:	231a      	movs	r3, #26
 8005904:	2218      	movs	r2, #24
 8005906:	189b      	adds	r3, r3, r2
 8005908:	19db      	adds	r3, r3, r7
 800590a:	2201      	movs	r2, #1
 800590c:	701a      	strb	r2, [r3, #0]
        break;
 800590e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8005910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005912:	2b00      	cmp	r3, #0
 8005914:	d020      	beq.n	8005958 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	085a      	lsrs	r2, r3, #1
 800591c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800591e:	18d2      	adds	r2, r2, r3
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	0019      	movs	r1, r3
 8005926:	0010      	movs	r0, r2
 8005928:	f7fa fbf8 	bl	800011c <__udivsi3>
 800592c:	0003      	movs	r3, r0
 800592e:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005932:	2b0f      	cmp	r3, #15
 8005934:	d90a      	bls.n	800594c <UART_SetConfig+0x4cc>
 8005936:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005938:	2380      	movs	r3, #128	@ 0x80
 800593a:	025b      	lsls	r3, r3, #9
 800593c:	429a      	cmp	r2, r3
 800593e:	d205      	bcs.n	800594c <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005942:	b29a      	uxth	r2, r3
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	60da      	str	r2, [r3, #12]
 800594a:	e005      	b.n	8005958 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 800594c:	231a      	movs	r3, #26
 800594e:	2218      	movs	r2, #24
 8005950:	189b      	adds	r3, r3, r2
 8005952:	19db      	adds	r3, r3, r7
 8005954:	2201      	movs	r2, #1
 8005956:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	2200      	movs	r2, #0
 800595c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	2200      	movs	r2, #0
 8005962:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005964:	231a      	movs	r3, #26
 8005966:	2218      	movs	r2, #24
 8005968:	189b      	adds	r3, r3, r2
 800596a:	19db      	adds	r3, r3, r7
 800596c:	781b      	ldrb	r3, [r3, #0]
}
 800596e:	0018      	movs	r0, r3
 8005970:	46bd      	mov	sp, r7
 8005972:	b00e      	add	sp, #56	@ 0x38
 8005974:	bdb0      	pop	{r4, r5, r7, pc}
 8005976:	46c0      	nop			@ (mov r8, r8)
 8005978:	40021000 	.word	0x40021000
 800597c:	003d0900 	.word	0x003d0900
 8005980:	00f42400 	.word	0x00f42400
 8005984:	08006e64 	.word	0x08006e64

08005988 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005994:	2201      	movs	r2, #1
 8005996:	4013      	ands	r3, r2
 8005998:	d00b      	beq.n	80059b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	4a4a      	ldr	r2, [pc, #296]	@ (8005acc <UART_AdvFeatureConfig+0x144>)
 80059a2:	4013      	ands	r3, r2
 80059a4:	0019      	movs	r1, r3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	430a      	orrs	r2, r1
 80059b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059b6:	2202      	movs	r2, #2
 80059b8:	4013      	ands	r3, r2
 80059ba:	d00b      	beq.n	80059d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	4a43      	ldr	r2, [pc, #268]	@ (8005ad0 <UART_AdvFeatureConfig+0x148>)
 80059c4:	4013      	ands	r3, r2
 80059c6:	0019      	movs	r1, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	430a      	orrs	r2, r1
 80059d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059d8:	2204      	movs	r2, #4
 80059da:	4013      	ands	r3, r2
 80059dc:	d00b      	beq.n	80059f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	4a3b      	ldr	r2, [pc, #236]	@ (8005ad4 <UART_AdvFeatureConfig+0x14c>)
 80059e6:	4013      	ands	r3, r2
 80059e8:	0019      	movs	r1, r3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	430a      	orrs	r2, r1
 80059f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059fa:	2208      	movs	r2, #8
 80059fc:	4013      	ands	r3, r2
 80059fe:	d00b      	beq.n	8005a18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	4a34      	ldr	r2, [pc, #208]	@ (8005ad8 <UART_AdvFeatureConfig+0x150>)
 8005a08:	4013      	ands	r3, r2
 8005a0a:	0019      	movs	r1, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	430a      	orrs	r2, r1
 8005a16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a1c:	2210      	movs	r2, #16
 8005a1e:	4013      	ands	r3, r2
 8005a20:	d00b      	beq.n	8005a3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	4a2c      	ldr	r2, [pc, #176]	@ (8005adc <UART_AdvFeatureConfig+0x154>)
 8005a2a:	4013      	ands	r3, r2
 8005a2c:	0019      	movs	r1, r3
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	430a      	orrs	r2, r1
 8005a38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a3e:	2220      	movs	r2, #32
 8005a40:	4013      	ands	r3, r2
 8005a42:	d00b      	beq.n	8005a5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	4a25      	ldr	r2, [pc, #148]	@ (8005ae0 <UART_AdvFeatureConfig+0x158>)
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	0019      	movs	r1, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	430a      	orrs	r2, r1
 8005a5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a60:	2240      	movs	r2, #64	@ 0x40
 8005a62:	4013      	ands	r3, r2
 8005a64:	d01d      	beq.n	8005aa2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	4a1d      	ldr	r2, [pc, #116]	@ (8005ae4 <UART_AdvFeatureConfig+0x15c>)
 8005a6e:	4013      	ands	r3, r2
 8005a70:	0019      	movs	r1, r3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	430a      	orrs	r2, r1
 8005a7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a82:	2380      	movs	r3, #128	@ 0x80
 8005a84:	035b      	lsls	r3, r3, #13
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d10b      	bne.n	8005aa2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	4a15      	ldr	r2, [pc, #84]	@ (8005ae8 <UART_AdvFeatureConfig+0x160>)
 8005a92:	4013      	ands	r3, r2
 8005a94:	0019      	movs	r1, r3
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	430a      	orrs	r2, r1
 8005aa0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aa6:	2280      	movs	r2, #128	@ 0x80
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	d00b      	beq.n	8005ac4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	4a0e      	ldr	r2, [pc, #56]	@ (8005aec <UART_AdvFeatureConfig+0x164>)
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	0019      	movs	r1, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	430a      	orrs	r2, r1
 8005ac2:	605a      	str	r2, [r3, #4]
  }
}
 8005ac4:	46c0      	nop			@ (mov r8, r8)
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	b002      	add	sp, #8
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	fffdffff 	.word	0xfffdffff
 8005ad0:	fffeffff 	.word	0xfffeffff
 8005ad4:	fffbffff 	.word	0xfffbffff
 8005ad8:	ffff7fff 	.word	0xffff7fff
 8005adc:	ffffefff 	.word	0xffffefff
 8005ae0:	ffffdfff 	.word	0xffffdfff
 8005ae4:	ffefffff 	.word	0xffefffff
 8005ae8:	ff9fffff 	.word	0xff9fffff
 8005aec:	fff7ffff 	.word	0xfff7ffff

08005af0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b092      	sub	sp, #72	@ 0x48
 8005af4:	af02      	add	r7, sp, #8
 8005af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2284      	movs	r2, #132	@ 0x84
 8005afc:	2100      	movs	r1, #0
 8005afe:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b00:	f7fc f8dc 	bl	8001cbc <HAL_GetTick>
 8005b04:	0003      	movs	r3, r0
 8005b06:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2208      	movs	r2, #8
 8005b10:	4013      	ands	r3, r2
 8005b12:	2b08      	cmp	r3, #8
 8005b14:	d12c      	bne.n	8005b70 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b18:	2280      	movs	r2, #128	@ 0x80
 8005b1a:	0391      	lsls	r1, r2, #14
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	4a46      	ldr	r2, [pc, #280]	@ (8005c38 <UART_CheckIdleState+0x148>)
 8005b20:	9200      	str	r2, [sp, #0]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f000 f88c 	bl	8005c40 <UART_WaitOnFlagUntilTimeout>
 8005b28:	1e03      	subs	r3, r0, #0
 8005b2a:	d021      	beq.n	8005b70 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b2c:	f3ef 8310 	mrs	r3, PRIMASK
 8005b30:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005b34:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b36:	2301      	movs	r3, #1
 8005b38:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b3c:	f383 8810 	msr	PRIMASK, r3
}
 8005b40:	46c0      	nop			@ (mov r8, r8)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2180      	movs	r1, #128	@ 0x80
 8005b4e:	438a      	bics	r2, r1
 8005b50:	601a      	str	r2, [r3, #0]
 8005b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b58:	f383 8810 	msr	PRIMASK, r3
}
 8005b5c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2220      	movs	r2, #32
 8005b62:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2278      	movs	r2, #120	@ 0x78
 8005b68:	2100      	movs	r1, #0
 8005b6a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	e05f      	b.n	8005c30 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	2204      	movs	r2, #4
 8005b78:	4013      	ands	r3, r2
 8005b7a:	2b04      	cmp	r3, #4
 8005b7c:	d146      	bne.n	8005c0c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b80:	2280      	movs	r2, #128	@ 0x80
 8005b82:	03d1      	lsls	r1, r2, #15
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	4a2c      	ldr	r2, [pc, #176]	@ (8005c38 <UART_CheckIdleState+0x148>)
 8005b88:	9200      	str	r2, [sp, #0]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f000 f858 	bl	8005c40 <UART_WaitOnFlagUntilTimeout>
 8005b90:	1e03      	subs	r3, r0, #0
 8005b92:	d03b      	beq.n	8005c0c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b94:	f3ef 8310 	mrs	r3, PRIMASK
 8005b98:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	f383 8810 	msr	PRIMASK, r3
}
 8005ba8:	46c0      	nop			@ (mov r8, r8)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4921      	ldr	r1, [pc, #132]	@ (8005c3c <UART_CheckIdleState+0x14c>)
 8005bb6:	400a      	ands	r2, r1
 8005bb8:	601a      	str	r2, [r3, #0]
 8005bba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bbc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	f383 8810 	msr	PRIMASK, r3
}
 8005bc4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bc6:	f3ef 8310 	mrs	r3, PRIMASK
 8005bca:	61bb      	str	r3, [r7, #24]
  return(result);
 8005bcc:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bce:	633b      	str	r3, [r7, #48]	@ 0x30
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	f383 8810 	msr	PRIMASK, r3
}
 8005bda:	46c0      	nop			@ (mov r8, r8)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	689a      	ldr	r2, [r3, #8]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	2101      	movs	r1, #1
 8005be8:	438a      	bics	r2, r1
 8005bea:	609a      	str	r2, [r3, #8]
 8005bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bee:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bf0:	6a3b      	ldr	r3, [r7, #32]
 8005bf2:	f383 8810 	msr	PRIMASK, r3
}
 8005bf6:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2280      	movs	r2, #128	@ 0x80
 8005bfc:	2120      	movs	r1, #32
 8005bfe:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2278      	movs	r2, #120	@ 0x78
 8005c04:	2100      	movs	r1, #0
 8005c06:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c08:	2303      	movs	r3, #3
 8005c0a:	e011      	b.n	8005c30 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2220      	movs	r2, #32
 8005c10:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2280      	movs	r2, #128	@ 0x80
 8005c16:	2120      	movs	r1, #32
 8005c18:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2278      	movs	r2, #120	@ 0x78
 8005c2a:	2100      	movs	r1, #0
 8005c2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c2e:	2300      	movs	r3, #0
}
 8005c30:	0018      	movs	r0, r3
 8005c32:	46bd      	mov	sp, r7
 8005c34:	b010      	add	sp, #64	@ 0x40
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	01ffffff 	.word	0x01ffffff
 8005c3c:	fffffedf 	.word	0xfffffedf

08005c40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	60b9      	str	r1, [r7, #8]
 8005c4a:	603b      	str	r3, [r7, #0]
 8005c4c:	1dfb      	adds	r3, r7, #7
 8005c4e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c50:	e04b      	b.n	8005cea <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	3301      	adds	r3, #1
 8005c56:	d048      	beq.n	8005cea <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c58:	f7fc f830 	bl	8001cbc <HAL_GetTick>
 8005c5c:	0002      	movs	r2, r0
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	69ba      	ldr	r2, [r7, #24]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d302      	bcc.n	8005c6e <UART_WaitOnFlagUntilTimeout+0x2e>
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d101      	bne.n	8005c72 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005c6e:	2303      	movs	r3, #3
 8005c70:	e04b      	b.n	8005d0a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2204      	movs	r2, #4
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	d035      	beq.n	8005cea <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	69db      	ldr	r3, [r3, #28]
 8005c84:	2208      	movs	r2, #8
 8005c86:	4013      	ands	r3, r2
 8005c88:	2b08      	cmp	r3, #8
 8005c8a:	d111      	bne.n	8005cb0 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2208      	movs	r2, #8
 8005c92:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	0018      	movs	r0, r3
 8005c98:	f000 f83c 	bl	8005d14 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2284      	movs	r2, #132	@ 0x84
 8005ca0:	2108      	movs	r1, #8
 8005ca2:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2278      	movs	r2, #120	@ 0x78
 8005ca8:	2100      	movs	r1, #0
 8005caa:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	e02c      	b.n	8005d0a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	69da      	ldr	r2, [r3, #28]
 8005cb6:	2380      	movs	r3, #128	@ 0x80
 8005cb8:	011b      	lsls	r3, r3, #4
 8005cba:	401a      	ands	r2, r3
 8005cbc:	2380      	movs	r3, #128	@ 0x80
 8005cbe:	011b      	lsls	r3, r3, #4
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d112      	bne.n	8005cea <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	2280      	movs	r2, #128	@ 0x80
 8005cca:	0112      	lsls	r2, r2, #4
 8005ccc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	0018      	movs	r0, r3
 8005cd2:	f000 f81f 	bl	8005d14 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2284      	movs	r2, #132	@ 0x84
 8005cda:	2120      	movs	r1, #32
 8005cdc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2278      	movs	r2, #120	@ 0x78
 8005ce2:	2100      	movs	r1, #0
 8005ce4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	e00f      	b.n	8005d0a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	69db      	ldr	r3, [r3, #28]
 8005cf0:	68ba      	ldr	r2, [r7, #8]
 8005cf2:	4013      	ands	r3, r2
 8005cf4:	68ba      	ldr	r2, [r7, #8]
 8005cf6:	1ad3      	subs	r3, r2, r3
 8005cf8:	425a      	negs	r2, r3
 8005cfa:	4153      	adcs	r3, r2
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	001a      	movs	r2, r3
 8005d00:	1dfb      	adds	r3, r7, #7
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d0a4      	beq.n	8005c52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	0018      	movs	r0, r3
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	b004      	add	sp, #16
 8005d10:	bd80      	pop	{r7, pc}
	...

08005d14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b08e      	sub	sp, #56	@ 0x38
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d1c:	f3ef 8310 	mrs	r3, PRIMASK
 8005d20:	617b      	str	r3, [r7, #20]
  return(result);
 8005d22:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d24:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d26:	2301      	movs	r3, #1
 8005d28:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	f383 8810 	msr	PRIMASK, r3
}
 8005d30:	46c0      	nop			@ (mov r8, r8)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4926      	ldr	r1, [pc, #152]	@ (8005dd8 <UART_EndRxTransfer+0xc4>)
 8005d3e:	400a      	ands	r2, r1
 8005d40:	601a      	str	r2, [r3, #0]
 8005d42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d44:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	f383 8810 	msr	PRIMASK, r3
}
 8005d4c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d4e:	f3ef 8310 	mrs	r3, PRIMASK
 8005d52:	623b      	str	r3, [r7, #32]
  return(result);
 8005d54:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d56:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d58:	2301      	movs	r3, #1
 8005d5a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d5e:	f383 8810 	msr	PRIMASK, r3
}
 8005d62:	46c0      	nop			@ (mov r8, r8)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	689a      	ldr	r2, [r3, #8]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	2101      	movs	r1, #1
 8005d70:	438a      	bics	r2, r1
 8005d72:	609a      	str	r2, [r3, #8]
 8005d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d76:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d7a:	f383 8810 	msr	PRIMASK, r3
}
 8005d7e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d118      	bne.n	8005dba <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d88:	f3ef 8310 	mrs	r3, PRIMASK
 8005d8c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d8e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d92:	2301      	movs	r3, #1
 8005d94:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f383 8810 	msr	PRIMASK, r3
}
 8005d9c:	46c0      	nop			@ (mov r8, r8)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2110      	movs	r1, #16
 8005daa:	438a      	bics	r2, r1
 8005dac:	601a      	str	r2, [r3, #0]
 8005dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005db0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	f383 8810 	msr	PRIMASK, r3
}
 8005db8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2280      	movs	r2, #128	@ 0x80
 8005dbe:	2120      	movs	r1, #32
 8005dc0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005dce:	46c0      	nop			@ (mov r8, r8)
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	b00e      	add	sp, #56	@ 0x38
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	46c0      	nop			@ (mov r8, r8)
 8005dd8:	fffffedf 	.word	0xfffffedf

08005ddc <std>:
 8005ddc:	2300      	movs	r3, #0
 8005dde:	b510      	push	{r4, lr}
 8005de0:	0004      	movs	r4, r0
 8005de2:	6003      	str	r3, [r0, #0]
 8005de4:	6043      	str	r3, [r0, #4]
 8005de6:	6083      	str	r3, [r0, #8]
 8005de8:	8181      	strh	r1, [r0, #12]
 8005dea:	6643      	str	r3, [r0, #100]	@ 0x64
 8005dec:	81c2      	strh	r2, [r0, #14]
 8005dee:	6103      	str	r3, [r0, #16]
 8005df0:	6143      	str	r3, [r0, #20]
 8005df2:	6183      	str	r3, [r0, #24]
 8005df4:	0019      	movs	r1, r3
 8005df6:	2208      	movs	r2, #8
 8005df8:	305c      	adds	r0, #92	@ 0x5c
 8005dfa:	f000 fa0f 	bl	800621c <memset>
 8005dfe:	4b0b      	ldr	r3, [pc, #44]	@ (8005e2c <std+0x50>)
 8005e00:	6224      	str	r4, [r4, #32]
 8005e02:	6263      	str	r3, [r4, #36]	@ 0x24
 8005e04:	4b0a      	ldr	r3, [pc, #40]	@ (8005e30 <std+0x54>)
 8005e06:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005e08:	4b0a      	ldr	r3, [pc, #40]	@ (8005e34 <std+0x58>)
 8005e0a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005e0c:	4b0a      	ldr	r3, [pc, #40]	@ (8005e38 <std+0x5c>)
 8005e0e:	6323      	str	r3, [r4, #48]	@ 0x30
 8005e10:	4b0a      	ldr	r3, [pc, #40]	@ (8005e3c <std+0x60>)
 8005e12:	429c      	cmp	r4, r3
 8005e14:	d005      	beq.n	8005e22 <std+0x46>
 8005e16:	4b0a      	ldr	r3, [pc, #40]	@ (8005e40 <std+0x64>)
 8005e18:	429c      	cmp	r4, r3
 8005e1a:	d002      	beq.n	8005e22 <std+0x46>
 8005e1c:	4b09      	ldr	r3, [pc, #36]	@ (8005e44 <std+0x68>)
 8005e1e:	429c      	cmp	r4, r3
 8005e20:	d103      	bne.n	8005e2a <std+0x4e>
 8005e22:	0020      	movs	r0, r4
 8005e24:	3058      	adds	r0, #88	@ 0x58
 8005e26:	f000 fa79 	bl	800631c <__retarget_lock_init_recursive>
 8005e2a:	bd10      	pop	{r4, pc}
 8005e2c:	08006045 	.word	0x08006045
 8005e30:	0800606d 	.word	0x0800606d
 8005e34:	080060a5 	.word	0x080060a5
 8005e38:	080060d1 	.word	0x080060d1
 8005e3c:	20000310 	.word	0x20000310
 8005e40:	20000378 	.word	0x20000378
 8005e44:	200003e0 	.word	0x200003e0

08005e48 <stdio_exit_handler>:
 8005e48:	b510      	push	{r4, lr}
 8005e4a:	4a03      	ldr	r2, [pc, #12]	@ (8005e58 <stdio_exit_handler+0x10>)
 8005e4c:	4903      	ldr	r1, [pc, #12]	@ (8005e5c <stdio_exit_handler+0x14>)
 8005e4e:	4804      	ldr	r0, [pc, #16]	@ (8005e60 <stdio_exit_handler+0x18>)
 8005e50:	f000 f86c 	bl	8005f2c <_fwalk_sglue>
 8005e54:	bd10      	pop	{r4, pc}
 8005e56:	46c0      	nop			@ (mov r8, r8)
 8005e58:	20000014 	.word	0x20000014
 8005e5c:	08006bad 	.word	0x08006bad
 8005e60:	20000024 	.word	0x20000024

08005e64 <cleanup_stdio>:
 8005e64:	6841      	ldr	r1, [r0, #4]
 8005e66:	4b0b      	ldr	r3, [pc, #44]	@ (8005e94 <cleanup_stdio+0x30>)
 8005e68:	b510      	push	{r4, lr}
 8005e6a:	0004      	movs	r4, r0
 8005e6c:	4299      	cmp	r1, r3
 8005e6e:	d001      	beq.n	8005e74 <cleanup_stdio+0x10>
 8005e70:	f000 fe9c 	bl	8006bac <_fflush_r>
 8005e74:	68a1      	ldr	r1, [r4, #8]
 8005e76:	4b08      	ldr	r3, [pc, #32]	@ (8005e98 <cleanup_stdio+0x34>)
 8005e78:	4299      	cmp	r1, r3
 8005e7a:	d002      	beq.n	8005e82 <cleanup_stdio+0x1e>
 8005e7c:	0020      	movs	r0, r4
 8005e7e:	f000 fe95 	bl	8006bac <_fflush_r>
 8005e82:	68e1      	ldr	r1, [r4, #12]
 8005e84:	4b05      	ldr	r3, [pc, #20]	@ (8005e9c <cleanup_stdio+0x38>)
 8005e86:	4299      	cmp	r1, r3
 8005e88:	d002      	beq.n	8005e90 <cleanup_stdio+0x2c>
 8005e8a:	0020      	movs	r0, r4
 8005e8c:	f000 fe8e 	bl	8006bac <_fflush_r>
 8005e90:	bd10      	pop	{r4, pc}
 8005e92:	46c0      	nop			@ (mov r8, r8)
 8005e94:	20000310 	.word	0x20000310
 8005e98:	20000378 	.word	0x20000378
 8005e9c:	200003e0 	.word	0x200003e0

08005ea0 <global_stdio_init.part.0>:
 8005ea0:	b510      	push	{r4, lr}
 8005ea2:	4b09      	ldr	r3, [pc, #36]	@ (8005ec8 <global_stdio_init.part.0+0x28>)
 8005ea4:	4a09      	ldr	r2, [pc, #36]	@ (8005ecc <global_stdio_init.part.0+0x2c>)
 8005ea6:	2104      	movs	r1, #4
 8005ea8:	601a      	str	r2, [r3, #0]
 8005eaa:	4809      	ldr	r0, [pc, #36]	@ (8005ed0 <global_stdio_init.part.0+0x30>)
 8005eac:	2200      	movs	r2, #0
 8005eae:	f7ff ff95 	bl	8005ddc <std>
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	2109      	movs	r1, #9
 8005eb6:	4807      	ldr	r0, [pc, #28]	@ (8005ed4 <global_stdio_init.part.0+0x34>)
 8005eb8:	f7ff ff90 	bl	8005ddc <std>
 8005ebc:	2202      	movs	r2, #2
 8005ebe:	2112      	movs	r1, #18
 8005ec0:	4805      	ldr	r0, [pc, #20]	@ (8005ed8 <global_stdio_init.part.0+0x38>)
 8005ec2:	f7ff ff8b 	bl	8005ddc <std>
 8005ec6:	bd10      	pop	{r4, pc}
 8005ec8:	20000448 	.word	0x20000448
 8005ecc:	08005e49 	.word	0x08005e49
 8005ed0:	20000310 	.word	0x20000310
 8005ed4:	20000378 	.word	0x20000378
 8005ed8:	200003e0 	.word	0x200003e0

08005edc <__sfp_lock_acquire>:
 8005edc:	b510      	push	{r4, lr}
 8005ede:	4802      	ldr	r0, [pc, #8]	@ (8005ee8 <__sfp_lock_acquire+0xc>)
 8005ee0:	f000 fa1d 	bl	800631e <__retarget_lock_acquire_recursive>
 8005ee4:	bd10      	pop	{r4, pc}
 8005ee6:	46c0      	nop			@ (mov r8, r8)
 8005ee8:	20000451 	.word	0x20000451

08005eec <__sfp_lock_release>:
 8005eec:	b510      	push	{r4, lr}
 8005eee:	4802      	ldr	r0, [pc, #8]	@ (8005ef8 <__sfp_lock_release+0xc>)
 8005ef0:	f000 fa16 	bl	8006320 <__retarget_lock_release_recursive>
 8005ef4:	bd10      	pop	{r4, pc}
 8005ef6:	46c0      	nop			@ (mov r8, r8)
 8005ef8:	20000451 	.word	0x20000451

08005efc <__sinit>:
 8005efc:	b510      	push	{r4, lr}
 8005efe:	0004      	movs	r4, r0
 8005f00:	f7ff ffec 	bl	8005edc <__sfp_lock_acquire>
 8005f04:	6a23      	ldr	r3, [r4, #32]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d002      	beq.n	8005f10 <__sinit+0x14>
 8005f0a:	f7ff ffef 	bl	8005eec <__sfp_lock_release>
 8005f0e:	bd10      	pop	{r4, pc}
 8005f10:	4b04      	ldr	r3, [pc, #16]	@ (8005f24 <__sinit+0x28>)
 8005f12:	6223      	str	r3, [r4, #32]
 8005f14:	4b04      	ldr	r3, [pc, #16]	@ (8005f28 <__sinit+0x2c>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d1f6      	bne.n	8005f0a <__sinit+0xe>
 8005f1c:	f7ff ffc0 	bl	8005ea0 <global_stdio_init.part.0>
 8005f20:	e7f3      	b.n	8005f0a <__sinit+0xe>
 8005f22:	46c0      	nop			@ (mov r8, r8)
 8005f24:	08005e65 	.word	0x08005e65
 8005f28:	20000448 	.word	0x20000448

08005f2c <_fwalk_sglue>:
 8005f2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f2e:	0014      	movs	r4, r2
 8005f30:	2600      	movs	r6, #0
 8005f32:	9000      	str	r0, [sp, #0]
 8005f34:	9101      	str	r1, [sp, #4]
 8005f36:	68a5      	ldr	r5, [r4, #8]
 8005f38:	6867      	ldr	r7, [r4, #4]
 8005f3a:	3f01      	subs	r7, #1
 8005f3c:	d504      	bpl.n	8005f48 <_fwalk_sglue+0x1c>
 8005f3e:	6824      	ldr	r4, [r4, #0]
 8005f40:	2c00      	cmp	r4, #0
 8005f42:	d1f8      	bne.n	8005f36 <_fwalk_sglue+0xa>
 8005f44:	0030      	movs	r0, r6
 8005f46:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005f48:	89ab      	ldrh	r3, [r5, #12]
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d908      	bls.n	8005f60 <_fwalk_sglue+0x34>
 8005f4e:	220e      	movs	r2, #14
 8005f50:	5eab      	ldrsh	r3, [r5, r2]
 8005f52:	3301      	adds	r3, #1
 8005f54:	d004      	beq.n	8005f60 <_fwalk_sglue+0x34>
 8005f56:	0029      	movs	r1, r5
 8005f58:	9800      	ldr	r0, [sp, #0]
 8005f5a:	9b01      	ldr	r3, [sp, #4]
 8005f5c:	4798      	blx	r3
 8005f5e:	4306      	orrs	r6, r0
 8005f60:	3568      	adds	r5, #104	@ 0x68
 8005f62:	e7ea      	b.n	8005f3a <_fwalk_sglue+0xe>

08005f64 <iprintf>:
 8005f64:	b40f      	push	{r0, r1, r2, r3}
 8005f66:	b507      	push	{r0, r1, r2, lr}
 8005f68:	4905      	ldr	r1, [pc, #20]	@ (8005f80 <iprintf+0x1c>)
 8005f6a:	ab04      	add	r3, sp, #16
 8005f6c:	6808      	ldr	r0, [r1, #0]
 8005f6e:	cb04      	ldmia	r3!, {r2}
 8005f70:	6881      	ldr	r1, [r0, #8]
 8005f72:	9301      	str	r3, [sp, #4]
 8005f74:	f000 fafa 	bl	800656c <_vfiprintf_r>
 8005f78:	b003      	add	sp, #12
 8005f7a:	bc08      	pop	{r3}
 8005f7c:	b004      	add	sp, #16
 8005f7e:	4718      	bx	r3
 8005f80:	20000020 	.word	0x20000020

08005f84 <_puts_r>:
 8005f84:	6a03      	ldr	r3, [r0, #32]
 8005f86:	b570      	push	{r4, r5, r6, lr}
 8005f88:	0005      	movs	r5, r0
 8005f8a:	000e      	movs	r6, r1
 8005f8c:	6884      	ldr	r4, [r0, #8]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d101      	bne.n	8005f96 <_puts_r+0x12>
 8005f92:	f7ff ffb3 	bl	8005efc <__sinit>
 8005f96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005f98:	07db      	lsls	r3, r3, #31
 8005f9a:	d405      	bmi.n	8005fa8 <_puts_r+0x24>
 8005f9c:	89a3      	ldrh	r3, [r4, #12]
 8005f9e:	059b      	lsls	r3, r3, #22
 8005fa0:	d402      	bmi.n	8005fa8 <_puts_r+0x24>
 8005fa2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005fa4:	f000 f9bb 	bl	800631e <__retarget_lock_acquire_recursive>
 8005fa8:	89a3      	ldrh	r3, [r4, #12]
 8005faa:	071b      	lsls	r3, r3, #28
 8005fac:	d502      	bpl.n	8005fb4 <_puts_r+0x30>
 8005fae:	6923      	ldr	r3, [r4, #16]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d11f      	bne.n	8005ff4 <_puts_r+0x70>
 8005fb4:	0021      	movs	r1, r4
 8005fb6:	0028      	movs	r0, r5
 8005fb8:	f000 f8d2 	bl	8006160 <__swsetup_r>
 8005fbc:	2800      	cmp	r0, #0
 8005fbe:	d019      	beq.n	8005ff4 <_puts_r+0x70>
 8005fc0:	2501      	movs	r5, #1
 8005fc2:	426d      	negs	r5, r5
 8005fc4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005fc6:	07db      	lsls	r3, r3, #31
 8005fc8:	d405      	bmi.n	8005fd6 <_puts_r+0x52>
 8005fca:	89a3      	ldrh	r3, [r4, #12]
 8005fcc:	059b      	lsls	r3, r3, #22
 8005fce:	d402      	bmi.n	8005fd6 <_puts_r+0x52>
 8005fd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005fd2:	f000 f9a5 	bl	8006320 <__retarget_lock_release_recursive>
 8005fd6:	0028      	movs	r0, r5
 8005fd8:	bd70      	pop	{r4, r5, r6, pc}
 8005fda:	3601      	adds	r6, #1
 8005fdc:	60a3      	str	r3, [r4, #8]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	da04      	bge.n	8005fec <_puts_r+0x68>
 8005fe2:	69a2      	ldr	r2, [r4, #24]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	dc16      	bgt.n	8006016 <_puts_r+0x92>
 8005fe8:	290a      	cmp	r1, #10
 8005fea:	d014      	beq.n	8006016 <_puts_r+0x92>
 8005fec:	6823      	ldr	r3, [r4, #0]
 8005fee:	1c5a      	adds	r2, r3, #1
 8005ff0:	6022      	str	r2, [r4, #0]
 8005ff2:	7019      	strb	r1, [r3, #0]
 8005ff4:	68a3      	ldr	r3, [r4, #8]
 8005ff6:	7831      	ldrb	r1, [r6, #0]
 8005ff8:	3b01      	subs	r3, #1
 8005ffa:	2900      	cmp	r1, #0
 8005ffc:	d1ed      	bne.n	8005fda <_puts_r+0x56>
 8005ffe:	60a3      	str	r3, [r4, #8]
 8006000:	2b00      	cmp	r3, #0
 8006002:	da0f      	bge.n	8006024 <_puts_r+0xa0>
 8006004:	0022      	movs	r2, r4
 8006006:	0028      	movs	r0, r5
 8006008:	310a      	adds	r1, #10
 800600a:	f000 f867 	bl	80060dc <__swbuf_r>
 800600e:	3001      	adds	r0, #1
 8006010:	d0d6      	beq.n	8005fc0 <_puts_r+0x3c>
 8006012:	250a      	movs	r5, #10
 8006014:	e7d6      	b.n	8005fc4 <_puts_r+0x40>
 8006016:	0022      	movs	r2, r4
 8006018:	0028      	movs	r0, r5
 800601a:	f000 f85f 	bl	80060dc <__swbuf_r>
 800601e:	3001      	adds	r0, #1
 8006020:	d1e8      	bne.n	8005ff4 <_puts_r+0x70>
 8006022:	e7cd      	b.n	8005fc0 <_puts_r+0x3c>
 8006024:	6823      	ldr	r3, [r4, #0]
 8006026:	1c5a      	adds	r2, r3, #1
 8006028:	6022      	str	r2, [r4, #0]
 800602a:	220a      	movs	r2, #10
 800602c:	701a      	strb	r2, [r3, #0]
 800602e:	e7f0      	b.n	8006012 <_puts_r+0x8e>

08006030 <puts>:
 8006030:	b510      	push	{r4, lr}
 8006032:	4b03      	ldr	r3, [pc, #12]	@ (8006040 <puts+0x10>)
 8006034:	0001      	movs	r1, r0
 8006036:	6818      	ldr	r0, [r3, #0]
 8006038:	f7ff ffa4 	bl	8005f84 <_puts_r>
 800603c:	bd10      	pop	{r4, pc}
 800603e:	46c0      	nop			@ (mov r8, r8)
 8006040:	20000020 	.word	0x20000020

08006044 <__sread>:
 8006044:	b570      	push	{r4, r5, r6, lr}
 8006046:	000c      	movs	r4, r1
 8006048:	250e      	movs	r5, #14
 800604a:	5f49      	ldrsh	r1, [r1, r5]
 800604c:	f000 f914 	bl	8006278 <_read_r>
 8006050:	2800      	cmp	r0, #0
 8006052:	db03      	blt.n	800605c <__sread+0x18>
 8006054:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006056:	181b      	adds	r3, r3, r0
 8006058:	6563      	str	r3, [r4, #84]	@ 0x54
 800605a:	bd70      	pop	{r4, r5, r6, pc}
 800605c:	89a3      	ldrh	r3, [r4, #12]
 800605e:	4a02      	ldr	r2, [pc, #8]	@ (8006068 <__sread+0x24>)
 8006060:	4013      	ands	r3, r2
 8006062:	81a3      	strh	r3, [r4, #12]
 8006064:	e7f9      	b.n	800605a <__sread+0x16>
 8006066:	46c0      	nop			@ (mov r8, r8)
 8006068:	ffffefff 	.word	0xffffefff

0800606c <__swrite>:
 800606c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800606e:	001f      	movs	r7, r3
 8006070:	898b      	ldrh	r3, [r1, #12]
 8006072:	0005      	movs	r5, r0
 8006074:	000c      	movs	r4, r1
 8006076:	0016      	movs	r6, r2
 8006078:	05db      	lsls	r3, r3, #23
 800607a:	d505      	bpl.n	8006088 <__swrite+0x1c>
 800607c:	230e      	movs	r3, #14
 800607e:	5ec9      	ldrsh	r1, [r1, r3]
 8006080:	2200      	movs	r2, #0
 8006082:	2302      	movs	r3, #2
 8006084:	f000 f8e4 	bl	8006250 <_lseek_r>
 8006088:	89a3      	ldrh	r3, [r4, #12]
 800608a:	4a05      	ldr	r2, [pc, #20]	@ (80060a0 <__swrite+0x34>)
 800608c:	0028      	movs	r0, r5
 800608e:	4013      	ands	r3, r2
 8006090:	81a3      	strh	r3, [r4, #12]
 8006092:	0032      	movs	r2, r6
 8006094:	230e      	movs	r3, #14
 8006096:	5ee1      	ldrsh	r1, [r4, r3]
 8006098:	003b      	movs	r3, r7
 800609a:	f000 f901 	bl	80062a0 <_write_r>
 800609e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060a0:	ffffefff 	.word	0xffffefff

080060a4 <__sseek>:
 80060a4:	b570      	push	{r4, r5, r6, lr}
 80060a6:	000c      	movs	r4, r1
 80060a8:	250e      	movs	r5, #14
 80060aa:	5f49      	ldrsh	r1, [r1, r5]
 80060ac:	f000 f8d0 	bl	8006250 <_lseek_r>
 80060b0:	89a3      	ldrh	r3, [r4, #12]
 80060b2:	1c42      	adds	r2, r0, #1
 80060b4:	d103      	bne.n	80060be <__sseek+0x1a>
 80060b6:	4a05      	ldr	r2, [pc, #20]	@ (80060cc <__sseek+0x28>)
 80060b8:	4013      	ands	r3, r2
 80060ba:	81a3      	strh	r3, [r4, #12]
 80060bc:	bd70      	pop	{r4, r5, r6, pc}
 80060be:	2280      	movs	r2, #128	@ 0x80
 80060c0:	0152      	lsls	r2, r2, #5
 80060c2:	4313      	orrs	r3, r2
 80060c4:	81a3      	strh	r3, [r4, #12]
 80060c6:	6560      	str	r0, [r4, #84]	@ 0x54
 80060c8:	e7f8      	b.n	80060bc <__sseek+0x18>
 80060ca:	46c0      	nop			@ (mov r8, r8)
 80060cc:	ffffefff 	.word	0xffffefff

080060d0 <__sclose>:
 80060d0:	b510      	push	{r4, lr}
 80060d2:	230e      	movs	r3, #14
 80060d4:	5ec9      	ldrsh	r1, [r1, r3]
 80060d6:	f000 f8a9 	bl	800622c <_close_r>
 80060da:	bd10      	pop	{r4, pc}

080060dc <__swbuf_r>:
 80060dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060de:	0006      	movs	r6, r0
 80060e0:	000d      	movs	r5, r1
 80060e2:	0014      	movs	r4, r2
 80060e4:	2800      	cmp	r0, #0
 80060e6:	d004      	beq.n	80060f2 <__swbuf_r+0x16>
 80060e8:	6a03      	ldr	r3, [r0, #32]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d101      	bne.n	80060f2 <__swbuf_r+0x16>
 80060ee:	f7ff ff05 	bl	8005efc <__sinit>
 80060f2:	69a3      	ldr	r3, [r4, #24]
 80060f4:	60a3      	str	r3, [r4, #8]
 80060f6:	89a3      	ldrh	r3, [r4, #12]
 80060f8:	071b      	lsls	r3, r3, #28
 80060fa:	d502      	bpl.n	8006102 <__swbuf_r+0x26>
 80060fc:	6923      	ldr	r3, [r4, #16]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d109      	bne.n	8006116 <__swbuf_r+0x3a>
 8006102:	0021      	movs	r1, r4
 8006104:	0030      	movs	r0, r6
 8006106:	f000 f82b 	bl	8006160 <__swsetup_r>
 800610a:	2800      	cmp	r0, #0
 800610c:	d003      	beq.n	8006116 <__swbuf_r+0x3a>
 800610e:	2501      	movs	r5, #1
 8006110:	426d      	negs	r5, r5
 8006112:	0028      	movs	r0, r5
 8006114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006116:	6923      	ldr	r3, [r4, #16]
 8006118:	6820      	ldr	r0, [r4, #0]
 800611a:	b2ef      	uxtb	r7, r5
 800611c:	1ac0      	subs	r0, r0, r3
 800611e:	6963      	ldr	r3, [r4, #20]
 8006120:	b2ed      	uxtb	r5, r5
 8006122:	4283      	cmp	r3, r0
 8006124:	dc05      	bgt.n	8006132 <__swbuf_r+0x56>
 8006126:	0021      	movs	r1, r4
 8006128:	0030      	movs	r0, r6
 800612a:	f000 fd3f 	bl	8006bac <_fflush_r>
 800612e:	2800      	cmp	r0, #0
 8006130:	d1ed      	bne.n	800610e <__swbuf_r+0x32>
 8006132:	68a3      	ldr	r3, [r4, #8]
 8006134:	3001      	adds	r0, #1
 8006136:	3b01      	subs	r3, #1
 8006138:	60a3      	str	r3, [r4, #8]
 800613a:	6823      	ldr	r3, [r4, #0]
 800613c:	1c5a      	adds	r2, r3, #1
 800613e:	6022      	str	r2, [r4, #0]
 8006140:	701f      	strb	r7, [r3, #0]
 8006142:	6963      	ldr	r3, [r4, #20]
 8006144:	4283      	cmp	r3, r0
 8006146:	d004      	beq.n	8006152 <__swbuf_r+0x76>
 8006148:	89a3      	ldrh	r3, [r4, #12]
 800614a:	07db      	lsls	r3, r3, #31
 800614c:	d5e1      	bpl.n	8006112 <__swbuf_r+0x36>
 800614e:	2d0a      	cmp	r5, #10
 8006150:	d1df      	bne.n	8006112 <__swbuf_r+0x36>
 8006152:	0021      	movs	r1, r4
 8006154:	0030      	movs	r0, r6
 8006156:	f000 fd29 	bl	8006bac <_fflush_r>
 800615a:	2800      	cmp	r0, #0
 800615c:	d0d9      	beq.n	8006112 <__swbuf_r+0x36>
 800615e:	e7d6      	b.n	800610e <__swbuf_r+0x32>

08006160 <__swsetup_r>:
 8006160:	4b2d      	ldr	r3, [pc, #180]	@ (8006218 <__swsetup_r+0xb8>)
 8006162:	b570      	push	{r4, r5, r6, lr}
 8006164:	0005      	movs	r5, r0
 8006166:	6818      	ldr	r0, [r3, #0]
 8006168:	000c      	movs	r4, r1
 800616a:	2800      	cmp	r0, #0
 800616c:	d004      	beq.n	8006178 <__swsetup_r+0x18>
 800616e:	6a03      	ldr	r3, [r0, #32]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d101      	bne.n	8006178 <__swsetup_r+0x18>
 8006174:	f7ff fec2 	bl	8005efc <__sinit>
 8006178:	230c      	movs	r3, #12
 800617a:	5ee2      	ldrsh	r2, [r4, r3]
 800617c:	0713      	lsls	r3, r2, #28
 800617e:	d423      	bmi.n	80061c8 <__swsetup_r+0x68>
 8006180:	06d3      	lsls	r3, r2, #27
 8006182:	d407      	bmi.n	8006194 <__swsetup_r+0x34>
 8006184:	2309      	movs	r3, #9
 8006186:	602b      	str	r3, [r5, #0]
 8006188:	2340      	movs	r3, #64	@ 0x40
 800618a:	2001      	movs	r0, #1
 800618c:	4313      	orrs	r3, r2
 800618e:	81a3      	strh	r3, [r4, #12]
 8006190:	4240      	negs	r0, r0
 8006192:	e03a      	b.n	800620a <__swsetup_r+0xaa>
 8006194:	0752      	lsls	r2, r2, #29
 8006196:	d513      	bpl.n	80061c0 <__swsetup_r+0x60>
 8006198:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800619a:	2900      	cmp	r1, #0
 800619c:	d008      	beq.n	80061b0 <__swsetup_r+0x50>
 800619e:	0023      	movs	r3, r4
 80061a0:	3344      	adds	r3, #68	@ 0x44
 80061a2:	4299      	cmp	r1, r3
 80061a4:	d002      	beq.n	80061ac <__swsetup_r+0x4c>
 80061a6:	0028      	movs	r0, r5
 80061a8:	f000 f8bc 	bl	8006324 <_free_r>
 80061ac:	2300      	movs	r3, #0
 80061ae:	6363      	str	r3, [r4, #52]	@ 0x34
 80061b0:	2224      	movs	r2, #36	@ 0x24
 80061b2:	89a3      	ldrh	r3, [r4, #12]
 80061b4:	4393      	bics	r3, r2
 80061b6:	81a3      	strh	r3, [r4, #12]
 80061b8:	2300      	movs	r3, #0
 80061ba:	6063      	str	r3, [r4, #4]
 80061bc:	6923      	ldr	r3, [r4, #16]
 80061be:	6023      	str	r3, [r4, #0]
 80061c0:	2308      	movs	r3, #8
 80061c2:	89a2      	ldrh	r2, [r4, #12]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	81a3      	strh	r3, [r4, #12]
 80061c8:	6923      	ldr	r3, [r4, #16]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d10b      	bne.n	80061e6 <__swsetup_r+0x86>
 80061ce:	21a0      	movs	r1, #160	@ 0xa0
 80061d0:	2280      	movs	r2, #128	@ 0x80
 80061d2:	89a3      	ldrh	r3, [r4, #12]
 80061d4:	0089      	lsls	r1, r1, #2
 80061d6:	0092      	lsls	r2, r2, #2
 80061d8:	400b      	ands	r3, r1
 80061da:	4293      	cmp	r3, r2
 80061dc:	d003      	beq.n	80061e6 <__swsetup_r+0x86>
 80061de:	0021      	movs	r1, r4
 80061e0:	0028      	movs	r0, r5
 80061e2:	f000 fd39 	bl	8006c58 <__smakebuf_r>
 80061e6:	230c      	movs	r3, #12
 80061e8:	5ee2      	ldrsh	r2, [r4, r3]
 80061ea:	2101      	movs	r1, #1
 80061ec:	0013      	movs	r3, r2
 80061ee:	400b      	ands	r3, r1
 80061f0:	420a      	tst	r2, r1
 80061f2:	d00b      	beq.n	800620c <__swsetup_r+0xac>
 80061f4:	2300      	movs	r3, #0
 80061f6:	60a3      	str	r3, [r4, #8]
 80061f8:	6963      	ldr	r3, [r4, #20]
 80061fa:	425b      	negs	r3, r3
 80061fc:	61a3      	str	r3, [r4, #24]
 80061fe:	2000      	movs	r0, #0
 8006200:	6923      	ldr	r3, [r4, #16]
 8006202:	4283      	cmp	r3, r0
 8006204:	d101      	bne.n	800620a <__swsetup_r+0xaa>
 8006206:	0613      	lsls	r3, r2, #24
 8006208:	d4be      	bmi.n	8006188 <__swsetup_r+0x28>
 800620a:	bd70      	pop	{r4, r5, r6, pc}
 800620c:	0791      	lsls	r1, r2, #30
 800620e:	d400      	bmi.n	8006212 <__swsetup_r+0xb2>
 8006210:	6963      	ldr	r3, [r4, #20]
 8006212:	60a3      	str	r3, [r4, #8]
 8006214:	e7f3      	b.n	80061fe <__swsetup_r+0x9e>
 8006216:	46c0      	nop			@ (mov r8, r8)
 8006218:	20000020 	.word	0x20000020

0800621c <memset>:
 800621c:	0003      	movs	r3, r0
 800621e:	1882      	adds	r2, r0, r2
 8006220:	4293      	cmp	r3, r2
 8006222:	d100      	bne.n	8006226 <memset+0xa>
 8006224:	4770      	bx	lr
 8006226:	7019      	strb	r1, [r3, #0]
 8006228:	3301      	adds	r3, #1
 800622a:	e7f9      	b.n	8006220 <memset+0x4>

0800622c <_close_r>:
 800622c:	2300      	movs	r3, #0
 800622e:	b570      	push	{r4, r5, r6, lr}
 8006230:	4d06      	ldr	r5, [pc, #24]	@ (800624c <_close_r+0x20>)
 8006232:	0004      	movs	r4, r0
 8006234:	0008      	movs	r0, r1
 8006236:	602b      	str	r3, [r5, #0]
 8006238:	f7fb fc47 	bl	8001aca <_close>
 800623c:	1c43      	adds	r3, r0, #1
 800623e:	d103      	bne.n	8006248 <_close_r+0x1c>
 8006240:	682b      	ldr	r3, [r5, #0]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d000      	beq.n	8006248 <_close_r+0x1c>
 8006246:	6023      	str	r3, [r4, #0]
 8006248:	bd70      	pop	{r4, r5, r6, pc}
 800624a:	46c0      	nop			@ (mov r8, r8)
 800624c:	2000044c 	.word	0x2000044c

08006250 <_lseek_r>:
 8006250:	b570      	push	{r4, r5, r6, lr}
 8006252:	0004      	movs	r4, r0
 8006254:	0008      	movs	r0, r1
 8006256:	0011      	movs	r1, r2
 8006258:	001a      	movs	r2, r3
 800625a:	2300      	movs	r3, #0
 800625c:	4d05      	ldr	r5, [pc, #20]	@ (8006274 <_lseek_r+0x24>)
 800625e:	602b      	str	r3, [r5, #0]
 8006260:	f7fb fc54 	bl	8001b0c <_lseek>
 8006264:	1c43      	adds	r3, r0, #1
 8006266:	d103      	bne.n	8006270 <_lseek_r+0x20>
 8006268:	682b      	ldr	r3, [r5, #0]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d000      	beq.n	8006270 <_lseek_r+0x20>
 800626e:	6023      	str	r3, [r4, #0]
 8006270:	bd70      	pop	{r4, r5, r6, pc}
 8006272:	46c0      	nop			@ (mov r8, r8)
 8006274:	2000044c 	.word	0x2000044c

08006278 <_read_r>:
 8006278:	b570      	push	{r4, r5, r6, lr}
 800627a:	0004      	movs	r4, r0
 800627c:	0008      	movs	r0, r1
 800627e:	0011      	movs	r1, r2
 8006280:	001a      	movs	r2, r3
 8006282:	2300      	movs	r3, #0
 8006284:	4d05      	ldr	r5, [pc, #20]	@ (800629c <_read_r+0x24>)
 8006286:	602b      	str	r3, [r5, #0]
 8006288:	f7fb fbe6 	bl	8001a58 <_read>
 800628c:	1c43      	adds	r3, r0, #1
 800628e:	d103      	bne.n	8006298 <_read_r+0x20>
 8006290:	682b      	ldr	r3, [r5, #0]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d000      	beq.n	8006298 <_read_r+0x20>
 8006296:	6023      	str	r3, [r4, #0]
 8006298:	bd70      	pop	{r4, r5, r6, pc}
 800629a:	46c0      	nop			@ (mov r8, r8)
 800629c:	2000044c 	.word	0x2000044c

080062a0 <_write_r>:
 80062a0:	b570      	push	{r4, r5, r6, lr}
 80062a2:	0004      	movs	r4, r0
 80062a4:	0008      	movs	r0, r1
 80062a6:	0011      	movs	r1, r2
 80062a8:	001a      	movs	r2, r3
 80062aa:	2300      	movs	r3, #0
 80062ac:	4d05      	ldr	r5, [pc, #20]	@ (80062c4 <_write_r+0x24>)
 80062ae:	602b      	str	r3, [r5, #0]
 80062b0:	f7fb fbef 	bl	8001a92 <_write>
 80062b4:	1c43      	adds	r3, r0, #1
 80062b6:	d103      	bne.n	80062c0 <_write_r+0x20>
 80062b8:	682b      	ldr	r3, [r5, #0]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d000      	beq.n	80062c0 <_write_r+0x20>
 80062be:	6023      	str	r3, [r4, #0]
 80062c0:	bd70      	pop	{r4, r5, r6, pc}
 80062c2:	46c0      	nop			@ (mov r8, r8)
 80062c4:	2000044c 	.word	0x2000044c

080062c8 <__errno>:
 80062c8:	4b01      	ldr	r3, [pc, #4]	@ (80062d0 <__errno+0x8>)
 80062ca:	6818      	ldr	r0, [r3, #0]
 80062cc:	4770      	bx	lr
 80062ce:	46c0      	nop			@ (mov r8, r8)
 80062d0:	20000020 	.word	0x20000020

080062d4 <__libc_init_array>:
 80062d4:	b570      	push	{r4, r5, r6, lr}
 80062d6:	2600      	movs	r6, #0
 80062d8:	4c0c      	ldr	r4, [pc, #48]	@ (800630c <__libc_init_array+0x38>)
 80062da:	4d0d      	ldr	r5, [pc, #52]	@ (8006310 <__libc_init_array+0x3c>)
 80062dc:	1b64      	subs	r4, r4, r5
 80062de:	10a4      	asrs	r4, r4, #2
 80062e0:	42a6      	cmp	r6, r4
 80062e2:	d109      	bne.n	80062f8 <__libc_init_array+0x24>
 80062e4:	2600      	movs	r6, #0
 80062e6:	f000 fd3b 	bl	8006d60 <_init>
 80062ea:	4c0a      	ldr	r4, [pc, #40]	@ (8006314 <__libc_init_array+0x40>)
 80062ec:	4d0a      	ldr	r5, [pc, #40]	@ (8006318 <__libc_init_array+0x44>)
 80062ee:	1b64      	subs	r4, r4, r5
 80062f0:	10a4      	asrs	r4, r4, #2
 80062f2:	42a6      	cmp	r6, r4
 80062f4:	d105      	bne.n	8006302 <__libc_init_array+0x2e>
 80062f6:	bd70      	pop	{r4, r5, r6, pc}
 80062f8:	00b3      	lsls	r3, r6, #2
 80062fa:	58eb      	ldr	r3, [r5, r3]
 80062fc:	4798      	blx	r3
 80062fe:	3601      	adds	r6, #1
 8006300:	e7ee      	b.n	80062e0 <__libc_init_array+0xc>
 8006302:	00b3      	lsls	r3, r6, #2
 8006304:	58eb      	ldr	r3, [r5, r3]
 8006306:	4798      	blx	r3
 8006308:	3601      	adds	r6, #1
 800630a:	e7f2      	b.n	80062f2 <__libc_init_array+0x1e>
 800630c:	08006ec4 	.word	0x08006ec4
 8006310:	08006ec4 	.word	0x08006ec4
 8006314:	08006ec8 	.word	0x08006ec8
 8006318:	08006ec4 	.word	0x08006ec4

0800631c <__retarget_lock_init_recursive>:
 800631c:	4770      	bx	lr

0800631e <__retarget_lock_acquire_recursive>:
 800631e:	4770      	bx	lr

08006320 <__retarget_lock_release_recursive>:
 8006320:	4770      	bx	lr
	...

08006324 <_free_r>:
 8006324:	b570      	push	{r4, r5, r6, lr}
 8006326:	0005      	movs	r5, r0
 8006328:	1e0c      	subs	r4, r1, #0
 800632a:	d010      	beq.n	800634e <_free_r+0x2a>
 800632c:	3c04      	subs	r4, #4
 800632e:	6823      	ldr	r3, [r4, #0]
 8006330:	2b00      	cmp	r3, #0
 8006332:	da00      	bge.n	8006336 <_free_r+0x12>
 8006334:	18e4      	adds	r4, r4, r3
 8006336:	0028      	movs	r0, r5
 8006338:	f000 f8e0 	bl	80064fc <__malloc_lock>
 800633c:	4a1d      	ldr	r2, [pc, #116]	@ (80063b4 <_free_r+0x90>)
 800633e:	6813      	ldr	r3, [r2, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d105      	bne.n	8006350 <_free_r+0x2c>
 8006344:	6063      	str	r3, [r4, #4]
 8006346:	6014      	str	r4, [r2, #0]
 8006348:	0028      	movs	r0, r5
 800634a:	f000 f8df 	bl	800650c <__malloc_unlock>
 800634e:	bd70      	pop	{r4, r5, r6, pc}
 8006350:	42a3      	cmp	r3, r4
 8006352:	d908      	bls.n	8006366 <_free_r+0x42>
 8006354:	6820      	ldr	r0, [r4, #0]
 8006356:	1821      	adds	r1, r4, r0
 8006358:	428b      	cmp	r3, r1
 800635a:	d1f3      	bne.n	8006344 <_free_r+0x20>
 800635c:	6819      	ldr	r1, [r3, #0]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	1809      	adds	r1, r1, r0
 8006362:	6021      	str	r1, [r4, #0]
 8006364:	e7ee      	b.n	8006344 <_free_r+0x20>
 8006366:	001a      	movs	r2, r3
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d001      	beq.n	8006372 <_free_r+0x4e>
 800636e:	42a3      	cmp	r3, r4
 8006370:	d9f9      	bls.n	8006366 <_free_r+0x42>
 8006372:	6811      	ldr	r1, [r2, #0]
 8006374:	1850      	adds	r0, r2, r1
 8006376:	42a0      	cmp	r0, r4
 8006378:	d10b      	bne.n	8006392 <_free_r+0x6e>
 800637a:	6820      	ldr	r0, [r4, #0]
 800637c:	1809      	adds	r1, r1, r0
 800637e:	1850      	adds	r0, r2, r1
 8006380:	6011      	str	r1, [r2, #0]
 8006382:	4283      	cmp	r3, r0
 8006384:	d1e0      	bne.n	8006348 <_free_r+0x24>
 8006386:	6818      	ldr	r0, [r3, #0]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	1841      	adds	r1, r0, r1
 800638c:	6011      	str	r1, [r2, #0]
 800638e:	6053      	str	r3, [r2, #4]
 8006390:	e7da      	b.n	8006348 <_free_r+0x24>
 8006392:	42a0      	cmp	r0, r4
 8006394:	d902      	bls.n	800639c <_free_r+0x78>
 8006396:	230c      	movs	r3, #12
 8006398:	602b      	str	r3, [r5, #0]
 800639a:	e7d5      	b.n	8006348 <_free_r+0x24>
 800639c:	6820      	ldr	r0, [r4, #0]
 800639e:	1821      	adds	r1, r4, r0
 80063a0:	428b      	cmp	r3, r1
 80063a2:	d103      	bne.n	80063ac <_free_r+0x88>
 80063a4:	6819      	ldr	r1, [r3, #0]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	1809      	adds	r1, r1, r0
 80063aa:	6021      	str	r1, [r4, #0]
 80063ac:	6063      	str	r3, [r4, #4]
 80063ae:	6054      	str	r4, [r2, #4]
 80063b0:	e7ca      	b.n	8006348 <_free_r+0x24>
 80063b2:	46c0      	nop			@ (mov r8, r8)
 80063b4:	20000458 	.word	0x20000458

080063b8 <sbrk_aligned>:
 80063b8:	b570      	push	{r4, r5, r6, lr}
 80063ba:	4e0f      	ldr	r6, [pc, #60]	@ (80063f8 <sbrk_aligned+0x40>)
 80063bc:	000d      	movs	r5, r1
 80063be:	6831      	ldr	r1, [r6, #0]
 80063c0:	0004      	movs	r4, r0
 80063c2:	2900      	cmp	r1, #0
 80063c4:	d102      	bne.n	80063cc <sbrk_aligned+0x14>
 80063c6:	f000 fcad 	bl	8006d24 <_sbrk_r>
 80063ca:	6030      	str	r0, [r6, #0]
 80063cc:	0029      	movs	r1, r5
 80063ce:	0020      	movs	r0, r4
 80063d0:	f000 fca8 	bl	8006d24 <_sbrk_r>
 80063d4:	1c43      	adds	r3, r0, #1
 80063d6:	d103      	bne.n	80063e0 <sbrk_aligned+0x28>
 80063d8:	2501      	movs	r5, #1
 80063da:	426d      	negs	r5, r5
 80063dc:	0028      	movs	r0, r5
 80063de:	bd70      	pop	{r4, r5, r6, pc}
 80063e0:	2303      	movs	r3, #3
 80063e2:	1cc5      	adds	r5, r0, #3
 80063e4:	439d      	bics	r5, r3
 80063e6:	42a8      	cmp	r0, r5
 80063e8:	d0f8      	beq.n	80063dc <sbrk_aligned+0x24>
 80063ea:	1a29      	subs	r1, r5, r0
 80063ec:	0020      	movs	r0, r4
 80063ee:	f000 fc99 	bl	8006d24 <_sbrk_r>
 80063f2:	3001      	adds	r0, #1
 80063f4:	d1f2      	bne.n	80063dc <sbrk_aligned+0x24>
 80063f6:	e7ef      	b.n	80063d8 <sbrk_aligned+0x20>
 80063f8:	20000454 	.word	0x20000454

080063fc <_malloc_r>:
 80063fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063fe:	2203      	movs	r2, #3
 8006400:	1ccb      	adds	r3, r1, #3
 8006402:	4393      	bics	r3, r2
 8006404:	3308      	adds	r3, #8
 8006406:	0005      	movs	r5, r0
 8006408:	001f      	movs	r7, r3
 800640a:	2b0c      	cmp	r3, #12
 800640c:	d234      	bcs.n	8006478 <_malloc_r+0x7c>
 800640e:	270c      	movs	r7, #12
 8006410:	42b9      	cmp	r1, r7
 8006412:	d833      	bhi.n	800647c <_malloc_r+0x80>
 8006414:	0028      	movs	r0, r5
 8006416:	f000 f871 	bl	80064fc <__malloc_lock>
 800641a:	4e37      	ldr	r6, [pc, #220]	@ (80064f8 <_malloc_r+0xfc>)
 800641c:	6833      	ldr	r3, [r6, #0]
 800641e:	001c      	movs	r4, r3
 8006420:	2c00      	cmp	r4, #0
 8006422:	d12f      	bne.n	8006484 <_malloc_r+0x88>
 8006424:	0039      	movs	r1, r7
 8006426:	0028      	movs	r0, r5
 8006428:	f7ff ffc6 	bl	80063b8 <sbrk_aligned>
 800642c:	0004      	movs	r4, r0
 800642e:	1c43      	adds	r3, r0, #1
 8006430:	d15f      	bne.n	80064f2 <_malloc_r+0xf6>
 8006432:	6834      	ldr	r4, [r6, #0]
 8006434:	9400      	str	r4, [sp, #0]
 8006436:	9b00      	ldr	r3, [sp, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d14a      	bne.n	80064d2 <_malloc_r+0xd6>
 800643c:	2c00      	cmp	r4, #0
 800643e:	d052      	beq.n	80064e6 <_malloc_r+0xea>
 8006440:	6823      	ldr	r3, [r4, #0]
 8006442:	0028      	movs	r0, r5
 8006444:	18e3      	adds	r3, r4, r3
 8006446:	9900      	ldr	r1, [sp, #0]
 8006448:	9301      	str	r3, [sp, #4]
 800644a:	f000 fc6b 	bl	8006d24 <_sbrk_r>
 800644e:	9b01      	ldr	r3, [sp, #4]
 8006450:	4283      	cmp	r3, r0
 8006452:	d148      	bne.n	80064e6 <_malloc_r+0xea>
 8006454:	6823      	ldr	r3, [r4, #0]
 8006456:	0028      	movs	r0, r5
 8006458:	1aff      	subs	r7, r7, r3
 800645a:	0039      	movs	r1, r7
 800645c:	f7ff ffac 	bl	80063b8 <sbrk_aligned>
 8006460:	3001      	adds	r0, #1
 8006462:	d040      	beq.n	80064e6 <_malloc_r+0xea>
 8006464:	6823      	ldr	r3, [r4, #0]
 8006466:	19db      	adds	r3, r3, r7
 8006468:	6023      	str	r3, [r4, #0]
 800646a:	6833      	ldr	r3, [r6, #0]
 800646c:	685a      	ldr	r2, [r3, #4]
 800646e:	2a00      	cmp	r2, #0
 8006470:	d133      	bne.n	80064da <_malloc_r+0xde>
 8006472:	9b00      	ldr	r3, [sp, #0]
 8006474:	6033      	str	r3, [r6, #0]
 8006476:	e019      	b.n	80064ac <_malloc_r+0xb0>
 8006478:	2b00      	cmp	r3, #0
 800647a:	dac9      	bge.n	8006410 <_malloc_r+0x14>
 800647c:	230c      	movs	r3, #12
 800647e:	602b      	str	r3, [r5, #0]
 8006480:	2000      	movs	r0, #0
 8006482:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006484:	6821      	ldr	r1, [r4, #0]
 8006486:	1bc9      	subs	r1, r1, r7
 8006488:	d420      	bmi.n	80064cc <_malloc_r+0xd0>
 800648a:	290b      	cmp	r1, #11
 800648c:	d90a      	bls.n	80064a4 <_malloc_r+0xa8>
 800648e:	19e2      	adds	r2, r4, r7
 8006490:	6027      	str	r7, [r4, #0]
 8006492:	42a3      	cmp	r3, r4
 8006494:	d104      	bne.n	80064a0 <_malloc_r+0xa4>
 8006496:	6032      	str	r2, [r6, #0]
 8006498:	6863      	ldr	r3, [r4, #4]
 800649a:	6011      	str	r1, [r2, #0]
 800649c:	6053      	str	r3, [r2, #4]
 800649e:	e005      	b.n	80064ac <_malloc_r+0xb0>
 80064a0:	605a      	str	r2, [r3, #4]
 80064a2:	e7f9      	b.n	8006498 <_malloc_r+0x9c>
 80064a4:	6862      	ldr	r2, [r4, #4]
 80064a6:	42a3      	cmp	r3, r4
 80064a8:	d10e      	bne.n	80064c8 <_malloc_r+0xcc>
 80064aa:	6032      	str	r2, [r6, #0]
 80064ac:	0028      	movs	r0, r5
 80064ae:	f000 f82d 	bl	800650c <__malloc_unlock>
 80064b2:	0020      	movs	r0, r4
 80064b4:	2207      	movs	r2, #7
 80064b6:	300b      	adds	r0, #11
 80064b8:	1d23      	adds	r3, r4, #4
 80064ba:	4390      	bics	r0, r2
 80064bc:	1ac2      	subs	r2, r0, r3
 80064be:	4298      	cmp	r0, r3
 80064c0:	d0df      	beq.n	8006482 <_malloc_r+0x86>
 80064c2:	1a1b      	subs	r3, r3, r0
 80064c4:	50a3      	str	r3, [r4, r2]
 80064c6:	e7dc      	b.n	8006482 <_malloc_r+0x86>
 80064c8:	605a      	str	r2, [r3, #4]
 80064ca:	e7ef      	b.n	80064ac <_malloc_r+0xb0>
 80064cc:	0023      	movs	r3, r4
 80064ce:	6864      	ldr	r4, [r4, #4]
 80064d0:	e7a6      	b.n	8006420 <_malloc_r+0x24>
 80064d2:	9c00      	ldr	r4, [sp, #0]
 80064d4:	6863      	ldr	r3, [r4, #4]
 80064d6:	9300      	str	r3, [sp, #0]
 80064d8:	e7ad      	b.n	8006436 <_malloc_r+0x3a>
 80064da:	001a      	movs	r2, r3
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	42a3      	cmp	r3, r4
 80064e0:	d1fb      	bne.n	80064da <_malloc_r+0xde>
 80064e2:	2300      	movs	r3, #0
 80064e4:	e7da      	b.n	800649c <_malloc_r+0xa0>
 80064e6:	230c      	movs	r3, #12
 80064e8:	0028      	movs	r0, r5
 80064ea:	602b      	str	r3, [r5, #0]
 80064ec:	f000 f80e 	bl	800650c <__malloc_unlock>
 80064f0:	e7c6      	b.n	8006480 <_malloc_r+0x84>
 80064f2:	6007      	str	r7, [r0, #0]
 80064f4:	e7da      	b.n	80064ac <_malloc_r+0xb0>
 80064f6:	46c0      	nop			@ (mov r8, r8)
 80064f8:	20000458 	.word	0x20000458

080064fc <__malloc_lock>:
 80064fc:	b510      	push	{r4, lr}
 80064fe:	4802      	ldr	r0, [pc, #8]	@ (8006508 <__malloc_lock+0xc>)
 8006500:	f7ff ff0d 	bl	800631e <__retarget_lock_acquire_recursive>
 8006504:	bd10      	pop	{r4, pc}
 8006506:	46c0      	nop			@ (mov r8, r8)
 8006508:	20000450 	.word	0x20000450

0800650c <__malloc_unlock>:
 800650c:	b510      	push	{r4, lr}
 800650e:	4802      	ldr	r0, [pc, #8]	@ (8006518 <__malloc_unlock+0xc>)
 8006510:	f7ff ff06 	bl	8006320 <__retarget_lock_release_recursive>
 8006514:	bd10      	pop	{r4, pc}
 8006516:	46c0      	nop			@ (mov r8, r8)
 8006518:	20000450 	.word	0x20000450

0800651c <__sfputc_r>:
 800651c:	6893      	ldr	r3, [r2, #8]
 800651e:	b510      	push	{r4, lr}
 8006520:	3b01      	subs	r3, #1
 8006522:	6093      	str	r3, [r2, #8]
 8006524:	2b00      	cmp	r3, #0
 8006526:	da04      	bge.n	8006532 <__sfputc_r+0x16>
 8006528:	6994      	ldr	r4, [r2, #24]
 800652a:	42a3      	cmp	r3, r4
 800652c:	db07      	blt.n	800653e <__sfputc_r+0x22>
 800652e:	290a      	cmp	r1, #10
 8006530:	d005      	beq.n	800653e <__sfputc_r+0x22>
 8006532:	6813      	ldr	r3, [r2, #0]
 8006534:	1c58      	adds	r0, r3, #1
 8006536:	6010      	str	r0, [r2, #0]
 8006538:	7019      	strb	r1, [r3, #0]
 800653a:	0008      	movs	r0, r1
 800653c:	bd10      	pop	{r4, pc}
 800653e:	f7ff fdcd 	bl	80060dc <__swbuf_r>
 8006542:	0001      	movs	r1, r0
 8006544:	e7f9      	b.n	800653a <__sfputc_r+0x1e>

08006546 <__sfputs_r>:
 8006546:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006548:	0006      	movs	r6, r0
 800654a:	000f      	movs	r7, r1
 800654c:	0014      	movs	r4, r2
 800654e:	18d5      	adds	r5, r2, r3
 8006550:	42ac      	cmp	r4, r5
 8006552:	d101      	bne.n	8006558 <__sfputs_r+0x12>
 8006554:	2000      	movs	r0, #0
 8006556:	e007      	b.n	8006568 <__sfputs_r+0x22>
 8006558:	7821      	ldrb	r1, [r4, #0]
 800655a:	003a      	movs	r2, r7
 800655c:	0030      	movs	r0, r6
 800655e:	f7ff ffdd 	bl	800651c <__sfputc_r>
 8006562:	3401      	adds	r4, #1
 8006564:	1c43      	adds	r3, r0, #1
 8006566:	d1f3      	bne.n	8006550 <__sfputs_r+0xa>
 8006568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800656c <_vfiprintf_r>:
 800656c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800656e:	b0a1      	sub	sp, #132	@ 0x84
 8006570:	000f      	movs	r7, r1
 8006572:	0015      	movs	r5, r2
 8006574:	001e      	movs	r6, r3
 8006576:	9003      	str	r0, [sp, #12]
 8006578:	2800      	cmp	r0, #0
 800657a:	d004      	beq.n	8006586 <_vfiprintf_r+0x1a>
 800657c:	6a03      	ldr	r3, [r0, #32]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d101      	bne.n	8006586 <_vfiprintf_r+0x1a>
 8006582:	f7ff fcbb 	bl	8005efc <__sinit>
 8006586:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006588:	07db      	lsls	r3, r3, #31
 800658a:	d405      	bmi.n	8006598 <_vfiprintf_r+0x2c>
 800658c:	89bb      	ldrh	r3, [r7, #12]
 800658e:	059b      	lsls	r3, r3, #22
 8006590:	d402      	bmi.n	8006598 <_vfiprintf_r+0x2c>
 8006592:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8006594:	f7ff fec3 	bl	800631e <__retarget_lock_acquire_recursive>
 8006598:	89bb      	ldrh	r3, [r7, #12]
 800659a:	071b      	lsls	r3, r3, #28
 800659c:	d502      	bpl.n	80065a4 <_vfiprintf_r+0x38>
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d113      	bne.n	80065cc <_vfiprintf_r+0x60>
 80065a4:	0039      	movs	r1, r7
 80065a6:	9803      	ldr	r0, [sp, #12]
 80065a8:	f7ff fdda 	bl	8006160 <__swsetup_r>
 80065ac:	2800      	cmp	r0, #0
 80065ae:	d00d      	beq.n	80065cc <_vfiprintf_r+0x60>
 80065b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80065b2:	07db      	lsls	r3, r3, #31
 80065b4:	d503      	bpl.n	80065be <_vfiprintf_r+0x52>
 80065b6:	2001      	movs	r0, #1
 80065b8:	4240      	negs	r0, r0
 80065ba:	b021      	add	sp, #132	@ 0x84
 80065bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065be:	89bb      	ldrh	r3, [r7, #12]
 80065c0:	059b      	lsls	r3, r3, #22
 80065c2:	d4f8      	bmi.n	80065b6 <_vfiprintf_r+0x4a>
 80065c4:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80065c6:	f7ff feab 	bl	8006320 <__retarget_lock_release_recursive>
 80065ca:	e7f4      	b.n	80065b6 <_vfiprintf_r+0x4a>
 80065cc:	2300      	movs	r3, #0
 80065ce:	ac08      	add	r4, sp, #32
 80065d0:	6163      	str	r3, [r4, #20]
 80065d2:	3320      	adds	r3, #32
 80065d4:	7663      	strb	r3, [r4, #25]
 80065d6:	3310      	adds	r3, #16
 80065d8:	76a3      	strb	r3, [r4, #26]
 80065da:	9607      	str	r6, [sp, #28]
 80065dc:	002e      	movs	r6, r5
 80065de:	7833      	ldrb	r3, [r6, #0]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d001      	beq.n	80065e8 <_vfiprintf_r+0x7c>
 80065e4:	2b25      	cmp	r3, #37	@ 0x25
 80065e6:	d148      	bne.n	800667a <_vfiprintf_r+0x10e>
 80065e8:	1b73      	subs	r3, r6, r5
 80065ea:	9305      	str	r3, [sp, #20]
 80065ec:	42ae      	cmp	r6, r5
 80065ee:	d00b      	beq.n	8006608 <_vfiprintf_r+0x9c>
 80065f0:	002a      	movs	r2, r5
 80065f2:	0039      	movs	r1, r7
 80065f4:	9803      	ldr	r0, [sp, #12]
 80065f6:	f7ff ffa6 	bl	8006546 <__sfputs_r>
 80065fa:	3001      	adds	r0, #1
 80065fc:	d100      	bne.n	8006600 <_vfiprintf_r+0x94>
 80065fe:	e0ae      	b.n	800675e <_vfiprintf_r+0x1f2>
 8006600:	6963      	ldr	r3, [r4, #20]
 8006602:	9a05      	ldr	r2, [sp, #20]
 8006604:	189b      	adds	r3, r3, r2
 8006606:	6163      	str	r3, [r4, #20]
 8006608:	7833      	ldrb	r3, [r6, #0]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d100      	bne.n	8006610 <_vfiprintf_r+0xa4>
 800660e:	e0a6      	b.n	800675e <_vfiprintf_r+0x1f2>
 8006610:	2201      	movs	r2, #1
 8006612:	2300      	movs	r3, #0
 8006614:	4252      	negs	r2, r2
 8006616:	6062      	str	r2, [r4, #4]
 8006618:	a904      	add	r1, sp, #16
 800661a:	3254      	adds	r2, #84	@ 0x54
 800661c:	1852      	adds	r2, r2, r1
 800661e:	1c75      	adds	r5, r6, #1
 8006620:	6023      	str	r3, [r4, #0]
 8006622:	60e3      	str	r3, [r4, #12]
 8006624:	60a3      	str	r3, [r4, #8]
 8006626:	7013      	strb	r3, [r2, #0]
 8006628:	65a3      	str	r3, [r4, #88]	@ 0x58
 800662a:	4b59      	ldr	r3, [pc, #356]	@ (8006790 <_vfiprintf_r+0x224>)
 800662c:	2205      	movs	r2, #5
 800662e:	0018      	movs	r0, r3
 8006630:	7829      	ldrb	r1, [r5, #0]
 8006632:	9305      	str	r3, [sp, #20]
 8006634:	f000 fb88 	bl	8006d48 <memchr>
 8006638:	1c6e      	adds	r6, r5, #1
 800663a:	2800      	cmp	r0, #0
 800663c:	d11f      	bne.n	800667e <_vfiprintf_r+0x112>
 800663e:	6822      	ldr	r2, [r4, #0]
 8006640:	06d3      	lsls	r3, r2, #27
 8006642:	d504      	bpl.n	800664e <_vfiprintf_r+0xe2>
 8006644:	2353      	movs	r3, #83	@ 0x53
 8006646:	a904      	add	r1, sp, #16
 8006648:	185b      	adds	r3, r3, r1
 800664a:	2120      	movs	r1, #32
 800664c:	7019      	strb	r1, [r3, #0]
 800664e:	0713      	lsls	r3, r2, #28
 8006650:	d504      	bpl.n	800665c <_vfiprintf_r+0xf0>
 8006652:	2353      	movs	r3, #83	@ 0x53
 8006654:	a904      	add	r1, sp, #16
 8006656:	185b      	adds	r3, r3, r1
 8006658:	212b      	movs	r1, #43	@ 0x2b
 800665a:	7019      	strb	r1, [r3, #0]
 800665c:	782b      	ldrb	r3, [r5, #0]
 800665e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006660:	d016      	beq.n	8006690 <_vfiprintf_r+0x124>
 8006662:	002e      	movs	r6, r5
 8006664:	2100      	movs	r1, #0
 8006666:	200a      	movs	r0, #10
 8006668:	68e3      	ldr	r3, [r4, #12]
 800666a:	7832      	ldrb	r2, [r6, #0]
 800666c:	1c75      	adds	r5, r6, #1
 800666e:	3a30      	subs	r2, #48	@ 0x30
 8006670:	2a09      	cmp	r2, #9
 8006672:	d950      	bls.n	8006716 <_vfiprintf_r+0x1aa>
 8006674:	2900      	cmp	r1, #0
 8006676:	d111      	bne.n	800669c <_vfiprintf_r+0x130>
 8006678:	e017      	b.n	80066aa <_vfiprintf_r+0x13e>
 800667a:	3601      	adds	r6, #1
 800667c:	e7af      	b.n	80065de <_vfiprintf_r+0x72>
 800667e:	9b05      	ldr	r3, [sp, #20]
 8006680:	6822      	ldr	r2, [r4, #0]
 8006682:	1ac0      	subs	r0, r0, r3
 8006684:	2301      	movs	r3, #1
 8006686:	4083      	lsls	r3, r0
 8006688:	4313      	orrs	r3, r2
 800668a:	0035      	movs	r5, r6
 800668c:	6023      	str	r3, [r4, #0]
 800668e:	e7cc      	b.n	800662a <_vfiprintf_r+0xbe>
 8006690:	9b07      	ldr	r3, [sp, #28]
 8006692:	1d19      	adds	r1, r3, #4
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	9107      	str	r1, [sp, #28]
 8006698:	2b00      	cmp	r3, #0
 800669a:	db01      	blt.n	80066a0 <_vfiprintf_r+0x134>
 800669c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800669e:	e004      	b.n	80066aa <_vfiprintf_r+0x13e>
 80066a0:	425b      	negs	r3, r3
 80066a2:	60e3      	str	r3, [r4, #12]
 80066a4:	2302      	movs	r3, #2
 80066a6:	4313      	orrs	r3, r2
 80066a8:	6023      	str	r3, [r4, #0]
 80066aa:	7833      	ldrb	r3, [r6, #0]
 80066ac:	2b2e      	cmp	r3, #46	@ 0x2e
 80066ae:	d10c      	bne.n	80066ca <_vfiprintf_r+0x15e>
 80066b0:	7873      	ldrb	r3, [r6, #1]
 80066b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80066b4:	d134      	bne.n	8006720 <_vfiprintf_r+0x1b4>
 80066b6:	9b07      	ldr	r3, [sp, #28]
 80066b8:	3602      	adds	r6, #2
 80066ba:	1d1a      	adds	r2, r3, #4
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	9207      	str	r2, [sp, #28]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	da01      	bge.n	80066c8 <_vfiprintf_r+0x15c>
 80066c4:	2301      	movs	r3, #1
 80066c6:	425b      	negs	r3, r3
 80066c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80066ca:	4d32      	ldr	r5, [pc, #200]	@ (8006794 <_vfiprintf_r+0x228>)
 80066cc:	2203      	movs	r2, #3
 80066ce:	0028      	movs	r0, r5
 80066d0:	7831      	ldrb	r1, [r6, #0]
 80066d2:	f000 fb39 	bl	8006d48 <memchr>
 80066d6:	2800      	cmp	r0, #0
 80066d8:	d006      	beq.n	80066e8 <_vfiprintf_r+0x17c>
 80066da:	2340      	movs	r3, #64	@ 0x40
 80066dc:	1b40      	subs	r0, r0, r5
 80066de:	4083      	lsls	r3, r0
 80066e0:	6822      	ldr	r2, [r4, #0]
 80066e2:	3601      	adds	r6, #1
 80066e4:	4313      	orrs	r3, r2
 80066e6:	6023      	str	r3, [r4, #0]
 80066e8:	7831      	ldrb	r1, [r6, #0]
 80066ea:	2206      	movs	r2, #6
 80066ec:	482a      	ldr	r0, [pc, #168]	@ (8006798 <_vfiprintf_r+0x22c>)
 80066ee:	1c75      	adds	r5, r6, #1
 80066f0:	7621      	strb	r1, [r4, #24]
 80066f2:	f000 fb29 	bl	8006d48 <memchr>
 80066f6:	2800      	cmp	r0, #0
 80066f8:	d040      	beq.n	800677c <_vfiprintf_r+0x210>
 80066fa:	4b28      	ldr	r3, [pc, #160]	@ (800679c <_vfiprintf_r+0x230>)
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d122      	bne.n	8006746 <_vfiprintf_r+0x1da>
 8006700:	2207      	movs	r2, #7
 8006702:	9b07      	ldr	r3, [sp, #28]
 8006704:	3307      	adds	r3, #7
 8006706:	4393      	bics	r3, r2
 8006708:	3308      	adds	r3, #8
 800670a:	9307      	str	r3, [sp, #28]
 800670c:	6963      	ldr	r3, [r4, #20]
 800670e:	9a04      	ldr	r2, [sp, #16]
 8006710:	189b      	adds	r3, r3, r2
 8006712:	6163      	str	r3, [r4, #20]
 8006714:	e762      	b.n	80065dc <_vfiprintf_r+0x70>
 8006716:	4343      	muls	r3, r0
 8006718:	002e      	movs	r6, r5
 800671a:	2101      	movs	r1, #1
 800671c:	189b      	adds	r3, r3, r2
 800671e:	e7a4      	b.n	800666a <_vfiprintf_r+0xfe>
 8006720:	2300      	movs	r3, #0
 8006722:	200a      	movs	r0, #10
 8006724:	0019      	movs	r1, r3
 8006726:	3601      	adds	r6, #1
 8006728:	6063      	str	r3, [r4, #4]
 800672a:	7832      	ldrb	r2, [r6, #0]
 800672c:	1c75      	adds	r5, r6, #1
 800672e:	3a30      	subs	r2, #48	@ 0x30
 8006730:	2a09      	cmp	r2, #9
 8006732:	d903      	bls.n	800673c <_vfiprintf_r+0x1d0>
 8006734:	2b00      	cmp	r3, #0
 8006736:	d0c8      	beq.n	80066ca <_vfiprintf_r+0x15e>
 8006738:	9109      	str	r1, [sp, #36]	@ 0x24
 800673a:	e7c6      	b.n	80066ca <_vfiprintf_r+0x15e>
 800673c:	4341      	muls	r1, r0
 800673e:	002e      	movs	r6, r5
 8006740:	2301      	movs	r3, #1
 8006742:	1889      	adds	r1, r1, r2
 8006744:	e7f1      	b.n	800672a <_vfiprintf_r+0x1be>
 8006746:	aa07      	add	r2, sp, #28
 8006748:	9200      	str	r2, [sp, #0]
 800674a:	0021      	movs	r1, r4
 800674c:	003a      	movs	r2, r7
 800674e:	4b14      	ldr	r3, [pc, #80]	@ (80067a0 <_vfiprintf_r+0x234>)
 8006750:	9803      	ldr	r0, [sp, #12]
 8006752:	e000      	b.n	8006756 <_vfiprintf_r+0x1ea>
 8006754:	bf00      	nop
 8006756:	9004      	str	r0, [sp, #16]
 8006758:	9b04      	ldr	r3, [sp, #16]
 800675a:	3301      	adds	r3, #1
 800675c:	d1d6      	bne.n	800670c <_vfiprintf_r+0x1a0>
 800675e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006760:	07db      	lsls	r3, r3, #31
 8006762:	d405      	bmi.n	8006770 <_vfiprintf_r+0x204>
 8006764:	89bb      	ldrh	r3, [r7, #12]
 8006766:	059b      	lsls	r3, r3, #22
 8006768:	d402      	bmi.n	8006770 <_vfiprintf_r+0x204>
 800676a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800676c:	f7ff fdd8 	bl	8006320 <__retarget_lock_release_recursive>
 8006770:	89bb      	ldrh	r3, [r7, #12]
 8006772:	065b      	lsls	r3, r3, #25
 8006774:	d500      	bpl.n	8006778 <_vfiprintf_r+0x20c>
 8006776:	e71e      	b.n	80065b6 <_vfiprintf_r+0x4a>
 8006778:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800677a:	e71e      	b.n	80065ba <_vfiprintf_r+0x4e>
 800677c:	aa07      	add	r2, sp, #28
 800677e:	9200      	str	r2, [sp, #0]
 8006780:	0021      	movs	r1, r4
 8006782:	003a      	movs	r2, r7
 8006784:	4b06      	ldr	r3, [pc, #24]	@ (80067a0 <_vfiprintf_r+0x234>)
 8006786:	9803      	ldr	r0, [sp, #12]
 8006788:	f000 f87c 	bl	8006884 <_printf_i>
 800678c:	e7e3      	b.n	8006756 <_vfiprintf_r+0x1ea>
 800678e:	46c0      	nop			@ (mov r8, r8)
 8006790:	08006e88 	.word	0x08006e88
 8006794:	08006e8e 	.word	0x08006e8e
 8006798:	08006e92 	.word	0x08006e92
 800679c:	00000000 	.word	0x00000000
 80067a0:	08006547 	.word	0x08006547

080067a4 <_printf_common>:
 80067a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067a6:	0016      	movs	r6, r2
 80067a8:	9301      	str	r3, [sp, #4]
 80067aa:	688a      	ldr	r2, [r1, #8]
 80067ac:	690b      	ldr	r3, [r1, #16]
 80067ae:	000c      	movs	r4, r1
 80067b0:	9000      	str	r0, [sp, #0]
 80067b2:	4293      	cmp	r3, r2
 80067b4:	da00      	bge.n	80067b8 <_printf_common+0x14>
 80067b6:	0013      	movs	r3, r2
 80067b8:	0022      	movs	r2, r4
 80067ba:	6033      	str	r3, [r6, #0]
 80067bc:	3243      	adds	r2, #67	@ 0x43
 80067be:	7812      	ldrb	r2, [r2, #0]
 80067c0:	2a00      	cmp	r2, #0
 80067c2:	d001      	beq.n	80067c8 <_printf_common+0x24>
 80067c4:	3301      	adds	r3, #1
 80067c6:	6033      	str	r3, [r6, #0]
 80067c8:	6823      	ldr	r3, [r4, #0]
 80067ca:	069b      	lsls	r3, r3, #26
 80067cc:	d502      	bpl.n	80067d4 <_printf_common+0x30>
 80067ce:	6833      	ldr	r3, [r6, #0]
 80067d0:	3302      	adds	r3, #2
 80067d2:	6033      	str	r3, [r6, #0]
 80067d4:	6822      	ldr	r2, [r4, #0]
 80067d6:	2306      	movs	r3, #6
 80067d8:	0015      	movs	r5, r2
 80067da:	401d      	ands	r5, r3
 80067dc:	421a      	tst	r2, r3
 80067de:	d027      	beq.n	8006830 <_printf_common+0x8c>
 80067e0:	0023      	movs	r3, r4
 80067e2:	3343      	adds	r3, #67	@ 0x43
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	1e5a      	subs	r2, r3, #1
 80067e8:	4193      	sbcs	r3, r2
 80067ea:	6822      	ldr	r2, [r4, #0]
 80067ec:	0692      	lsls	r2, r2, #26
 80067ee:	d430      	bmi.n	8006852 <_printf_common+0xae>
 80067f0:	0022      	movs	r2, r4
 80067f2:	9901      	ldr	r1, [sp, #4]
 80067f4:	9800      	ldr	r0, [sp, #0]
 80067f6:	9d08      	ldr	r5, [sp, #32]
 80067f8:	3243      	adds	r2, #67	@ 0x43
 80067fa:	47a8      	blx	r5
 80067fc:	3001      	adds	r0, #1
 80067fe:	d025      	beq.n	800684c <_printf_common+0xa8>
 8006800:	2206      	movs	r2, #6
 8006802:	6823      	ldr	r3, [r4, #0]
 8006804:	2500      	movs	r5, #0
 8006806:	4013      	ands	r3, r2
 8006808:	2b04      	cmp	r3, #4
 800680a:	d105      	bne.n	8006818 <_printf_common+0x74>
 800680c:	6833      	ldr	r3, [r6, #0]
 800680e:	68e5      	ldr	r5, [r4, #12]
 8006810:	1aed      	subs	r5, r5, r3
 8006812:	43eb      	mvns	r3, r5
 8006814:	17db      	asrs	r3, r3, #31
 8006816:	401d      	ands	r5, r3
 8006818:	68a3      	ldr	r3, [r4, #8]
 800681a:	6922      	ldr	r2, [r4, #16]
 800681c:	4293      	cmp	r3, r2
 800681e:	dd01      	ble.n	8006824 <_printf_common+0x80>
 8006820:	1a9b      	subs	r3, r3, r2
 8006822:	18ed      	adds	r5, r5, r3
 8006824:	2600      	movs	r6, #0
 8006826:	42b5      	cmp	r5, r6
 8006828:	d120      	bne.n	800686c <_printf_common+0xc8>
 800682a:	2000      	movs	r0, #0
 800682c:	e010      	b.n	8006850 <_printf_common+0xac>
 800682e:	3501      	adds	r5, #1
 8006830:	68e3      	ldr	r3, [r4, #12]
 8006832:	6832      	ldr	r2, [r6, #0]
 8006834:	1a9b      	subs	r3, r3, r2
 8006836:	42ab      	cmp	r3, r5
 8006838:	ddd2      	ble.n	80067e0 <_printf_common+0x3c>
 800683a:	0022      	movs	r2, r4
 800683c:	2301      	movs	r3, #1
 800683e:	9901      	ldr	r1, [sp, #4]
 8006840:	9800      	ldr	r0, [sp, #0]
 8006842:	9f08      	ldr	r7, [sp, #32]
 8006844:	3219      	adds	r2, #25
 8006846:	47b8      	blx	r7
 8006848:	3001      	adds	r0, #1
 800684a:	d1f0      	bne.n	800682e <_printf_common+0x8a>
 800684c:	2001      	movs	r0, #1
 800684e:	4240      	negs	r0, r0
 8006850:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006852:	2030      	movs	r0, #48	@ 0x30
 8006854:	18e1      	adds	r1, r4, r3
 8006856:	3143      	adds	r1, #67	@ 0x43
 8006858:	7008      	strb	r0, [r1, #0]
 800685a:	0021      	movs	r1, r4
 800685c:	1c5a      	adds	r2, r3, #1
 800685e:	3145      	adds	r1, #69	@ 0x45
 8006860:	7809      	ldrb	r1, [r1, #0]
 8006862:	18a2      	adds	r2, r4, r2
 8006864:	3243      	adds	r2, #67	@ 0x43
 8006866:	3302      	adds	r3, #2
 8006868:	7011      	strb	r1, [r2, #0]
 800686a:	e7c1      	b.n	80067f0 <_printf_common+0x4c>
 800686c:	0022      	movs	r2, r4
 800686e:	2301      	movs	r3, #1
 8006870:	9901      	ldr	r1, [sp, #4]
 8006872:	9800      	ldr	r0, [sp, #0]
 8006874:	9f08      	ldr	r7, [sp, #32]
 8006876:	321a      	adds	r2, #26
 8006878:	47b8      	blx	r7
 800687a:	3001      	adds	r0, #1
 800687c:	d0e6      	beq.n	800684c <_printf_common+0xa8>
 800687e:	3601      	adds	r6, #1
 8006880:	e7d1      	b.n	8006826 <_printf_common+0x82>
	...

08006884 <_printf_i>:
 8006884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006886:	b08b      	sub	sp, #44	@ 0x2c
 8006888:	9206      	str	r2, [sp, #24]
 800688a:	000a      	movs	r2, r1
 800688c:	3243      	adds	r2, #67	@ 0x43
 800688e:	9307      	str	r3, [sp, #28]
 8006890:	9005      	str	r0, [sp, #20]
 8006892:	9203      	str	r2, [sp, #12]
 8006894:	7e0a      	ldrb	r2, [r1, #24]
 8006896:	000c      	movs	r4, r1
 8006898:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800689a:	2a78      	cmp	r2, #120	@ 0x78
 800689c:	d809      	bhi.n	80068b2 <_printf_i+0x2e>
 800689e:	2a62      	cmp	r2, #98	@ 0x62
 80068a0:	d80b      	bhi.n	80068ba <_printf_i+0x36>
 80068a2:	2a00      	cmp	r2, #0
 80068a4:	d100      	bne.n	80068a8 <_printf_i+0x24>
 80068a6:	e0bc      	b.n	8006a22 <_printf_i+0x19e>
 80068a8:	497b      	ldr	r1, [pc, #492]	@ (8006a98 <_printf_i+0x214>)
 80068aa:	9104      	str	r1, [sp, #16]
 80068ac:	2a58      	cmp	r2, #88	@ 0x58
 80068ae:	d100      	bne.n	80068b2 <_printf_i+0x2e>
 80068b0:	e090      	b.n	80069d4 <_printf_i+0x150>
 80068b2:	0025      	movs	r5, r4
 80068b4:	3542      	adds	r5, #66	@ 0x42
 80068b6:	702a      	strb	r2, [r5, #0]
 80068b8:	e022      	b.n	8006900 <_printf_i+0x7c>
 80068ba:	0010      	movs	r0, r2
 80068bc:	3863      	subs	r0, #99	@ 0x63
 80068be:	2815      	cmp	r0, #21
 80068c0:	d8f7      	bhi.n	80068b2 <_printf_i+0x2e>
 80068c2:	f7f9 fc21 	bl	8000108 <__gnu_thumb1_case_shi>
 80068c6:	0016      	.short	0x0016
 80068c8:	fff6001f 	.word	0xfff6001f
 80068cc:	fff6fff6 	.word	0xfff6fff6
 80068d0:	001ffff6 	.word	0x001ffff6
 80068d4:	fff6fff6 	.word	0xfff6fff6
 80068d8:	fff6fff6 	.word	0xfff6fff6
 80068dc:	003600a1 	.word	0x003600a1
 80068e0:	fff60080 	.word	0xfff60080
 80068e4:	00b2fff6 	.word	0x00b2fff6
 80068e8:	0036fff6 	.word	0x0036fff6
 80068ec:	fff6fff6 	.word	0xfff6fff6
 80068f0:	0084      	.short	0x0084
 80068f2:	0025      	movs	r5, r4
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	3542      	adds	r5, #66	@ 0x42
 80068f8:	1d11      	adds	r1, r2, #4
 80068fa:	6019      	str	r1, [r3, #0]
 80068fc:	6813      	ldr	r3, [r2, #0]
 80068fe:	702b      	strb	r3, [r5, #0]
 8006900:	2301      	movs	r3, #1
 8006902:	e0a0      	b.n	8006a46 <_printf_i+0x1c2>
 8006904:	6818      	ldr	r0, [r3, #0]
 8006906:	6809      	ldr	r1, [r1, #0]
 8006908:	1d02      	adds	r2, r0, #4
 800690a:	060d      	lsls	r5, r1, #24
 800690c:	d50b      	bpl.n	8006926 <_printf_i+0xa2>
 800690e:	6806      	ldr	r6, [r0, #0]
 8006910:	601a      	str	r2, [r3, #0]
 8006912:	2e00      	cmp	r6, #0
 8006914:	da03      	bge.n	800691e <_printf_i+0x9a>
 8006916:	232d      	movs	r3, #45	@ 0x2d
 8006918:	9a03      	ldr	r2, [sp, #12]
 800691a:	4276      	negs	r6, r6
 800691c:	7013      	strb	r3, [r2, #0]
 800691e:	4b5e      	ldr	r3, [pc, #376]	@ (8006a98 <_printf_i+0x214>)
 8006920:	270a      	movs	r7, #10
 8006922:	9304      	str	r3, [sp, #16]
 8006924:	e018      	b.n	8006958 <_printf_i+0xd4>
 8006926:	6806      	ldr	r6, [r0, #0]
 8006928:	601a      	str	r2, [r3, #0]
 800692a:	0649      	lsls	r1, r1, #25
 800692c:	d5f1      	bpl.n	8006912 <_printf_i+0x8e>
 800692e:	b236      	sxth	r6, r6
 8006930:	e7ef      	b.n	8006912 <_printf_i+0x8e>
 8006932:	6808      	ldr	r0, [r1, #0]
 8006934:	6819      	ldr	r1, [r3, #0]
 8006936:	c940      	ldmia	r1!, {r6}
 8006938:	0605      	lsls	r5, r0, #24
 800693a:	d402      	bmi.n	8006942 <_printf_i+0xbe>
 800693c:	0640      	lsls	r0, r0, #25
 800693e:	d500      	bpl.n	8006942 <_printf_i+0xbe>
 8006940:	b2b6      	uxth	r6, r6
 8006942:	6019      	str	r1, [r3, #0]
 8006944:	4b54      	ldr	r3, [pc, #336]	@ (8006a98 <_printf_i+0x214>)
 8006946:	270a      	movs	r7, #10
 8006948:	9304      	str	r3, [sp, #16]
 800694a:	2a6f      	cmp	r2, #111	@ 0x6f
 800694c:	d100      	bne.n	8006950 <_printf_i+0xcc>
 800694e:	3f02      	subs	r7, #2
 8006950:	0023      	movs	r3, r4
 8006952:	2200      	movs	r2, #0
 8006954:	3343      	adds	r3, #67	@ 0x43
 8006956:	701a      	strb	r2, [r3, #0]
 8006958:	6863      	ldr	r3, [r4, #4]
 800695a:	60a3      	str	r3, [r4, #8]
 800695c:	2b00      	cmp	r3, #0
 800695e:	db03      	blt.n	8006968 <_printf_i+0xe4>
 8006960:	2104      	movs	r1, #4
 8006962:	6822      	ldr	r2, [r4, #0]
 8006964:	438a      	bics	r2, r1
 8006966:	6022      	str	r2, [r4, #0]
 8006968:	2e00      	cmp	r6, #0
 800696a:	d102      	bne.n	8006972 <_printf_i+0xee>
 800696c:	9d03      	ldr	r5, [sp, #12]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d00c      	beq.n	800698c <_printf_i+0x108>
 8006972:	9d03      	ldr	r5, [sp, #12]
 8006974:	0030      	movs	r0, r6
 8006976:	0039      	movs	r1, r7
 8006978:	f7f9 fc56 	bl	8000228 <__aeabi_uidivmod>
 800697c:	9b04      	ldr	r3, [sp, #16]
 800697e:	3d01      	subs	r5, #1
 8006980:	5c5b      	ldrb	r3, [r3, r1]
 8006982:	702b      	strb	r3, [r5, #0]
 8006984:	0033      	movs	r3, r6
 8006986:	0006      	movs	r6, r0
 8006988:	429f      	cmp	r7, r3
 800698a:	d9f3      	bls.n	8006974 <_printf_i+0xf0>
 800698c:	2f08      	cmp	r7, #8
 800698e:	d109      	bne.n	80069a4 <_printf_i+0x120>
 8006990:	6823      	ldr	r3, [r4, #0]
 8006992:	07db      	lsls	r3, r3, #31
 8006994:	d506      	bpl.n	80069a4 <_printf_i+0x120>
 8006996:	6862      	ldr	r2, [r4, #4]
 8006998:	6923      	ldr	r3, [r4, #16]
 800699a:	429a      	cmp	r2, r3
 800699c:	dc02      	bgt.n	80069a4 <_printf_i+0x120>
 800699e:	2330      	movs	r3, #48	@ 0x30
 80069a0:	3d01      	subs	r5, #1
 80069a2:	702b      	strb	r3, [r5, #0]
 80069a4:	9b03      	ldr	r3, [sp, #12]
 80069a6:	1b5b      	subs	r3, r3, r5
 80069a8:	6123      	str	r3, [r4, #16]
 80069aa:	9b07      	ldr	r3, [sp, #28]
 80069ac:	0021      	movs	r1, r4
 80069ae:	9300      	str	r3, [sp, #0]
 80069b0:	9805      	ldr	r0, [sp, #20]
 80069b2:	9b06      	ldr	r3, [sp, #24]
 80069b4:	aa09      	add	r2, sp, #36	@ 0x24
 80069b6:	f7ff fef5 	bl	80067a4 <_printf_common>
 80069ba:	3001      	adds	r0, #1
 80069bc:	d148      	bne.n	8006a50 <_printf_i+0x1cc>
 80069be:	2001      	movs	r0, #1
 80069c0:	4240      	negs	r0, r0
 80069c2:	b00b      	add	sp, #44	@ 0x2c
 80069c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069c6:	2220      	movs	r2, #32
 80069c8:	6809      	ldr	r1, [r1, #0]
 80069ca:	430a      	orrs	r2, r1
 80069cc:	6022      	str	r2, [r4, #0]
 80069ce:	2278      	movs	r2, #120	@ 0x78
 80069d0:	4932      	ldr	r1, [pc, #200]	@ (8006a9c <_printf_i+0x218>)
 80069d2:	9104      	str	r1, [sp, #16]
 80069d4:	0021      	movs	r1, r4
 80069d6:	3145      	adds	r1, #69	@ 0x45
 80069d8:	700a      	strb	r2, [r1, #0]
 80069da:	6819      	ldr	r1, [r3, #0]
 80069dc:	6822      	ldr	r2, [r4, #0]
 80069de:	c940      	ldmia	r1!, {r6}
 80069e0:	0610      	lsls	r0, r2, #24
 80069e2:	d402      	bmi.n	80069ea <_printf_i+0x166>
 80069e4:	0650      	lsls	r0, r2, #25
 80069e6:	d500      	bpl.n	80069ea <_printf_i+0x166>
 80069e8:	b2b6      	uxth	r6, r6
 80069ea:	6019      	str	r1, [r3, #0]
 80069ec:	07d3      	lsls	r3, r2, #31
 80069ee:	d502      	bpl.n	80069f6 <_printf_i+0x172>
 80069f0:	2320      	movs	r3, #32
 80069f2:	4313      	orrs	r3, r2
 80069f4:	6023      	str	r3, [r4, #0]
 80069f6:	2e00      	cmp	r6, #0
 80069f8:	d001      	beq.n	80069fe <_printf_i+0x17a>
 80069fa:	2710      	movs	r7, #16
 80069fc:	e7a8      	b.n	8006950 <_printf_i+0xcc>
 80069fe:	2220      	movs	r2, #32
 8006a00:	6823      	ldr	r3, [r4, #0]
 8006a02:	4393      	bics	r3, r2
 8006a04:	6023      	str	r3, [r4, #0]
 8006a06:	e7f8      	b.n	80069fa <_printf_i+0x176>
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	680d      	ldr	r5, [r1, #0]
 8006a0c:	1d10      	adds	r0, r2, #4
 8006a0e:	6949      	ldr	r1, [r1, #20]
 8006a10:	6018      	str	r0, [r3, #0]
 8006a12:	6813      	ldr	r3, [r2, #0]
 8006a14:	062e      	lsls	r6, r5, #24
 8006a16:	d501      	bpl.n	8006a1c <_printf_i+0x198>
 8006a18:	6019      	str	r1, [r3, #0]
 8006a1a:	e002      	b.n	8006a22 <_printf_i+0x19e>
 8006a1c:	066d      	lsls	r5, r5, #25
 8006a1e:	d5fb      	bpl.n	8006a18 <_printf_i+0x194>
 8006a20:	8019      	strh	r1, [r3, #0]
 8006a22:	2300      	movs	r3, #0
 8006a24:	9d03      	ldr	r5, [sp, #12]
 8006a26:	6123      	str	r3, [r4, #16]
 8006a28:	e7bf      	b.n	80069aa <_printf_i+0x126>
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	1d11      	adds	r1, r2, #4
 8006a2e:	6019      	str	r1, [r3, #0]
 8006a30:	6815      	ldr	r5, [r2, #0]
 8006a32:	2100      	movs	r1, #0
 8006a34:	0028      	movs	r0, r5
 8006a36:	6862      	ldr	r2, [r4, #4]
 8006a38:	f000 f986 	bl	8006d48 <memchr>
 8006a3c:	2800      	cmp	r0, #0
 8006a3e:	d001      	beq.n	8006a44 <_printf_i+0x1c0>
 8006a40:	1b40      	subs	r0, r0, r5
 8006a42:	6060      	str	r0, [r4, #4]
 8006a44:	6863      	ldr	r3, [r4, #4]
 8006a46:	6123      	str	r3, [r4, #16]
 8006a48:	2300      	movs	r3, #0
 8006a4a:	9a03      	ldr	r2, [sp, #12]
 8006a4c:	7013      	strb	r3, [r2, #0]
 8006a4e:	e7ac      	b.n	80069aa <_printf_i+0x126>
 8006a50:	002a      	movs	r2, r5
 8006a52:	6923      	ldr	r3, [r4, #16]
 8006a54:	9906      	ldr	r1, [sp, #24]
 8006a56:	9805      	ldr	r0, [sp, #20]
 8006a58:	9d07      	ldr	r5, [sp, #28]
 8006a5a:	47a8      	blx	r5
 8006a5c:	3001      	adds	r0, #1
 8006a5e:	d0ae      	beq.n	80069be <_printf_i+0x13a>
 8006a60:	6823      	ldr	r3, [r4, #0]
 8006a62:	079b      	lsls	r3, r3, #30
 8006a64:	d415      	bmi.n	8006a92 <_printf_i+0x20e>
 8006a66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a68:	68e0      	ldr	r0, [r4, #12]
 8006a6a:	4298      	cmp	r0, r3
 8006a6c:	daa9      	bge.n	80069c2 <_printf_i+0x13e>
 8006a6e:	0018      	movs	r0, r3
 8006a70:	e7a7      	b.n	80069c2 <_printf_i+0x13e>
 8006a72:	0022      	movs	r2, r4
 8006a74:	2301      	movs	r3, #1
 8006a76:	9906      	ldr	r1, [sp, #24]
 8006a78:	9805      	ldr	r0, [sp, #20]
 8006a7a:	9e07      	ldr	r6, [sp, #28]
 8006a7c:	3219      	adds	r2, #25
 8006a7e:	47b0      	blx	r6
 8006a80:	3001      	adds	r0, #1
 8006a82:	d09c      	beq.n	80069be <_printf_i+0x13a>
 8006a84:	3501      	adds	r5, #1
 8006a86:	68e3      	ldr	r3, [r4, #12]
 8006a88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a8a:	1a9b      	subs	r3, r3, r2
 8006a8c:	42ab      	cmp	r3, r5
 8006a8e:	dcf0      	bgt.n	8006a72 <_printf_i+0x1ee>
 8006a90:	e7e9      	b.n	8006a66 <_printf_i+0x1e2>
 8006a92:	2500      	movs	r5, #0
 8006a94:	e7f7      	b.n	8006a86 <_printf_i+0x202>
 8006a96:	46c0      	nop			@ (mov r8, r8)
 8006a98:	08006e99 	.word	0x08006e99
 8006a9c:	08006eaa 	.word	0x08006eaa

08006aa0 <__sflush_r>:
 8006aa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006aa2:	220c      	movs	r2, #12
 8006aa4:	5e8b      	ldrsh	r3, [r1, r2]
 8006aa6:	0005      	movs	r5, r0
 8006aa8:	000c      	movs	r4, r1
 8006aaa:	071a      	lsls	r2, r3, #28
 8006aac:	d456      	bmi.n	8006b5c <__sflush_r+0xbc>
 8006aae:	684a      	ldr	r2, [r1, #4]
 8006ab0:	2a00      	cmp	r2, #0
 8006ab2:	dc02      	bgt.n	8006aba <__sflush_r+0x1a>
 8006ab4:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8006ab6:	2a00      	cmp	r2, #0
 8006ab8:	dd4e      	ble.n	8006b58 <__sflush_r+0xb8>
 8006aba:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8006abc:	2f00      	cmp	r7, #0
 8006abe:	d04b      	beq.n	8006b58 <__sflush_r+0xb8>
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	2080      	movs	r0, #128	@ 0x80
 8006ac4:	682e      	ldr	r6, [r5, #0]
 8006ac6:	602a      	str	r2, [r5, #0]
 8006ac8:	001a      	movs	r2, r3
 8006aca:	0140      	lsls	r0, r0, #5
 8006acc:	6a21      	ldr	r1, [r4, #32]
 8006ace:	4002      	ands	r2, r0
 8006ad0:	4203      	tst	r3, r0
 8006ad2:	d033      	beq.n	8006b3c <__sflush_r+0x9c>
 8006ad4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006ad6:	89a3      	ldrh	r3, [r4, #12]
 8006ad8:	075b      	lsls	r3, r3, #29
 8006ada:	d506      	bpl.n	8006aea <__sflush_r+0x4a>
 8006adc:	6863      	ldr	r3, [r4, #4]
 8006ade:	1ad2      	subs	r2, r2, r3
 8006ae0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d001      	beq.n	8006aea <__sflush_r+0x4a>
 8006ae6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006ae8:	1ad2      	subs	r2, r2, r3
 8006aea:	2300      	movs	r3, #0
 8006aec:	0028      	movs	r0, r5
 8006aee:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8006af0:	6a21      	ldr	r1, [r4, #32]
 8006af2:	47b8      	blx	r7
 8006af4:	89a2      	ldrh	r2, [r4, #12]
 8006af6:	1c43      	adds	r3, r0, #1
 8006af8:	d106      	bne.n	8006b08 <__sflush_r+0x68>
 8006afa:	6829      	ldr	r1, [r5, #0]
 8006afc:	291d      	cmp	r1, #29
 8006afe:	d846      	bhi.n	8006b8e <__sflush_r+0xee>
 8006b00:	4b29      	ldr	r3, [pc, #164]	@ (8006ba8 <__sflush_r+0x108>)
 8006b02:	410b      	asrs	r3, r1
 8006b04:	07db      	lsls	r3, r3, #31
 8006b06:	d442      	bmi.n	8006b8e <__sflush_r+0xee>
 8006b08:	2300      	movs	r3, #0
 8006b0a:	6063      	str	r3, [r4, #4]
 8006b0c:	6923      	ldr	r3, [r4, #16]
 8006b0e:	6023      	str	r3, [r4, #0]
 8006b10:	04d2      	lsls	r2, r2, #19
 8006b12:	d505      	bpl.n	8006b20 <__sflush_r+0x80>
 8006b14:	1c43      	adds	r3, r0, #1
 8006b16:	d102      	bne.n	8006b1e <__sflush_r+0x7e>
 8006b18:	682b      	ldr	r3, [r5, #0]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d100      	bne.n	8006b20 <__sflush_r+0x80>
 8006b1e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006b20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006b22:	602e      	str	r6, [r5, #0]
 8006b24:	2900      	cmp	r1, #0
 8006b26:	d017      	beq.n	8006b58 <__sflush_r+0xb8>
 8006b28:	0023      	movs	r3, r4
 8006b2a:	3344      	adds	r3, #68	@ 0x44
 8006b2c:	4299      	cmp	r1, r3
 8006b2e:	d002      	beq.n	8006b36 <__sflush_r+0x96>
 8006b30:	0028      	movs	r0, r5
 8006b32:	f7ff fbf7 	bl	8006324 <_free_r>
 8006b36:	2300      	movs	r3, #0
 8006b38:	6363      	str	r3, [r4, #52]	@ 0x34
 8006b3a:	e00d      	b.n	8006b58 <__sflush_r+0xb8>
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	0028      	movs	r0, r5
 8006b40:	47b8      	blx	r7
 8006b42:	0002      	movs	r2, r0
 8006b44:	1c43      	adds	r3, r0, #1
 8006b46:	d1c6      	bne.n	8006ad6 <__sflush_r+0x36>
 8006b48:	682b      	ldr	r3, [r5, #0]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d0c3      	beq.n	8006ad6 <__sflush_r+0x36>
 8006b4e:	2b1d      	cmp	r3, #29
 8006b50:	d001      	beq.n	8006b56 <__sflush_r+0xb6>
 8006b52:	2b16      	cmp	r3, #22
 8006b54:	d11a      	bne.n	8006b8c <__sflush_r+0xec>
 8006b56:	602e      	str	r6, [r5, #0]
 8006b58:	2000      	movs	r0, #0
 8006b5a:	e01e      	b.n	8006b9a <__sflush_r+0xfa>
 8006b5c:	690e      	ldr	r6, [r1, #16]
 8006b5e:	2e00      	cmp	r6, #0
 8006b60:	d0fa      	beq.n	8006b58 <__sflush_r+0xb8>
 8006b62:	680f      	ldr	r7, [r1, #0]
 8006b64:	600e      	str	r6, [r1, #0]
 8006b66:	1bba      	subs	r2, r7, r6
 8006b68:	9201      	str	r2, [sp, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	079b      	lsls	r3, r3, #30
 8006b6e:	d100      	bne.n	8006b72 <__sflush_r+0xd2>
 8006b70:	694a      	ldr	r2, [r1, #20]
 8006b72:	60a2      	str	r2, [r4, #8]
 8006b74:	9b01      	ldr	r3, [sp, #4]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	ddee      	ble.n	8006b58 <__sflush_r+0xb8>
 8006b7a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006b7c:	0032      	movs	r2, r6
 8006b7e:	001f      	movs	r7, r3
 8006b80:	0028      	movs	r0, r5
 8006b82:	9b01      	ldr	r3, [sp, #4]
 8006b84:	6a21      	ldr	r1, [r4, #32]
 8006b86:	47b8      	blx	r7
 8006b88:	2800      	cmp	r0, #0
 8006b8a:	dc07      	bgt.n	8006b9c <__sflush_r+0xfc>
 8006b8c:	89a2      	ldrh	r2, [r4, #12]
 8006b8e:	2340      	movs	r3, #64	@ 0x40
 8006b90:	2001      	movs	r0, #1
 8006b92:	4313      	orrs	r3, r2
 8006b94:	b21b      	sxth	r3, r3
 8006b96:	81a3      	strh	r3, [r4, #12]
 8006b98:	4240      	negs	r0, r0
 8006b9a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006b9c:	9b01      	ldr	r3, [sp, #4]
 8006b9e:	1836      	adds	r6, r6, r0
 8006ba0:	1a1b      	subs	r3, r3, r0
 8006ba2:	9301      	str	r3, [sp, #4]
 8006ba4:	e7e6      	b.n	8006b74 <__sflush_r+0xd4>
 8006ba6:	46c0      	nop			@ (mov r8, r8)
 8006ba8:	dfbffffe 	.word	0xdfbffffe

08006bac <_fflush_r>:
 8006bac:	690b      	ldr	r3, [r1, #16]
 8006bae:	b570      	push	{r4, r5, r6, lr}
 8006bb0:	0005      	movs	r5, r0
 8006bb2:	000c      	movs	r4, r1
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d102      	bne.n	8006bbe <_fflush_r+0x12>
 8006bb8:	2500      	movs	r5, #0
 8006bba:	0028      	movs	r0, r5
 8006bbc:	bd70      	pop	{r4, r5, r6, pc}
 8006bbe:	2800      	cmp	r0, #0
 8006bc0:	d004      	beq.n	8006bcc <_fflush_r+0x20>
 8006bc2:	6a03      	ldr	r3, [r0, #32]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d101      	bne.n	8006bcc <_fflush_r+0x20>
 8006bc8:	f7ff f998 	bl	8005efc <__sinit>
 8006bcc:	220c      	movs	r2, #12
 8006bce:	5ea3      	ldrsh	r3, [r4, r2]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d0f1      	beq.n	8006bb8 <_fflush_r+0xc>
 8006bd4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006bd6:	07d2      	lsls	r2, r2, #31
 8006bd8:	d404      	bmi.n	8006be4 <_fflush_r+0x38>
 8006bda:	059b      	lsls	r3, r3, #22
 8006bdc:	d402      	bmi.n	8006be4 <_fflush_r+0x38>
 8006bde:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006be0:	f7ff fb9d 	bl	800631e <__retarget_lock_acquire_recursive>
 8006be4:	0028      	movs	r0, r5
 8006be6:	0021      	movs	r1, r4
 8006be8:	f7ff ff5a 	bl	8006aa0 <__sflush_r>
 8006bec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006bee:	0005      	movs	r5, r0
 8006bf0:	07db      	lsls	r3, r3, #31
 8006bf2:	d4e2      	bmi.n	8006bba <_fflush_r+0xe>
 8006bf4:	89a3      	ldrh	r3, [r4, #12]
 8006bf6:	059b      	lsls	r3, r3, #22
 8006bf8:	d4df      	bmi.n	8006bba <_fflush_r+0xe>
 8006bfa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006bfc:	f7ff fb90 	bl	8006320 <__retarget_lock_release_recursive>
 8006c00:	e7db      	b.n	8006bba <_fflush_r+0xe>
	...

08006c04 <__swhatbuf_r>:
 8006c04:	b570      	push	{r4, r5, r6, lr}
 8006c06:	000e      	movs	r6, r1
 8006c08:	001d      	movs	r5, r3
 8006c0a:	230e      	movs	r3, #14
 8006c0c:	5ec9      	ldrsh	r1, [r1, r3]
 8006c0e:	0014      	movs	r4, r2
 8006c10:	b096      	sub	sp, #88	@ 0x58
 8006c12:	2900      	cmp	r1, #0
 8006c14:	da0c      	bge.n	8006c30 <__swhatbuf_r+0x2c>
 8006c16:	89b2      	ldrh	r2, [r6, #12]
 8006c18:	2380      	movs	r3, #128	@ 0x80
 8006c1a:	0011      	movs	r1, r2
 8006c1c:	4019      	ands	r1, r3
 8006c1e:	421a      	tst	r2, r3
 8006c20:	d114      	bne.n	8006c4c <__swhatbuf_r+0x48>
 8006c22:	2380      	movs	r3, #128	@ 0x80
 8006c24:	00db      	lsls	r3, r3, #3
 8006c26:	2000      	movs	r0, #0
 8006c28:	6029      	str	r1, [r5, #0]
 8006c2a:	6023      	str	r3, [r4, #0]
 8006c2c:	b016      	add	sp, #88	@ 0x58
 8006c2e:	bd70      	pop	{r4, r5, r6, pc}
 8006c30:	466a      	mov	r2, sp
 8006c32:	f000 f853 	bl	8006cdc <_fstat_r>
 8006c36:	2800      	cmp	r0, #0
 8006c38:	dbed      	blt.n	8006c16 <__swhatbuf_r+0x12>
 8006c3a:	23f0      	movs	r3, #240	@ 0xf0
 8006c3c:	9901      	ldr	r1, [sp, #4]
 8006c3e:	021b      	lsls	r3, r3, #8
 8006c40:	4019      	ands	r1, r3
 8006c42:	4b04      	ldr	r3, [pc, #16]	@ (8006c54 <__swhatbuf_r+0x50>)
 8006c44:	18c9      	adds	r1, r1, r3
 8006c46:	424b      	negs	r3, r1
 8006c48:	4159      	adcs	r1, r3
 8006c4a:	e7ea      	b.n	8006c22 <__swhatbuf_r+0x1e>
 8006c4c:	2100      	movs	r1, #0
 8006c4e:	2340      	movs	r3, #64	@ 0x40
 8006c50:	e7e9      	b.n	8006c26 <__swhatbuf_r+0x22>
 8006c52:	46c0      	nop			@ (mov r8, r8)
 8006c54:	ffffe000 	.word	0xffffe000

08006c58 <__smakebuf_r>:
 8006c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c5a:	2602      	movs	r6, #2
 8006c5c:	898b      	ldrh	r3, [r1, #12]
 8006c5e:	0005      	movs	r5, r0
 8006c60:	000c      	movs	r4, r1
 8006c62:	b085      	sub	sp, #20
 8006c64:	4233      	tst	r3, r6
 8006c66:	d007      	beq.n	8006c78 <__smakebuf_r+0x20>
 8006c68:	0023      	movs	r3, r4
 8006c6a:	3347      	adds	r3, #71	@ 0x47
 8006c6c:	6023      	str	r3, [r4, #0]
 8006c6e:	6123      	str	r3, [r4, #16]
 8006c70:	2301      	movs	r3, #1
 8006c72:	6163      	str	r3, [r4, #20]
 8006c74:	b005      	add	sp, #20
 8006c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c78:	ab03      	add	r3, sp, #12
 8006c7a:	aa02      	add	r2, sp, #8
 8006c7c:	f7ff ffc2 	bl	8006c04 <__swhatbuf_r>
 8006c80:	9f02      	ldr	r7, [sp, #8]
 8006c82:	9001      	str	r0, [sp, #4]
 8006c84:	0039      	movs	r1, r7
 8006c86:	0028      	movs	r0, r5
 8006c88:	f7ff fbb8 	bl	80063fc <_malloc_r>
 8006c8c:	2800      	cmp	r0, #0
 8006c8e:	d108      	bne.n	8006ca2 <__smakebuf_r+0x4a>
 8006c90:	220c      	movs	r2, #12
 8006c92:	5ea3      	ldrsh	r3, [r4, r2]
 8006c94:	059a      	lsls	r2, r3, #22
 8006c96:	d4ed      	bmi.n	8006c74 <__smakebuf_r+0x1c>
 8006c98:	2203      	movs	r2, #3
 8006c9a:	4393      	bics	r3, r2
 8006c9c:	431e      	orrs	r6, r3
 8006c9e:	81a6      	strh	r6, [r4, #12]
 8006ca0:	e7e2      	b.n	8006c68 <__smakebuf_r+0x10>
 8006ca2:	2380      	movs	r3, #128	@ 0x80
 8006ca4:	89a2      	ldrh	r2, [r4, #12]
 8006ca6:	6020      	str	r0, [r4, #0]
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	81a3      	strh	r3, [r4, #12]
 8006cac:	9b03      	ldr	r3, [sp, #12]
 8006cae:	6120      	str	r0, [r4, #16]
 8006cb0:	6167      	str	r7, [r4, #20]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d00c      	beq.n	8006cd0 <__smakebuf_r+0x78>
 8006cb6:	0028      	movs	r0, r5
 8006cb8:	230e      	movs	r3, #14
 8006cba:	5ee1      	ldrsh	r1, [r4, r3]
 8006cbc:	f000 f820 	bl	8006d00 <_isatty_r>
 8006cc0:	2800      	cmp	r0, #0
 8006cc2:	d005      	beq.n	8006cd0 <__smakebuf_r+0x78>
 8006cc4:	2303      	movs	r3, #3
 8006cc6:	89a2      	ldrh	r2, [r4, #12]
 8006cc8:	439a      	bics	r2, r3
 8006cca:	3b02      	subs	r3, #2
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	81a3      	strh	r3, [r4, #12]
 8006cd0:	89a3      	ldrh	r3, [r4, #12]
 8006cd2:	9a01      	ldr	r2, [sp, #4]
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	81a3      	strh	r3, [r4, #12]
 8006cd8:	e7cc      	b.n	8006c74 <__smakebuf_r+0x1c>
	...

08006cdc <_fstat_r>:
 8006cdc:	2300      	movs	r3, #0
 8006cde:	b570      	push	{r4, r5, r6, lr}
 8006ce0:	4d06      	ldr	r5, [pc, #24]	@ (8006cfc <_fstat_r+0x20>)
 8006ce2:	0004      	movs	r4, r0
 8006ce4:	0008      	movs	r0, r1
 8006ce6:	0011      	movs	r1, r2
 8006ce8:	602b      	str	r3, [r5, #0]
 8006cea:	f7fa fef8 	bl	8001ade <_fstat>
 8006cee:	1c43      	adds	r3, r0, #1
 8006cf0:	d103      	bne.n	8006cfa <_fstat_r+0x1e>
 8006cf2:	682b      	ldr	r3, [r5, #0]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d000      	beq.n	8006cfa <_fstat_r+0x1e>
 8006cf8:	6023      	str	r3, [r4, #0]
 8006cfa:	bd70      	pop	{r4, r5, r6, pc}
 8006cfc:	2000044c 	.word	0x2000044c

08006d00 <_isatty_r>:
 8006d00:	2300      	movs	r3, #0
 8006d02:	b570      	push	{r4, r5, r6, lr}
 8006d04:	4d06      	ldr	r5, [pc, #24]	@ (8006d20 <_isatty_r+0x20>)
 8006d06:	0004      	movs	r4, r0
 8006d08:	0008      	movs	r0, r1
 8006d0a:	602b      	str	r3, [r5, #0]
 8006d0c:	f7fa fef5 	bl	8001afa <_isatty>
 8006d10:	1c43      	adds	r3, r0, #1
 8006d12:	d103      	bne.n	8006d1c <_isatty_r+0x1c>
 8006d14:	682b      	ldr	r3, [r5, #0]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d000      	beq.n	8006d1c <_isatty_r+0x1c>
 8006d1a:	6023      	str	r3, [r4, #0]
 8006d1c:	bd70      	pop	{r4, r5, r6, pc}
 8006d1e:	46c0      	nop			@ (mov r8, r8)
 8006d20:	2000044c 	.word	0x2000044c

08006d24 <_sbrk_r>:
 8006d24:	2300      	movs	r3, #0
 8006d26:	b570      	push	{r4, r5, r6, lr}
 8006d28:	4d06      	ldr	r5, [pc, #24]	@ (8006d44 <_sbrk_r+0x20>)
 8006d2a:	0004      	movs	r4, r0
 8006d2c:	0008      	movs	r0, r1
 8006d2e:	602b      	str	r3, [r5, #0]
 8006d30:	f7fa fef8 	bl	8001b24 <_sbrk>
 8006d34:	1c43      	adds	r3, r0, #1
 8006d36:	d103      	bne.n	8006d40 <_sbrk_r+0x1c>
 8006d38:	682b      	ldr	r3, [r5, #0]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d000      	beq.n	8006d40 <_sbrk_r+0x1c>
 8006d3e:	6023      	str	r3, [r4, #0]
 8006d40:	bd70      	pop	{r4, r5, r6, pc}
 8006d42:	46c0      	nop			@ (mov r8, r8)
 8006d44:	2000044c 	.word	0x2000044c

08006d48 <memchr>:
 8006d48:	b2c9      	uxtb	r1, r1
 8006d4a:	1882      	adds	r2, r0, r2
 8006d4c:	4290      	cmp	r0, r2
 8006d4e:	d101      	bne.n	8006d54 <memchr+0xc>
 8006d50:	2000      	movs	r0, #0
 8006d52:	4770      	bx	lr
 8006d54:	7803      	ldrb	r3, [r0, #0]
 8006d56:	428b      	cmp	r3, r1
 8006d58:	d0fb      	beq.n	8006d52 <memchr+0xa>
 8006d5a:	3001      	adds	r0, #1
 8006d5c:	e7f6      	b.n	8006d4c <memchr+0x4>
	...

08006d60 <_init>:
 8006d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d62:	46c0      	nop			@ (mov r8, r8)
 8006d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d66:	bc08      	pop	{r3}
 8006d68:	469e      	mov	lr, r3
 8006d6a:	4770      	bx	lr

08006d6c <_fini>:
 8006d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d6e:	46c0      	nop			@ (mov r8, r8)
 8006d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d72:	bc08      	pop	{r3}
 8006d74:	469e      	mov	lr, r3
 8006d76:	4770      	bx	lr
