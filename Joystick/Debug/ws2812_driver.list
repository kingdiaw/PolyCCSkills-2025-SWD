
ws2812_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059f8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08005ab8  08005ab8  00006ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bf0  08005bf0  00007070  2**0
                  CONTENTS
  4 .ARM          00000008  08005bf0  08005bf0  00006bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bf8  08005bf8  00007070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bf8  08005bf8  00006bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005bfc  08005bfc  00006bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08005c00  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000328  20000070  08005c70  00007070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000398  08005c70  00007398  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001062e  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000266c  00000000  00000000  000176c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd0  00000000  00000000  00019d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c57  00000000  00000000  0001ad08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015c45  00000000  00000000  0001b95f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013a95  00000000  00000000  000315a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000822f4  00000000  00000000  00045039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c732d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040ac  00000000  00000000  000c7370  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000cb41c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005aa0 	.word	0x08005aa0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08005aa0 	.word	0x08005aa0

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	@ (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	@ (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			@ (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f834 	bl	80002d0 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			@ (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4699      	mov	r9, r3
 800027a:	0c03      	lsrs	r3, r0, #16
 800027c:	469c      	mov	ip, r3
 800027e:	0413      	lsls	r3, r2, #16
 8000280:	4647      	mov	r7, r8
 8000282:	0c1b      	lsrs	r3, r3, #16
 8000284:	001d      	movs	r5, r3
 8000286:	000e      	movs	r6, r1
 8000288:	4661      	mov	r1, ip
 800028a:	0404      	lsls	r4, r0, #16
 800028c:	0c24      	lsrs	r4, r4, #16
 800028e:	b580      	push	{r7, lr}
 8000290:	0007      	movs	r7, r0
 8000292:	0c10      	lsrs	r0, r2, #16
 8000294:	434b      	muls	r3, r1
 8000296:	4365      	muls	r5, r4
 8000298:	4341      	muls	r1, r0
 800029a:	4360      	muls	r0, r4
 800029c:	0c2c      	lsrs	r4, r5, #16
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	1824      	adds	r4, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	42a3      	cmp	r3, r4
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	@ 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4356      	muls	r6, r2
 80002b6:	0c23      	lsrs	r3, r4, #16
 80002b8:	042d      	lsls	r5, r5, #16
 80002ba:	0c2d      	lsrs	r5, r5, #16
 80002bc:	1989      	adds	r1, r1, r6
 80002be:	4463      	add	r3, ip
 80002c0:	0424      	lsls	r4, r4, #16
 80002c2:	1960      	adds	r0, r4, r5
 80002c4:	18c9      	adds	r1, r1, r3
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			@ (mov r8, r8)

080002d0 <__udivmoddi4>:
 80002d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d2:	4657      	mov	r7, sl
 80002d4:	464e      	mov	r6, r9
 80002d6:	4645      	mov	r5, r8
 80002d8:	46de      	mov	lr, fp
 80002da:	b5e0      	push	{r5, r6, r7, lr}
 80002dc:	0004      	movs	r4, r0
 80002de:	000d      	movs	r5, r1
 80002e0:	4692      	mov	sl, r2
 80002e2:	4699      	mov	r9, r3
 80002e4:	b083      	sub	sp, #12
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d830      	bhi.n	800034c <__udivmoddi4+0x7c>
 80002ea:	d02d      	beq.n	8000348 <__udivmoddi4+0x78>
 80002ec:	4649      	mov	r1, r9
 80002ee:	4650      	mov	r0, sl
 80002f0:	f000 f8ba 	bl	8000468 <__clzdi2>
 80002f4:	0029      	movs	r1, r5
 80002f6:	0006      	movs	r6, r0
 80002f8:	0020      	movs	r0, r4
 80002fa:	f000 f8b5 	bl	8000468 <__clzdi2>
 80002fe:	1a33      	subs	r3, r6, r0
 8000300:	4698      	mov	r8, r3
 8000302:	3b20      	subs	r3, #32
 8000304:	d434      	bmi.n	8000370 <__udivmoddi4+0xa0>
 8000306:	469b      	mov	fp, r3
 8000308:	4653      	mov	r3, sl
 800030a:	465a      	mov	r2, fp
 800030c:	4093      	lsls	r3, r2
 800030e:	4642      	mov	r2, r8
 8000310:	001f      	movs	r7, r3
 8000312:	4653      	mov	r3, sl
 8000314:	4093      	lsls	r3, r2
 8000316:	001e      	movs	r6, r3
 8000318:	42af      	cmp	r7, r5
 800031a:	d83b      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800031c:	42af      	cmp	r7, r5
 800031e:	d100      	bne.n	8000322 <__udivmoddi4+0x52>
 8000320:	e079      	b.n	8000416 <__udivmoddi4+0x146>
 8000322:	465b      	mov	r3, fp
 8000324:	1ba4      	subs	r4, r4, r6
 8000326:	41bd      	sbcs	r5, r7
 8000328:	2b00      	cmp	r3, #0
 800032a:	da00      	bge.n	800032e <__udivmoddi4+0x5e>
 800032c:	e076      	b.n	800041c <__udivmoddi4+0x14c>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	2301      	movs	r3, #1
 8000338:	465a      	mov	r2, fp
 800033a:	4093      	lsls	r3, r2
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2301      	movs	r3, #1
 8000340:	4642      	mov	r2, r8
 8000342:	4093      	lsls	r3, r2
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	e029      	b.n	800039c <__udivmoddi4+0xcc>
 8000348:	4282      	cmp	r2, r0
 800034a:	d9cf      	bls.n	80002ec <__udivmoddi4+0x1c>
 800034c:	2200      	movs	r2, #0
 800034e:	2300      	movs	r3, #0
 8000350:	9200      	str	r2, [sp, #0]
 8000352:	9301      	str	r3, [sp, #4]
 8000354:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <__udivmoddi4+0x8e>
 800035a:	601c      	str	r4, [r3, #0]
 800035c:	605d      	str	r5, [r3, #4]
 800035e:	9800      	ldr	r0, [sp, #0]
 8000360:	9901      	ldr	r1, [sp, #4]
 8000362:	b003      	add	sp, #12
 8000364:	bcf0      	pop	{r4, r5, r6, r7}
 8000366:	46bb      	mov	fp, r7
 8000368:	46b2      	mov	sl, r6
 800036a:	46a9      	mov	r9, r5
 800036c:	46a0      	mov	r8, r4
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000370:	4642      	mov	r2, r8
 8000372:	469b      	mov	fp, r3
 8000374:	2320      	movs	r3, #32
 8000376:	1a9b      	subs	r3, r3, r2
 8000378:	4652      	mov	r2, sl
 800037a:	40da      	lsrs	r2, r3
 800037c:	4641      	mov	r1, r8
 800037e:	0013      	movs	r3, r2
 8000380:	464a      	mov	r2, r9
 8000382:	408a      	lsls	r2, r1
 8000384:	0017      	movs	r7, r2
 8000386:	4642      	mov	r2, r8
 8000388:	431f      	orrs	r7, r3
 800038a:	4653      	mov	r3, sl
 800038c:	4093      	lsls	r3, r2
 800038e:	001e      	movs	r6, r3
 8000390:	42af      	cmp	r7, r5
 8000392:	d9c3      	bls.n	800031c <__udivmoddi4+0x4c>
 8000394:	2200      	movs	r2, #0
 8000396:	2300      	movs	r3, #0
 8000398:	9200      	str	r2, [sp, #0]
 800039a:	9301      	str	r3, [sp, #4]
 800039c:	4643      	mov	r3, r8
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d0d8      	beq.n	8000354 <__udivmoddi4+0x84>
 80003a2:	07fb      	lsls	r3, r7, #31
 80003a4:	0872      	lsrs	r2, r6, #1
 80003a6:	431a      	orrs	r2, r3
 80003a8:	4646      	mov	r6, r8
 80003aa:	087b      	lsrs	r3, r7, #1
 80003ac:	e00e      	b.n	80003cc <__udivmoddi4+0xfc>
 80003ae:	42ab      	cmp	r3, r5
 80003b0:	d101      	bne.n	80003b6 <__udivmoddi4+0xe6>
 80003b2:	42a2      	cmp	r2, r4
 80003b4:	d80c      	bhi.n	80003d0 <__udivmoddi4+0x100>
 80003b6:	1aa4      	subs	r4, r4, r2
 80003b8:	419d      	sbcs	r5, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2100      	movs	r1, #0
 80003c2:	3e01      	subs	r6, #1
 80003c4:	1824      	adds	r4, r4, r0
 80003c6:	414d      	adcs	r5, r1
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d006      	beq.n	80003da <__udivmoddi4+0x10a>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d9ee      	bls.n	80003ae <__udivmoddi4+0xde>
 80003d0:	3e01      	subs	r6, #1
 80003d2:	1924      	adds	r4, r4, r4
 80003d4:	416d      	adcs	r5, r5
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d1f8      	bne.n	80003cc <__udivmoddi4+0xfc>
 80003da:	9800      	ldr	r0, [sp, #0]
 80003dc:	9901      	ldr	r1, [sp, #4]
 80003de:	465b      	mov	r3, fp
 80003e0:	1900      	adds	r0, r0, r4
 80003e2:	4169      	adcs	r1, r5
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db24      	blt.n	8000432 <__udivmoddi4+0x162>
 80003e8:	002b      	movs	r3, r5
 80003ea:	465a      	mov	r2, fp
 80003ec:	4644      	mov	r4, r8
 80003ee:	40d3      	lsrs	r3, r2
 80003f0:	002a      	movs	r2, r5
 80003f2:	40e2      	lsrs	r2, r4
 80003f4:	001c      	movs	r4, r3
 80003f6:	465b      	mov	r3, fp
 80003f8:	0015      	movs	r5, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	db2a      	blt.n	8000454 <__udivmoddi4+0x184>
 80003fe:	0026      	movs	r6, r4
 8000400:	409e      	lsls	r6, r3
 8000402:	0033      	movs	r3, r6
 8000404:	0026      	movs	r6, r4
 8000406:	4647      	mov	r7, r8
 8000408:	40be      	lsls	r6, r7
 800040a:	0032      	movs	r2, r6
 800040c:	1a80      	subs	r0, r0, r2
 800040e:	4199      	sbcs	r1, r3
 8000410:	9000      	str	r0, [sp, #0]
 8000412:	9101      	str	r1, [sp, #4]
 8000414:	e79e      	b.n	8000354 <__udivmoddi4+0x84>
 8000416:	42a3      	cmp	r3, r4
 8000418:	d8bc      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800041a:	e782      	b.n	8000322 <__udivmoddi4+0x52>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	2100      	movs	r1, #0
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	2200      	movs	r2, #0
 8000426:	9100      	str	r1, [sp, #0]
 8000428:	9201      	str	r2, [sp, #4]
 800042a:	2201      	movs	r2, #1
 800042c:	40da      	lsrs	r2, r3
 800042e:	9201      	str	r2, [sp, #4]
 8000430:	e785      	b.n	800033e <__udivmoddi4+0x6e>
 8000432:	4642      	mov	r2, r8
 8000434:	2320      	movs	r3, #32
 8000436:	1a9b      	subs	r3, r3, r2
 8000438:	002a      	movs	r2, r5
 800043a:	4646      	mov	r6, r8
 800043c:	409a      	lsls	r2, r3
 800043e:	0023      	movs	r3, r4
 8000440:	40f3      	lsrs	r3, r6
 8000442:	4644      	mov	r4, r8
 8000444:	4313      	orrs	r3, r2
 8000446:	002a      	movs	r2, r5
 8000448:	40e2      	lsrs	r2, r4
 800044a:	001c      	movs	r4, r3
 800044c:	465b      	mov	r3, fp
 800044e:	0015      	movs	r5, r2
 8000450:	2b00      	cmp	r3, #0
 8000452:	dad4      	bge.n	80003fe <__udivmoddi4+0x12e>
 8000454:	4642      	mov	r2, r8
 8000456:	002f      	movs	r7, r5
 8000458:	2320      	movs	r3, #32
 800045a:	0026      	movs	r6, r4
 800045c:	4097      	lsls	r7, r2
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	40de      	lsrs	r6, r3
 8000462:	003b      	movs	r3, r7
 8000464:	4333      	orrs	r3, r6
 8000466:	e7cd      	b.n	8000404 <__udivmoddi4+0x134>

08000468 <__clzdi2>:
 8000468:	b510      	push	{r4, lr}
 800046a:	2900      	cmp	r1, #0
 800046c:	d103      	bne.n	8000476 <__clzdi2+0xe>
 800046e:	f000 f807 	bl	8000480 <__clzsi2>
 8000472:	3020      	adds	r0, #32
 8000474:	e002      	b.n	800047c <__clzdi2+0x14>
 8000476:	0008      	movs	r0, r1
 8000478:	f000 f802 	bl	8000480 <__clzsi2>
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__clzsi2>:
 8000480:	211c      	movs	r1, #28
 8000482:	2301      	movs	r3, #1
 8000484:	041b      	lsls	r3, r3, #16
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0xe>
 800048a:	0c00      	lsrs	r0, r0, #16
 800048c:	3910      	subs	r1, #16
 800048e:	0a1b      	lsrs	r3, r3, #8
 8000490:	4298      	cmp	r0, r3
 8000492:	d301      	bcc.n	8000498 <__clzsi2+0x18>
 8000494:	0a00      	lsrs	r0, r0, #8
 8000496:	3908      	subs	r1, #8
 8000498:	091b      	lsrs	r3, r3, #4
 800049a:	4298      	cmp	r0, r3
 800049c:	d301      	bcc.n	80004a2 <__clzsi2+0x22>
 800049e:	0900      	lsrs	r0, r0, #4
 80004a0:	3904      	subs	r1, #4
 80004a2:	a202      	add	r2, pc, #8	@ (adr r2, 80004ac <__clzsi2+0x2c>)
 80004a4:	5c10      	ldrb	r0, [r2, r0]
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	4770      	bx	lr
 80004aa:	46c0      	nop			@ (mov r8, r8)
 80004ac:	02020304 	.word	0x02020304
 80004b0:	01010101 	.word	0x01010101
	...

080004bc <TM1651_Init>:

// Level table for display
static int8_t LevelTab[] = {0x00, 0x40, 0x60, 0x70, 0x78, 0x7C, 0x7E, 0x7F}; // Level 0~7

// Initialize TM1651
void TM1651_Init(TM1651* tm, GPIO_TypeDef* clkPort, uint16_t clkPin, GPIO_TypeDef* dataPort, uint16_t dataPin) {
 80004bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004be:	b08b      	sub	sp, #44	@ 0x2c
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	60f8      	str	r0, [r7, #12]
 80004c4:	60b9      	str	r1, [r7, #8]
 80004c6:	603b      	str	r3, [r7, #0]
 80004c8:	1dbb      	adds	r3, r7, #6
 80004ca:	801a      	strh	r2, [r3, #0]
    tm->ClkPort = clkPort;
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	68ba      	ldr	r2, [r7, #8]
 80004d0:	601a      	str	r2, [r3, #0]
    tm->ClkPin = clkPin;
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	1dba      	adds	r2, r7, #6
 80004d6:	8812      	ldrh	r2, [r2, #0]
 80004d8:	809a      	strh	r2, [r3, #4]
    tm->DataPort = dataPort;
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	683a      	ldr	r2, [r7, #0]
 80004de:	609a      	str	r2, [r3, #8]
    tm->DataPin = dataPin;
 80004e0:	68fa      	ldr	r2, [r7, #12]
 80004e2:	2530      	movs	r5, #48	@ 0x30
 80004e4:	2608      	movs	r6, #8
 80004e6:	19ab      	adds	r3, r5, r6
 80004e8:	2108      	movs	r1, #8
 80004ea:	468c      	mov	ip, r1
 80004ec:	44bc      	add	ip, r7
 80004ee:	4463      	add	r3, ip
 80004f0:	881b      	ldrh	r3, [r3, #0]
 80004f2:	8193      	strh	r3, [r2, #12]

    // Configure CLK and DIO pins as output
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f4:	2414      	movs	r4, #20
 80004f6:	193b      	adds	r3, r7, r4
 80004f8:	0018      	movs	r0, r3
 80004fa:	2314      	movs	r3, #20
 80004fc:	001a      	movs	r2, r3
 80004fe:	2100      	movs	r1, #0
 8000500:	f004 fd2c 	bl	8004f5c <memset>
    GPIO_InitStruct.Pin = clkPin | dataPin;
 8000504:	1dba      	adds	r2, r7, #6
 8000506:	19ab      	adds	r3, r5, r6
 8000508:	2108      	movs	r1, #8
 800050a:	468c      	mov	ip, r1
 800050c:	44bc      	add	ip, r7
 800050e:	4463      	add	r3, ip
 8000510:	8812      	ldrh	r2, [r2, #0]
 8000512:	881b      	ldrh	r3, [r3, #0]
 8000514:	4313      	orrs	r3, r2
 8000516:	b29b      	uxth	r3, r3
 8000518:	001a      	movs	r2, r3
 800051a:	0021      	movs	r1, r4
 800051c:	187b      	adds	r3, r7, r1
 800051e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000520:	187b      	adds	r3, r7, r1
 8000522:	2201      	movs	r2, #1
 8000524:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000526:	187b      	adds	r3, r7, r1
 8000528:	2200      	movs	r2, #0
 800052a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800052c:	187b      	adds	r3, r7, r1
 800052e:	2200      	movs	r2, #0
 8000530:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(clkPort, &GPIO_InitStruct);
 8000532:	187a      	adds	r2, r7, r1
 8000534:	68bb      	ldr	r3, [r7, #8]
 8000536:	0011      	movs	r1, r2
 8000538:	0018      	movs	r0, r3
 800053a:	f001 facf 	bl	8001adc <HAL_GPIO_Init>

    // Set default brightness and clear display
    TM1651_Set(tm, BRIGHT_TYPICAL, ADDR_AUTO, STARTADDR);
 800053e:	68f8      	ldr	r0, [r7, #12]
 8000540:	23c0      	movs	r3, #192	@ 0xc0
 8000542:	2240      	movs	r2, #64	@ 0x40
 8000544:	2102      	movs	r1, #2
 8000546:	f000 f9a3 	bl	8000890 <TM1651_Set>
    TM1651_ClearDisplay(tm);
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	0018      	movs	r0, r3
 800054e:	f000 f98d 	bl	800086c <TM1651_ClearDisplay>
}
 8000552:	46c0      	nop			@ (mov r8, r8)
 8000554:	46bd      	mov	sp, r7
 8000556:	b00b      	add	sp, #44	@ 0x2c
 8000558:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800055a <TM1651_WriteByte>:

// Write a byte to TM1651
void TM1651_WriteByte(TM1651* tm, int8_t wr_data) {
 800055a:	b5b0      	push	{r4, r5, r7, lr}
 800055c:	b088      	sub	sp, #32
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
 8000562:	000a      	movs	r2, r1
 8000564:	1cfb      	adds	r3, r7, #3
 8000566:	701a      	strb	r2, [r3, #0]
    uint8_t data = wr_data;
 8000568:	231f      	movs	r3, #31
 800056a:	18fb      	adds	r3, r7, r3
 800056c:	1cfa      	adds	r2, r7, #3
 800056e:	7812      	ldrb	r2, [r2, #0]
 8000570:	701a      	strb	r2, [r3, #0]

    // 8 Data Bits
    for (uint8_t i = 0; i < 8; i++) {
 8000572:	231e      	movs	r3, #30
 8000574:	18fb      	adds	r3, r7, r3
 8000576:	2200      	movs	r2, #0
 8000578:	701a      	strb	r2, [r3, #0]
 800057a:	e038      	b.n	80005ee <TM1651_WriteByte+0x94>
        // CLK low
        HAL_GPIO_WritePin(tm->ClkPort, tm->ClkPin, GPIO_PIN_RESET);
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	6818      	ldr	r0, [r3, #0]
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	889b      	ldrh	r3, [r3, #4]
 8000584:	2200      	movs	r2, #0
 8000586:	0019      	movs	r1, r3
 8000588:	f001 fc3b 	bl	8001e02 <HAL_GPIO_WritePin>
        TM1651_BitDelay();
 800058c:	f000 f9a2 	bl	80008d4 <TM1651_BitDelay>

        // Set data bit
        if (data & 0x01)
 8000590:	231f      	movs	r3, #31
 8000592:	18fb      	adds	r3, r7, r3
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	2201      	movs	r2, #1
 8000598:	4013      	ands	r3, r2
 800059a:	d008      	beq.n	80005ae <TM1651_WriteByte+0x54>
            HAL_GPIO_WritePin(tm->DataPort, tm->DataPin, GPIO_PIN_SET);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	6898      	ldr	r0, [r3, #8]
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	899b      	ldrh	r3, [r3, #12]
 80005a4:	2201      	movs	r2, #1
 80005a6:	0019      	movs	r1, r3
 80005a8:	f001 fc2b 	bl	8001e02 <HAL_GPIO_WritePin>
 80005ac:	e007      	b.n	80005be <TM1651_WriteByte+0x64>
        else
            HAL_GPIO_WritePin(tm->DataPort, tm->DataPin, GPIO_PIN_RESET);
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	6898      	ldr	r0, [r3, #8]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	899b      	ldrh	r3, [r3, #12]
 80005b6:	2200      	movs	r2, #0
 80005b8:	0019      	movs	r1, r3
 80005ba:	f001 fc22 	bl	8001e02 <HAL_GPIO_WritePin>

        TM1651_BitDelay();
 80005be:	f000 f989 	bl	80008d4 <TM1651_BitDelay>

        // CLK high
        HAL_GPIO_WritePin(tm->ClkPort, tm->ClkPin, GPIO_PIN_SET);
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	6818      	ldr	r0, [r3, #0]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	889b      	ldrh	r3, [r3, #4]
 80005ca:	2201      	movs	r2, #1
 80005cc:	0019      	movs	r1, r3
 80005ce:	f001 fc18 	bl	8001e02 <HAL_GPIO_WritePin>
        TM1651_BitDelay();
 80005d2:	f000 f97f 	bl	80008d4 <TM1651_BitDelay>
        data = data >> 1;
 80005d6:	221f      	movs	r2, #31
 80005d8:	18bb      	adds	r3, r7, r2
 80005da:	18ba      	adds	r2, r7, r2
 80005dc:	7812      	ldrb	r2, [r2, #0]
 80005de:	0852      	lsrs	r2, r2, #1
 80005e0:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 8; i++) {
 80005e2:	211e      	movs	r1, #30
 80005e4:	187b      	adds	r3, r7, r1
 80005e6:	781a      	ldrb	r2, [r3, #0]
 80005e8:	187b      	adds	r3, r7, r1
 80005ea:	3201      	adds	r2, #1
 80005ec:	701a      	strb	r2, [r3, #0]
 80005ee:	231e      	movs	r3, #30
 80005f0:	18fb      	adds	r3, r7, r3
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b07      	cmp	r3, #7
 80005f6:	d9c1      	bls.n	800057c <TM1651_WriteByte+0x22>
    }

    // Wait for acknowledge
    // CLK low
    HAL_GPIO_WritePin(tm->ClkPort, tm->ClkPin, GPIO_PIN_RESET);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	6818      	ldr	r0, [r3, #0]
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	889b      	ldrh	r3, [r3, #4]
 8000600:	2200      	movs	r2, #0
 8000602:	0019      	movs	r1, r3
 8000604:	f001 fbfd 	bl	8001e02 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(tm->DataPort, tm->DataPin, GPIO_PIN_SET); // Release data line
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	6898      	ldr	r0, [r3, #8]
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	899b      	ldrh	r3, [r3, #12]
 8000610:	2201      	movs	r2, #1
 8000612:	0019      	movs	r1, r3
 8000614:	f001 fbf5 	bl	8001e02 <HAL_GPIO_WritePin>
    TM1651_BitDelay();
 8000618:	f000 f95c 	bl	80008d4 <TM1651_BitDelay>

    // CLK high
    HAL_GPIO_WritePin(tm->ClkPort, tm->ClkPin, GPIO_PIN_SET);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	6818      	ldr	r0, [r3, #0]
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	889b      	ldrh	r3, [r3, #4]
 8000624:	2201      	movs	r2, #1
 8000626:	0019      	movs	r1, r3
 8000628:	f001 fbeb 	bl	8001e02 <HAL_GPIO_WritePin>
    TM1651_BitDelay();
 800062c:	f000 f952 	bl	80008d4 <TM1651_BitDelay>

    // Read acknowledge
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000630:	2408      	movs	r4, #8
 8000632:	193b      	adds	r3, r7, r4
 8000634:	0018      	movs	r0, r3
 8000636:	2314      	movs	r3, #20
 8000638:	001a      	movs	r2, r3
 800063a:	2100      	movs	r1, #0
 800063c:	f004 fc8e 	bl	8004f5c <memset>
    GPIO_InitStruct.Pin = tm->DataPin;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	899b      	ldrh	r3, [r3, #12]
 8000644:	001a      	movs	r2, r3
 8000646:	0025      	movs	r5, r4
 8000648:	197b      	adds	r3, r7, r5
 800064a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800064c:	197b      	adds	r3, r7, r5
 800064e:	2200      	movs	r2, #0
 8000650:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000652:	197b      	adds	r3, r7, r5
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(tm->DataPort, &GPIO_InitStruct);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	689b      	ldr	r3, [r3, #8]
 800065c:	197a      	adds	r2, r7, r5
 800065e:	0011      	movs	r1, r2
 8000660:	0018      	movs	r0, r3
 8000662:	f001 fa3b 	bl	8001adc <HAL_GPIO_Init>

    TM1651_BitDelay();
 8000666:	f000 f935 	bl	80008d4 <TM1651_BitDelay>
    uint8_t ack = HAL_GPIO_ReadPin(tm->DataPort, tm->DataPin);
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	689a      	ldr	r2, [r3, #8]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	899b      	ldrh	r3, [r3, #12]
 8000672:	211d      	movs	r1, #29
 8000674:	187c      	adds	r4, r7, r1
 8000676:	0019      	movs	r1, r3
 8000678:	0010      	movs	r0, r2
 800067a:	f001 fba5 	bl	8001dc8 <HAL_GPIO_ReadPin>
 800067e:	0003      	movs	r3, r0
 8000680:	7023      	strb	r3, [r4, #0]

    // Restore data pin to output
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000682:	197b      	adds	r3, r7, r5
 8000684:	2201      	movs	r2, #1
 8000686:	605a      	str	r2, [r3, #4]
    HAL_GPIO_Init(tm->DataPort, &GPIO_InitStruct);
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	689b      	ldr	r3, [r3, #8]
 800068c:	197a      	adds	r2, r7, r5
 800068e:	0011      	movs	r1, r2
 8000690:	0018      	movs	r0, r3
 8000692:	f001 fa23 	bl	8001adc <HAL_GPIO_Init>

    TM1651_BitDelay();
 8000696:	f000 f91d 	bl	80008d4 <TM1651_BitDelay>
    HAL_GPIO_WritePin(tm->ClkPort, tm->ClkPin, GPIO_PIN_RESET);
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	6818      	ldr	r0, [r3, #0]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	889b      	ldrh	r3, [r3, #4]
 80006a2:	2200      	movs	r2, #0
 80006a4:	0019      	movs	r1, r3
 80006a6:	f001 fbac 	bl	8001e02 <HAL_GPIO_WritePin>
    TM1651_BitDelay();
 80006aa:	f000 f913 	bl	80008d4 <TM1651_BitDelay>
}
 80006ae:	46c0      	nop			@ (mov r8, r8)
 80006b0:	46bd      	mov	sp, r7
 80006b2:	b008      	add	sp, #32
 80006b4:	bdb0      	pop	{r4, r5, r7, pc}

080006b6 <TM1651_Start>:

// Send start signal
void TM1651_Start(TM1651* tm) {
 80006b6:	b580      	push	{r7, lr}
 80006b8:	b082      	sub	sp, #8
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(tm->DataPort, tm->DataPin, GPIO_PIN_RESET);
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	6898      	ldr	r0, [r3, #8]
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	899b      	ldrh	r3, [r3, #12]
 80006c6:	2200      	movs	r2, #0
 80006c8:	0019      	movs	r1, r3
 80006ca:	f001 fb9a 	bl	8001e02 <HAL_GPIO_WritePin>
    TM1651_BitDelay();
 80006ce:	f000 f901 	bl	80008d4 <TM1651_BitDelay>
}
 80006d2:	46c0      	nop			@ (mov r8, r8)
 80006d4:	46bd      	mov	sp, r7
 80006d6:	b002      	add	sp, #8
 80006d8:	bd80      	pop	{r7, pc}

080006da <TM1651_Stop>:

// Send stop signal
void TM1651_Stop(TM1651* tm) {
 80006da:	b580      	push	{r7, lr}
 80006dc:	b082      	sub	sp, #8
 80006de:	af00      	add	r7, sp, #0
 80006e0:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(tm->DataPort, tm->DataPin, GPIO_PIN_RESET);
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	6898      	ldr	r0, [r3, #8]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	899b      	ldrh	r3, [r3, #12]
 80006ea:	2200      	movs	r2, #0
 80006ec:	0019      	movs	r1, r3
 80006ee:	f001 fb88 	bl	8001e02 <HAL_GPIO_WritePin>
    TM1651_BitDelay();
 80006f2:	f000 f8ef 	bl	80008d4 <TM1651_BitDelay>
    HAL_GPIO_WritePin(tm->ClkPort, tm->ClkPin, GPIO_PIN_SET);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	6818      	ldr	r0, [r3, #0]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	889b      	ldrh	r3, [r3, #4]
 80006fe:	2201      	movs	r2, #1
 8000700:	0019      	movs	r1, r3
 8000702:	f001 fb7e 	bl	8001e02 <HAL_GPIO_WritePin>
    TM1651_BitDelay();
 8000706:	f000 f8e5 	bl	80008d4 <TM1651_BitDelay>
    HAL_GPIO_WritePin(tm->DataPort, tm->DataPin, GPIO_PIN_SET);
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	6898      	ldr	r0, [r3, #8]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	899b      	ldrh	r3, [r3, #12]
 8000712:	2201      	movs	r2, #1
 8000714:	0019      	movs	r1, r3
 8000716:	f001 fb74 	bl	8001e02 <HAL_GPIO_WritePin>
    TM1651_BitDelay();
 800071a:	f000 f8db 	bl	80008d4 <TM1651_BitDelay>
}
 800071e:	46c0      	nop			@ (mov r8, r8)
 8000720:	46bd      	mov	sp, r7
 8000722:	b002      	add	sp, #8
 8000724:	bd80      	pop	{r7, pc}
	...

08000728 <TM1651_DisplayLevel>:

// Display level (0-7)
void TM1651_DisplayLevel(TM1651* tm, uint8_t level) {
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	000a      	movs	r2, r1
 8000732:	1cfb      	adds	r3, r7, #3
 8000734:	701a      	strb	r2, [r3, #0]
    if (level > 7) return; // Level should be 0~7
 8000736:	1cfb      	adds	r3, r7, #3
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	2b07      	cmp	r3, #7
 800073c:	d835      	bhi.n	80007aa <TM1651_DisplayLevel+0x82>

    TM1651_Start(tm);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	0018      	movs	r0, r3
 8000742:	f7ff ffb8 	bl	80006b6 <TM1651_Start>
    TM1651_WriteByte(tm, ADDR_FIXED);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	2144      	movs	r1, #68	@ 0x44
 800074a:	0018      	movs	r0, r3
 800074c:	f7ff ff05 	bl	800055a <TM1651_WriteByte>
    TM1651_Stop(tm);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	0018      	movs	r0, r3
 8000754:	f7ff ffc1 	bl	80006da <TM1651_Stop>

    TM1651_Start(tm);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	0018      	movs	r0, r3
 800075c:	f7ff ffab 	bl	80006b6 <TM1651_Start>
    TM1651_WriteByte(tm, 0xC0);
 8000760:	2340      	movs	r3, #64	@ 0x40
 8000762:	425a      	negs	r2, r3
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	0011      	movs	r1, r2
 8000768:	0018      	movs	r0, r3
 800076a:	f7ff fef6 	bl	800055a <TM1651_WriteByte>
    TM1651_WriteByte(tm, LevelTab[level]);
 800076e:	1cfb      	adds	r3, r7, #3
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	4a10      	ldr	r2, [pc, #64]	@ (80007b4 <TM1651_DisplayLevel+0x8c>)
 8000774:	56d2      	ldrsb	r2, [r2, r3]
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	0011      	movs	r1, r2
 800077a:	0018      	movs	r0, r3
 800077c:	f7ff feed 	bl	800055a <TM1651_WriteByte>
    TM1651_Stop(tm);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	0018      	movs	r0, r3
 8000784:	f7ff ffa9 	bl	80006da <TM1651_Stop>

    TM1651_Start(tm);
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	0018      	movs	r0, r3
 800078c:	f7ff ff93 	bl	80006b6 <TM1651_Start>
    TM1651_WriteByte(tm, tm->Cmd_DispCtrl);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	7c1b      	ldrb	r3, [r3, #16]
 8000794:	b25a      	sxtb	r2, r3
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	0011      	movs	r1, r2
 800079a:	0018      	movs	r0, r3
 800079c:	f7ff fedd 	bl	800055a <TM1651_WriteByte>
    TM1651_Stop(tm);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	0018      	movs	r0, r3
 80007a4:	f7ff ff99 	bl	80006da <TM1651_Stop>
 80007a8:	e000      	b.n	80007ac <TM1651_DisplayLevel+0x84>
    if (level > 7) return; // Level should be 0~7
 80007aa:	46c0      	nop			@ (mov r8, r8)
}
 80007ac:	46bd      	mov	sp, r7
 80007ae:	b002      	add	sp, #8
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	46c0      	nop			@ (mov r8, r8)
 80007b4:	20000000 	.word	0x20000000

080007b8 <TM1651_Frame>:

// Control frame display
void TM1651_Frame(TM1651* tm, bool frameFlag) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	000a      	movs	r2, r1
 80007c2:	1cfb      	adds	r3, r7, #3
 80007c4:	701a      	strb	r2, [r3, #0]
    int8_t segData = (frameFlag == true) ? 0x40 : 0x00;
 80007c6:	1cfb      	adds	r3, r7, #3
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <TM1651_Frame+0x1a>
 80007ce:	2240      	movs	r2, #64	@ 0x40
 80007d0:	e000      	b.n	80007d4 <TM1651_Frame+0x1c>
 80007d2:	2200      	movs	r2, #0
 80007d4:	230e      	movs	r3, #14
 80007d6:	18fb      	adds	r3, r7, r3
 80007d8:	701a      	strb	r2, [r3, #0]

    TM1651_Start(tm);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	0018      	movs	r0, r3
 80007de:	f7ff ff6a 	bl	80006b6 <TM1651_Start>
    TM1651_WriteByte(tm, ADDR_AUTO);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2140      	movs	r1, #64	@ 0x40
 80007e6:	0018      	movs	r0, r3
 80007e8:	f7ff feb7 	bl	800055a <TM1651_WriteByte>
    TM1651_Stop(tm);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	0018      	movs	r0, r3
 80007f0:	f7ff ff73 	bl	80006da <TM1651_Stop>

    TM1651_Start(tm);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	0018      	movs	r0, r3
 80007f8:	f7ff ff5d 	bl	80006b6 <TM1651_Start>
    TM1651_WriteByte(tm, 0xC1);
 80007fc:	233f      	movs	r3, #63	@ 0x3f
 80007fe:	425a      	negs	r2, r3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	0011      	movs	r1, r2
 8000804:	0018      	movs	r0, r3
 8000806:	f7ff fea8 	bl	800055a <TM1651_WriteByte>
    for (uint8_t i = 0; i < 3; i++) {
 800080a:	230f      	movs	r3, #15
 800080c:	18fb      	adds	r3, r7, r3
 800080e:	2200      	movs	r2, #0
 8000810:	701a      	strb	r2, [r3, #0]
 8000812:	e00e      	b.n	8000832 <TM1651_Frame+0x7a>
        TM1651_WriteByte(tm, segData);
 8000814:	230e      	movs	r3, #14
 8000816:	18fb      	adds	r3, r7, r3
 8000818:	2200      	movs	r2, #0
 800081a:	569a      	ldrsb	r2, [r3, r2]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	0011      	movs	r1, r2
 8000820:	0018      	movs	r0, r3
 8000822:	f7ff fe9a 	bl	800055a <TM1651_WriteByte>
    for (uint8_t i = 0; i < 3; i++) {
 8000826:	210f      	movs	r1, #15
 8000828:	187b      	adds	r3, r7, r1
 800082a:	781a      	ldrb	r2, [r3, #0]
 800082c:	187b      	adds	r3, r7, r1
 800082e:	3201      	adds	r2, #1
 8000830:	701a      	strb	r2, [r3, #0]
 8000832:	230f      	movs	r3, #15
 8000834:	18fb      	adds	r3, r7, r3
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	2b02      	cmp	r3, #2
 800083a:	d9eb      	bls.n	8000814 <TM1651_Frame+0x5c>
    }
    TM1651_Stop(tm);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	0018      	movs	r0, r3
 8000840:	f7ff ff4b 	bl	80006da <TM1651_Stop>

    TM1651_Start(tm);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	0018      	movs	r0, r3
 8000848:	f7ff ff35 	bl	80006b6 <TM1651_Start>
    TM1651_WriteByte(tm, tm->Cmd_DispCtrl);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	7c1b      	ldrb	r3, [r3, #16]
 8000850:	b25a      	sxtb	r2, r3
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	0011      	movs	r1, r2
 8000856:	0018      	movs	r0, r3
 8000858:	f7ff fe7f 	bl	800055a <TM1651_WriteByte>
    TM1651_Stop(tm);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	0018      	movs	r0, r3
 8000860:	f7ff ff3b 	bl	80006da <TM1651_Stop>
}
 8000864:	46c0      	nop			@ (mov r8, r8)
 8000866:	46bd      	mov	sp, r7
 8000868:	b004      	add	sp, #16
 800086a:	bd80      	pop	{r7, pc}

0800086c <TM1651_ClearDisplay>:

// Clear display
void TM1651_ClearDisplay(TM1651* tm) {
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
    TM1651_DisplayLevel(tm, 0);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2100      	movs	r1, #0
 8000878:	0018      	movs	r0, r3
 800087a:	f7ff ff55 	bl	8000728 <TM1651_DisplayLevel>
    TM1651_Frame(tm, FRAME_OFF);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2100      	movs	r1, #0
 8000882:	0018      	movs	r0, r3
 8000884:	f7ff ff98 	bl	80007b8 <TM1651_Frame>
}
 8000888:	46c0      	nop			@ (mov r8, r8)
 800088a:	46bd      	mov	sp, r7
 800088c:	b002      	add	sp, #8
 800088e:	bd80      	pop	{r7, pc}

08000890 <TM1651_Set>:

// Set brightness and display mode
void TM1651_Set(TM1651* tm, uint8_t brightness, uint8_t setData, uint8_t setAddr) {
 8000890:	b590      	push	{r4, r7, lr}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	000c      	movs	r4, r1
 800089a:	0010      	movs	r0, r2
 800089c:	0019      	movs	r1, r3
 800089e:	1cfb      	adds	r3, r7, #3
 80008a0:	1c22      	adds	r2, r4, #0
 80008a2:	701a      	strb	r2, [r3, #0]
 80008a4:	1cbb      	adds	r3, r7, #2
 80008a6:	1c02      	adds	r2, r0, #0
 80008a8:	701a      	strb	r2, [r3, #0]
 80008aa:	1c7b      	adds	r3, r7, #1
 80008ac:	1c0a      	adds	r2, r1, #0
 80008ae:	701a      	strb	r2, [r3, #0]
    tm->Cmd_SetData = setData;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	1cba      	adds	r2, r7, #2
 80008b4:	7812      	ldrb	r2, [r2, #0]
 80008b6:	739a      	strb	r2, [r3, #14]
    tm->Cmd_SetAddr = setAddr;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	1c7a      	adds	r2, r7, #1
 80008bc:	7812      	ldrb	r2, [r2, #0]
 80008be:	73da      	strb	r2, [r3, #15]
    tm->Cmd_DispCtrl = 0x88 + brightness; // Set brightness
 80008c0:	1cfb      	adds	r3, r7, #3
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	3b78      	subs	r3, #120	@ 0x78
 80008c6:	b2da      	uxtb	r2, r3
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	741a      	strb	r2, [r3, #16]
}
 80008cc:	46c0      	nop			@ (mov r8, r8)
 80008ce:	46bd      	mov	sp, r7
 80008d0:	b003      	add	sp, #12
 80008d2:	bd90      	pop	{r4, r7, pc}

080008d4 <TM1651_BitDelay>:

// Bit delay (50us)
void TM1651_BitDelay(void) {
 80008d4:	b590      	push	{r4, r7, lr}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
    DELAY_US(50);
 80008da:	4b12      	ldr	r3, [pc, #72]	@ (8000924 <TM1651_BitDelay+0x50>)
 80008dc:	689b      	ldr	r3, [r3, #8]
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	4b11      	ldr	r3, [pc, #68]	@ (8000928 <TM1651_BitDelay+0x54>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4911      	ldr	r1, [pc, #68]	@ (800092c <TM1651_BitDelay+0x58>)
 80008e6:	0018      	movs	r0, r3
 80008e8:	f7ff fc18 	bl	800011c <__udivsi3>
 80008ec:	0003      	movs	r3, r0
 80008ee:	001a      	movs	r2, r3
 80008f0:	2332      	movs	r3, #50	@ 0x32
 80008f2:	4353      	muls	r3, r2
 80008f4:	001c      	movs	r4, r3
 80008f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000928 <TM1651_BitDelay+0x54>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	490c      	ldr	r1, [pc, #48]	@ (800092c <TM1651_BitDelay+0x58>)
 80008fc:	0018      	movs	r0, r3
 80008fe:	f7ff fc0d 	bl	800011c <__udivsi3>
 8000902:	0003      	movs	r3, r0
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	1ae3      	subs	r3, r4, r3
 8000908:	603b      	str	r3, [r7, #0]
 800090a:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <TM1651_BitDelay+0x50>)
 800090c:	689b      	ldr	r3, [r3, #8]
 800090e:	687a      	ldr	r2, [r7, #4]
 8000910:	1ad3      	subs	r3, r2, r3
 8000912:	683a      	ldr	r2, [r7, #0]
 8000914:	429a      	cmp	r2, r3
 8000916:	d8f8      	bhi.n	800090a <TM1651_BitDelay+0x36>
}
 8000918:	46c0      	nop			@ (mov r8, r8)
 800091a:	46c0      	nop			@ (mov r8, r8)
 800091c:	46bd      	mov	sp, r7
 800091e:	b003      	add	sp, #12
 8000920:	bd90      	pop	{r4, r7, pc}
 8000922:	46c0      	nop			@ (mov r8, r8)
 8000924:	e000e010 	.word	0xe000e010
 8000928:	20000008 	.word	0x20000008
 800092c:	000f4240 	.word	0x000f4240

08000930 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Function to send data over UART (for debugging)
int __io_putchar(int ch) {
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 8000938:	2301      	movs	r3, #1
 800093a:	425b      	negs	r3, r3
 800093c:	1d39      	adds	r1, r7, #4
 800093e:	4804      	ldr	r0, [pc, #16]	@ (8000950 <__io_putchar+0x20>)
 8000940:	2201      	movs	r2, #1
 8000942:	f003 fb9d 	bl	8004080 <HAL_UART_Transmit>
	return ch;
 8000946:	687b      	ldr	r3, [r7, #4]
}
 8000948:	0018      	movs	r0, r3
 800094a:	46bd      	mov	sp, r7
 800094c:	b002      	add	sp, #8
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000168 	.word	0x20000168

08000954 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000954:	b590      	push	{r4, r7, lr}
 8000956:	b085      	sub	sp, #20
 8000958:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800095a:	f000 fe4b 	bl	80015f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800095e:	f000 f917 	bl	8000b90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000962:	f000 fa9d 	bl	8000ea0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000966:	f000 fa7d 	bl	8000e64 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800096a:	f000 fa4b 	bl	8000e04 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800096e:	f000 f983 	bl	8000c78 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000972:	f000 f9c1 	bl	8000cf8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	RotaryEncoder_Init(&encoder, GPIOA, GPIO_PIN_10, GPIOB, GPIO_PIN_3, GPIOB,
 8000976:	4c74      	ldr	r4, [pc, #464]	@ (8000b48 <main+0x1f4>)
 8000978:	2380      	movs	r3, #128	@ 0x80
 800097a:	00da      	lsls	r2, r3, #3
 800097c:	23a0      	movs	r3, #160	@ 0xa0
 800097e:	05d9      	lsls	r1, r3, #23
 8000980:	4872      	ldr	r0, [pc, #456]	@ (8000b4c <main+0x1f8>)
 8000982:	2320      	movs	r3, #32
 8000984:	9302      	str	r3, [sp, #8]
 8000986:	4b70      	ldr	r3, [pc, #448]	@ (8000b48 <main+0x1f4>)
 8000988:	9301      	str	r3, [sp, #4]
 800098a:	2308      	movs	r3, #8
 800098c:	9300      	str	r3, [sp, #0]
 800098e:	0023      	movs	r3, r4
 8000990:	f000 fb7c 	bl	800108c <RotaryEncoder_Init>
	GPIO_PIN_5);
	pos = 0;
 8000994:	4b6e      	ldr	r3, [pc, #440]	@ (8000b50 <main+0x1fc>)
 8000996:	2200      	movs	r2, #0
 8000998:	701a      	strb	r2, [r3, #0]
    // Initialize TM1651 with CLK on PA6 and DIO on PA7
    TM1651_Init(&tm, GPIOA, GPIO_PIN_6, GPIOA, GPIO_PIN_7);
 800099a:	23a0      	movs	r3, #160	@ 0xa0
 800099c:	05db      	lsls	r3, r3, #23
 800099e:	22a0      	movs	r2, #160	@ 0xa0
 80009a0:	05d1      	lsls	r1, r2, #23
 80009a2:	486c      	ldr	r0, [pc, #432]	@ (8000b54 <main+0x200>)
 80009a4:	2280      	movs	r2, #128	@ 0x80
 80009a6:	9200      	str	r2, [sp, #0]
 80009a8:	2240      	movs	r2, #64	@ 0x40
 80009aa:	f7ff fd87 	bl	80004bc <TM1651_Init>

    // Display level 5
    TM1651_DisplayLevel(&tm, 1);
 80009ae:	4b69      	ldr	r3, [pc, #420]	@ (8000b54 <main+0x200>)
 80009b0:	2101      	movs	r1, #1
 80009b2:	0018      	movs	r0, r3
 80009b4:	f7ff feb8 	bl	8000728 <TM1651_DisplayLevel>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (HAL_GetTick() > t0_i2c_scan) {
 80009b8:	f000 fe82 	bl	80016c0 <HAL_GetTick>
 80009bc:	0002      	movs	r2, r0
 80009be:	4b66      	ldr	r3, [pc, #408]	@ (8000b58 <main+0x204>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	429a      	cmp	r2, r3
 80009c4:	d908      	bls.n	80009d8 <main+0x84>
			t0_i2c_scan = HAL_GetTick() + 5000;
 80009c6:	f000 fe7b 	bl	80016c0 <HAL_GetTick>
 80009ca:	0003      	movs	r3, r0
 80009cc:	4a63      	ldr	r2, [pc, #396]	@ (8000b5c <main+0x208>)
 80009ce:	189a      	adds	r2, r3, r2
 80009d0:	4b61      	ldr	r3, [pc, #388]	@ (8000b58 <main+0x204>)
 80009d2:	601a      	str	r2, [r3, #0]
			I2C_Scan();
 80009d4:	f000 fb10 	bl	8000ff8 <I2C_Scan>
		}
		if (HAL_GetTick() > t1_encoder_scan) {
 80009d8:	f000 fe72 	bl	80016c0 <HAL_GetTick>
 80009dc:	0002      	movs	r2, r0
 80009de:	4b60      	ldr	r3, [pc, #384]	@ (8000b60 <main+0x20c>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	429a      	cmp	r2, r3
 80009e4:	d967      	bls.n	8000ab6 <main+0x162>
			t1_encoder_scan = HAL_GetTick() + 50;
 80009e6:	f000 fe6b 	bl	80016c0 <HAL_GetTick>
 80009ea:	0003      	movs	r3, r0
 80009ec:	3332      	adds	r3, #50	@ 0x32
 80009ee:	001a      	movs	r2, r3
 80009f0:	4b5b      	ldr	r3, [pc, #364]	@ (8000b60 <main+0x20c>)
 80009f2:	601a      	str	r2, [r3, #0]
			sw_state_new = RotaryEncoder_ReadSwitch(&encoder);
 80009f4:	4b55      	ldr	r3, [pc, #340]	@ (8000b4c <main+0x1f8>)
 80009f6:	0018      	movs	r0, r3
 80009f8:	f000 fbaf 	bl	800115a <RotaryEncoder_ReadSwitch>
 80009fc:	0003      	movs	r3, r0
 80009fe:	001a      	movs	r2, r3
 8000a00:	4b58      	ldr	r3, [pc, #352]	@ (8000b64 <main+0x210>)
 8000a02:	701a      	strb	r2, [r3, #0]
			if (sw_state_old == GPIO_PIN_RESET
 8000a04:	4b58      	ldr	r3, [pc, #352]	@ (8000b68 <main+0x214>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d107      	bne.n	8000a1c <main+0xc8>
					&& sw_state_new == GPIO_PIN_SET) {
 8000a0c:	4b55      	ldr	r3, [pc, #340]	@ (8000b64 <main+0x210>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d103      	bne.n	8000a1c <main+0xc8>
				printf("Button Pressed!\n");
 8000a14:	4b55      	ldr	r3, [pc, #340]	@ (8000b6c <main+0x218>)
 8000a16:	0018      	movs	r0, r3
 8000a18:	f004 f9aa 	bl	8004d70 <puts>
			}
			sw_state_old = sw_state_new;
 8000a1c:	4b51      	ldr	r3, [pc, #324]	@ (8000b64 <main+0x210>)
 8000a1e:	781a      	ldrb	r2, [r3, #0]
 8000a20:	4b51      	ldr	r3, [pc, #324]	@ (8000b68 <main+0x214>)
 8000a22:	701a      	strb	r2, [r3, #0]

			if (encoder.direction != ROTARY_NONE) {
 8000a24:	4b49      	ldr	r3, [pc, #292]	@ (8000b4c <main+0x1f8>)
 8000a26:	7f1b      	ldrb	r3, [r3, #28]
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d043      	beq.n	8000ab6 <main+0x162>
				printf("Encoder Direction: %s\n",
						encoder.direction == ROTARY_CW ? "CW" : "CCW");
 8000a2e:	4b47      	ldr	r3, [pc, #284]	@ (8000b4c <main+0x1f8>)
 8000a30:	7f1b      	ldrb	r3, [r3, #28]
 8000a32:	b2db      	uxtb	r3, r3
				printf("Encoder Direction: %s\n",
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d101      	bne.n	8000a3c <main+0xe8>
 8000a38:	4b4d      	ldr	r3, [pc, #308]	@ (8000b70 <main+0x21c>)
 8000a3a:	e000      	b.n	8000a3e <main+0xea>
 8000a3c:	4b4d      	ldr	r3, [pc, #308]	@ (8000b74 <main+0x220>)
 8000a3e:	4a4e      	ldr	r2, [pc, #312]	@ (8000b78 <main+0x224>)
 8000a40:	0019      	movs	r1, r3
 8000a42:	0010      	movs	r0, r2
 8000a44:	f004 f92e 	bl	8004ca4 <iprintf>
				if (encoder.direction == ROTARY_CW) {
 8000a48:	4b40      	ldr	r3, [pc, #256]	@ (8000b4c <main+0x1f8>)
 8000a4a:	7f1b      	ldrb	r3, [r3, #28]
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d114      	bne.n	8000a7c <main+0x128>
					if (++pos > 5)
 8000a52:	4b3f      	ldr	r3, [pc, #252]	@ (8000b50 <main+0x1fc>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	b25b      	sxtb	r3, r3
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	b25a      	sxtb	r2, r3
 8000a60:	4b3b      	ldr	r3, [pc, #236]	@ (8000b50 <main+0x1fc>)
 8000a62:	701a      	strb	r2, [r3, #0]
 8000a64:	4b3a      	ldr	r3, [pc, #232]	@ (8000b50 <main+0x1fc>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	b25b      	sxtb	r3, r3
 8000a6a:	2b05      	cmp	r3, #5
 8000a6c:	dd02      	ble.n	8000a74 <main+0x120>
						pos = 5;
 8000a6e:	4b38      	ldr	r3, [pc, #224]	@ (8000b50 <main+0x1fc>)
 8000a70:	2205      	movs	r2, #5
 8000a72:	701a      	strb	r2, [r3, #0]
					encoder.direction = ROTARY_NONE;
 8000a74:	4b35      	ldr	r3, [pc, #212]	@ (8000b4c <main+0x1f8>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	771a      	strb	r2, [r3, #28]
 8000a7a:	e013      	b.n	8000aa4 <main+0x150>
				} else {
					if (--pos < 0)
 8000a7c:	4b34      	ldr	r3, [pc, #208]	@ (8000b50 <main+0x1fc>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	b25b      	sxtb	r3, r3
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	3b01      	subs	r3, #1
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	b25a      	sxtb	r2, r3
 8000a8a:	4b31      	ldr	r3, [pc, #196]	@ (8000b50 <main+0x1fc>)
 8000a8c:	701a      	strb	r2, [r3, #0]
 8000a8e:	4b30      	ldr	r3, [pc, #192]	@ (8000b50 <main+0x1fc>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	b25b      	sxtb	r3, r3
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	da02      	bge.n	8000a9e <main+0x14a>
						pos = 0;
 8000a98:	4b2d      	ldr	r3, [pc, #180]	@ (8000b50 <main+0x1fc>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	701a      	strb	r2, [r3, #0]
					encoder.direction = ROTARY_NONE;
 8000a9e:	4b2b      	ldr	r3, [pc, #172]	@ (8000b4c <main+0x1f8>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	771a      	strb	r2, [r3, #28]
				}
				printf("Encoder Pos: %d\n", pos);
 8000aa4:	4b2a      	ldr	r3, [pc, #168]	@ (8000b50 <main+0x1fc>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	b25b      	sxtb	r3, r3
 8000aaa:	001a      	movs	r2, r3
 8000aac:	4b33      	ldr	r3, [pc, #204]	@ (8000b7c <main+0x228>)
 8000aae:	0011      	movs	r1, r2
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	f004 f8f7 	bl	8004ca4 <iprintf>
			}
		}
		if(HAL_GetTick()>t2_led_push){
 8000ab6:	f000 fe03 	bl	80016c0 <HAL_GetTick>
 8000aba:	0002      	movs	r2, r0
 8000abc:	4b30      	ldr	r3, [pc, #192]	@ (8000b80 <main+0x22c>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d907      	bls.n	8000ad4 <main+0x180>
			t2_led_push = HAL_GetTick()+1000;
 8000ac4:	f000 fdfc 	bl	80016c0 <HAL_GetTick>
 8000ac8:	0003      	movs	r3, r0
 8000aca:	22fa      	movs	r2, #250	@ 0xfa
 8000acc:	0092      	lsls	r2, r2, #2
 8000ace:	189a      	adds	r2, r3, r2
 8000ad0:	4b2b      	ldr	r3, [pc, #172]	@ (8000b80 <main+0x22c>)
 8000ad2:	601a      	str	r2, [r3, #0]
			//Set_LED(0, 255, 0, 0);
			//WS2812_Send();
		}
		if(HAL_GetTick()>t3_led_toggle){
 8000ad4:	f000 fdf4 	bl	80016c0 <HAL_GetTick>
 8000ad8:	0002      	movs	r2, r0
 8000ada:	4b2a      	ldr	r3, [pc, #168]	@ (8000b84 <main+0x230>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	d90c      	bls.n	8000afc <main+0x1a8>
			t3_led_toggle = HAL_GetTick()+200;
 8000ae2:	f000 fded 	bl	80016c0 <HAL_GetTick>
 8000ae6:	0003      	movs	r3, r0
 8000ae8:	33c8      	adds	r3, #200	@ 0xc8
 8000aea:	001a      	movs	r2, r3
 8000aec:	4b25      	ldr	r3, [pc, #148]	@ (8000b84 <main+0x230>)
 8000aee:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000af0:	23a0      	movs	r3, #160	@ 0xa0
 8000af2:	05db      	lsls	r3, r3, #23
 8000af4:	2120      	movs	r1, #32
 8000af6:	0018      	movs	r0, r3
 8000af8:	f001 f9a0 	bl	8001e3c <HAL_GPIO_TogglePin>
		}
		if(HAL_GetTick() > t4_tm1651_run){
 8000afc:	f000 fde0 	bl	80016c0 <HAL_GetTick>
 8000b00:	0002      	movs	r2, r0
 8000b02:	4b21      	ldr	r3, [pc, #132]	@ (8000b88 <main+0x234>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	429a      	cmp	r2, r3
 8000b08:	d800      	bhi.n	8000b0c <main+0x1b8>
 8000b0a:	e755      	b.n	80009b8 <main+0x64>
			t4_tm1651_run = HAL_GetTick() + 1000;
 8000b0c:	f000 fdd8 	bl	80016c0 <HAL_GetTick>
 8000b10:	0003      	movs	r3, r0
 8000b12:	22fa      	movs	r2, #250	@ 0xfa
 8000b14:	0092      	lsls	r2, r2, #2
 8000b16:	189a      	adds	r2, r3, r2
 8000b18:	4b1b      	ldr	r3, [pc, #108]	@ (8000b88 <main+0x234>)
 8000b1a:	601a      	str	r2, [r3, #0]

			if(++level>7)level=0;
 8000b1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000b8c <main+0x238>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	3301      	adds	r3, #1
 8000b22:	b2da      	uxtb	r2, r3
 8000b24:	4b19      	ldr	r3, [pc, #100]	@ (8000b8c <main+0x238>)
 8000b26:	701a      	strb	r2, [r3, #0]
 8000b28:	4b18      	ldr	r3, [pc, #96]	@ (8000b8c <main+0x238>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2b07      	cmp	r3, #7
 8000b2e:	d902      	bls.n	8000b36 <main+0x1e2>
 8000b30:	4b16      	ldr	r3, [pc, #88]	@ (8000b8c <main+0x238>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	701a      	strb	r2, [r3, #0]
			TM1651_DisplayLevel(&tm, level);
 8000b36:	4b15      	ldr	r3, [pc, #84]	@ (8000b8c <main+0x238>)
 8000b38:	781a      	ldrb	r2, [r3, #0]
 8000b3a:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <main+0x200>)
 8000b3c:	0011      	movs	r1, r2
 8000b3e:	0018      	movs	r0, r3
 8000b40:	f7ff fdf2 	bl	8000728 <TM1651_DisplayLevel>
		if (HAL_GetTick() > t0_i2c_scan) {
 8000b44:	e738      	b.n	80009b8 <main+0x64>
 8000b46:	46c0      	nop			@ (mov r8, r8)
 8000b48:	50000400 	.word	0x50000400
 8000b4c:	200001f0 	.word	0x200001f0
 8000b50:	20000224 	.word	0x20000224
 8000b54:	20000210 	.word	0x20000210
 8000b58:	20000228 	.word	0x20000228
 8000b5c:	00001388 	.word	0x00001388
 8000b60:	2000022c 	.word	0x2000022c
 8000b64:	20000225 	.word	0x20000225
 8000b68:	20000226 	.word	0x20000226
 8000b6c:	08005ab8 	.word	0x08005ab8
 8000b70:	08005ac8 	.word	0x08005ac8
 8000b74:	08005acc 	.word	0x08005acc
 8000b78:	08005ad0 	.word	0x08005ad0
 8000b7c:	08005ae8 	.word	0x08005ae8
 8000b80:	20000230 	.word	0x20000230
 8000b84:	20000234 	.word	0x20000234
 8000b88:	20000238 	.word	0x20000238
 8000b8c:	2000023c 	.word	0x2000023c

08000b90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b90:	b590      	push	{r4, r7, lr}
 8000b92:	b09d      	sub	sp, #116	@ 0x74
 8000b94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b96:	2438      	movs	r4, #56	@ 0x38
 8000b98:	193b      	adds	r3, r7, r4
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	2338      	movs	r3, #56	@ 0x38
 8000b9e:	001a      	movs	r2, r3
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	f004 f9db 	bl	8004f5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba6:	2324      	movs	r3, #36	@ 0x24
 8000ba8:	18fb      	adds	r3, r7, r3
 8000baa:	0018      	movs	r0, r3
 8000bac:	2314      	movs	r3, #20
 8000bae:	001a      	movs	r2, r3
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	f004 f9d3 	bl	8004f5c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bb6:	003b      	movs	r3, r7
 8000bb8:	0018      	movs	r0, r3
 8000bba:	2324      	movs	r3, #36	@ 0x24
 8000bbc:	001a      	movs	r2, r3
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	f004 f9cc 	bl	8004f5c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bc4:	4b2a      	ldr	r3, [pc, #168]	@ (8000c70 <SystemClock_Config+0xe0>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a2a      	ldr	r2, [pc, #168]	@ (8000c74 <SystemClock_Config+0xe4>)
 8000bca:	401a      	ands	r2, r3
 8000bcc:	4b28      	ldr	r3, [pc, #160]	@ (8000c70 <SystemClock_Config+0xe0>)
 8000bce:	2180      	movs	r1, #128	@ 0x80
 8000bd0:	0109      	lsls	r1, r1, #4
 8000bd2:	430a      	orrs	r2, r1
 8000bd4:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bd6:	0021      	movs	r1, r4
 8000bd8:	187b      	adds	r3, r7, r1
 8000bda:	2202      	movs	r2, #2
 8000bdc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bde:	187b      	adds	r3, r7, r1
 8000be0:	2201      	movs	r2, #1
 8000be2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000be4:	187b      	adds	r3, r7, r1
 8000be6:	2210      	movs	r2, #16
 8000be8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bea:	187b      	adds	r3, r7, r1
 8000bec:	2202      	movs	r2, #2
 8000bee:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bf0:	187b      	adds	r3, r7, r1
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 8000bf6:	187b      	adds	r3, r7, r1
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000bfc:	187b      	adds	r3, r7, r1
 8000bfe:	2280      	movs	r2, #128	@ 0x80
 8000c00:	03d2      	lsls	r2, r2, #15
 8000c02:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c04:	187b      	adds	r3, r7, r1
 8000c06:	0018      	movs	r0, r3
 8000c08:	f001 fdb2 	bl	8002770 <HAL_RCC_OscConfig>
 8000c0c:	1e03      	subs	r3, r0, #0
 8000c0e:	d001      	beq.n	8000c14 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000c10:	f000 fa36 	bl	8001080 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c14:	2124      	movs	r1, #36	@ 0x24
 8000c16:	187b      	adds	r3, r7, r1
 8000c18:	220f      	movs	r2, #15
 8000c1a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c1c:	187b      	adds	r3, r7, r1
 8000c1e:	2203      	movs	r2, #3
 8000c20:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c22:	187b      	adds	r3, r7, r1
 8000c24:	2200      	movs	r2, #0
 8000c26:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c28:	187b      	adds	r3, r7, r1
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c2e:	187b      	adds	r3, r7, r1
 8000c30:	2200      	movs	r2, #0
 8000c32:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c34:	187b      	adds	r3, r7, r1
 8000c36:	2101      	movs	r1, #1
 8000c38:	0018      	movs	r0, r3
 8000c3a:	f002 f95d 	bl	8002ef8 <HAL_RCC_ClockConfig>
 8000c3e:	1e03      	subs	r3, r0, #0
 8000c40:	d001      	beq.n	8000c46 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000c42:	f000 fa1d 	bl	8001080 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8000c46:	003b      	movs	r3, r7
 8000c48:	220a      	movs	r2, #10
 8000c4a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c4c:	003b      	movs	r3, r7
 8000c4e:	2200      	movs	r2, #0
 8000c50:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c52:	003b      	movs	r3, r7
 8000c54:	2200      	movs	r2, #0
 8000c56:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c58:	003b      	movs	r3, r7
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	f002 fb70 	bl	8003340 <HAL_RCCEx_PeriphCLKConfig>
 8000c60:	1e03      	subs	r3, r0, #0
 8000c62:	d001      	beq.n	8000c68 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000c64:	f000 fa0c 	bl	8001080 <Error_Handler>
  }
}
 8000c68:	46c0      	nop			@ (mov r8, r8)
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	b01d      	add	sp, #116	@ 0x74
 8000c6e:	bd90      	pop	{r4, r7, pc}
 8000c70:	40007000 	.word	0x40007000
 8000c74:	ffffe7ff 	.word	0xffffe7ff

08000c78 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c7c:	4b1b      	ldr	r3, [pc, #108]	@ (8000cec <MX_I2C1_Init+0x74>)
 8000c7e:	4a1c      	ldr	r2, [pc, #112]	@ (8000cf0 <MX_I2C1_Init+0x78>)
 8000c80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00805C87;
 8000c82:	4b1a      	ldr	r3, [pc, #104]	@ (8000cec <MX_I2C1_Init+0x74>)
 8000c84:	4a1b      	ldr	r2, [pc, #108]	@ (8000cf4 <MX_I2C1_Init+0x7c>)
 8000c86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c88:	4b18      	ldr	r3, [pc, #96]	@ (8000cec <MX_I2C1_Init+0x74>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c8e:	4b17      	ldr	r3, [pc, #92]	@ (8000cec <MX_I2C1_Init+0x74>)
 8000c90:	2201      	movs	r2, #1
 8000c92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c94:	4b15      	ldr	r3, [pc, #84]	@ (8000cec <MX_I2C1_Init+0x74>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c9a:	4b14      	ldr	r3, [pc, #80]	@ (8000cec <MX_I2C1_Init+0x74>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ca0:	4b12      	ldr	r3, [pc, #72]	@ (8000cec <MX_I2C1_Init+0x74>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ca6:	4b11      	ldr	r3, [pc, #68]	@ (8000cec <MX_I2C1_Init+0x74>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cac:	4b0f      	ldr	r3, [pc, #60]	@ (8000cec <MX_I2C1_Init+0x74>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000cec <MX_I2C1_Init+0x74>)
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f001 f8f9 	bl	8001eac <HAL_I2C_Init>
 8000cba:	1e03      	subs	r3, r0, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000cbe:	f000 f9df 	bl	8001080 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cc2:	4b0a      	ldr	r3, [pc, #40]	@ (8000cec <MX_I2C1_Init+0x74>)
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	0018      	movs	r0, r3
 8000cc8:	f001 fcba 	bl	8002640 <HAL_I2CEx_ConfigAnalogFilter>
 8000ccc:	1e03      	subs	r3, r0, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000cd0:	f000 f9d6 	bl	8001080 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000cd4:	4b05      	ldr	r3, [pc, #20]	@ (8000cec <MX_I2C1_Init+0x74>)
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	0018      	movs	r0, r3
 8000cda:	f001 fcfd 	bl	80026d8 <HAL_I2CEx_ConfigDigitalFilter>
 8000cde:	1e03      	subs	r3, r0, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ce2:	f000 f9cd 	bl	8001080 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ce6:	46c0      	nop			@ (mov r8, r8)
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	2000008c 	.word	0x2000008c
 8000cf0:	40005400 	.word	0x40005400
 8000cf4:	00805c87 	.word	0x00805c87

08000cf8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08a      	sub	sp, #40	@ 0x28
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cfe:	2318      	movs	r3, #24
 8000d00:	18fb      	adds	r3, r7, r3
 8000d02:	0018      	movs	r0, r3
 8000d04:	2310      	movs	r3, #16
 8000d06:	001a      	movs	r2, r3
 8000d08:	2100      	movs	r1, #0
 8000d0a:	f004 f927 	bl	8004f5c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d0e:	2310      	movs	r3, #16
 8000d10:	18fb      	adds	r3, r7, r3
 8000d12:	0018      	movs	r0, r3
 8000d14:	2308      	movs	r3, #8
 8000d16:	001a      	movs	r2, r3
 8000d18:	2100      	movs	r1, #0
 8000d1a:	f004 f91f 	bl	8004f5c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d1e:	003b      	movs	r3, r7
 8000d20:	0018      	movs	r0, r3
 8000d22:	2310      	movs	r3, #16
 8000d24:	001a      	movs	r2, r3
 8000d26:	2100      	movs	r1, #0
 8000d28:	f004 f918 	bl	8004f5c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d2c:	4b34      	ldr	r3, [pc, #208]	@ (8000e00 <MX_TIM2_Init+0x108>)
 8000d2e:	2280      	movs	r2, #128	@ 0x80
 8000d30:	05d2      	lsls	r2, r2, #23
 8000d32:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d34:	4b32      	ldr	r3, [pc, #200]	@ (8000e00 <MX_TIM2_Init+0x108>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d3a:	4b31      	ldr	r3, [pc, #196]	@ (8000e00 <MX_TIM2_Init+0x108>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 30-1;
 8000d40:	4b2f      	ldr	r3, [pc, #188]	@ (8000e00 <MX_TIM2_Init+0x108>)
 8000d42:	221d      	movs	r2, #29
 8000d44:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d46:	4b2e      	ldr	r3, [pc, #184]	@ (8000e00 <MX_TIM2_Init+0x108>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d4c:	4b2c      	ldr	r3, [pc, #176]	@ (8000e00 <MX_TIM2_Init+0x108>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d52:	4b2b      	ldr	r3, [pc, #172]	@ (8000e00 <MX_TIM2_Init+0x108>)
 8000d54:	0018      	movs	r0, r3
 8000d56:	f002 fc81 	bl	800365c <HAL_TIM_Base_Init>
 8000d5a:	1e03      	subs	r3, r0, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000d5e:	f000 f98f 	bl	8001080 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d62:	2118      	movs	r1, #24
 8000d64:	187b      	adds	r3, r7, r1
 8000d66:	2280      	movs	r2, #128	@ 0x80
 8000d68:	0152      	lsls	r2, r2, #5
 8000d6a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d6c:	187a      	adds	r2, r7, r1
 8000d6e:	4b24      	ldr	r3, [pc, #144]	@ (8000e00 <MX_TIM2_Init+0x108>)
 8000d70:	0011      	movs	r1, r2
 8000d72:	0018      	movs	r0, r3
 8000d74:	f002 fe12 	bl	800399c <HAL_TIM_ConfigClockSource>
 8000d78:	1e03      	subs	r3, r0, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000d7c:	f000 f980 	bl	8001080 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d80:	4b1f      	ldr	r3, [pc, #124]	@ (8000e00 <MX_TIM2_Init+0x108>)
 8000d82:	0018      	movs	r0, r3
 8000d84:	f002 fcaa 	bl	80036dc <HAL_TIM_PWM_Init>
 8000d88:	1e03      	subs	r3, r0, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000d8c:	f000 f978 	bl	8001080 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim2, TIM_OPMODE_SINGLE) != HAL_OK)
 8000d90:	4b1b      	ldr	r3, [pc, #108]	@ (8000e00 <MX_TIM2_Init+0x108>)
 8000d92:	2108      	movs	r1, #8
 8000d94:	0018      	movs	r0, r3
 8000d96:	f002 fce9 	bl	800376c <HAL_TIM_OnePulse_Init>
 8000d9a:	1e03      	subs	r3, r0, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8000d9e:	f000 f96f 	bl	8001080 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000da2:	2110      	movs	r1, #16
 8000da4:	187b      	adds	r3, r7, r1
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000daa:	187b      	adds	r3, r7, r1
 8000dac:	2200      	movs	r2, #0
 8000dae:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000db0:	187a      	adds	r2, r7, r1
 8000db2:	4b13      	ldr	r3, [pc, #76]	@ (8000e00 <MX_TIM2_Init+0x108>)
 8000db4:	0011      	movs	r1, r2
 8000db6:	0018      	movs	r0, r3
 8000db8:	f003 f8b6 	bl	8003f28 <HAL_TIMEx_MasterConfigSynchronization>
 8000dbc:	1e03      	subs	r3, r0, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8000dc0:	f000 f95e 	bl	8001080 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dc4:	003b      	movs	r3, r7
 8000dc6:	2260      	movs	r2, #96	@ 0x60
 8000dc8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000dca:	003b      	movs	r3, r7
 8000dcc:	2200      	movs	r2, #0
 8000dce:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dd0:	003b      	movs	r3, r7
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dd6:	003b      	movs	r3, r7
 8000dd8:	2200      	movs	r2, #0
 8000dda:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ddc:	0039      	movs	r1, r7
 8000dde:	4b08      	ldr	r3, [pc, #32]	@ (8000e00 <MX_TIM2_Init+0x108>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	0018      	movs	r0, r3
 8000de4:	f002 fd14 	bl	8003810 <HAL_TIM_PWM_ConfigChannel>
 8000de8:	1e03      	subs	r3, r0, #0
 8000dea:	d001      	beq.n	8000df0 <MX_TIM2_Init+0xf8>
  {
    Error_Handler();
 8000dec:	f000 f948 	bl	8001080 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000df0:	4b03      	ldr	r3, [pc, #12]	@ (8000e00 <MX_TIM2_Init+0x108>)
 8000df2:	0018      	movs	r0, r3
 8000df4:	f000 fa7e 	bl	80012f4 <HAL_TIM_MspPostInit>

}
 8000df8:	46c0      	nop			@ (mov r8, r8)
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	b00a      	add	sp, #40	@ 0x28
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	200000e0 	.word	0x200000e0

08000e04 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e08:	4b14      	ldr	r3, [pc, #80]	@ (8000e5c <MX_USART2_UART_Init+0x58>)
 8000e0a:	4a15      	ldr	r2, [pc, #84]	@ (8000e60 <MX_USART2_UART_Init+0x5c>)
 8000e0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e0e:	4b13      	ldr	r3, [pc, #76]	@ (8000e5c <MX_USART2_UART_Init+0x58>)
 8000e10:	22e1      	movs	r2, #225	@ 0xe1
 8000e12:	0252      	lsls	r2, r2, #9
 8000e14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e16:	4b11      	ldr	r3, [pc, #68]	@ (8000e5c <MX_USART2_UART_Init+0x58>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e5c <MX_USART2_UART_Init+0x58>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e22:	4b0e      	ldr	r3, [pc, #56]	@ (8000e5c <MX_USART2_UART_Init+0x58>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e28:	4b0c      	ldr	r3, [pc, #48]	@ (8000e5c <MX_USART2_UART_Init+0x58>)
 8000e2a:	220c      	movs	r2, #12
 8000e2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000e5c <MX_USART2_UART_Init+0x58>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e34:	4b09      	ldr	r3, [pc, #36]	@ (8000e5c <MX_USART2_UART_Init+0x58>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e3a:	4b08      	ldr	r3, [pc, #32]	@ (8000e5c <MX_USART2_UART_Init+0x58>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e40:	4b06      	ldr	r3, [pc, #24]	@ (8000e5c <MX_USART2_UART_Init+0x58>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e46:	4b05      	ldr	r3, [pc, #20]	@ (8000e5c <MX_USART2_UART_Init+0x58>)
 8000e48:	0018      	movs	r0, r3
 8000e4a:	f003 f8c5 	bl	8003fd8 <HAL_UART_Init>
 8000e4e:	1e03      	subs	r3, r0, #0
 8000e50:	d001      	beq.n	8000e56 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e52:	f000 f915 	bl	8001080 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e56:	46c0      	nop			@ (mov r8, r8)
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20000168 	.word	0x20000168
 8000e60:	40004400 	.word	0x40004400

08000e64 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e9c <MX_DMA_Init+0x38>)
 8000e6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000e6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000e9c <MX_DMA_Init+0x38>)
 8000e70:	2101      	movs	r1, #1
 8000e72:	430a      	orrs	r2, r1
 8000e74:	631a      	str	r2, [r3, #48]	@ 0x30
 8000e76:	4b09      	ldr	r3, [pc, #36]	@ (8000e9c <MX_DMA_Init+0x38>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2100      	movs	r1, #0
 8000e86:	200b      	movs	r0, #11
 8000e88:	f000 fcd0 	bl	800182c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8000e8c:	200b      	movs	r0, #11
 8000e8e:	f000 fce2 	bl	8001856 <HAL_NVIC_EnableIRQ>

}
 8000e92:	46c0      	nop			@ (mov r8, r8)
 8000e94:	46bd      	mov	sp, r7
 8000e96:	b002      	add	sp, #8
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	46c0      	nop			@ (mov r8, r8)
 8000e9c:	40021000 	.word	0x40021000

08000ea0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ea0:	b590      	push	{r4, r7, lr}
 8000ea2:	b08b      	sub	sp, #44	@ 0x2c
 8000ea4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea6:	2414      	movs	r4, #20
 8000ea8:	193b      	adds	r3, r7, r4
 8000eaa:	0018      	movs	r0, r3
 8000eac:	2314      	movs	r3, #20
 8000eae:	001a      	movs	r2, r3
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	f004 f853 	bl	8004f5c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eb6:	4b4d      	ldr	r3, [pc, #308]	@ (8000fec <MX_GPIO_Init+0x14c>)
 8000eb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000eba:	4b4c      	ldr	r3, [pc, #304]	@ (8000fec <MX_GPIO_Init+0x14c>)
 8000ebc:	2104      	movs	r1, #4
 8000ebe:	430a      	orrs	r2, r1
 8000ec0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000ec2:	4b4a      	ldr	r3, [pc, #296]	@ (8000fec <MX_GPIO_Init+0x14c>)
 8000ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ec6:	2204      	movs	r2, #4
 8000ec8:	4013      	ands	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]
 8000ecc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ece:	4b47      	ldr	r3, [pc, #284]	@ (8000fec <MX_GPIO_Init+0x14c>)
 8000ed0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000ed2:	4b46      	ldr	r3, [pc, #280]	@ (8000fec <MX_GPIO_Init+0x14c>)
 8000ed4:	2180      	movs	r1, #128	@ 0x80
 8000ed6:	430a      	orrs	r2, r1
 8000ed8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000eda:	4b44      	ldr	r3, [pc, #272]	@ (8000fec <MX_GPIO_Init+0x14c>)
 8000edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ede:	2280      	movs	r2, #128	@ 0x80
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee6:	4b41      	ldr	r3, [pc, #260]	@ (8000fec <MX_GPIO_Init+0x14c>)
 8000ee8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000eea:	4b40      	ldr	r3, [pc, #256]	@ (8000fec <MX_GPIO_Init+0x14c>)
 8000eec:	2101      	movs	r1, #1
 8000eee:	430a      	orrs	r2, r1
 8000ef0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000ef2:	4b3e      	ldr	r3, [pc, #248]	@ (8000fec <MX_GPIO_Init+0x14c>)
 8000ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	4013      	ands	r3, r2
 8000efa:	60bb      	str	r3, [r7, #8]
 8000efc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efe:	4b3b      	ldr	r3, [pc, #236]	@ (8000fec <MX_GPIO_Init+0x14c>)
 8000f00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f02:	4b3a      	ldr	r3, [pc, #232]	@ (8000fec <MX_GPIO_Init+0x14c>)
 8000f04:	2102      	movs	r1, #2
 8000f06:	430a      	orrs	r2, r1
 8000f08:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000f0a:	4b38      	ldr	r3, [pc, #224]	@ (8000fec <MX_GPIO_Init+0x14c>)
 8000f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f0e:	2202      	movs	r2, #2
 8000f10:	4013      	ands	r3, r2
 8000f12:	607b      	str	r3, [r7, #4]
 8000f14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|TM1651_CLK_Pin|TM1651_DIO_Pin, GPIO_PIN_RESET);
 8000f16:	23a0      	movs	r3, #160	@ 0xa0
 8000f18:	05db      	lsls	r3, r3, #23
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	21e0      	movs	r1, #224	@ 0xe0
 8000f1e:	0018      	movs	r0, r3
 8000f20:	f000 ff6f 	bl	8001e02 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f24:	193b      	adds	r3, r7, r4
 8000f26:	2280      	movs	r2, #128	@ 0x80
 8000f28:	0192      	lsls	r2, r2, #6
 8000f2a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f2c:	193b      	adds	r3, r7, r4
 8000f2e:	2284      	movs	r2, #132	@ 0x84
 8000f30:	0392      	lsls	r2, r2, #14
 8000f32:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	193b      	adds	r3, r7, r4
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f3a:	193b      	adds	r3, r7, r4
 8000f3c:	4a2c      	ldr	r2, [pc, #176]	@ (8000ff0 <MX_GPIO_Init+0x150>)
 8000f3e:	0019      	movs	r1, r3
 8000f40:	0010      	movs	r0, r2
 8000f42:	f000 fdcb 	bl	8001adc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f46:	193b      	adds	r3, r7, r4
 8000f48:	2220      	movs	r2, #32
 8000f4a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4c:	193b      	adds	r3, r7, r4
 8000f4e:	2201      	movs	r2, #1
 8000f50:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	193b      	adds	r3, r7, r4
 8000f54:	2200      	movs	r2, #0
 8000f56:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f58:	193b      	adds	r3, r7, r4
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f5e:	193a      	adds	r2, r7, r4
 8000f60:	23a0      	movs	r3, #160	@ 0xa0
 8000f62:	05db      	lsls	r3, r3, #23
 8000f64:	0011      	movs	r1, r2
 8000f66:	0018      	movs	r0, r3
 8000f68:	f000 fdb8 	bl	8001adc <HAL_GPIO_Init>

  /*Configure GPIO pins : TM1651_CLK_Pin TM1651_DIO_Pin */
  GPIO_InitStruct.Pin = TM1651_CLK_Pin|TM1651_DIO_Pin;
 8000f6c:	193b      	adds	r3, r7, r4
 8000f6e:	22c0      	movs	r2, #192	@ 0xc0
 8000f70:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f72:	193b      	adds	r3, r7, r4
 8000f74:	2201      	movs	r2, #1
 8000f76:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	193b      	adds	r3, r7, r4
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7e:	193b      	adds	r3, r7, r4
 8000f80:	2203      	movs	r2, #3
 8000f82:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f84:	193a      	adds	r2, r7, r4
 8000f86:	23a0      	movs	r3, #160	@ 0xa0
 8000f88:	05db      	lsls	r3, r3, #23
 8000f8a:	0011      	movs	r1, r2
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	f000 fda5 	bl	8001adc <HAL_GPIO_Init>

  /*Configure GPIO pin : Encoder_Sig_A_Pin */
  GPIO_InitStruct.Pin = Encoder_Sig_A_Pin;
 8000f92:	193b      	adds	r3, r7, r4
 8000f94:	2280      	movs	r2, #128	@ 0x80
 8000f96:	00d2      	lsls	r2, r2, #3
 8000f98:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000f9a:	193b      	adds	r3, r7, r4
 8000f9c:	22c4      	movs	r2, #196	@ 0xc4
 8000f9e:	0392      	lsls	r2, r2, #14
 8000fa0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	193b      	adds	r3, r7, r4
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Encoder_Sig_A_GPIO_Port, &GPIO_InitStruct);
 8000fa8:	193a      	adds	r2, r7, r4
 8000faa:	23a0      	movs	r3, #160	@ 0xa0
 8000fac:	05db      	lsls	r3, r3, #23
 8000fae:	0011      	movs	r1, r2
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	f000 fd93 	bl	8001adc <HAL_GPIO_Init>

  /*Configure GPIO pins : Encoder_Sig_B_Pin Encoder_SW_Pin */
  GPIO_InitStruct.Pin = Encoder_Sig_B_Pin|Encoder_SW_Pin;
 8000fb6:	193b      	adds	r3, r7, r4
 8000fb8:	2228      	movs	r2, #40	@ 0x28
 8000fba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fbc:	193b      	adds	r3, r7, r4
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	193b      	adds	r3, r7, r4
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc8:	193b      	adds	r3, r7, r4
 8000fca:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff4 <MX_GPIO_Init+0x154>)
 8000fcc:	0019      	movs	r1, r3
 8000fce:	0010      	movs	r0, r2
 8000fd0:	f000 fd84 	bl	8001adc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	2007      	movs	r0, #7
 8000fda:	f000 fc27 	bl	800182c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000fde:	2007      	movs	r0, #7
 8000fe0:	f000 fc39 	bl	8001856 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fe4:	46c0      	nop			@ (mov r8, r8)
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	b00b      	add	sp, #44	@ 0x2c
 8000fea:	bd90      	pop	{r4, r7, pc}
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	50000800 	.word	0x50000800
 8000ff4:	50000400 	.word	0x50000400

08000ff8 <I2C_Scan>:

/* USER CODE BEGIN 4 */
// I2C Scanner Function using HAL_I2C_Master_Transmit
void I2C_Scan() {
 8000ff8:	b590      	push	{r4, r7, lr}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af02      	add	r7, sp, #8
	printf("\r\nStarting I2C Scan...\r\n");
 8000ffe:	4b1c      	ldr	r3, [pc, #112]	@ (8001070 <I2C_Scan+0x78>)
 8001000:	0018      	movs	r0, r3
 8001002:	f003 feb5 	bl	8004d70 <puts>

	uint8_t dummy_data = 0x00; // Dummy data for transmission
 8001006:	1d3b      	adds	r3, r7, #4
 8001008:	2200      	movs	r2, #0
 800100a:	701a      	strb	r2, [r3, #0]

	for (uint8_t address = 1; address < 127; address++) {
 800100c:	1dfb      	adds	r3, r7, #7
 800100e:	2201      	movs	r2, #1
 8001010:	701a      	strb	r2, [r3, #0]
 8001012:	e021      	b.n	8001058 <I2C_Scan+0x60>
		uint8_t i2cAddress = address << 1; // Convert to 8-bit format for HAL
 8001014:	1dba      	adds	r2, r7, #6
 8001016:	1dfb      	adds	r3, r7, #7
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	18db      	adds	r3, r3, r3
 800101c:	7013      	strb	r3, [r2, #0]

		HAL_StatusTypeDef result = HAL_I2C_Master_Transmit(&hi2c1, i2cAddress,
 800101e:	1dbb      	adds	r3, r7, #6
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	b299      	uxth	r1, r3
 8001024:	1d7c      	adds	r4, r7, #5
 8001026:	1d3a      	adds	r2, r7, #4
 8001028:	4812      	ldr	r0, [pc, #72]	@ (8001074 <I2C_Scan+0x7c>)
 800102a:	230a      	movs	r3, #10
 800102c:	9300      	str	r3, [sp, #0]
 800102e:	2301      	movs	r3, #1
 8001030:	f000 ffd2 	bl	8001fd8 <HAL_I2C_Master_Transmit>
 8001034:	0003      	movs	r3, r0
 8001036:	7023      	strb	r3, [r4, #0]
				&dummy_data, 1, 10);

		if (result == HAL_OK) {
 8001038:	1d7b      	adds	r3, r7, #5
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d106      	bne.n	800104e <I2C_Scan+0x56>
			printf("I2C device found at address: 0x%02X\r\n", address);
 8001040:	1dfb      	adds	r3, r7, #7
 8001042:	781a      	ldrb	r2, [r3, #0]
 8001044:	4b0c      	ldr	r3, [pc, #48]	@ (8001078 <I2C_Scan+0x80>)
 8001046:	0011      	movs	r1, r2
 8001048:	0018      	movs	r0, r3
 800104a:	f003 fe2b 	bl	8004ca4 <iprintf>
	for (uint8_t address = 1; address < 127; address++) {
 800104e:	1dfb      	adds	r3, r7, #7
 8001050:	781a      	ldrb	r2, [r3, #0]
 8001052:	1dfb      	adds	r3, r7, #7
 8001054:	3201      	adds	r2, #1
 8001056:	701a      	strb	r2, [r3, #0]
 8001058:	1dfb      	adds	r3, r7, #7
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b7e      	cmp	r3, #126	@ 0x7e
 800105e:	d9d9      	bls.n	8001014 <I2C_Scan+0x1c>
		}
	}
	printf("I2C Scan Complete.\r\n");
 8001060:	4b06      	ldr	r3, [pc, #24]	@ (800107c <I2C_Scan+0x84>)
 8001062:	0018      	movs	r0, r3
 8001064:	f003 fe84 	bl	8004d70 <puts>
}
 8001068:	46c0      	nop			@ (mov r8, r8)
 800106a:	46bd      	mov	sp, r7
 800106c:	b003      	add	sp, #12
 800106e:	bd90      	pop	{r4, r7, pc}
 8001070:	08005afc 	.word	0x08005afc
 8001074:	2000008c 	.word	0x2000008c
 8001078:	08005b14 	.word	0x08005b14
 800107c:	08005b3c 	.word	0x08005b3c

08001080 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001084:	b672      	cpsid	i
}
 8001086:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001088:	46c0      	nop			@ (mov r8, r8)
 800108a:	e7fd      	b.n	8001088 <Error_Handler+0x8>

0800108c <RotaryEncoder_Init>:

static RotaryEncoder_t *encoder_instance = NULL;

void RotaryEncoder_Init(RotaryEncoder_t *encoder, GPIO_TypeDef *A_Port,
		uint16_t A_Pin, GPIO_TypeDef *B_Port, uint16_t B_Pin,
		GPIO_TypeDef *SW_Port, uint16_t SW_Pin) {
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	603b      	str	r3, [r7, #0]
 8001098:	1dbb      	adds	r3, r7, #6
 800109a:	801a      	strh	r2, [r3, #0]
	encoder->A_Port = A_Port;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	68ba      	ldr	r2, [r7, #8]
 80010a0:	601a      	str	r2, [r3, #0]
	encoder->A_Pin = A_Pin;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	1dba      	adds	r2, r7, #6
 80010a6:	8812      	ldrh	r2, [r2, #0]
 80010a8:	809a      	strh	r2, [r3, #4]

	encoder->B_Port = B_Port;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	683a      	ldr	r2, [r7, #0]
 80010ae:	609a      	str	r2, [r3, #8]
	encoder->B_Pin = B_Pin;
 80010b0:	68fa      	ldr	r2, [r7, #12]
 80010b2:	2318      	movs	r3, #24
 80010b4:	18fb      	adds	r3, r7, r3
 80010b6:	881b      	ldrh	r3, [r3, #0]
 80010b8:	8193      	strh	r3, [r2, #12]

	encoder->SW_Port = SW_Port;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	69fa      	ldr	r2, [r7, #28]
 80010be:	611a      	str	r2, [r3, #16]
	encoder->SW_Pin = SW_Pin;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	2220      	movs	r2, #32
 80010c4:	18ba      	adds	r2, r7, r2
 80010c6:	8812      	ldrh	r2, [r2, #0]
 80010c8:	829a      	strh	r2, [r3, #20]

	encoder->counter = 0;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	2200      	movs	r2, #0
 80010ce:	619a      	str	r2, [r3, #24]
	encoder->direction = ROTARY_NONE;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	2200      	movs	r2, #0
 80010d4:	771a      	strb	r2, [r3, #28]

	encoder_instance = encoder;
 80010d6:	4b03      	ldr	r3, [pc, #12]	@ (80010e4 <RotaryEncoder_Init+0x58>)
 80010d8:	68fa      	ldr	r2, [r7, #12]
 80010da:	601a      	str	r2, [r3, #0]
}
 80010dc:	46c0      	nop			@ (mov r8, r8)
 80010de:	46bd      	mov	sp, r7
 80010e0:	b004      	add	sp, #16
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20000240 	.word	0x20000240

080010e8 <RotaryEncoder_Update>:

// Function to handle encoder movement
void RotaryEncoder_Update(RotaryEncoder_t *encoder) {
 80010e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
	uint8_t A_State = HAL_GPIO_ReadPin(encoder->A_Port, encoder->A_Pin);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	889b      	ldrh	r3, [r3, #4]
 80010f8:	250f      	movs	r5, #15
 80010fa:	197c      	adds	r4, r7, r5
 80010fc:	0019      	movs	r1, r3
 80010fe:	0010      	movs	r0, r2
 8001100:	f000 fe62 	bl	8001dc8 <HAL_GPIO_ReadPin>
 8001104:	0003      	movs	r3, r0
 8001106:	7023      	strb	r3, [r4, #0]
	uint8_t B_State = HAL_GPIO_ReadPin(encoder->B_Port, encoder->B_Pin);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	689a      	ldr	r2, [r3, #8]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	899b      	ldrh	r3, [r3, #12]
 8001110:	260e      	movs	r6, #14
 8001112:	19bc      	adds	r4, r7, r6
 8001114:	0019      	movs	r1, r3
 8001116:	0010      	movs	r0, r2
 8001118:	f000 fe56 	bl	8001dc8 <HAL_GPIO_ReadPin>
 800111c:	0003      	movs	r3, r0
 800111e:	7023      	strb	r3, [r4, #0]

	if (A_State) {
 8001120:	197b      	adds	r3, r7, r5
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d014      	beq.n	8001152 <RotaryEncoder_Update+0x6a>
		if (B_State) {
 8001128:	19bb      	adds	r3, r7, r6
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d008      	beq.n	8001142 <RotaryEncoder_Update+0x5a>
			encoder->direction = ROTARY_CCW;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2202      	movs	r2, #2
 8001134:	771a      	strb	r2, [r3, #28]
			encoder->counter--;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	699b      	ldr	r3, [r3, #24]
 800113a:	1e5a      	subs	r2, r3, #1
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	619a      	str	r2, [r3, #24]
		} else {
			encoder->direction = ROTARY_CW;
			encoder->counter++;
		}
	}
}
 8001140:	e007      	b.n	8001152 <RotaryEncoder_Update+0x6a>
			encoder->direction = ROTARY_CW;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2201      	movs	r2, #1
 8001146:	771a      	strb	r2, [r3, #28]
			encoder->counter++;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	1c5a      	adds	r2, r3, #1
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	619a      	str	r2, [r3, #24]
}
 8001152:	46c0      	nop			@ (mov r8, r8)
 8001154:	46bd      	mov	sp, r7
 8001156:	b005      	add	sp, #20
 8001158:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800115a <RotaryEncoder_ReadSwitch>:

// Read switch state
uint8_t RotaryEncoder_ReadSwitch(RotaryEncoder_t *encoder) {
 800115a:	b580      	push	{r7, lr}
 800115c:	b082      	sub	sp, #8
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(encoder->SW_Port, encoder->SW_Pin);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	691a      	ldr	r2, [r3, #16]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	8a9b      	ldrh	r3, [r3, #20]
 800116a:	0019      	movs	r1, r3
 800116c:	0010      	movs	r0, r2
 800116e:	f000 fe2b 	bl	8001dc8 <HAL_GPIO_ReadPin>
 8001172:	0003      	movs	r3, r0
}
 8001174:	0018      	movs	r0, r3
 8001176:	46bd      	mov	sp, r7
 8001178:	b002      	add	sp, #8
 800117a:	bd80      	pop	{r7, pc}

0800117c <HAL_GPIO_EXTI_Callback>:

// EXTI Callback (Must be placed inside stm32l0xx_it.c)
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	0002      	movs	r2, r0
 8001184:	1dbb      	adds	r3, r7, #6
 8001186:	801a      	strh	r2, [r3, #0]
	if (encoder_instance == NULL)
 8001188:	4b0a      	ldr	r3, [pc, #40]	@ (80011b4 <HAL_GPIO_EXTI_Callback+0x38>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d00c      	beq.n	80011aa <HAL_GPIO_EXTI_Callback+0x2e>
		return;

	if (GPIO_Pin == encoder_instance->A_Pin) {
 8001190:	4b08      	ldr	r3, [pc, #32]	@ (80011b4 <HAL_GPIO_EXTI_Callback+0x38>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	889b      	ldrh	r3, [r3, #4]
 8001196:	1dba      	adds	r2, r7, #6
 8001198:	8812      	ldrh	r2, [r2, #0]
 800119a:	429a      	cmp	r2, r3
 800119c:	d106      	bne.n	80011ac <HAL_GPIO_EXTI_Callback+0x30>
		RotaryEncoder_Update(encoder_instance);
 800119e:	4b05      	ldr	r3, [pc, #20]	@ (80011b4 <HAL_GPIO_EXTI_Callback+0x38>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	0018      	movs	r0, r3
 80011a4:	f7ff ffa0 	bl	80010e8 <RotaryEncoder_Update>
 80011a8:	e000      	b.n	80011ac <HAL_GPIO_EXTI_Callback+0x30>
		return;
 80011aa:	46c0      	nop			@ (mov r8, r8)
	}
}
 80011ac:	46bd      	mov	sp, r7
 80011ae:	b002      	add	sp, #8
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	46c0      	nop			@ (mov r8, r8)
 80011b4:	20000240 	.word	0x20000240

080011b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011bc:	4b07      	ldr	r3, [pc, #28]	@ (80011dc <HAL_MspInit+0x24>)
 80011be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011c0:	4b06      	ldr	r3, [pc, #24]	@ (80011dc <HAL_MspInit+0x24>)
 80011c2:	2101      	movs	r1, #1
 80011c4:	430a      	orrs	r2, r1
 80011c6:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c8:	4b04      	ldr	r3, [pc, #16]	@ (80011dc <HAL_MspInit+0x24>)
 80011ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80011cc:	4b03      	ldr	r3, [pc, #12]	@ (80011dc <HAL_MspInit+0x24>)
 80011ce:	2180      	movs	r1, #128	@ 0x80
 80011d0:	0549      	lsls	r1, r1, #21
 80011d2:	430a      	orrs	r2, r1
 80011d4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011d6:	46c0      	nop			@ (mov r8, r8)
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40021000 	.word	0x40021000

080011e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011e0:	b590      	push	{r4, r7, lr}
 80011e2:	b089      	sub	sp, #36	@ 0x24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e8:	240c      	movs	r4, #12
 80011ea:	193b      	adds	r3, r7, r4
 80011ec:	0018      	movs	r0, r3
 80011ee:	2314      	movs	r3, #20
 80011f0:	001a      	movs	r2, r3
 80011f2:	2100      	movs	r1, #0
 80011f4:	f003 feb2 	bl	8004f5c <memset>
  if(hi2c->Instance==I2C1)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a17      	ldr	r2, [pc, #92]	@ (800125c <HAL_I2C_MspInit+0x7c>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d128      	bne.n	8001254 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001202:	4b17      	ldr	r3, [pc, #92]	@ (8001260 <HAL_I2C_MspInit+0x80>)
 8001204:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001206:	4b16      	ldr	r3, [pc, #88]	@ (8001260 <HAL_I2C_MspInit+0x80>)
 8001208:	2102      	movs	r1, #2
 800120a:	430a      	orrs	r2, r1
 800120c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800120e:	4b14      	ldr	r3, [pc, #80]	@ (8001260 <HAL_I2C_MspInit+0x80>)
 8001210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001212:	2202      	movs	r2, #2
 8001214:	4013      	ands	r3, r2
 8001216:	60bb      	str	r3, [r7, #8]
 8001218:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800121a:	0021      	movs	r1, r4
 800121c:	187b      	adds	r3, r7, r1
 800121e:	22c0      	movs	r2, #192	@ 0xc0
 8001220:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001222:	187b      	adds	r3, r7, r1
 8001224:	2212      	movs	r2, #18
 8001226:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	187b      	adds	r3, r7, r1
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122e:	187b      	adds	r3, r7, r1
 8001230:	2203      	movs	r2, #3
 8001232:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001234:	187b      	adds	r3, r7, r1
 8001236:	2201      	movs	r2, #1
 8001238:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800123a:	187b      	adds	r3, r7, r1
 800123c:	4a09      	ldr	r2, [pc, #36]	@ (8001264 <HAL_I2C_MspInit+0x84>)
 800123e:	0019      	movs	r1, r3
 8001240:	0010      	movs	r0, r2
 8001242:	f000 fc4b 	bl	8001adc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001246:	4b06      	ldr	r3, [pc, #24]	@ (8001260 <HAL_I2C_MspInit+0x80>)
 8001248:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800124a:	4b05      	ldr	r3, [pc, #20]	@ (8001260 <HAL_I2C_MspInit+0x80>)
 800124c:	2180      	movs	r1, #128	@ 0x80
 800124e:	0389      	lsls	r1, r1, #14
 8001250:	430a      	orrs	r2, r1
 8001252:	639a      	str	r2, [r3, #56]	@ 0x38

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001254:	46c0      	nop			@ (mov r8, r8)
 8001256:	46bd      	mov	sp, r7
 8001258:	b009      	add	sp, #36	@ 0x24
 800125a:	bd90      	pop	{r4, r7, pc}
 800125c:	40005400 	.word	0x40005400
 8001260:	40021000 	.word	0x40021000
 8001264:	50000400 	.word	0x50000400

08001268 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	2380      	movs	r3, #128	@ 0x80
 8001276:	05db      	lsls	r3, r3, #23
 8001278:	429a      	cmp	r2, r3
 800127a:	d130      	bne.n	80012de <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800127c:	4b1a      	ldr	r3, [pc, #104]	@ (80012e8 <HAL_TIM_Base_MspInit+0x80>)
 800127e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001280:	4b19      	ldr	r3, [pc, #100]	@ (80012e8 <HAL_TIM_Base_MspInit+0x80>)
 8001282:	2101      	movs	r1, #1
 8001284:	430a      	orrs	r2, r1
 8001286:	639a      	str	r2, [r3, #56]	@ 0x38

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8001288:	4b18      	ldr	r3, [pc, #96]	@ (80012ec <HAL_TIM_Base_MspInit+0x84>)
 800128a:	4a19      	ldr	r2, [pc, #100]	@ (80012f0 <HAL_TIM_Base_MspInit+0x88>)
 800128c:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_8;
 800128e:	4b17      	ldr	r3, [pc, #92]	@ (80012ec <HAL_TIM_Base_MspInit+0x84>)
 8001290:	2208      	movs	r2, #8
 8001292:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001294:	4b15      	ldr	r3, [pc, #84]	@ (80012ec <HAL_TIM_Base_MspInit+0x84>)
 8001296:	2210      	movs	r2, #16
 8001298:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800129a:	4b14      	ldr	r3, [pc, #80]	@ (80012ec <HAL_TIM_Base_MspInit+0x84>)
 800129c:	2200      	movs	r2, #0
 800129e:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80012a0:	4b12      	ldr	r3, [pc, #72]	@ (80012ec <HAL_TIM_Base_MspInit+0x84>)
 80012a2:	2280      	movs	r2, #128	@ 0x80
 80012a4:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012a6:	4b11      	ldr	r3, [pc, #68]	@ (80012ec <HAL_TIM_Base_MspInit+0x84>)
 80012a8:	2280      	movs	r2, #128	@ 0x80
 80012aa:	0052      	lsls	r2, r2, #1
 80012ac:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012ae:	4b0f      	ldr	r3, [pc, #60]	@ (80012ec <HAL_TIM_Base_MspInit+0x84>)
 80012b0:	2280      	movs	r2, #128	@ 0x80
 80012b2:	00d2      	lsls	r2, r2, #3
 80012b4:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 80012b6:	4b0d      	ldr	r3, [pc, #52]	@ (80012ec <HAL_TIM_Base_MspInit+0x84>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80012bc:	4b0b      	ldr	r3, [pc, #44]	@ (80012ec <HAL_TIM_Base_MspInit+0x84>)
 80012be:	2200      	movs	r2, #0
 80012c0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80012c2:	4b0a      	ldr	r3, [pc, #40]	@ (80012ec <HAL_TIM_Base_MspInit+0x84>)
 80012c4:	0018      	movs	r0, r3
 80012c6:	f000 fae3 	bl	8001890 <HAL_DMA_Init>
 80012ca:	1e03      	subs	r3, r0, #0
 80012cc:	d001      	beq.n	80012d2 <HAL_TIM_Base_MspInit+0x6a>
    {
      Error_Handler();
 80012ce:	f7ff fed7 	bl	8001080 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a05      	ldr	r2, [pc, #20]	@ (80012ec <HAL_TIM_Base_MspInit+0x84>)
 80012d6:	621a      	str	r2, [r3, #32]
 80012d8:	4b04      	ldr	r3, [pc, #16]	@ (80012ec <HAL_TIM_Base_MspInit+0x84>)
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80012de:	46c0      	nop			@ (mov r8, r8)
 80012e0:	46bd      	mov	sp, r7
 80012e2:	b002      	add	sp, #8
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	46c0      	nop			@ (mov r8, r8)
 80012e8:	40021000 	.word	0x40021000
 80012ec:	20000120 	.word	0x20000120
 80012f0:	40020058 	.word	0x40020058

080012f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012f4:	b590      	push	{r4, r7, lr}
 80012f6:	b089      	sub	sp, #36	@ 0x24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fc:	240c      	movs	r4, #12
 80012fe:	193b      	adds	r3, r7, r4
 8001300:	0018      	movs	r0, r3
 8001302:	2314      	movs	r3, #20
 8001304:	001a      	movs	r2, r3
 8001306:	2100      	movs	r1, #0
 8001308:	f003 fe28 	bl	8004f5c <memset>
  if(htim->Instance==TIM2)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	2380      	movs	r3, #128	@ 0x80
 8001312:	05db      	lsls	r3, r3, #23
 8001314:	429a      	cmp	r2, r3
 8001316:	d122      	bne.n	800135e <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001318:	4b13      	ldr	r3, [pc, #76]	@ (8001368 <HAL_TIM_MspPostInit+0x74>)
 800131a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800131c:	4b12      	ldr	r3, [pc, #72]	@ (8001368 <HAL_TIM_MspPostInit+0x74>)
 800131e:	2101      	movs	r1, #1
 8001320:	430a      	orrs	r2, r1
 8001322:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001324:	4b10      	ldr	r3, [pc, #64]	@ (8001368 <HAL_TIM_MspPostInit+0x74>)
 8001326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001328:	2201      	movs	r2, #1
 800132a:	4013      	ands	r3, r2
 800132c:	60bb      	str	r3, [r7, #8]
 800132e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001330:	0021      	movs	r1, r4
 8001332:	187b      	adds	r3, r7, r1
 8001334:	2201      	movs	r2, #1
 8001336:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001338:	187b      	adds	r3, r7, r1
 800133a:	2202      	movs	r2, #2
 800133c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	187b      	adds	r3, r7, r1
 8001340:	2200      	movs	r2, #0
 8001342:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001344:	187b      	adds	r3, r7, r1
 8001346:	2200      	movs	r2, #0
 8001348:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800134a:	187b      	adds	r3, r7, r1
 800134c:	2202      	movs	r2, #2
 800134e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001350:	187a      	adds	r2, r7, r1
 8001352:	23a0      	movs	r3, #160	@ 0xa0
 8001354:	05db      	lsls	r3, r3, #23
 8001356:	0011      	movs	r1, r2
 8001358:	0018      	movs	r0, r3
 800135a:	f000 fbbf 	bl	8001adc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800135e:	46c0      	nop			@ (mov r8, r8)
 8001360:	46bd      	mov	sp, r7
 8001362:	b009      	add	sp, #36	@ 0x24
 8001364:	bd90      	pop	{r4, r7, pc}
 8001366:	46c0      	nop			@ (mov r8, r8)
 8001368:	40021000 	.word	0x40021000

0800136c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800136c:	b590      	push	{r4, r7, lr}
 800136e:	b089      	sub	sp, #36	@ 0x24
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001374:	240c      	movs	r4, #12
 8001376:	193b      	adds	r3, r7, r4
 8001378:	0018      	movs	r0, r3
 800137a:	2314      	movs	r3, #20
 800137c:	001a      	movs	r2, r3
 800137e:	2100      	movs	r1, #0
 8001380:	f003 fdec 	bl	8004f5c <memset>
  if(huart->Instance==USART2)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a18      	ldr	r2, [pc, #96]	@ (80013ec <HAL_UART_MspInit+0x80>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d129      	bne.n	80013e2 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800138e:	4b18      	ldr	r3, [pc, #96]	@ (80013f0 <HAL_UART_MspInit+0x84>)
 8001390:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001392:	4b17      	ldr	r3, [pc, #92]	@ (80013f0 <HAL_UART_MspInit+0x84>)
 8001394:	2180      	movs	r1, #128	@ 0x80
 8001396:	0289      	lsls	r1, r1, #10
 8001398:	430a      	orrs	r2, r1
 800139a:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800139c:	4b14      	ldr	r3, [pc, #80]	@ (80013f0 <HAL_UART_MspInit+0x84>)
 800139e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013a0:	4b13      	ldr	r3, [pc, #76]	@ (80013f0 <HAL_UART_MspInit+0x84>)
 80013a2:	2101      	movs	r1, #1
 80013a4:	430a      	orrs	r2, r1
 80013a6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80013a8:	4b11      	ldr	r3, [pc, #68]	@ (80013f0 <HAL_UART_MspInit+0x84>)
 80013aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013ac:	2201      	movs	r2, #1
 80013ae:	4013      	ands	r3, r2
 80013b0:	60bb      	str	r3, [r7, #8]
 80013b2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013b4:	0021      	movs	r1, r4
 80013b6:	187b      	adds	r3, r7, r1
 80013b8:	220c      	movs	r2, #12
 80013ba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013bc:	187b      	adds	r3, r7, r1
 80013be:	2202      	movs	r2, #2
 80013c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	187b      	adds	r3, r7, r1
 80013c4:	2200      	movs	r2, #0
 80013c6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c8:	187b      	adds	r3, r7, r1
 80013ca:	2203      	movs	r2, #3
 80013cc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80013ce:	187b      	adds	r3, r7, r1
 80013d0:	2204      	movs	r2, #4
 80013d2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d4:	187a      	adds	r2, r7, r1
 80013d6:	23a0      	movs	r3, #160	@ 0xa0
 80013d8:	05db      	lsls	r3, r3, #23
 80013da:	0011      	movs	r1, r2
 80013dc:	0018      	movs	r0, r3
 80013de:	f000 fb7d 	bl	8001adc <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80013e2:	46c0      	nop			@ (mov r8, r8)
 80013e4:	46bd      	mov	sp, r7
 80013e6:	b009      	add	sp, #36	@ 0x24
 80013e8:	bd90      	pop	{r4, r7, pc}
 80013ea:	46c0      	nop			@ (mov r8, r8)
 80013ec:	40004400 	.word	0x40004400
 80013f0:	40021000 	.word	0x40021000

080013f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013f8:	46c0      	nop			@ (mov r8, r8)
 80013fa:	e7fd      	b.n	80013f8 <NMI_Handler+0x4>

080013fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001400:	46c0      	nop			@ (mov r8, r8)
 8001402:	e7fd      	b.n	8001400 <HardFault_Handler+0x4>

08001404 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001408:	46c0      	nop			@ (mov r8, r8)
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001412:	46c0      	nop			@ (mov r8, r8)
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800141c:	f000 f93e 	bl	800169c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001420:	46c0      	nop			@ (mov r8, r8)
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Encoder_Sig_A_Pin);
 800142a:	2380      	movs	r3, #128	@ 0x80
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	0018      	movs	r0, r3
 8001430:	f000 fd20 	bl	8001e74 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001434:	2380      	movs	r3, #128	@ 0x80
 8001436:	019b      	lsls	r3, r3, #6
 8001438:	0018      	movs	r0, r3
 800143a:	f000 fd1b 	bl	8001e74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800143e:	46c0      	nop			@ (mov r8, r8)
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001448:	4b03      	ldr	r3, [pc, #12]	@ (8001458 <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 800144a:	0018      	movs	r0, r3
 800144c:	f000 fa98 	bl	8001980 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8001450:	46c0      	nop			@ (mov r8, r8)
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	46c0      	nop			@ (mov r8, r8)
 8001458:	20000120 	.word	0x20000120

0800145c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001468:	2300      	movs	r3, #0
 800146a:	617b      	str	r3, [r7, #20]
 800146c:	e00a      	b.n	8001484 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800146e:	e000      	b.n	8001472 <_read+0x16>
 8001470:	bf00      	nop
 8001472:	0001      	movs	r1, r0
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	1c5a      	adds	r2, r3, #1
 8001478:	60ba      	str	r2, [r7, #8]
 800147a:	b2ca      	uxtb	r2, r1
 800147c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	3301      	adds	r3, #1
 8001482:	617b      	str	r3, [r7, #20]
 8001484:	697a      	ldr	r2, [r7, #20]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	429a      	cmp	r2, r3
 800148a:	dbf0      	blt.n	800146e <_read+0x12>
  }

  return len;
 800148c:	687b      	ldr	r3, [r7, #4]
}
 800148e:	0018      	movs	r0, r3
 8001490:	46bd      	mov	sp, r7
 8001492:	b006      	add	sp, #24
 8001494:	bd80      	pop	{r7, pc}

08001496 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b086      	sub	sp, #24
 800149a:	af00      	add	r7, sp, #0
 800149c:	60f8      	str	r0, [r7, #12]
 800149e:	60b9      	str	r1, [r7, #8]
 80014a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a2:	2300      	movs	r3, #0
 80014a4:	617b      	str	r3, [r7, #20]
 80014a6:	e009      	b.n	80014bc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	1c5a      	adds	r2, r3, #1
 80014ac:	60ba      	str	r2, [r7, #8]
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	0018      	movs	r0, r3
 80014b2:	f7ff fa3d 	bl	8000930 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	3301      	adds	r3, #1
 80014ba:	617b      	str	r3, [r7, #20]
 80014bc:	697a      	ldr	r2, [r7, #20]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	dbf1      	blt.n	80014a8 <_write+0x12>
  }
  return len;
 80014c4:	687b      	ldr	r3, [r7, #4]
}
 80014c6:	0018      	movs	r0, r3
 80014c8:	46bd      	mov	sp, r7
 80014ca:	b006      	add	sp, #24
 80014cc:	bd80      	pop	{r7, pc}

080014ce <_close>:

int _close(int file)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014d6:	2301      	movs	r3, #1
 80014d8:	425b      	negs	r3, r3
}
 80014da:	0018      	movs	r0, r3
 80014dc:	46bd      	mov	sp, r7
 80014de:	b002      	add	sp, #8
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
 80014ea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	2280      	movs	r2, #128	@ 0x80
 80014f0:	0192      	lsls	r2, r2, #6
 80014f2:	605a      	str	r2, [r3, #4]
  return 0;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	0018      	movs	r0, r3
 80014f8:	46bd      	mov	sp, r7
 80014fa:	b002      	add	sp, #8
 80014fc:	bd80      	pop	{r7, pc}

080014fe <_isatty>:

int _isatty(int file)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b082      	sub	sp, #8
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001506:	2301      	movs	r3, #1
}
 8001508:	0018      	movs	r0, r3
 800150a:	46bd      	mov	sp, r7
 800150c:	b002      	add	sp, #8
 800150e:	bd80      	pop	{r7, pc}

08001510 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800151c:	2300      	movs	r3, #0
}
 800151e:	0018      	movs	r0, r3
 8001520:	46bd      	mov	sp, r7
 8001522:	b004      	add	sp, #16
 8001524:	bd80      	pop	{r7, pc}
	...

08001528 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001530:	4a14      	ldr	r2, [pc, #80]	@ (8001584 <_sbrk+0x5c>)
 8001532:	4b15      	ldr	r3, [pc, #84]	@ (8001588 <_sbrk+0x60>)
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800153c:	4b13      	ldr	r3, [pc, #76]	@ (800158c <_sbrk+0x64>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d102      	bne.n	800154a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001544:	4b11      	ldr	r3, [pc, #68]	@ (800158c <_sbrk+0x64>)
 8001546:	4a12      	ldr	r2, [pc, #72]	@ (8001590 <_sbrk+0x68>)
 8001548:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800154a:	4b10      	ldr	r3, [pc, #64]	@ (800158c <_sbrk+0x64>)
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	18d3      	adds	r3, r2, r3
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	429a      	cmp	r2, r3
 8001556:	d207      	bcs.n	8001568 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001558:	f003 fd56 	bl	8005008 <__errno>
 800155c:	0003      	movs	r3, r0
 800155e:	220c      	movs	r2, #12
 8001560:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001562:	2301      	movs	r3, #1
 8001564:	425b      	negs	r3, r3
 8001566:	e009      	b.n	800157c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001568:	4b08      	ldr	r3, [pc, #32]	@ (800158c <_sbrk+0x64>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800156e:	4b07      	ldr	r3, [pc, #28]	@ (800158c <_sbrk+0x64>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	18d2      	adds	r2, r2, r3
 8001576:	4b05      	ldr	r3, [pc, #20]	@ (800158c <_sbrk+0x64>)
 8001578:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800157a:	68fb      	ldr	r3, [r7, #12]
}
 800157c:	0018      	movs	r0, r3
 800157e:	46bd      	mov	sp, r7
 8001580:	b006      	add	sp, #24
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20002000 	.word	0x20002000
 8001588:	00000400 	.word	0x00000400
 800158c:	20000244 	.word	0x20000244
 8001590:	20000398 	.word	0x20000398

08001594 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001598:	46c0      	nop			@ (mov r8, r8)
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
	...

080015a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80015a0:	480d      	ldr	r0, [pc, #52]	@ (80015d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80015a2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80015a4:	f7ff fff6 	bl	8001594 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015a8:	480c      	ldr	r0, [pc, #48]	@ (80015dc <LoopForever+0x6>)
  ldr r1, =_edata
 80015aa:	490d      	ldr	r1, [pc, #52]	@ (80015e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015ac:	4a0d      	ldr	r2, [pc, #52]	@ (80015e4 <LoopForever+0xe>)
  movs r3, #0
 80015ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015b0:	e002      	b.n	80015b8 <LoopCopyDataInit>

080015b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015b6:	3304      	adds	r3, #4

080015b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015bc:	d3f9      	bcc.n	80015b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015be:	4a0a      	ldr	r2, [pc, #40]	@ (80015e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015c0:	4c0a      	ldr	r4, [pc, #40]	@ (80015ec <LoopForever+0x16>)
  movs r3, #0
 80015c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015c4:	e001      	b.n	80015ca <LoopFillZerobss>

080015c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015c8:	3204      	adds	r2, #4

080015ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015cc:	d3fb      	bcc.n	80015c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015ce:	f003 fd21 	bl	8005014 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015d2:	f7ff f9bf 	bl	8000954 <main>

080015d6 <LoopForever>:

LoopForever:
    b LoopForever
 80015d6:	e7fe      	b.n	80015d6 <LoopForever>
  ldr   r0, =_estack
 80015d8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80015dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015e0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80015e4:	08005c00 	.word	0x08005c00
  ldr r2, =_sbss
 80015e8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80015ec:	20000398 	.word	0x20000398

080015f0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015f0:	e7fe      	b.n	80015f0 <ADC1_COMP_IRQHandler>
	...

080015f4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015fa:	1dfb      	adds	r3, r7, #7
 80015fc:	2200      	movs	r2, #0
 80015fe:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001600:	4b0b      	ldr	r3, [pc, #44]	@ (8001630 <HAL_Init+0x3c>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	4b0a      	ldr	r3, [pc, #40]	@ (8001630 <HAL_Init+0x3c>)
 8001606:	2140      	movs	r1, #64	@ 0x40
 8001608:	430a      	orrs	r2, r1
 800160a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800160c:	2000      	movs	r0, #0
 800160e:	f000 f811 	bl	8001634 <HAL_InitTick>
 8001612:	1e03      	subs	r3, r0, #0
 8001614:	d003      	beq.n	800161e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001616:	1dfb      	adds	r3, r7, #7
 8001618:	2201      	movs	r2, #1
 800161a:	701a      	strb	r2, [r3, #0]
 800161c:	e001      	b.n	8001622 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800161e:	f7ff fdcb 	bl	80011b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001622:	1dfb      	adds	r3, r7, #7
 8001624:	781b      	ldrb	r3, [r3, #0]
}
 8001626:	0018      	movs	r0, r3
 8001628:	46bd      	mov	sp, r7
 800162a:	b002      	add	sp, #8
 800162c:	bd80      	pop	{r7, pc}
 800162e:	46c0      	nop			@ (mov r8, r8)
 8001630:	40022000 	.word	0x40022000

08001634 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001634:	b590      	push	{r4, r7, lr}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800163c:	4b14      	ldr	r3, [pc, #80]	@ (8001690 <HAL_InitTick+0x5c>)
 800163e:	681c      	ldr	r4, [r3, #0]
 8001640:	4b14      	ldr	r3, [pc, #80]	@ (8001694 <HAL_InitTick+0x60>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	0019      	movs	r1, r3
 8001646:	23fa      	movs	r3, #250	@ 0xfa
 8001648:	0098      	lsls	r0, r3, #2
 800164a:	f7fe fd67 	bl	800011c <__udivsi3>
 800164e:	0003      	movs	r3, r0
 8001650:	0019      	movs	r1, r3
 8001652:	0020      	movs	r0, r4
 8001654:	f7fe fd62 	bl	800011c <__udivsi3>
 8001658:	0003      	movs	r3, r0
 800165a:	0018      	movs	r0, r3
 800165c:	f000 f90b 	bl	8001876 <HAL_SYSTICK_Config>
 8001660:	1e03      	subs	r3, r0, #0
 8001662:	d001      	beq.n	8001668 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e00f      	b.n	8001688 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2b03      	cmp	r3, #3
 800166c:	d80b      	bhi.n	8001686 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800166e:	6879      	ldr	r1, [r7, #4]
 8001670:	2301      	movs	r3, #1
 8001672:	425b      	negs	r3, r3
 8001674:	2200      	movs	r2, #0
 8001676:	0018      	movs	r0, r3
 8001678:	f000 f8d8 	bl	800182c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800167c:	4b06      	ldr	r3, [pc, #24]	@ (8001698 <HAL_InitTick+0x64>)
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001682:	2300      	movs	r3, #0
 8001684:	e000      	b.n	8001688 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
}
 8001688:	0018      	movs	r0, r3
 800168a:	46bd      	mov	sp, r7
 800168c:	b003      	add	sp, #12
 800168e:	bd90      	pop	{r4, r7, pc}
 8001690:	20000008 	.word	0x20000008
 8001694:	20000010 	.word	0x20000010
 8001698:	2000000c 	.word	0x2000000c

0800169c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016a0:	4b05      	ldr	r3, [pc, #20]	@ (80016b8 <HAL_IncTick+0x1c>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	001a      	movs	r2, r3
 80016a6:	4b05      	ldr	r3, [pc, #20]	@ (80016bc <HAL_IncTick+0x20>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	18d2      	adds	r2, r2, r3
 80016ac:	4b03      	ldr	r3, [pc, #12]	@ (80016bc <HAL_IncTick+0x20>)
 80016ae:	601a      	str	r2, [r3, #0]
}
 80016b0:	46c0      	nop			@ (mov r8, r8)
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	46c0      	nop			@ (mov r8, r8)
 80016b8:	20000010 	.word	0x20000010
 80016bc:	20000248 	.word	0x20000248

080016c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  return uwTick;
 80016c4:	4b02      	ldr	r3, [pc, #8]	@ (80016d0 <HAL_GetTick+0x10>)
 80016c6:	681b      	ldr	r3, [r3, #0]
}
 80016c8:	0018      	movs	r0, r3
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	46c0      	nop			@ (mov r8, r8)
 80016d0:	20000248 	.word	0x20000248

080016d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	0002      	movs	r2, r0
 80016dc:	1dfb      	adds	r3, r7, #7
 80016de:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80016e0:	1dfb      	adds	r3, r7, #7
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80016e6:	d809      	bhi.n	80016fc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016e8:	1dfb      	adds	r3, r7, #7
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	001a      	movs	r2, r3
 80016ee:	231f      	movs	r3, #31
 80016f0:	401a      	ands	r2, r3
 80016f2:	4b04      	ldr	r3, [pc, #16]	@ (8001704 <__NVIC_EnableIRQ+0x30>)
 80016f4:	2101      	movs	r1, #1
 80016f6:	4091      	lsls	r1, r2
 80016f8:	000a      	movs	r2, r1
 80016fa:	601a      	str	r2, [r3, #0]
  }
}
 80016fc:	46c0      	nop			@ (mov r8, r8)
 80016fe:	46bd      	mov	sp, r7
 8001700:	b002      	add	sp, #8
 8001702:	bd80      	pop	{r7, pc}
 8001704:	e000e100 	.word	0xe000e100

08001708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001708:	b590      	push	{r4, r7, lr}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	0002      	movs	r2, r0
 8001710:	6039      	str	r1, [r7, #0]
 8001712:	1dfb      	adds	r3, r7, #7
 8001714:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001716:	1dfb      	adds	r3, r7, #7
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	2b7f      	cmp	r3, #127	@ 0x7f
 800171c:	d828      	bhi.n	8001770 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800171e:	4a2f      	ldr	r2, [pc, #188]	@ (80017dc <__NVIC_SetPriority+0xd4>)
 8001720:	1dfb      	adds	r3, r7, #7
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	b25b      	sxtb	r3, r3
 8001726:	089b      	lsrs	r3, r3, #2
 8001728:	33c0      	adds	r3, #192	@ 0xc0
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	589b      	ldr	r3, [r3, r2]
 800172e:	1dfa      	adds	r2, r7, #7
 8001730:	7812      	ldrb	r2, [r2, #0]
 8001732:	0011      	movs	r1, r2
 8001734:	2203      	movs	r2, #3
 8001736:	400a      	ands	r2, r1
 8001738:	00d2      	lsls	r2, r2, #3
 800173a:	21ff      	movs	r1, #255	@ 0xff
 800173c:	4091      	lsls	r1, r2
 800173e:	000a      	movs	r2, r1
 8001740:	43d2      	mvns	r2, r2
 8001742:	401a      	ands	r2, r3
 8001744:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	019b      	lsls	r3, r3, #6
 800174a:	22ff      	movs	r2, #255	@ 0xff
 800174c:	401a      	ands	r2, r3
 800174e:	1dfb      	adds	r3, r7, #7
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	0018      	movs	r0, r3
 8001754:	2303      	movs	r3, #3
 8001756:	4003      	ands	r3, r0
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800175c:	481f      	ldr	r0, [pc, #124]	@ (80017dc <__NVIC_SetPriority+0xd4>)
 800175e:	1dfb      	adds	r3, r7, #7
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	b25b      	sxtb	r3, r3
 8001764:	089b      	lsrs	r3, r3, #2
 8001766:	430a      	orrs	r2, r1
 8001768:	33c0      	adds	r3, #192	@ 0xc0
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800176e:	e031      	b.n	80017d4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001770:	4a1b      	ldr	r2, [pc, #108]	@ (80017e0 <__NVIC_SetPriority+0xd8>)
 8001772:	1dfb      	adds	r3, r7, #7
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	0019      	movs	r1, r3
 8001778:	230f      	movs	r3, #15
 800177a:	400b      	ands	r3, r1
 800177c:	3b08      	subs	r3, #8
 800177e:	089b      	lsrs	r3, r3, #2
 8001780:	3306      	adds	r3, #6
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	18d3      	adds	r3, r2, r3
 8001786:	3304      	adds	r3, #4
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	1dfa      	adds	r2, r7, #7
 800178c:	7812      	ldrb	r2, [r2, #0]
 800178e:	0011      	movs	r1, r2
 8001790:	2203      	movs	r2, #3
 8001792:	400a      	ands	r2, r1
 8001794:	00d2      	lsls	r2, r2, #3
 8001796:	21ff      	movs	r1, #255	@ 0xff
 8001798:	4091      	lsls	r1, r2
 800179a:	000a      	movs	r2, r1
 800179c:	43d2      	mvns	r2, r2
 800179e:	401a      	ands	r2, r3
 80017a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	019b      	lsls	r3, r3, #6
 80017a6:	22ff      	movs	r2, #255	@ 0xff
 80017a8:	401a      	ands	r2, r3
 80017aa:	1dfb      	adds	r3, r7, #7
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	0018      	movs	r0, r3
 80017b0:	2303      	movs	r3, #3
 80017b2:	4003      	ands	r3, r0
 80017b4:	00db      	lsls	r3, r3, #3
 80017b6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017b8:	4809      	ldr	r0, [pc, #36]	@ (80017e0 <__NVIC_SetPriority+0xd8>)
 80017ba:	1dfb      	adds	r3, r7, #7
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	001c      	movs	r4, r3
 80017c0:	230f      	movs	r3, #15
 80017c2:	4023      	ands	r3, r4
 80017c4:	3b08      	subs	r3, #8
 80017c6:	089b      	lsrs	r3, r3, #2
 80017c8:	430a      	orrs	r2, r1
 80017ca:	3306      	adds	r3, #6
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	18c3      	adds	r3, r0, r3
 80017d0:	3304      	adds	r3, #4
 80017d2:	601a      	str	r2, [r3, #0]
}
 80017d4:	46c0      	nop			@ (mov r8, r8)
 80017d6:	46bd      	mov	sp, r7
 80017d8:	b003      	add	sp, #12
 80017da:	bd90      	pop	{r4, r7, pc}
 80017dc:	e000e100 	.word	0xe000e100
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	1e5a      	subs	r2, r3, #1
 80017f0:	2380      	movs	r3, #128	@ 0x80
 80017f2:	045b      	lsls	r3, r3, #17
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d301      	bcc.n	80017fc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017f8:	2301      	movs	r3, #1
 80017fa:	e010      	b.n	800181e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001828 <SysTick_Config+0x44>)
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	3a01      	subs	r2, #1
 8001802:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001804:	2301      	movs	r3, #1
 8001806:	425b      	negs	r3, r3
 8001808:	2103      	movs	r1, #3
 800180a:	0018      	movs	r0, r3
 800180c:	f7ff ff7c 	bl	8001708 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001810:	4b05      	ldr	r3, [pc, #20]	@ (8001828 <SysTick_Config+0x44>)
 8001812:	2200      	movs	r2, #0
 8001814:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001816:	4b04      	ldr	r3, [pc, #16]	@ (8001828 <SysTick_Config+0x44>)
 8001818:	2207      	movs	r2, #7
 800181a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800181c:	2300      	movs	r3, #0
}
 800181e:	0018      	movs	r0, r3
 8001820:	46bd      	mov	sp, r7
 8001822:	b002      	add	sp, #8
 8001824:	bd80      	pop	{r7, pc}
 8001826:	46c0      	nop			@ (mov r8, r8)
 8001828:	e000e010 	.word	0xe000e010

0800182c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	60b9      	str	r1, [r7, #8]
 8001834:	607a      	str	r2, [r7, #4]
 8001836:	210f      	movs	r1, #15
 8001838:	187b      	adds	r3, r7, r1
 800183a:	1c02      	adds	r2, r0, #0
 800183c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800183e:	68ba      	ldr	r2, [r7, #8]
 8001840:	187b      	adds	r3, r7, r1
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	b25b      	sxtb	r3, r3
 8001846:	0011      	movs	r1, r2
 8001848:	0018      	movs	r0, r3
 800184a:	f7ff ff5d 	bl	8001708 <__NVIC_SetPriority>
}
 800184e:	46c0      	nop			@ (mov r8, r8)
 8001850:	46bd      	mov	sp, r7
 8001852:	b004      	add	sp, #16
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b082      	sub	sp, #8
 800185a:	af00      	add	r7, sp, #0
 800185c:	0002      	movs	r2, r0
 800185e:	1dfb      	adds	r3, r7, #7
 8001860:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001862:	1dfb      	adds	r3, r7, #7
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	b25b      	sxtb	r3, r3
 8001868:	0018      	movs	r0, r3
 800186a:	f7ff ff33 	bl	80016d4 <__NVIC_EnableIRQ>
}
 800186e:	46c0      	nop			@ (mov r8, r8)
 8001870:	46bd      	mov	sp, r7
 8001872:	b002      	add	sp, #8
 8001874:	bd80      	pop	{r7, pc}

08001876 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b082      	sub	sp, #8
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	0018      	movs	r0, r3
 8001882:	f7ff ffaf 	bl	80017e4 <SysTick_Config>
 8001886:	0003      	movs	r3, r0
}
 8001888:	0018      	movs	r0, r3
 800188a:	46bd      	mov	sp, r7
 800188c:	b002      	add	sp, #8
 800188e:	bd80      	pop	{r7, pc}

08001890 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d101      	bne.n	80018a2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e061      	b.n	8001966 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a32      	ldr	r2, [pc, #200]	@ (8001970 <HAL_DMA_Init+0xe0>)
 80018a8:	4694      	mov	ip, r2
 80018aa:	4463      	add	r3, ip
 80018ac:	2114      	movs	r1, #20
 80018ae:	0018      	movs	r0, r3
 80018b0:	f7fe fc34 	bl	800011c <__udivsi3>
 80018b4:	0003      	movs	r3, r0
 80018b6:	009a      	lsls	r2, r3, #2
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4a2d      	ldr	r2, [pc, #180]	@ (8001974 <HAL_DMA_Init+0xe4>)
 80018c0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2225      	movs	r2, #37	@ 0x25
 80018c6:	2102      	movs	r1, #2
 80018c8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	4a28      	ldr	r2, [pc, #160]	@ (8001978 <HAL_DMA_Init+0xe8>)
 80018d6:	4013      	ands	r3, r2
 80018d8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80018e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	691b      	ldr	r3, [r3, #16]
 80018e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a1b      	ldr	r3, [r3, #32]
 8001900:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001902:	68fa      	ldr	r2, [r7, #12]
 8001904:	4313      	orrs	r3, r2
 8001906:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	68fa      	ldr	r2, [r7, #12]
 800190e:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	2380      	movs	r3, #128	@ 0x80
 8001916:	01db      	lsls	r3, r3, #7
 8001918:	429a      	cmp	r2, r3
 800191a:	d018      	beq.n	800194e <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800191c:	4b17      	ldr	r3, [pc, #92]	@ (800197c <HAL_DMA_Init+0xec>)
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001924:	211c      	movs	r1, #28
 8001926:	400b      	ands	r3, r1
 8001928:	210f      	movs	r1, #15
 800192a:	4099      	lsls	r1, r3
 800192c:	000b      	movs	r3, r1
 800192e:	43d9      	mvns	r1, r3
 8001930:	4b12      	ldr	r3, [pc, #72]	@ (800197c <HAL_DMA_Init+0xec>)
 8001932:	400a      	ands	r2, r1
 8001934:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001936:	4b11      	ldr	r3, [pc, #68]	@ (800197c <HAL_DMA_Init+0xec>)
 8001938:	6819      	ldr	r1, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685a      	ldr	r2, [r3, #4]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001942:	201c      	movs	r0, #28
 8001944:	4003      	ands	r3, r0
 8001946:	409a      	lsls	r2, r3
 8001948:	4b0c      	ldr	r3, [pc, #48]	@ (800197c <HAL_DMA_Init+0xec>)
 800194a:	430a      	orrs	r2, r1
 800194c:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2225      	movs	r2, #37	@ 0x25
 8001958:	2101      	movs	r1, #1
 800195a:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2224      	movs	r2, #36	@ 0x24
 8001960:	2100      	movs	r1, #0
 8001962:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001964:	2300      	movs	r3, #0
}
 8001966:	0018      	movs	r0, r3
 8001968:	46bd      	mov	sp, r7
 800196a:	b004      	add	sp, #16
 800196c:	bd80      	pop	{r7, pc}
 800196e:	46c0      	nop			@ (mov r8, r8)
 8001970:	bffdfff8 	.word	0xbffdfff8
 8001974:	40020000 	.word	0x40020000
 8001978:	ffff800f 	.word	0xffff800f
 800197c:	400200a8 	.word	0x400200a8

08001980 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800199c:	221c      	movs	r2, #28
 800199e:	4013      	ands	r3, r2
 80019a0:	2204      	movs	r2, #4
 80019a2:	409a      	lsls	r2, r3
 80019a4:	0013      	movs	r3, r2
 80019a6:	68fa      	ldr	r2, [r7, #12]
 80019a8:	4013      	ands	r3, r2
 80019aa:	d026      	beq.n	80019fa <HAL_DMA_IRQHandler+0x7a>
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	2204      	movs	r2, #4
 80019b0:	4013      	ands	r3, r2
 80019b2:	d022      	beq.n	80019fa <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2220      	movs	r2, #32
 80019bc:	4013      	ands	r3, r2
 80019be:	d107      	bne.n	80019d0 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2104      	movs	r1, #4
 80019cc:	438a      	bics	r2, r1
 80019ce:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019d4:	221c      	movs	r2, #28
 80019d6:	401a      	ands	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019dc:	2104      	movs	r1, #4
 80019de:	4091      	lsls	r1, r2
 80019e0:	000a      	movs	r2, r1
 80019e2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d100      	bne.n	80019ee <HAL_DMA_IRQHandler+0x6e>
 80019ec:	e071      	b.n	8001ad2 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	0010      	movs	r0, r2
 80019f6:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 80019f8:	e06b      	b.n	8001ad2 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019fe:	221c      	movs	r2, #28
 8001a00:	4013      	ands	r3, r2
 8001a02:	2202      	movs	r2, #2
 8001a04:	409a      	lsls	r2, r3
 8001a06:	0013      	movs	r3, r2
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	d02d      	beq.n	8001a6a <HAL_DMA_IRQHandler+0xea>
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	2202      	movs	r2, #2
 8001a12:	4013      	ands	r3, r2
 8001a14:	d029      	beq.n	8001a6a <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2220      	movs	r2, #32
 8001a1e:	4013      	ands	r3, r2
 8001a20:	d10b      	bne.n	8001a3a <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	210a      	movs	r1, #10
 8001a2e:	438a      	bics	r2, r1
 8001a30:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2225      	movs	r2, #37	@ 0x25
 8001a36:	2101      	movs	r1, #1
 8001a38:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a3e:	221c      	movs	r2, #28
 8001a40:	401a      	ands	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a46:	2102      	movs	r1, #2
 8001a48:	4091      	lsls	r1, r2
 8001a4a:	000a      	movs	r2, r1
 8001a4c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2224      	movs	r2, #36	@ 0x24
 8001a52:	2100      	movs	r1, #0
 8001a54:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d039      	beq.n	8001ad2 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	0010      	movs	r0, r2
 8001a66:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001a68:	e033      	b.n	8001ad2 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a6e:	221c      	movs	r2, #28
 8001a70:	4013      	ands	r3, r2
 8001a72:	2208      	movs	r2, #8
 8001a74:	409a      	lsls	r2, r3
 8001a76:	0013      	movs	r3, r2
 8001a78:	68fa      	ldr	r2, [r7, #12]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	d02a      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0x154>
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	2208      	movs	r2, #8
 8001a82:	4013      	ands	r3, r2
 8001a84:	d026      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	210e      	movs	r1, #14
 8001a92:	438a      	bics	r2, r1
 8001a94:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a9a:	221c      	movs	r2, #28
 8001a9c:	401a      	ands	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa2:	2101      	movs	r1, #1
 8001aa4:	4091      	lsls	r1, r2
 8001aa6:	000a      	movs	r2, r1
 8001aa8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2201      	movs	r2, #1
 8001aae:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2225      	movs	r2, #37	@ 0x25
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2224      	movs	r2, #36	@ 0x24
 8001abc:	2100      	movs	r1, #0
 8001abe:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d005      	beq.n	8001ad4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	0010      	movs	r0, r2
 8001ad0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001ad2:	46c0      	nop			@ (mov r8, r8)
 8001ad4:	46c0      	nop			@ (mov r8, r8)
}
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	b004      	add	sp, #16
 8001ada:	bd80      	pop	{r7, pc}

08001adc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001aea:	2300      	movs	r3, #0
 8001aec:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001aee:	2300      	movs	r3, #0
 8001af0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001af2:	e14f      	b.n	8001d94 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2101      	movs	r1, #1
 8001afa:	697a      	ldr	r2, [r7, #20]
 8001afc:	4091      	lsls	r1, r2
 8001afe:	000a      	movs	r2, r1
 8001b00:	4013      	ands	r3, r2
 8001b02:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d100      	bne.n	8001b0c <HAL_GPIO_Init+0x30>
 8001b0a:	e140      	b.n	8001d8e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	2203      	movs	r2, #3
 8001b12:	4013      	ands	r3, r2
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d005      	beq.n	8001b24 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	2203      	movs	r2, #3
 8001b1e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d130      	bne.n	8001b86 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	2203      	movs	r2, #3
 8001b30:	409a      	lsls	r2, r3
 8001b32:	0013      	movs	r3, r2
 8001b34:	43da      	mvns	r2, r3
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	68da      	ldr	r2, [r3, #12]
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	409a      	lsls	r2, r3
 8001b46:	0013      	movs	r3, r2
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	409a      	lsls	r2, r3
 8001b60:	0013      	movs	r3, r2
 8001b62:	43da      	mvns	r2, r3
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	4013      	ands	r3, r2
 8001b68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	091b      	lsrs	r3, r3, #4
 8001b70:	2201      	movs	r2, #1
 8001b72:	401a      	ands	r2, r3
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	409a      	lsls	r2, r3
 8001b78:	0013      	movs	r3, r2
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	2203      	movs	r2, #3
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	2b03      	cmp	r3, #3
 8001b90:	d017      	beq.n	8001bc2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	2203      	movs	r2, #3
 8001b9e:	409a      	lsls	r2, r3
 8001ba0:	0013      	movs	r3, r2
 8001ba2:	43da      	mvns	r2, r3
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	689a      	ldr	r2, [r3, #8]
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	409a      	lsls	r2, r3
 8001bb4:	0013      	movs	r3, r2
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	2203      	movs	r2, #3
 8001bc8:	4013      	ands	r3, r2
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d123      	bne.n	8001c16 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	08da      	lsrs	r2, r3, #3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	3208      	adds	r2, #8
 8001bd6:	0092      	lsls	r2, r2, #2
 8001bd8:	58d3      	ldr	r3, [r2, r3]
 8001bda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	2207      	movs	r2, #7
 8001be0:	4013      	ands	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	220f      	movs	r2, #15
 8001be6:	409a      	lsls	r2, r3
 8001be8:	0013      	movs	r3, r2
 8001bea:	43da      	mvns	r2, r3
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	691a      	ldr	r2, [r3, #16]
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	2107      	movs	r1, #7
 8001bfa:	400b      	ands	r3, r1
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	409a      	lsls	r2, r3
 8001c00:	0013      	movs	r3, r2
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	08da      	lsrs	r2, r3, #3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3208      	adds	r2, #8
 8001c10:	0092      	lsls	r2, r2, #2
 8001c12:	6939      	ldr	r1, [r7, #16]
 8001c14:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	2203      	movs	r2, #3
 8001c22:	409a      	lsls	r2, r3
 8001c24:	0013      	movs	r3, r2
 8001c26:	43da      	mvns	r2, r3
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	2203      	movs	r2, #3
 8001c34:	401a      	ands	r2, r3
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	409a      	lsls	r2, r3
 8001c3c:	0013      	movs	r3, r2
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685a      	ldr	r2, [r3, #4]
 8001c4e:	23c0      	movs	r3, #192	@ 0xc0
 8001c50:	029b      	lsls	r3, r3, #10
 8001c52:	4013      	ands	r3, r2
 8001c54:	d100      	bne.n	8001c58 <HAL_GPIO_Init+0x17c>
 8001c56:	e09a      	b.n	8001d8e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c58:	4b54      	ldr	r3, [pc, #336]	@ (8001dac <HAL_GPIO_Init+0x2d0>)
 8001c5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c5c:	4b53      	ldr	r3, [pc, #332]	@ (8001dac <HAL_GPIO_Init+0x2d0>)
 8001c5e:	2101      	movs	r1, #1
 8001c60:	430a      	orrs	r2, r1
 8001c62:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c64:	4a52      	ldr	r2, [pc, #328]	@ (8001db0 <HAL_GPIO_Init+0x2d4>)
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	089b      	lsrs	r3, r3, #2
 8001c6a:	3302      	adds	r3, #2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	589b      	ldr	r3, [r3, r2]
 8001c70:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	2203      	movs	r2, #3
 8001c76:	4013      	ands	r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	220f      	movs	r2, #15
 8001c7c:	409a      	lsls	r2, r3
 8001c7e:	0013      	movs	r3, r2
 8001c80:	43da      	mvns	r2, r3
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	4013      	ands	r3, r2
 8001c86:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	23a0      	movs	r3, #160	@ 0xa0
 8001c8c:	05db      	lsls	r3, r3, #23
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d019      	beq.n	8001cc6 <HAL_GPIO_Init+0x1ea>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a47      	ldr	r2, [pc, #284]	@ (8001db4 <HAL_GPIO_Init+0x2d8>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d013      	beq.n	8001cc2 <HAL_GPIO_Init+0x1e6>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a46      	ldr	r2, [pc, #280]	@ (8001db8 <HAL_GPIO_Init+0x2dc>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d00d      	beq.n	8001cbe <HAL_GPIO_Init+0x1e2>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a45      	ldr	r2, [pc, #276]	@ (8001dbc <HAL_GPIO_Init+0x2e0>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d007      	beq.n	8001cba <HAL_GPIO_Init+0x1de>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a44      	ldr	r2, [pc, #272]	@ (8001dc0 <HAL_GPIO_Init+0x2e4>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d101      	bne.n	8001cb6 <HAL_GPIO_Init+0x1da>
 8001cb2:	2305      	movs	r3, #5
 8001cb4:	e008      	b.n	8001cc8 <HAL_GPIO_Init+0x1ec>
 8001cb6:	2306      	movs	r3, #6
 8001cb8:	e006      	b.n	8001cc8 <HAL_GPIO_Init+0x1ec>
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e004      	b.n	8001cc8 <HAL_GPIO_Init+0x1ec>
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	e002      	b.n	8001cc8 <HAL_GPIO_Init+0x1ec>
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e000      	b.n	8001cc8 <HAL_GPIO_Init+0x1ec>
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	697a      	ldr	r2, [r7, #20]
 8001cca:	2103      	movs	r1, #3
 8001ccc:	400a      	ands	r2, r1
 8001cce:	0092      	lsls	r2, r2, #2
 8001cd0:	4093      	lsls	r3, r2
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cd8:	4935      	ldr	r1, [pc, #212]	@ (8001db0 <HAL_GPIO_Init+0x2d4>)
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	089b      	lsrs	r3, r3, #2
 8001cde:	3302      	adds	r3, #2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ce6:	4b37      	ldr	r3, [pc, #220]	@ (8001dc4 <HAL_GPIO_Init+0x2e8>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	43da      	mvns	r2, r3
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685a      	ldr	r2, [r3, #4]
 8001cfa:	2380      	movs	r3, #128	@ 0x80
 8001cfc:	035b      	lsls	r3, r3, #13
 8001cfe:	4013      	ands	r3, r2
 8001d00:	d003      	beq.n	8001d0a <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001d0a:	4b2e      	ldr	r3, [pc, #184]	@ (8001dc4 <HAL_GPIO_Init+0x2e8>)
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001d10:	4b2c      	ldr	r3, [pc, #176]	@ (8001dc4 <HAL_GPIO_Init+0x2e8>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	43da      	mvns	r2, r3
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685a      	ldr	r2, [r3, #4]
 8001d24:	2380      	movs	r3, #128	@ 0x80
 8001d26:	039b      	lsls	r3, r3, #14
 8001d28:	4013      	ands	r3, r2
 8001d2a:	d003      	beq.n	8001d34 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001d2c:	693a      	ldr	r2, [r7, #16]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001d34:	4b23      	ldr	r3, [pc, #140]	@ (8001dc4 <HAL_GPIO_Init+0x2e8>)
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001d3a:	4b22      	ldr	r3, [pc, #136]	@ (8001dc4 <HAL_GPIO_Init+0x2e8>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	43da      	mvns	r2, r3
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	4013      	ands	r3, r2
 8001d48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685a      	ldr	r2, [r3, #4]
 8001d4e:	2380      	movs	r3, #128	@ 0x80
 8001d50:	029b      	lsls	r3, r3, #10
 8001d52:	4013      	ands	r3, r2
 8001d54:	d003      	beq.n	8001d5e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d5e:	4b19      	ldr	r3, [pc, #100]	@ (8001dc4 <HAL_GPIO_Init+0x2e8>)
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d64:	4b17      	ldr	r3, [pc, #92]	@ (8001dc4 <HAL_GPIO_Init+0x2e8>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	43da      	mvns	r2, r3
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	4013      	ands	r3, r2
 8001d72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685a      	ldr	r2, [r3, #4]
 8001d78:	2380      	movs	r3, #128	@ 0x80
 8001d7a:	025b      	lsls	r3, r3, #9
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	d003      	beq.n	8001d88 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d88:	4b0e      	ldr	r3, [pc, #56]	@ (8001dc4 <HAL_GPIO_Init+0x2e8>)
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	3301      	adds	r3, #1
 8001d92:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	40da      	lsrs	r2, r3
 8001d9c:	1e13      	subs	r3, r2, #0
 8001d9e:	d000      	beq.n	8001da2 <HAL_GPIO_Init+0x2c6>
 8001da0:	e6a8      	b.n	8001af4 <HAL_GPIO_Init+0x18>
  }
}
 8001da2:	46c0      	nop			@ (mov r8, r8)
 8001da4:	46c0      	nop			@ (mov r8, r8)
 8001da6:	46bd      	mov	sp, r7
 8001da8:	b006      	add	sp, #24
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	40021000 	.word	0x40021000
 8001db0:	40010000 	.word	0x40010000
 8001db4:	50000400 	.word	0x50000400
 8001db8:	50000800 	.word	0x50000800
 8001dbc:	50000c00 	.word	0x50000c00
 8001dc0:	50001c00 	.word	0x50001c00
 8001dc4:	40010400 	.word	0x40010400

08001dc8 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	000a      	movs	r2, r1
 8001dd2:	1cbb      	adds	r3, r7, #2
 8001dd4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	1cba      	adds	r2, r7, #2
 8001ddc:	8812      	ldrh	r2, [r2, #0]
 8001dde:	4013      	ands	r3, r2
 8001de0:	d004      	beq.n	8001dec <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001de2:	230f      	movs	r3, #15
 8001de4:	18fb      	adds	r3, r7, r3
 8001de6:	2201      	movs	r2, #1
 8001de8:	701a      	strb	r2, [r3, #0]
 8001dea:	e003      	b.n	8001df4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dec:	230f      	movs	r3, #15
 8001dee:	18fb      	adds	r3, r7, r3
 8001df0:	2200      	movs	r2, #0
 8001df2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001df4:	230f      	movs	r3, #15
 8001df6:	18fb      	adds	r3, r7, r3
 8001df8:	781b      	ldrb	r3, [r3, #0]
}
 8001dfa:	0018      	movs	r0, r3
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	b004      	add	sp, #16
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b082      	sub	sp, #8
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
 8001e0a:	0008      	movs	r0, r1
 8001e0c:	0011      	movs	r1, r2
 8001e0e:	1cbb      	adds	r3, r7, #2
 8001e10:	1c02      	adds	r2, r0, #0
 8001e12:	801a      	strh	r2, [r3, #0]
 8001e14:	1c7b      	adds	r3, r7, #1
 8001e16:	1c0a      	adds	r2, r1, #0
 8001e18:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e1a:	1c7b      	adds	r3, r7, #1
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d004      	beq.n	8001e2c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e22:	1cbb      	adds	r3, r7, #2
 8001e24:	881a      	ldrh	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001e2a:	e003      	b.n	8001e34 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001e2c:	1cbb      	adds	r3, r7, #2
 8001e2e:	881a      	ldrh	r2, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001e34:	46c0      	nop			@ (mov r8, r8)
 8001e36:	46bd      	mov	sp, r7
 8001e38:	b002      	add	sp, #8
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	000a      	movs	r2, r1
 8001e46:	1cbb      	adds	r3, r7, #2
 8001e48:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e50:	1cbb      	adds	r3, r7, #2
 8001e52:	881b      	ldrh	r3, [r3, #0]
 8001e54:	68fa      	ldr	r2, [r7, #12]
 8001e56:	4013      	ands	r3, r2
 8001e58:	041a      	lsls	r2, r3, #16
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	1cb9      	adds	r1, r7, #2
 8001e60:	8809      	ldrh	r1, [r1, #0]
 8001e62:	400b      	ands	r3, r1
 8001e64:	431a      	orrs	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	619a      	str	r2, [r3, #24]
}
 8001e6a:	46c0      	nop			@ (mov r8, r8)
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	b004      	add	sp, #16
 8001e70:	bd80      	pop	{r7, pc}
	...

08001e74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	0002      	movs	r2, r0
 8001e7c:	1dbb      	adds	r3, r7, #6
 8001e7e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001e80:	4b09      	ldr	r3, [pc, #36]	@ (8001ea8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001e82:	695b      	ldr	r3, [r3, #20]
 8001e84:	1dba      	adds	r2, r7, #6
 8001e86:	8812      	ldrh	r2, [r2, #0]
 8001e88:	4013      	ands	r3, r2
 8001e8a:	d008      	beq.n	8001e9e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e8c:	4b06      	ldr	r3, [pc, #24]	@ (8001ea8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001e8e:	1dba      	adds	r2, r7, #6
 8001e90:	8812      	ldrh	r2, [r2, #0]
 8001e92:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e94:	1dbb      	adds	r3, r7, #6
 8001e96:	881b      	ldrh	r3, [r3, #0]
 8001e98:	0018      	movs	r0, r3
 8001e9a:	f7ff f96f 	bl	800117c <HAL_GPIO_EXTI_Callback>
  }
}
 8001e9e:	46c0      	nop			@ (mov r8, r8)
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	b002      	add	sp, #8
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	46c0      	nop			@ (mov r8, r8)
 8001ea8:	40010400 	.word	0x40010400

08001eac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d101      	bne.n	8001ebe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e082      	b.n	8001fc4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2241      	movs	r2, #65	@ 0x41
 8001ec2:	5c9b      	ldrb	r3, [r3, r2]
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d107      	bne.n	8001eda <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2240      	movs	r2, #64	@ 0x40
 8001ece:	2100      	movs	r1, #0
 8001ed0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	0018      	movs	r0, r3
 8001ed6:	f7ff f983 	bl	80011e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2241      	movs	r2, #65	@ 0x41
 8001ede:	2124      	movs	r1, #36	@ 0x24
 8001ee0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2101      	movs	r1, #1
 8001eee:	438a      	bics	r2, r1
 8001ef0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685a      	ldr	r2, [r3, #4]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4934      	ldr	r1, [pc, #208]	@ (8001fcc <HAL_I2C_Init+0x120>)
 8001efc:	400a      	ands	r2, r1
 8001efe:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	689a      	ldr	r2, [r3, #8]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4931      	ldr	r1, [pc, #196]	@ (8001fd0 <HAL_I2C_Init+0x124>)
 8001f0c:	400a      	ands	r2, r1
 8001f0e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d108      	bne.n	8001f2a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2180      	movs	r1, #128	@ 0x80
 8001f22:	0209      	lsls	r1, r1, #8
 8001f24:	430a      	orrs	r2, r1
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	e007      	b.n	8001f3a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689a      	ldr	r2, [r3, #8]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2184      	movs	r1, #132	@ 0x84
 8001f34:	0209      	lsls	r1, r1, #8
 8001f36:	430a      	orrs	r2, r1
 8001f38:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d104      	bne.n	8001f4c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2280      	movs	r2, #128	@ 0x80
 8001f48:	0112      	lsls	r2, r2, #4
 8001f4a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	685a      	ldr	r2, [r3, #4]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	491f      	ldr	r1, [pc, #124]	@ (8001fd4 <HAL_I2C_Init+0x128>)
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68da      	ldr	r2, [r3, #12]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	491a      	ldr	r1, [pc, #104]	@ (8001fd0 <HAL_I2C_Init+0x124>)
 8001f68:	400a      	ands	r2, r1
 8001f6a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	691a      	ldr	r2, [r3, #16]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	695b      	ldr	r3, [r3, #20]
 8001f74:	431a      	orrs	r2, r3
 8001f76:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	430a      	orrs	r2, r1
 8001f84:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	69d9      	ldr	r1, [r3, #28]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a1a      	ldr	r2, [r3, #32]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	430a      	orrs	r2, r1
 8001f94:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2101      	movs	r1, #1
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2241      	movs	r2, #65	@ 0x41
 8001fb0:	2120      	movs	r1, #32
 8001fb2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2242      	movs	r2, #66	@ 0x42
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	0018      	movs	r0, r3
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	b002      	add	sp, #8
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	f0ffffff 	.word	0xf0ffffff
 8001fd0:	ffff7fff 	.word	0xffff7fff
 8001fd4:	02008000 	.word	0x02008000

08001fd8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001fd8:	b590      	push	{r4, r7, lr}
 8001fda:	b089      	sub	sp, #36	@ 0x24
 8001fdc:	af02      	add	r7, sp, #8
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	0008      	movs	r0, r1
 8001fe2:	607a      	str	r2, [r7, #4]
 8001fe4:	0019      	movs	r1, r3
 8001fe6:	230a      	movs	r3, #10
 8001fe8:	18fb      	adds	r3, r7, r3
 8001fea:	1c02      	adds	r2, r0, #0
 8001fec:	801a      	strh	r2, [r3, #0]
 8001fee:	2308      	movs	r3, #8
 8001ff0:	18fb      	adds	r3, r7, r3
 8001ff2:	1c0a      	adds	r2, r1, #0
 8001ff4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2241      	movs	r2, #65	@ 0x41
 8001ffa:	5c9b      	ldrb	r3, [r3, r2]
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b20      	cmp	r3, #32
 8002000:	d000      	beq.n	8002004 <HAL_I2C_Master_Transmit+0x2c>
 8002002:	e0e7      	b.n	80021d4 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2240      	movs	r2, #64	@ 0x40
 8002008:	5c9b      	ldrb	r3, [r3, r2]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d101      	bne.n	8002012 <HAL_I2C_Master_Transmit+0x3a>
 800200e:	2302      	movs	r3, #2
 8002010:	e0e1      	b.n	80021d6 <HAL_I2C_Master_Transmit+0x1fe>
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2240      	movs	r2, #64	@ 0x40
 8002016:	2101      	movs	r1, #1
 8002018:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800201a:	f7ff fb51 	bl	80016c0 <HAL_GetTick>
 800201e:	0003      	movs	r3, r0
 8002020:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002022:	2380      	movs	r3, #128	@ 0x80
 8002024:	0219      	lsls	r1, r3, #8
 8002026:	68f8      	ldr	r0, [r7, #12]
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	9300      	str	r3, [sp, #0]
 800202c:	2319      	movs	r3, #25
 800202e:	2201      	movs	r2, #1
 8002030:	f000 f8fc 	bl	800222c <I2C_WaitOnFlagUntilTimeout>
 8002034:	1e03      	subs	r3, r0, #0
 8002036:	d001      	beq.n	800203c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e0cc      	b.n	80021d6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2241      	movs	r2, #65	@ 0x41
 8002040:	2121      	movs	r1, #33	@ 0x21
 8002042:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2242      	movs	r2, #66	@ 0x42
 8002048:	2110      	movs	r1, #16
 800204a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2200      	movs	r2, #0
 8002050:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2208      	movs	r2, #8
 800205c:	18ba      	adds	r2, r7, r2
 800205e:	8812      	ldrh	r2, [r2, #0]
 8002060:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2200      	movs	r2, #0
 8002066:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800206c:	b29b      	uxth	r3, r3
 800206e:	2bff      	cmp	r3, #255	@ 0xff
 8002070:	d911      	bls.n	8002096 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	22ff      	movs	r2, #255	@ 0xff
 8002076:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800207c:	b2da      	uxtb	r2, r3
 800207e:	2380      	movs	r3, #128	@ 0x80
 8002080:	045c      	lsls	r4, r3, #17
 8002082:	230a      	movs	r3, #10
 8002084:	18fb      	adds	r3, r7, r3
 8002086:	8819      	ldrh	r1, [r3, #0]
 8002088:	68f8      	ldr	r0, [r7, #12]
 800208a:	4b55      	ldr	r3, [pc, #340]	@ (80021e0 <HAL_I2C_Master_Transmit+0x208>)
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	0023      	movs	r3, r4
 8002090:	f000 fa9c 	bl	80025cc <I2C_TransferConfig>
 8002094:	e075      	b.n	8002182 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800209a:	b29a      	uxth	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020a4:	b2da      	uxtb	r2, r3
 80020a6:	2380      	movs	r3, #128	@ 0x80
 80020a8:	049c      	lsls	r4, r3, #18
 80020aa:	230a      	movs	r3, #10
 80020ac:	18fb      	adds	r3, r7, r3
 80020ae:	8819      	ldrh	r1, [r3, #0]
 80020b0:	68f8      	ldr	r0, [r7, #12]
 80020b2:	4b4b      	ldr	r3, [pc, #300]	@ (80021e0 <HAL_I2C_Master_Transmit+0x208>)
 80020b4:	9300      	str	r3, [sp, #0]
 80020b6:	0023      	movs	r3, r4
 80020b8:	f000 fa88 	bl	80025cc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80020bc:	e061      	b.n	8002182 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	0018      	movs	r0, r3
 80020c6:	f000 f8ff 	bl	80022c8 <I2C_WaitOnTXISFlagUntilTimeout>
 80020ca:	1e03      	subs	r3, r0, #0
 80020cc:	d001      	beq.n	80020d2 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e081      	b.n	80021d6 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d6:	781a      	ldrb	r2, [r3, #0]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020e2:	1c5a      	adds	r2, r3, #1
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	3b01      	subs	r3, #1
 80020f0:	b29a      	uxth	r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020fa:	3b01      	subs	r3, #1
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002106:	b29b      	uxth	r3, r3
 8002108:	2b00      	cmp	r3, #0
 800210a:	d03a      	beq.n	8002182 <HAL_I2C_Master_Transmit+0x1aa>
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002110:	2b00      	cmp	r3, #0
 8002112:	d136      	bne.n	8002182 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002114:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002116:	68f8      	ldr	r0, [r7, #12]
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	9300      	str	r3, [sp, #0]
 800211c:	0013      	movs	r3, r2
 800211e:	2200      	movs	r2, #0
 8002120:	2180      	movs	r1, #128	@ 0x80
 8002122:	f000 f883 	bl	800222c <I2C_WaitOnFlagUntilTimeout>
 8002126:	1e03      	subs	r3, r0, #0
 8002128:	d001      	beq.n	800212e <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e053      	b.n	80021d6 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002132:	b29b      	uxth	r3, r3
 8002134:	2bff      	cmp	r3, #255	@ 0xff
 8002136:	d911      	bls.n	800215c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	22ff      	movs	r2, #255	@ 0xff
 800213c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002142:	b2da      	uxtb	r2, r3
 8002144:	2380      	movs	r3, #128	@ 0x80
 8002146:	045c      	lsls	r4, r3, #17
 8002148:	230a      	movs	r3, #10
 800214a:	18fb      	adds	r3, r7, r3
 800214c:	8819      	ldrh	r1, [r3, #0]
 800214e:	68f8      	ldr	r0, [r7, #12]
 8002150:	2300      	movs	r3, #0
 8002152:	9300      	str	r3, [sp, #0]
 8002154:	0023      	movs	r3, r4
 8002156:	f000 fa39 	bl	80025cc <I2C_TransferConfig>
 800215a:	e012      	b.n	8002182 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002160:	b29a      	uxth	r2, r3
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800216a:	b2da      	uxtb	r2, r3
 800216c:	2380      	movs	r3, #128	@ 0x80
 800216e:	049c      	lsls	r4, r3, #18
 8002170:	230a      	movs	r3, #10
 8002172:	18fb      	adds	r3, r7, r3
 8002174:	8819      	ldrh	r1, [r3, #0]
 8002176:	68f8      	ldr	r0, [r7, #12]
 8002178:	2300      	movs	r3, #0
 800217a:	9300      	str	r3, [sp, #0]
 800217c:	0023      	movs	r3, r4
 800217e:	f000 fa25 	bl	80025cc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002186:	b29b      	uxth	r3, r3
 8002188:	2b00      	cmp	r3, #0
 800218a:	d198      	bne.n	80020be <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800218c:	697a      	ldr	r2, [r7, #20]
 800218e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	0018      	movs	r0, r3
 8002194:	f000 f8de 	bl	8002354 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002198:	1e03      	subs	r3, r0, #0
 800219a:	d001      	beq.n	80021a0 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e01a      	b.n	80021d6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2220      	movs	r2, #32
 80021a6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	685a      	ldr	r2, [r3, #4]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	490c      	ldr	r1, [pc, #48]	@ (80021e4 <HAL_I2C_Master_Transmit+0x20c>)
 80021b4:	400a      	ands	r2, r1
 80021b6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2241      	movs	r2, #65	@ 0x41
 80021bc:	2120      	movs	r1, #32
 80021be:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2242      	movs	r2, #66	@ 0x42
 80021c4:	2100      	movs	r1, #0
 80021c6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2240      	movs	r2, #64	@ 0x40
 80021cc:	2100      	movs	r1, #0
 80021ce:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80021d0:	2300      	movs	r3, #0
 80021d2:	e000      	b.n	80021d6 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80021d4:	2302      	movs	r3, #2
  }
}
 80021d6:	0018      	movs	r0, r3
 80021d8:	46bd      	mov	sp, r7
 80021da:	b007      	add	sp, #28
 80021dc:	bd90      	pop	{r4, r7, pc}
 80021de:	46c0      	nop			@ (mov r8, r8)
 80021e0:	80002000 	.word	0x80002000
 80021e4:	fe00e800 	.word	0xfe00e800

080021e8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	2202      	movs	r2, #2
 80021f8:	4013      	ands	r3, r2
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d103      	bne.n	8002206 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2200      	movs	r2, #0
 8002204:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	2201      	movs	r2, #1
 800220e:	4013      	ands	r3, r2
 8002210:	2b01      	cmp	r3, #1
 8002212:	d007      	beq.n	8002224 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	699a      	ldr	r2, [r3, #24]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2101      	movs	r1, #1
 8002220:	430a      	orrs	r2, r1
 8002222:	619a      	str	r2, [r3, #24]
  }
}
 8002224:	46c0      	nop			@ (mov r8, r8)
 8002226:	46bd      	mov	sp, r7
 8002228:	b002      	add	sp, #8
 800222a:	bd80      	pop	{r7, pc}

0800222c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	603b      	str	r3, [r7, #0]
 8002238:	1dfb      	adds	r3, r7, #7
 800223a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800223c:	e030      	b.n	80022a0 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	3301      	adds	r3, #1
 8002242:	d02d      	beq.n	80022a0 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002244:	f7ff fa3c 	bl	80016c0 <HAL_GetTick>
 8002248:	0002      	movs	r2, r0
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	429a      	cmp	r2, r3
 8002252:	d302      	bcc.n	800225a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d122      	bne.n	80022a0 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	68ba      	ldr	r2, [r7, #8]
 8002262:	4013      	ands	r3, r2
 8002264:	68ba      	ldr	r2, [r7, #8]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	425a      	negs	r2, r3
 800226a:	4153      	adcs	r3, r2
 800226c:	b2db      	uxtb	r3, r3
 800226e:	001a      	movs	r2, r3
 8002270:	1dfb      	adds	r3, r7, #7
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	429a      	cmp	r2, r3
 8002276:	d113      	bne.n	80022a0 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800227c:	2220      	movs	r2, #32
 800227e:	431a      	orrs	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2241      	movs	r2, #65	@ 0x41
 8002288:	2120      	movs	r1, #32
 800228a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2242      	movs	r2, #66	@ 0x42
 8002290:	2100      	movs	r1, #0
 8002292:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2240      	movs	r2, #64	@ 0x40
 8002298:	2100      	movs	r1, #0
 800229a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e00f      	b.n	80022c0 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	68ba      	ldr	r2, [r7, #8]
 80022a8:	4013      	ands	r3, r2
 80022aa:	68ba      	ldr	r2, [r7, #8]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	425a      	negs	r2, r3
 80022b0:	4153      	adcs	r3, r2
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	001a      	movs	r2, r3
 80022b6:	1dfb      	adds	r3, r7, #7
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d0bf      	beq.n	800223e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	0018      	movs	r0, r3
 80022c2:	46bd      	mov	sp, r7
 80022c4:	b004      	add	sp, #16
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80022d4:	e032      	b.n	800233c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	68b9      	ldr	r1, [r7, #8]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	0018      	movs	r0, r3
 80022de:	f000 f87d 	bl	80023dc <I2C_IsErrorOccurred>
 80022e2:	1e03      	subs	r3, r0, #0
 80022e4:	d001      	beq.n	80022ea <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e030      	b.n	800234c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	3301      	adds	r3, #1
 80022ee:	d025      	beq.n	800233c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022f0:	f7ff f9e6 	bl	80016c0 <HAL_GetTick>
 80022f4:	0002      	movs	r2, r0
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	68ba      	ldr	r2, [r7, #8]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d302      	bcc.n	8002306 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d11a      	bne.n	800233c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	2202      	movs	r2, #2
 800230e:	4013      	ands	r3, r2
 8002310:	2b02      	cmp	r3, #2
 8002312:	d013      	beq.n	800233c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002318:	2220      	movs	r2, #32
 800231a:	431a      	orrs	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2241      	movs	r2, #65	@ 0x41
 8002324:	2120      	movs	r1, #32
 8002326:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2242      	movs	r2, #66	@ 0x42
 800232c:	2100      	movs	r1, #0
 800232e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2240      	movs	r2, #64	@ 0x40
 8002334:	2100      	movs	r1, #0
 8002336:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e007      	b.n	800234c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	2202      	movs	r2, #2
 8002344:	4013      	ands	r3, r2
 8002346:	2b02      	cmp	r3, #2
 8002348:	d1c5      	bne.n	80022d6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800234a:	2300      	movs	r3, #0
}
 800234c:	0018      	movs	r0, r3
 800234e:	46bd      	mov	sp, r7
 8002350:	b004      	add	sp, #16
 8002352:	bd80      	pop	{r7, pc}

08002354 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002360:	e02f      	b.n	80023c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	68b9      	ldr	r1, [r7, #8]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	0018      	movs	r0, r3
 800236a:	f000 f837 	bl	80023dc <I2C_IsErrorOccurred>
 800236e:	1e03      	subs	r3, r0, #0
 8002370:	d001      	beq.n	8002376 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e02d      	b.n	80023d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002376:	f7ff f9a3 	bl	80016c0 <HAL_GetTick>
 800237a:	0002      	movs	r2, r0
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	68ba      	ldr	r2, [r7, #8]
 8002382:	429a      	cmp	r2, r3
 8002384:	d302      	bcc.n	800238c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d11a      	bne.n	80023c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	2220      	movs	r2, #32
 8002394:	4013      	ands	r3, r2
 8002396:	2b20      	cmp	r3, #32
 8002398:	d013      	beq.n	80023c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800239e:	2220      	movs	r2, #32
 80023a0:	431a      	orrs	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2241      	movs	r2, #65	@ 0x41
 80023aa:	2120      	movs	r1, #32
 80023ac:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2242      	movs	r2, #66	@ 0x42
 80023b2:	2100      	movs	r1, #0
 80023b4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2240      	movs	r2, #64	@ 0x40
 80023ba:	2100      	movs	r1, #0
 80023bc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e007      	b.n	80023d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	2220      	movs	r2, #32
 80023ca:	4013      	ands	r3, r2
 80023cc:	2b20      	cmp	r3, #32
 80023ce:	d1c8      	bne.n	8002362 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	0018      	movs	r0, r3
 80023d4:	46bd      	mov	sp, r7
 80023d6:	b004      	add	sp, #16
 80023d8:	bd80      	pop	{r7, pc}
	...

080023dc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b08a      	sub	sp, #40	@ 0x28
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023e8:	2327      	movs	r3, #39	@ 0x27
 80023ea:	18fb      	adds	r3, r7, r3
 80023ec:	2200      	movs	r2, #0
 80023ee:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80023f8:	2300      	movs	r3, #0
 80023fa:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	2210      	movs	r2, #16
 8002404:	4013      	ands	r3, r2
 8002406:	d100      	bne.n	800240a <I2C_IsErrorOccurred+0x2e>
 8002408:	e079      	b.n	80024fe <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2210      	movs	r2, #16
 8002410:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002412:	e057      	b.n	80024c4 <I2C_IsErrorOccurred+0xe8>
 8002414:	2227      	movs	r2, #39	@ 0x27
 8002416:	18bb      	adds	r3, r7, r2
 8002418:	18ba      	adds	r2, r7, r2
 800241a:	7812      	ldrb	r2, [r2, #0]
 800241c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	3301      	adds	r3, #1
 8002422:	d04f      	beq.n	80024c4 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002424:	f7ff f94c 	bl	80016c0 <HAL_GetTick>
 8002428:	0002      	movs	r2, r0
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	68ba      	ldr	r2, [r7, #8]
 8002430:	429a      	cmp	r2, r3
 8002432:	d302      	bcc.n	800243a <I2C_IsErrorOccurred+0x5e>
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d144      	bne.n	80024c4 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	685a      	ldr	r2, [r3, #4]
 8002440:	2380      	movs	r3, #128	@ 0x80
 8002442:	01db      	lsls	r3, r3, #7
 8002444:	4013      	ands	r3, r2
 8002446:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002448:	2013      	movs	r0, #19
 800244a:	183b      	adds	r3, r7, r0
 800244c:	68fa      	ldr	r2, [r7, #12]
 800244e:	2142      	movs	r1, #66	@ 0x42
 8002450:	5c52      	ldrb	r2, [r2, r1]
 8002452:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	699a      	ldr	r2, [r3, #24]
 800245a:	2380      	movs	r3, #128	@ 0x80
 800245c:	021b      	lsls	r3, r3, #8
 800245e:	401a      	ands	r2, r3
 8002460:	2380      	movs	r3, #128	@ 0x80
 8002462:	021b      	lsls	r3, r3, #8
 8002464:	429a      	cmp	r2, r3
 8002466:	d126      	bne.n	80024b6 <I2C_IsErrorOccurred+0xda>
 8002468:	697a      	ldr	r2, [r7, #20]
 800246a:	2380      	movs	r3, #128	@ 0x80
 800246c:	01db      	lsls	r3, r3, #7
 800246e:	429a      	cmp	r2, r3
 8002470:	d021      	beq.n	80024b6 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8002472:	183b      	adds	r3, r7, r0
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b20      	cmp	r3, #32
 8002478:	d01d      	beq.n	80024b6 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	685a      	ldr	r2, [r3, #4]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2180      	movs	r1, #128	@ 0x80
 8002486:	01c9      	lsls	r1, r1, #7
 8002488:	430a      	orrs	r2, r1
 800248a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800248c:	f7ff f918 	bl	80016c0 <HAL_GetTick>
 8002490:	0003      	movs	r3, r0
 8002492:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002494:	e00f      	b.n	80024b6 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002496:	f7ff f913 	bl	80016c0 <HAL_GetTick>
 800249a:	0002      	movs	r2, r0
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b19      	cmp	r3, #25
 80024a2:	d908      	bls.n	80024b6 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80024a4:	6a3b      	ldr	r3, [r7, #32]
 80024a6:	2220      	movs	r2, #32
 80024a8:	4313      	orrs	r3, r2
 80024aa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80024ac:	2327      	movs	r3, #39	@ 0x27
 80024ae:	18fb      	adds	r3, r7, r3
 80024b0:	2201      	movs	r2, #1
 80024b2:	701a      	strb	r2, [r3, #0]

              break;
 80024b4:	e006      	b.n	80024c4 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	2220      	movs	r2, #32
 80024be:	4013      	ands	r3, r2
 80024c0:	2b20      	cmp	r3, #32
 80024c2:	d1e8      	bne.n	8002496 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	2220      	movs	r2, #32
 80024cc:	4013      	ands	r3, r2
 80024ce:	2b20      	cmp	r3, #32
 80024d0:	d004      	beq.n	80024dc <I2C_IsErrorOccurred+0x100>
 80024d2:	2327      	movs	r3, #39	@ 0x27
 80024d4:	18fb      	adds	r3, r7, r3
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d09b      	beq.n	8002414 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80024dc:	2327      	movs	r3, #39	@ 0x27
 80024de:	18fb      	adds	r3, r7, r3
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d103      	bne.n	80024ee <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2220      	movs	r2, #32
 80024ec:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80024ee:	6a3b      	ldr	r3, [r7, #32]
 80024f0:	2204      	movs	r2, #4
 80024f2:	4313      	orrs	r3, r2
 80024f4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80024f6:	2327      	movs	r3, #39	@ 0x27
 80024f8:	18fb      	adds	r3, r7, r3
 80024fa:	2201      	movs	r2, #1
 80024fc:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	2380      	movs	r3, #128	@ 0x80
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	4013      	ands	r3, r2
 800250e:	d00c      	beq.n	800252a <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002510:	6a3b      	ldr	r3, [r7, #32]
 8002512:	2201      	movs	r2, #1
 8002514:	4313      	orrs	r3, r2
 8002516:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2280      	movs	r2, #128	@ 0x80
 800251e:	0052      	lsls	r2, r2, #1
 8002520:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002522:	2327      	movs	r3, #39	@ 0x27
 8002524:	18fb      	adds	r3, r7, r3
 8002526:	2201      	movs	r2, #1
 8002528:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	2380      	movs	r3, #128	@ 0x80
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	4013      	ands	r3, r2
 8002532:	d00c      	beq.n	800254e <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002534:	6a3b      	ldr	r3, [r7, #32]
 8002536:	2208      	movs	r2, #8
 8002538:	4313      	orrs	r3, r2
 800253a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2280      	movs	r2, #128	@ 0x80
 8002542:	00d2      	lsls	r2, r2, #3
 8002544:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002546:	2327      	movs	r3, #39	@ 0x27
 8002548:	18fb      	adds	r3, r7, r3
 800254a:	2201      	movs	r2, #1
 800254c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	2380      	movs	r3, #128	@ 0x80
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4013      	ands	r3, r2
 8002556:	d00c      	beq.n	8002572 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002558:	6a3b      	ldr	r3, [r7, #32]
 800255a:	2202      	movs	r2, #2
 800255c:	4313      	orrs	r3, r2
 800255e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2280      	movs	r2, #128	@ 0x80
 8002566:	0092      	lsls	r2, r2, #2
 8002568:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800256a:	2327      	movs	r3, #39	@ 0x27
 800256c:	18fb      	adds	r3, r7, r3
 800256e:	2201      	movs	r2, #1
 8002570:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002572:	2327      	movs	r3, #39	@ 0x27
 8002574:	18fb      	adds	r3, r7, r3
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d01d      	beq.n	80025b8 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	0018      	movs	r0, r3
 8002580:	f7ff fe32 	bl	80021e8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	685a      	ldr	r2, [r3, #4]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	490e      	ldr	r1, [pc, #56]	@ (80025c8 <I2C_IsErrorOccurred+0x1ec>)
 8002590:	400a      	ands	r2, r1
 8002592:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002598:	6a3b      	ldr	r3, [r7, #32]
 800259a:	431a      	orrs	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2241      	movs	r2, #65	@ 0x41
 80025a4:	2120      	movs	r1, #32
 80025a6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2242      	movs	r2, #66	@ 0x42
 80025ac:	2100      	movs	r1, #0
 80025ae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2240      	movs	r2, #64	@ 0x40
 80025b4:	2100      	movs	r1, #0
 80025b6:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80025b8:	2327      	movs	r3, #39	@ 0x27
 80025ba:	18fb      	adds	r3, r7, r3
 80025bc:	781b      	ldrb	r3, [r3, #0]
}
 80025be:	0018      	movs	r0, r3
 80025c0:	46bd      	mov	sp, r7
 80025c2:	b00a      	add	sp, #40	@ 0x28
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	46c0      	nop			@ (mov r8, r8)
 80025c8:	fe00e800 	.word	0xfe00e800

080025cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80025cc:	b590      	push	{r4, r7, lr}
 80025ce:	b087      	sub	sp, #28
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	0008      	movs	r0, r1
 80025d6:	0011      	movs	r1, r2
 80025d8:	607b      	str	r3, [r7, #4]
 80025da:	240a      	movs	r4, #10
 80025dc:	193b      	adds	r3, r7, r4
 80025de:	1c02      	adds	r2, r0, #0
 80025e0:	801a      	strh	r2, [r3, #0]
 80025e2:	2009      	movs	r0, #9
 80025e4:	183b      	adds	r3, r7, r0
 80025e6:	1c0a      	adds	r2, r1, #0
 80025e8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80025ea:	193b      	adds	r3, r7, r4
 80025ec:	881b      	ldrh	r3, [r3, #0]
 80025ee:	059b      	lsls	r3, r3, #22
 80025f0:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80025f2:	183b      	adds	r3, r7, r0
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	0419      	lsls	r1, r3, #16
 80025f8:	23ff      	movs	r3, #255	@ 0xff
 80025fa:	041b      	lsls	r3, r3, #16
 80025fc:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80025fe:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002606:	4313      	orrs	r3, r2
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	085b      	lsrs	r3, r3, #1
 800260c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002616:	0d51      	lsrs	r1, r2, #21
 8002618:	2280      	movs	r2, #128	@ 0x80
 800261a:	00d2      	lsls	r2, r2, #3
 800261c:	400a      	ands	r2, r1
 800261e:	4907      	ldr	r1, [pc, #28]	@ (800263c <I2C_TransferConfig+0x70>)
 8002620:	430a      	orrs	r2, r1
 8002622:	43d2      	mvns	r2, r2
 8002624:	401a      	ands	r2, r3
 8002626:	0011      	movs	r1, r2
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	697a      	ldr	r2, [r7, #20]
 800262e:	430a      	orrs	r2, r1
 8002630:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002632:	46c0      	nop			@ (mov r8, r8)
 8002634:	46bd      	mov	sp, r7
 8002636:	b007      	add	sp, #28
 8002638:	bd90      	pop	{r4, r7, pc}
 800263a:	46c0      	nop			@ (mov r8, r8)
 800263c:	03ff63ff 	.word	0x03ff63ff

08002640 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2241      	movs	r2, #65	@ 0x41
 800264e:	5c9b      	ldrb	r3, [r3, r2]
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b20      	cmp	r3, #32
 8002654:	d138      	bne.n	80026c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2240      	movs	r2, #64	@ 0x40
 800265a:	5c9b      	ldrb	r3, [r3, r2]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d101      	bne.n	8002664 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002660:	2302      	movs	r3, #2
 8002662:	e032      	b.n	80026ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2240      	movs	r2, #64	@ 0x40
 8002668:	2101      	movs	r1, #1
 800266a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2241      	movs	r2, #65	@ 0x41
 8002670:	2124      	movs	r1, #36	@ 0x24
 8002672:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2101      	movs	r1, #1
 8002680:	438a      	bics	r2, r1
 8002682:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4911      	ldr	r1, [pc, #68]	@ (80026d4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002690:	400a      	ands	r2, r1
 8002692:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6819      	ldr	r1, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	683a      	ldr	r2, [r7, #0]
 80026a0:	430a      	orrs	r2, r1
 80026a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2101      	movs	r1, #1
 80026b0:	430a      	orrs	r2, r1
 80026b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2241      	movs	r2, #65	@ 0x41
 80026b8:	2120      	movs	r1, #32
 80026ba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2240      	movs	r2, #64	@ 0x40
 80026c0:	2100      	movs	r1, #0
 80026c2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80026c4:	2300      	movs	r3, #0
 80026c6:	e000      	b.n	80026ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80026c8:	2302      	movs	r3, #2
  }
}
 80026ca:	0018      	movs	r0, r3
 80026cc:	46bd      	mov	sp, r7
 80026ce:	b002      	add	sp, #8
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	46c0      	nop			@ (mov r8, r8)
 80026d4:	ffffefff 	.word	0xffffefff

080026d8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2241      	movs	r2, #65	@ 0x41
 80026e6:	5c9b      	ldrb	r3, [r3, r2]
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b20      	cmp	r3, #32
 80026ec:	d139      	bne.n	8002762 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2240      	movs	r2, #64	@ 0x40
 80026f2:	5c9b      	ldrb	r3, [r3, r2]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d101      	bne.n	80026fc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80026f8:	2302      	movs	r3, #2
 80026fa:	e033      	b.n	8002764 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2240      	movs	r2, #64	@ 0x40
 8002700:	2101      	movs	r1, #1
 8002702:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2241      	movs	r2, #65	@ 0x41
 8002708:	2124      	movs	r1, #36	@ 0x24
 800270a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2101      	movs	r1, #1
 8002718:	438a      	bics	r2, r1
 800271a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	4a11      	ldr	r2, [pc, #68]	@ (800276c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002728:	4013      	ands	r3, r2
 800272a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	021b      	lsls	r3, r3, #8
 8002730:	68fa      	ldr	r2, [r7, #12]
 8002732:	4313      	orrs	r3, r2
 8002734:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2101      	movs	r1, #1
 800274a:	430a      	orrs	r2, r1
 800274c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2241      	movs	r2, #65	@ 0x41
 8002752:	2120      	movs	r1, #32
 8002754:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2240      	movs	r2, #64	@ 0x40
 800275a:	2100      	movs	r1, #0
 800275c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800275e:	2300      	movs	r3, #0
 8002760:	e000      	b.n	8002764 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002762:	2302      	movs	r3, #2
  }
}
 8002764:	0018      	movs	r0, r3
 8002766:	46bd      	mov	sp, r7
 8002768:	b004      	add	sp, #16
 800276a:	bd80      	pop	{r7, pc}
 800276c:	fffff0ff 	.word	0xfffff0ff

08002770 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002770:	b5b0      	push	{r4, r5, r7, lr}
 8002772:	b08a      	sub	sp, #40	@ 0x28
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d102      	bne.n	8002784 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	f000 fbaf 	bl	8002ee2 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002784:	4bcf      	ldr	r3, [pc, #828]	@ (8002ac4 <HAL_RCC_OscConfig+0x354>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	220c      	movs	r2, #12
 800278a:	4013      	ands	r3, r2
 800278c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800278e:	4bcd      	ldr	r3, [pc, #820]	@ (8002ac4 <HAL_RCC_OscConfig+0x354>)
 8002790:	68da      	ldr	r2, [r3, #12]
 8002792:	2380      	movs	r3, #128	@ 0x80
 8002794:	025b      	lsls	r3, r3, #9
 8002796:	4013      	ands	r3, r2
 8002798:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2201      	movs	r2, #1
 80027a0:	4013      	ands	r3, r2
 80027a2:	d100      	bne.n	80027a6 <HAL_RCC_OscConfig+0x36>
 80027a4:	e07e      	b.n	80028a4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027a6:	6a3b      	ldr	r3, [r7, #32]
 80027a8:	2b08      	cmp	r3, #8
 80027aa:	d007      	beq.n	80027bc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80027ac:	6a3b      	ldr	r3, [r7, #32]
 80027ae:	2b0c      	cmp	r3, #12
 80027b0:	d112      	bne.n	80027d8 <HAL_RCC_OscConfig+0x68>
 80027b2:	69fa      	ldr	r2, [r7, #28]
 80027b4:	2380      	movs	r3, #128	@ 0x80
 80027b6:	025b      	lsls	r3, r3, #9
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d10d      	bne.n	80027d8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027bc:	4bc1      	ldr	r3, [pc, #772]	@ (8002ac4 <HAL_RCC_OscConfig+0x354>)
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	2380      	movs	r3, #128	@ 0x80
 80027c2:	029b      	lsls	r3, r3, #10
 80027c4:	4013      	ands	r3, r2
 80027c6:	d100      	bne.n	80027ca <HAL_RCC_OscConfig+0x5a>
 80027c8:	e06b      	b.n	80028a2 <HAL_RCC_OscConfig+0x132>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d167      	bne.n	80028a2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	f000 fb85 	bl	8002ee2 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685a      	ldr	r2, [r3, #4]
 80027dc:	2380      	movs	r3, #128	@ 0x80
 80027de:	025b      	lsls	r3, r3, #9
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d107      	bne.n	80027f4 <HAL_RCC_OscConfig+0x84>
 80027e4:	4bb7      	ldr	r3, [pc, #732]	@ (8002ac4 <HAL_RCC_OscConfig+0x354>)
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	4bb6      	ldr	r3, [pc, #728]	@ (8002ac4 <HAL_RCC_OscConfig+0x354>)
 80027ea:	2180      	movs	r1, #128	@ 0x80
 80027ec:	0249      	lsls	r1, r1, #9
 80027ee:	430a      	orrs	r2, r1
 80027f0:	601a      	str	r2, [r3, #0]
 80027f2:	e027      	b.n	8002844 <HAL_RCC_OscConfig+0xd4>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685a      	ldr	r2, [r3, #4]
 80027f8:	23a0      	movs	r3, #160	@ 0xa0
 80027fa:	02db      	lsls	r3, r3, #11
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d10e      	bne.n	800281e <HAL_RCC_OscConfig+0xae>
 8002800:	4bb0      	ldr	r3, [pc, #704]	@ (8002ac4 <HAL_RCC_OscConfig+0x354>)
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	4baf      	ldr	r3, [pc, #700]	@ (8002ac4 <HAL_RCC_OscConfig+0x354>)
 8002806:	2180      	movs	r1, #128	@ 0x80
 8002808:	02c9      	lsls	r1, r1, #11
 800280a:	430a      	orrs	r2, r1
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	4bad      	ldr	r3, [pc, #692]	@ (8002ac4 <HAL_RCC_OscConfig+0x354>)
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	4bac      	ldr	r3, [pc, #688]	@ (8002ac4 <HAL_RCC_OscConfig+0x354>)
 8002814:	2180      	movs	r1, #128	@ 0x80
 8002816:	0249      	lsls	r1, r1, #9
 8002818:	430a      	orrs	r2, r1
 800281a:	601a      	str	r2, [r3, #0]
 800281c:	e012      	b.n	8002844 <HAL_RCC_OscConfig+0xd4>
 800281e:	4ba9      	ldr	r3, [pc, #676]	@ (8002ac4 <HAL_RCC_OscConfig+0x354>)
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	4ba8      	ldr	r3, [pc, #672]	@ (8002ac4 <HAL_RCC_OscConfig+0x354>)
 8002824:	49a8      	ldr	r1, [pc, #672]	@ (8002ac8 <HAL_RCC_OscConfig+0x358>)
 8002826:	400a      	ands	r2, r1
 8002828:	601a      	str	r2, [r3, #0]
 800282a:	4ba6      	ldr	r3, [pc, #664]	@ (8002ac4 <HAL_RCC_OscConfig+0x354>)
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	2380      	movs	r3, #128	@ 0x80
 8002830:	025b      	lsls	r3, r3, #9
 8002832:	4013      	ands	r3, r2
 8002834:	60fb      	str	r3, [r7, #12]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	4ba2      	ldr	r3, [pc, #648]	@ (8002ac4 <HAL_RCC_OscConfig+0x354>)
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	4ba1      	ldr	r3, [pc, #644]	@ (8002ac4 <HAL_RCC_OscConfig+0x354>)
 800283e:	49a3      	ldr	r1, [pc, #652]	@ (8002acc <HAL_RCC_OscConfig+0x35c>)
 8002840:	400a      	ands	r2, r1
 8002842:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d015      	beq.n	8002878 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284c:	f7fe ff38 	bl	80016c0 <HAL_GetTick>
 8002850:	0003      	movs	r3, r0
 8002852:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002854:	e009      	b.n	800286a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002856:	f7fe ff33 	bl	80016c0 <HAL_GetTick>
 800285a:	0002      	movs	r2, r0
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	2b64      	cmp	r3, #100	@ 0x64
 8002862:	d902      	bls.n	800286a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	f000 fb3c 	bl	8002ee2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800286a:	4b96      	ldr	r3, [pc, #600]	@ (8002ac4 <HAL_RCC_OscConfig+0x354>)
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	2380      	movs	r3, #128	@ 0x80
 8002870:	029b      	lsls	r3, r3, #10
 8002872:	4013      	ands	r3, r2
 8002874:	d0ef      	beq.n	8002856 <HAL_RCC_OscConfig+0xe6>
 8002876:	e015      	b.n	80028a4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002878:	f7fe ff22 	bl	80016c0 <HAL_GetTick>
 800287c:	0003      	movs	r3, r0
 800287e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002880:	e008      	b.n	8002894 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002882:	f7fe ff1d 	bl	80016c0 <HAL_GetTick>
 8002886:	0002      	movs	r2, r0
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b64      	cmp	r3, #100	@ 0x64
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e326      	b.n	8002ee2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002894:	4b8b      	ldr	r3, [pc, #556]	@ (8002ac4 <HAL_RCC_OscConfig+0x354>)
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	2380      	movs	r3, #128	@ 0x80
 800289a:	029b      	lsls	r3, r3, #10
 800289c:	4013      	ands	r3, r2
 800289e:	d1f0      	bne.n	8002882 <HAL_RCC_OscConfig+0x112>
 80028a0:	e000      	b.n	80028a4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028a2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2202      	movs	r2, #2
 80028aa:	4013      	ands	r3, r2
 80028ac:	d100      	bne.n	80028b0 <HAL_RCC_OscConfig+0x140>
 80028ae:	e08b      	b.n	80029c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028b6:	6a3b      	ldr	r3, [r7, #32]
 80028b8:	2b04      	cmp	r3, #4
 80028ba:	d005      	beq.n	80028c8 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80028bc:	6a3b      	ldr	r3, [r7, #32]
 80028be:	2b0c      	cmp	r3, #12
 80028c0:	d13e      	bne.n	8002940 <HAL_RCC_OscConfig+0x1d0>
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d13b      	bne.n	8002940 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80028c8:	4b7e      	ldr	r3, [pc, #504]	@ (8002ac4 <HAL_RCC_OscConfig+0x354>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2204      	movs	r2, #4
 80028ce:	4013      	ands	r3, r2
 80028d0:	d004      	beq.n	80028dc <HAL_RCC_OscConfig+0x16c>
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e302      	b.n	8002ee2 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028dc:	4b79      	ldr	r3, [pc, #484]	@ (8002ac4 <HAL_RCC_OscConfig+0x354>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	4a7b      	ldr	r2, [pc, #492]	@ (8002ad0 <HAL_RCC_OscConfig+0x360>)
 80028e2:	4013      	ands	r3, r2
 80028e4:	0019      	movs	r1, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	021a      	lsls	r2, r3, #8
 80028ec:	4b75      	ldr	r3, [pc, #468]	@ (8002ac4 <HAL_RCC_OscConfig+0x354>)
 80028ee:	430a      	orrs	r2, r1
 80028f0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80028f2:	4b74      	ldr	r3, [pc, #464]	@ (8002ac4 <HAL_RCC_OscConfig+0x354>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2209      	movs	r2, #9
 80028f8:	4393      	bics	r3, r2
 80028fa:	0019      	movs	r1, r3
 80028fc:	4b71      	ldr	r3, [pc, #452]	@ (8002ac4 <HAL_RCC_OscConfig+0x354>)
 80028fe:	697a      	ldr	r2, [r7, #20]
 8002900:	430a      	orrs	r2, r1
 8002902:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002904:	f000 fc40 	bl	8003188 <HAL_RCC_GetSysClockFreq>
 8002908:	0001      	movs	r1, r0
 800290a:	4b6e      	ldr	r3, [pc, #440]	@ (8002ac4 <HAL_RCC_OscConfig+0x354>)
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	091b      	lsrs	r3, r3, #4
 8002910:	220f      	movs	r2, #15
 8002912:	4013      	ands	r3, r2
 8002914:	4a6f      	ldr	r2, [pc, #444]	@ (8002ad4 <HAL_RCC_OscConfig+0x364>)
 8002916:	5cd3      	ldrb	r3, [r2, r3]
 8002918:	000a      	movs	r2, r1
 800291a:	40da      	lsrs	r2, r3
 800291c:	4b6e      	ldr	r3, [pc, #440]	@ (8002ad8 <HAL_RCC_OscConfig+0x368>)
 800291e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002920:	4b6e      	ldr	r3, [pc, #440]	@ (8002adc <HAL_RCC_OscConfig+0x36c>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2513      	movs	r5, #19
 8002926:	197c      	adds	r4, r7, r5
 8002928:	0018      	movs	r0, r3
 800292a:	f7fe fe83 	bl	8001634 <HAL_InitTick>
 800292e:	0003      	movs	r3, r0
 8002930:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002932:	197b      	adds	r3, r7, r5
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d046      	beq.n	80029c8 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 800293a:	197b      	adds	r3, r7, r5
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	e2d0      	b.n	8002ee2 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d027      	beq.n	8002996 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002946:	4b5f      	ldr	r3, [pc, #380]	@ (8002ac4 <HAL_RCC_OscConfig+0x354>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2209      	movs	r2, #9
 800294c:	4393      	bics	r3, r2
 800294e:	0019      	movs	r1, r3
 8002950:	4b5c      	ldr	r3, [pc, #368]	@ (8002ac4 <HAL_RCC_OscConfig+0x354>)
 8002952:	697a      	ldr	r2, [r7, #20]
 8002954:	430a      	orrs	r2, r1
 8002956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002958:	f7fe feb2 	bl	80016c0 <HAL_GetTick>
 800295c:	0003      	movs	r3, r0
 800295e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002960:	e008      	b.n	8002974 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002962:	f7fe fead 	bl	80016c0 <HAL_GetTick>
 8002966:	0002      	movs	r2, r0
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d901      	bls.n	8002974 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e2b6      	b.n	8002ee2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002974:	4b53      	ldr	r3, [pc, #332]	@ (8002ac4 <HAL_RCC_OscConfig+0x354>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2204      	movs	r2, #4
 800297a:	4013      	ands	r3, r2
 800297c:	d0f1      	beq.n	8002962 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800297e:	4b51      	ldr	r3, [pc, #324]	@ (8002ac4 <HAL_RCC_OscConfig+0x354>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	4a53      	ldr	r2, [pc, #332]	@ (8002ad0 <HAL_RCC_OscConfig+0x360>)
 8002984:	4013      	ands	r3, r2
 8002986:	0019      	movs	r1, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	691b      	ldr	r3, [r3, #16]
 800298c:	021a      	lsls	r2, r3, #8
 800298e:	4b4d      	ldr	r3, [pc, #308]	@ (8002ac4 <HAL_RCC_OscConfig+0x354>)
 8002990:	430a      	orrs	r2, r1
 8002992:	605a      	str	r2, [r3, #4]
 8002994:	e018      	b.n	80029c8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002996:	4b4b      	ldr	r3, [pc, #300]	@ (8002ac4 <HAL_RCC_OscConfig+0x354>)
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	4b4a      	ldr	r3, [pc, #296]	@ (8002ac4 <HAL_RCC_OscConfig+0x354>)
 800299c:	2101      	movs	r1, #1
 800299e:	438a      	bics	r2, r1
 80029a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a2:	f7fe fe8d 	bl	80016c0 <HAL_GetTick>
 80029a6:	0003      	movs	r3, r0
 80029a8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80029aa:	e008      	b.n	80029be <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029ac:	f7fe fe88 	bl	80016c0 <HAL_GetTick>
 80029b0:	0002      	movs	r2, r0
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e291      	b.n	8002ee2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80029be:	4b41      	ldr	r3, [pc, #260]	@ (8002ac4 <HAL_RCC_OscConfig+0x354>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2204      	movs	r2, #4
 80029c4:	4013      	ands	r3, r2
 80029c6:	d1f1      	bne.n	80029ac <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2210      	movs	r2, #16
 80029ce:	4013      	ands	r3, r2
 80029d0:	d100      	bne.n	80029d4 <HAL_RCC_OscConfig+0x264>
 80029d2:	e0a1      	b.n	8002b18 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029d4:	6a3b      	ldr	r3, [r7, #32]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d140      	bne.n	8002a5c <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029da:	4b3a      	ldr	r3, [pc, #232]	@ (8002ac4 <HAL_RCC_OscConfig+0x354>)
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	2380      	movs	r3, #128	@ 0x80
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	4013      	ands	r3, r2
 80029e4:	d005      	beq.n	80029f2 <HAL_RCC_OscConfig+0x282>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e277      	b.n	8002ee2 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029f2:	4b34      	ldr	r3, [pc, #208]	@ (8002ac4 <HAL_RCC_OscConfig+0x354>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	4a3a      	ldr	r2, [pc, #232]	@ (8002ae0 <HAL_RCC_OscConfig+0x370>)
 80029f8:	4013      	ands	r3, r2
 80029fa:	0019      	movs	r1, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a00:	4b30      	ldr	r3, [pc, #192]	@ (8002ac4 <HAL_RCC_OscConfig+0x354>)
 8002a02:	430a      	orrs	r2, r1
 8002a04:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a06:	4b2f      	ldr	r3, [pc, #188]	@ (8002ac4 <HAL_RCC_OscConfig+0x354>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	021b      	lsls	r3, r3, #8
 8002a0c:	0a19      	lsrs	r1, r3, #8
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a1b      	ldr	r3, [r3, #32]
 8002a12:	061a      	lsls	r2, r3, #24
 8002a14:	4b2b      	ldr	r3, [pc, #172]	@ (8002ac4 <HAL_RCC_OscConfig+0x354>)
 8002a16:	430a      	orrs	r2, r1
 8002a18:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a1e:	0b5b      	lsrs	r3, r3, #13
 8002a20:	3301      	adds	r3, #1
 8002a22:	2280      	movs	r2, #128	@ 0x80
 8002a24:	0212      	lsls	r2, r2, #8
 8002a26:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002a28:	4b26      	ldr	r3, [pc, #152]	@ (8002ac4 <HAL_RCC_OscConfig+0x354>)
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	091b      	lsrs	r3, r3, #4
 8002a2e:	210f      	movs	r1, #15
 8002a30:	400b      	ands	r3, r1
 8002a32:	4928      	ldr	r1, [pc, #160]	@ (8002ad4 <HAL_RCC_OscConfig+0x364>)
 8002a34:	5ccb      	ldrb	r3, [r1, r3]
 8002a36:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002a38:	4b27      	ldr	r3, [pc, #156]	@ (8002ad8 <HAL_RCC_OscConfig+0x368>)
 8002a3a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002a3c:	4b27      	ldr	r3, [pc, #156]	@ (8002adc <HAL_RCC_OscConfig+0x36c>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2513      	movs	r5, #19
 8002a42:	197c      	adds	r4, r7, r5
 8002a44:	0018      	movs	r0, r3
 8002a46:	f7fe fdf5 	bl	8001634 <HAL_InitTick>
 8002a4a:	0003      	movs	r3, r0
 8002a4c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002a4e:	197b      	adds	r3, r7, r5
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d060      	beq.n	8002b18 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8002a56:	197b      	adds	r3, r7, r5
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	e242      	b.n	8002ee2 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	69db      	ldr	r3, [r3, #28]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d03f      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a64:	4b17      	ldr	r3, [pc, #92]	@ (8002ac4 <HAL_RCC_OscConfig+0x354>)
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	4b16      	ldr	r3, [pc, #88]	@ (8002ac4 <HAL_RCC_OscConfig+0x354>)
 8002a6a:	2180      	movs	r1, #128	@ 0x80
 8002a6c:	0049      	lsls	r1, r1, #1
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a72:	f7fe fe25 	bl	80016c0 <HAL_GetTick>
 8002a76:	0003      	movs	r3, r0
 8002a78:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a7c:	f7fe fe20 	bl	80016c0 <HAL_GetTick>
 8002a80:	0002      	movs	r2, r0
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e229      	b.n	8002ee2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8002ac4 <HAL_RCC_OscConfig+0x354>)
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	2380      	movs	r3, #128	@ 0x80
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	4013      	ands	r3, r2
 8002a98:	d0f0      	beq.n	8002a7c <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a9a:	4b0a      	ldr	r3, [pc, #40]	@ (8002ac4 <HAL_RCC_OscConfig+0x354>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	4a10      	ldr	r2, [pc, #64]	@ (8002ae0 <HAL_RCC_OscConfig+0x370>)
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	0019      	movs	r1, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002aa8:	4b06      	ldr	r3, [pc, #24]	@ (8002ac4 <HAL_RCC_OscConfig+0x354>)
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002aae:	4b05      	ldr	r3, [pc, #20]	@ (8002ac4 <HAL_RCC_OscConfig+0x354>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	021b      	lsls	r3, r3, #8
 8002ab4:	0a19      	lsrs	r1, r3, #8
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
 8002aba:	061a      	lsls	r2, r3, #24
 8002abc:	4b01      	ldr	r3, [pc, #4]	@ (8002ac4 <HAL_RCC_OscConfig+0x354>)
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	605a      	str	r2, [r3, #4]
 8002ac2:	e029      	b.n	8002b18 <HAL_RCC_OscConfig+0x3a8>
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	fffeffff 	.word	0xfffeffff
 8002acc:	fffbffff 	.word	0xfffbffff
 8002ad0:	ffffe0ff 	.word	0xffffe0ff
 8002ad4:	08005b50 	.word	0x08005b50
 8002ad8:	20000008 	.word	0x20000008
 8002adc:	2000000c 	.word	0x2000000c
 8002ae0:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002ae4:	4bbd      	ldr	r3, [pc, #756]	@ (8002ddc <HAL_RCC_OscConfig+0x66c>)
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	4bbc      	ldr	r3, [pc, #752]	@ (8002ddc <HAL_RCC_OscConfig+0x66c>)
 8002aea:	49bd      	ldr	r1, [pc, #756]	@ (8002de0 <HAL_RCC_OscConfig+0x670>)
 8002aec:	400a      	ands	r2, r1
 8002aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af0:	f7fe fde6 	bl	80016c0 <HAL_GetTick>
 8002af4:	0003      	movs	r3, r0
 8002af6:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002af8:	e008      	b.n	8002b0c <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002afa:	f7fe fde1 	bl	80016c0 <HAL_GetTick>
 8002afe:	0002      	movs	r2, r0
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d901      	bls.n	8002b0c <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e1ea      	b.n	8002ee2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002b0c:	4bb3      	ldr	r3, [pc, #716]	@ (8002ddc <HAL_RCC_OscConfig+0x66c>)
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	2380      	movs	r3, #128	@ 0x80
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	4013      	ands	r3, r2
 8002b16:	d1f0      	bne.n	8002afa <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2208      	movs	r2, #8
 8002b1e:	4013      	ands	r3, r2
 8002b20:	d036      	beq.n	8002b90 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d019      	beq.n	8002b5e <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b2a:	4bac      	ldr	r3, [pc, #688]	@ (8002ddc <HAL_RCC_OscConfig+0x66c>)
 8002b2c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002b2e:	4bab      	ldr	r3, [pc, #684]	@ (8002ddc <HAL_RCC_OscConfig+0x66c>)
 8002b30:	2101      	movs	r1, #1
 8002b32:	430a      	orrs	r2, r1
 8002b34:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b36:	f7fe fdc3 	bl	80016c0 <HAL_GetTick>
 8002b3a:	0003      	movs	r3, r0
 8002b3c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b3e:	e008      	b.n	8002b52 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b40:	f7fe fdbe 	bl	80016c0 <HAL_GetTick>
 8002b44:	0002      	movs	r2, r0
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e1c7      	b.n	8002ee2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b52:	4ba2      	ldr	r3, [pc, #648]	@ (8002ddc <HAL_RCC_OscConfig+0x66c>)
 8002b54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b56:	2202      	movs	r2, #2
 8002b58:	4013      	ands	r3, r2
 8002b5a:	d0f1      	beq.n	8002b40 <HAL_RCC_OscConfig+0x3d0>
 8002b5c:	e018      	b.n	8002b90 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b5e:	4b9f      	ldr	r3, [pc, #636]	@ (8002ddc <HAL_RCC_OscConfig+0x66c>)
 8002b60:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002b62:	4b9e      	ldr	r3, [pc, #632]	@ (8002ddc <HAL_RCC_OscConfig+0x66c>)
 8002b64:	2101      	movs	r1, #1
 8002b66:	438a      	bics	r2, r1
 8002b68:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b6a:	f7fe fda9 	bl	80016c0 <HAL_GetTick>
 8002b6e:	0003      	movs	r3, r0
 8002b70:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b74:	f7fe fda4 	bl	80016c0 <HAL_GetTick>
 8002b78:	0002      	movs	r2, r0
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e1ad      	b.n	8002ee2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b86:	4b95      	ldr	r3, [pc, #596]	@ (8002ddc <HAL_RCC_OscConfig+0x66c>)
 8002b88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b8a:	2202      	movs	r2, #2
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	d1f1      	bne.n	8002b74 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2204      	movs	r2, #4
 8002b96:	4013      	ands	r3, r2
 8002b98:	d100      	bne.n	8002b9c <HAL_RCC_OscConfig+0x42c>
 8002b9a:	e0ae      	b.n	8002cfa <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b9c:	2027      	movs	r0, #39	@ 0x27
 8002b9e:	183b      	adds	r3, r7, r0
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ba4:	4b8d      	ldr	r3, [pc, #564]	@ (8002ddc <HAL_RCC_OscConfig+0x66c>)
 8002ba6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ba8:	2380      	movs	r3, #128	@ 0x80
 8002baa:	055b      	lsls	r3, r3, #21
 8002bac:	4013      	ands	r3, r2
 8002bae:	d109      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bb0:	4b8a      	ldr	r3, [pc, #552]	@ (8002ddc <HAL_RCC_OscConfig+0x66c>)
 8002bb2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002bb4:	4b89      	ldr	r3, [pc, #548]	@ (8002ddc <HAL_RCC_OscConfig+0x66c>)
 8002bb6:	2180      	movs	r1, #128	@ 0x80
 8002bb8:	0549      	lsls	r1, r1, #21
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002bbe:	183b      	adds	r3, r7, r0
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bc4:	4b87      	ldr	r3, [pc, #540]	@ (8002de4 <HAL_RCC_OscConfig+0x674>)
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	2380      	movs	r3, #128	@ 0x80
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	4013      	ands	r3, r2
 8002bce:	d11a      	bne.n	8002c06 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bd0:	4b84      	ldr	r3, [pc, #528]	@ (8002de4 <HAL_RCC_OscConfig+0x674>)
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	4b83      	ldr	r3, [pc, #524]	@ (8002de4 <HAL_RCC_OscConfig+0x674>)
 8002bd6:	2180      	movs	r1, #128	@ 0x80
 8002bd8:	0049      	lsls	r1, r1, #1
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bde:	f7fe fd6f 	bl	80016c0 <HAL_GetTick>
 8002be2:	0003      	movs	r3, r0
 8002be4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002be8:	f7fe fd6a 	bl	80016c0 <HAL_GetTick>
 8002bec:	0002      	movs	r2, r0
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b64      	cmp	r3, #100	@ 0x64
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e173      	b.n	8002ee2 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bfa:	4b7a      	ldr	r3, [pc, #488]	@ (8002de4 <HAL_RCC_OscConfig+0x674>)
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	2380      	movs	r3, #128	@ 0x80
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	4013      	ands	r3, r2
 8002c04:	d0f0      	beq.n	8002be8 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	689a      	ldr	r2, [r3, #8]
 8002c0a:	2380      	movs	r3, #128	@ 0x80
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d107      	bne.n	8002c22 <HAL_RCC_OscConfig+0x4b2>
 8002c12:	4b72      	ldr	r3, [pc, #456]	@ (8002ddc <HAL_RCC_OscConfig+0x66c>)
 8002c14:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c16:	4b71      	ldr	r3, [pc, #452]	@ (8002ddc <HAL_RCC_OscConfig+0x66c>)
 8002c18:	2180      	movs	r1, #128	@ 0x80
 8002c1a:	0049      	lsls	r1, r1, #1
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	651a      	str	r2, [r3, #80]	@ 0x50
 8002c20:	e031      	b.n	8002c86 <HAL_RCC_OscConfig+0x516>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d10c      	bne.n	8002c44 <HAL_RCC_OscConfig+0x4d4>
 8002c2a:	4b6c      	ldr	r3, [pc, #432]	@ (8002ddc <HAL_RCC_OscConfig+0x66c>)
 8002c2c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c2e:	4b6b      	ldr	r3, [pc, #428]	@ (8002ddc <HAL_RCC_OscConfig+0x66c>)
 8002c30:	496b      	ldr	r1, [pc, #428]	@ (8002de0 <HAL_RCC_OscConfig+0x670>)
 8002c32:	400a      	ands	r2, r1
 8002c34:	651a      	str	r2, [r3, #80]	@ 0x50
 8002c36:	4b69      	ldr	r3, [pc, #420]	@ (8002ddc <HAL_RCC_OscConfig+0x66c>)
 8002c38:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c3a:	4b68      	ldr	r3, [pc, #416]	@ (8002ddc <HAL_RCC_OscConfig+0x66c>)
 8002c3c:	496a      	ldr	r1, [pc, #424]	@ (8002de8 <HAL_RCC_OscConfig+0x678>)
 8002c3e:	400a      	ands	r2, r1
 8002c40:	651a      	str	r2, [r3, #80]	@ 0x50
 8002c42:	e020      	b.n	8002c86 <HAL_RCC_OscConfig+0x516>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689a      	ldr	r2, [r3, #8]
 8002c48:	23a0      	movs	r3, #160	@ 0xa0
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d10e      	bne.n	8002c6e <HAL_RCC_OscConfig+0x4fe>
 8002c50:	4b62      	ldr	r3, [pc, #392]	@ (8002ddc <HAL_RCC_OscConfig+0x66c>)
 8002c52:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c54:	4b61      	ldr	r3, [pc, #388]	@ (8002ddc <HAL_RCC_OscConfig+0x66c>)
 8002c56:	2180      	movs	r1, #128	@ 0x80
 8002c58:	00c9      	lsls	r1, r1, #3
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	651a      	str	r2, [r3, #80]	@ 0x50
 8002c5e:	4b5f      	ldr	r3, [pc, #380]	@ (8002ddc <HAL_RCC_OscConfig+0x66c>)
 8002c60:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c62:	4b5e      	ldr	r3, [pc, #376]	@ (8002ddc <HAL_RCC_OscConfig+0x66c>)
 8002c64:	2180      	movs	r1, #128	@ 0x80
 8002c66:	0049      	lsls	r1, r1, #1
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	651a      	str	r2, [r3, #80]	@ 0x50
 8002c6c:	e00b      	b.n	8002c86 <HAL_RCC_OscConfig+0x516>
 8002c6e:	4b5b      	ldr	r3, [pc, #364]	@ (8002ddc <HAL_RCC_OscConfig+0x66c>)
 8002c70:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c72:	4b5a      	ldr	r3, [pc, #360]	@ (8002ddc <HAL_RCC_OscConfig+0x66c>)
 8002c74:	495a      	ldr	r1, [pc, #360]	@ (8002de0 <HAL_RCC_OscConfig+0x670>)
 8002c76:	400a      	ands	r2, r1
 8002c78:	651a      	str	r2, [r3, #80]	@ 0x50
 8002c7a:	4b58      	ldr	r3, [pc, #352]	@ (8002ddc <HAL_RCC_OscConfig+0x66c>)
 8002c7c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c7e:	4b57      	ldr	r3, [pc, #348]	@ (8002ddc <HAL_RCC_OscConfig+0x66c>)
 8002c80:	4959      	ldr	r1, [pc, #356]	@ (8002de8 <HAL_RCC_OscConfig+0x678>)
 8002c82:	400a      	ands	r2, r1
 8002c84:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d015      	beq.n	8002cba <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c8e:	f7fe fd17 	bl	80016c0 <HAL_GetTick>
 8002c92:	0003      	movs	r3, r0
 8002c94:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c96:	e009      	b.n	8002cac <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c98:	f7fe fd12 	bl	80016c0 <HAL_GetTick>
 8002c9c:	0002      	movs	r2, r0
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	4a52      	ldr	r2, [pc, #328]	@ (8002dec <HAL_RCC_OscConfig+0x67c>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d901      	bls.n	8002cac <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e11a      	b.n	8002ee2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cac:	4b4b      	ldr	r3, [pc, #300]	@ (8002ddc <HAL_RCC_OscConfig+0x66c>)
 8002cae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002cb0:	2380      	movs	r3, #128	@ 0x80
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	d0ef      	beq.n	8002c98 <HAL_RCC_OscConfig+0x528>
 8002cb8:	e014      	b.n	8002ce4 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cba:	f7fe fd01 	bl	80016c0 <HAL_GetTick>
 8002cbe:	0003      	movs	r3, r0
 8002cc0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002cc2:	e009      	b.n	8002cd8 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cc4:	f7fe fcfc 	bl	80016c0 <HAL_GetTick>
 8002cc8:	0002      	movs	r2, r0
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	4a47      	ldr	r2, [pc, #284]	@ (8002dec <HAL_RCC_OscConfig+0x67c>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d901      	bls.n	8002cd8 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e104      	b.n	8002ee2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002cd8:	4b40      	ldr	r3, [pc, #256]	@ (8002ddc <HAL_RCC_OscConfig+0x66c>)
 8002cda:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002cdc:	2380      	movs	r3, #128	@ 0x80
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	d1ef      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ce4:	2327      	movs	r3, #39	@ 0x27
 8002ce6:	18fb      	adds	r3, r7, r3
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d105      	bne.n	8002cfa <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cee:	4b3b      	ldr	r3, [pc, #236]	@ (8002ddc <HAL_RCC_OscConfig+0x66c>)
 8002cf0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002cf2:	4b3a      	ldr	r3, [pc, #232]	@ (8002ddc <HAL_RCC_OscConfig+0x66c>)
 8002cf4:	493e      	ldr	r1, [pc, #248]	@ (8002df0 <HAL_RCC_OscConfig+0x680>)
 8002cf6:	400a      	ands	r2, r1
 8002cf8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2220      	movs	r2, #32
 8002d00:	4013      	ands	r3, r2
 8002d02:	d049      	beq.n	8002d98 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d026      	beq.n	8002d5a <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002d0c:	4b33      	ldr	r3, [pc, #204]	@ (8002ddc <HAL_RCC_OscConfig+0x66c>)
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	4b32      	ldr	r3, [pc, #200]	@ (8002ddc <HAL_RCC_OscConfig+0x66c>)
 8002d12:	2101      	movs	r1, #1
 8002d14:	430a      	orrs	r2, r1
 8002d16:	609a      	str	r2, [r3, #8]
 8002d18:	4b30      	ldr	r3, [pc, #192]	@ (8002ddc <HAL_RCC_OscConfig+0x66c>)
 8002d1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d1c:	4b2f      	ldr	r3, [pc, #188]	@ (8002ddc <HAL_RCC_OscConfig+0x66c>)
 8002d1e:	2101      	movs	r1, #1
 8002d20:	430a      	orrs	r2, r1
 8002d22:	635a      	str	r2, [r3, #52]	@ 0x34
 8002d24:	4b33      	ldr	r3, [pc, #204]	@ (8002df4 <HAL_RCC_OscConfig+0x684>)
 8002d26:	6a1a      	ldr	r2, [r3, #32]
 8002d28:	4b32      	ldr	r3, [pc, #200]	@ (8002df4 <HAL_RCC_OscConfig+0x684>)
 8002d2a:	2180      	movs	r1, #128	@ 0x80
 8002d2c:	0189      	lsls	r1, r1, #6
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d32:	f7fe fcc5 	bl	80016c0 <HAL_GetTick>
 8002d36:	0003      	movs	r3, r0
 8002d38:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d3a:	e008      	b.n	8002d4e <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d3c:	f7fe fcc0 	bl	80016c0 <HAL_GetTick>
 8002d40:	0002      	movs	r2, r0
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e0c9      	b.n	8002ee2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d4e:	4b23      	ldr	r3, [pc, #140]	@ (8002ddc <HAL_RCC_OscConfig+0x66c>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	2202      	movs	r2, #2
 8002d54:	4013      	ands	r3, r2
 8002d56:	d0f1      	beq.n	8002d3c <HAL_RCC_OscConfig+0x5cc>
 8002d58:	e01e      	b.n	8002d98 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002d5a:	4b20      	ldr	r3, [pc, #128]	@ (8002ddc <HAL_RCC_OscConfig+0x66c>)
 8002d5c:	689a      	ldr	r2, [r3, #8]
 8002d5e:	4b1f      	ldr	r3, [pc, #124]	@ (8002ddc <HAL_RCC_OscConfig+0x66c>)
 8002d60:	2101      	movs	r1, #1
 8002d62:	438a      	bics	r2, r1
 8002d64:	609a      	str	r2, [r3, #8]
 8002d66:	4b23      	ldr	r3, [pc, #140]	@ (8002df4 <HAL_RCC_OscConfig+0x684>)
 8002d68:	6a1a      	ldr	r2, [r3, #32]
 8002d6a:	4b22      	ldr	r3, [pc, #136]	@ (8002df4 <HAL_RCC_OscConfig+0x684>)
 8002d6c:	4922      	ldr	r1, [pc, #136]	@ (8002df8 <HAL_RCC_OscConfig+0x688>)
 8002d6e:	400a      	ands	r2, r1
 8002d70:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d72:	f7fe fca5 	bl	80016c0 <HAL_GetTick>
 8002d76:	0003      	movs	r3, r0
 8002d78:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d7c:	f7fe fca0 	bl	80016c0 <HAL_GetTick>
 8002d80:	0002      	movs	r2, r0
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e0a9      	b.n	8002ee2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002d8e:	4b13      	ldr	r3, [pc, #76]	@ (8002ddc <HAL_RCC_OscConfig+0x66c>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	2202      	movs	r2, #2
 8002d94:	4013      	ands	r3, r2
 8002d96:	d1f1      	bne.n	8002d7c <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d100      	bne.n	8002da2 <HAL_RCC_OscConfig+0x632>
 8002da0:	e09e      	b.n	8002ee0 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002da2:	6a3b      	ldr	r3, [r7, #32]
 8002da4:	2b0c      	cmp	r3, #12
 8002da6:	d100      	bne.n	8002daa <HAL_RCC_OscConfig+0x63a>
 8002da8:	e077      	b.n	8002e9a <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d158      	bne.n	8002e64 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002db2:	4b0a      	ldr	r3, [pc, #40]	@ (8002ddc <HAL_RCC_OscConfig+0x66c>)
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	4b09      	ldr	r3, [pc, #36]	@ (8002ddc <HAL_RCC_OscConfig+0x66c>)
 8002db8:	4910      	ldr	r1, [pc, #64]	@ (8002dfc <HAL_RCC_OscConfig+0x68c>)
 8002dba:	400a      	ands	r2, r1
 8002dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dbe:	f7fe fc7f 	bl	80016c0 <HAL_GetTick>
 8002dc2:	0003      	movs	r3, r0
 8002dc4:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002dc6:	e01b      	b.n	8002e00 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dc8:	f7fe fc7a 	bl	80016c0 <HAL_GetTick>
 8002dcc:	0002      	movs	r2, r0
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d914      	bls.n	8002e00 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e083      	b.n	8002ee2 <HAL_RCC_OscConfig+0x772>
 8002dda:	46c0      	nop			@ (mov r8, r8)
 8002ddc:	40021000 	.word	0x40021000
 8002de0:	fffffeff 	.word	0xfffffeff
 8002de4:	40007000 	.word	0x40007000
 8002de8:	fffffbff 	.word	0xfffffbff
 8002dec:	00001388 	.word	0x00001388
 8002df0:	efffffff 	.word	0xefffffff
 8002df4:	40010000 	.word	0x40010000
 8002df8:	ffffdfff 	.word	0xffffdfff
 8002dfc:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002e00:	4b3a      	ldr	r3, [pc, #232]	@ (8002eec <HAL_RCC_OscConfig+0x77c>)
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	2380      	movs	r3, #128	@ 0x80
 8002e06:	049b      	lsls	r3, r3, #18
 8002e08:	4013      	ands	r3, r2
 8002e0a:	d1dd      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e0c:	4b37      	ldr	r3, [pc, #220]	@ (8002eec <HAL_RCC_OscConfig+0x77c>)
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	4a37      	ldr	r2, [pc, #220]	@ (8002ef0 <HAL_RCC_OscConfig+0x780>)
 8002e12:	4013      	ands	r3, r2
 8002e14:	0019      	movs	r1, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e24:	431a      	orrs	r2, r3
 8002e26:	4b31      	ldr	r3, [pc, #196]	@ (8002eec <HAL_RCC_OscConfig+0x77c>)
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e2c:	4b2f      	ldr	r3, [pc, #188]	@ (8002eec <HAL_RCC_OscConfig+0x77c>)
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	4b2e      	ldr	r3, [pc, #184]	@ (8002eec <HAL_RCC_OscConfig+0x77c>)
 8002e32:	2180      	movs	r1, #128	@ 0x80
 8002e34:	0449      	lsls	r1, r1, #17
 8002e36:	430a      	orrs	r2, r1
 8002e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3a:	f7fe fc41 	bl	80016c0 <HAL_GetTick>
 8002e3e:	0003      	movs	r3, r0
 8002e40:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e44:	f7fe fc3c 	bl	80016c0 <HAL_GetTick>
 8002e48:	0002      	movs	r2, r0
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e045      	b.n	8002ee2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002e56:	4b25      	ldr	r3, [pc, #148]	@ (8002eec <HAL_RCC_OscConfig+0x77c>)
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	2380      	movs	r3, #128	@ 0x80
 8002e5c:	049b      	lsls	r3, r3, #18
 8002e5e:	4013      	ands	r3, r2
 8002e60:	d0f0      	beq.n	8002e44 <HAL_RCC_OscConfig+0x6d4>
 8002e62:	e03d      	b.n	8002ee0 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e64:	4b21      	ldr	r3, [pc, #132]	@ (8002eec <HAL_RCC_OscConfig+0x77c>)
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	4b20      	ldr	r3, [pc, #128]	@ (8002eec <HAL_RCC_OscConfig+0x77c>)
 8002e6a:	4922      	ldr	r1, [pc, #136]	@ (8002ef4 <HAL_RCC_OscConfig+0x784>)
 8002e6c:	400a      	ands	r2, r1
 8002e6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e70:	f7fe fc26 	bl	80016c0 <HAL_GetTick>
 8002e74:	0003      	movs	r3, r0
 8002e76:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002e78:	e008      	b.n	8002e8c <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e7a:	f7fe fc21 	bl	80016c0 <HAL_GetTick>
 8002e7e:	0002      	movs	r2, r0
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e02a      	b.n	8002ee2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002e8c:	4b17      	ldr	r3, [pc, #92]	@ (8002eec <HAL_RCC_OscConfig+0x77c>)
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	2380      	movs	r3, #128	@ 0x80
 8002e92:	049b      	lsls	r3, r3, #18
 8002e94:	4013      	ands	r3, r2
 8002e96:	d1f0      	bne.n	8002e7a <HAL_RCC_OscConfig+0x70a>
 8002e98:	e022      	b.n	8002ee0 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d101      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e01d      	b.n	8002ee2 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ea6:	4b11      	ldr	r3, [pc, #68]	@ (8002eec <HAL_RCC_OscConfig+0x77c>)
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eac:	69fa      	ldr	r2, [r7, #28]
 8002eae:	2380      	movs	r3, #128	@ 0x80
 8002eb0:	025b      	lsls	r3, r3, #9
 8002eb2:	401a      	ands	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d10f      	bne.n	8002edc <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002ebc:	69fa      	ldr	r2, [r7, #28]
 8002ebe:	23f0      	movs	r3, #240	@ 0xf0
 8002ec0:	039b      	lsls	r3, r3, #14
 8002ec2:	401a      	ands	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d107      	bne.n	8002edc <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002ecc:	69fa      	ldr	r2, [r7, #28]
 8002ece:	23c0      	movs	r3, #192	@ 0xc0
 8002ed0:	041b      	lsls	r3, r3, #16
 8002ed2:	401a      	ands	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d001      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e000      	b.n	8002ee2 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	0018      	movs	r0, r3
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	b00a      	add	sp, #40	@ 0x28
 8002ee8:	bdb0      	pop	{r4, r5, r7, pc}
 8002eea:	46c0      	nop			@ (mov r8, r8)
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	ff02ffff 	.word	0xff02ffff
 8002ef4:	feffffff 	.word	0xfeffffff

08002ef8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ef8:	b5b0      	push	{r4, r5, r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d101      	bne.n	8002f0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e128      	b.n	800315e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f0c:	4b96      	ldr	r3, [pc, #600]	@ (8003168 <HAL_RCC_ClockConfig+0x270>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2201      	movs	r2, #1
 8002f12:	4013      	ands	r3, r2
 8002f14:	683a      	ldr	r2, [r7, #0]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d91e      	bls.n	8002f58 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f1a:	4b93      	ldr	r3, [pc, #588]	@ (8003168 <HAL_RCC_ClockConfig+0x270>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	4393      	bics	r3, r2
 8002f22:	0019      	movs	r1, r3
 8002f24:	4b90      	ldr	r3, [pc, #576]	@ (8003168 <HAL_RCC_ClockConfig+0x270>)
 8002f26:	683a      	ldr	r2, [r7, #0]
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002f2c:	f7fe fbc8 	bl	80016c0 <HAL_GetTick>
 8002f30:	0003      	movs	r3, r0
 8002f32:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f34:	e009      	b.n	8002f4a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f36:	f7fe fbc3 	bl	80016c0 <HAL_GetTick>
 8002f3a:	0002      	movs	r2, r0
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	4a8a      	ldr	r2, [pc, #552]	@ (800316c <HAL_RCC_ClockConfig+0x274>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e109      	b.n	800315e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f4a:	4b87      	ldr	r3, [pc, #540]	@ (8003168 <HAL_RCC_ClockConfig+0x270>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	4013      	ands	r3, r2
 8002f52:	683a      	ldr	r2, [r7, #0]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d1ee      	bne.n	8002f36 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2202      	movs	r2, #2
 8002f5e:	4013      	ands	r3, r2
 8002f60:	d009      	beq.n	8002f76 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f62:	4b83      	ldr	r3, [pc, #524]	@ (8003170 <HAL_RCC_ClockConfig+0x278>)
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	22f0      	movs	r2, #240	@ 0xf0
 8002f68:	4393      	bics	r3, r2
 8002f6a:	0019      	movs	r1, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689a      	ldr	r2, [r3, #8]
 8002f70:	4b7f      	ldr	r3, [pc, #508]	@ (8003170 <HAL_RCC_ClockConfig+0x278>)
 8002f72:	430a      	orrs	r2, r1
 8002f74:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	d100      	bne.n	8002f82 <HAL_RCC_ClockConfig+0x8a>
 8002f80:	e089      	b.n	8003096 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d107      	bne.n	8002f9a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f8a:	4b79      	ldr	r3, [pc, #484]	@ (8003170 <HAL_RCC_ClockConfig+0x278>)
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	2380      	movs	r3, #128	@ 0x80
 8002f90:	029b      	lsls	r3, r3, #10
 8002f92:	4013      	ands	r3, r2
 8002f94:	d120      	bne.n	8002fd8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e0e1      	b.n	800315e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	2b03      	cmp	r3, #3
 8002fa0:	d107      	bne.n	8002fb2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002fa2:	4b73      	ldr	r3, [pc, #460]	@ (8003170 <HAL_RCC_ClockConfig+0x278>)
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	2380      	movs	r3, #128	@ 0x80
 8002fa8:	049b      	lsls	r3, r3, #18
 8002faa:	4013      	ands	r3, r2
 8002fac:	d114      	bne.n	8002fd8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e0d5      	b.n	800315e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d106      	bne.n	8002fc8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fba:	4b6d      	ldr	r3, [pc, #436]	@ (8003170 <HAL_RCC_ClockConfig+0x278>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2204      	movs	r2, #4
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	d109      	bne.n	8002fd8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e0ca      	b.n	800315e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002fc8:	4b69      	ldr	r3, [pc, #420]	@ (8003170 <HAL_RCC_ClockConfig+0x278>)
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	2380      	movs	r3, #128	@ 0x80
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	d101      	bne.n	8002fd8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e0c2      	b.n	800315e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fd8:	4b65      	ldr	r3, [pc, #404]	@ (8003170 <HAL_RCC_ClockConfig+0x278>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	2203      	movs	r2, #3
 8002fde:	4393      	bics	r3, r2
 8002fe0:	0019      	movs	r1, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685a      	ldr	r2, [r3, #4]
 8002fe6:	4b62      	ldr	r3, [pc, #392]	@ (8003170 <HAL_RCC_ClockConfig+0x278>)
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fec:	f7fe fb68 	bl	80016c0 <HAL_GetTick>
 8002ff0:	0003      	movs	r3, r0
 8002ff2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d111      	bne.n	8003020 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ffc:	e009      	b.n	8003012 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ffe:	f7fe fb5f 	bl	80016c0 <HAL_GetTick>
 8003002:	0002      	movs	r2, r0
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	4a58      	ldr	r2, [pc, #352]	@ (800316c <HAL_RCC_ClockConfig+0x274>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e0a5      	b.n	800315e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003012:	4b57      	ldr	r3, [pc, #348]	@ (8003170 <HAL_RCC_ClockConfig+0x278>)
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	220c      	movs	r2, #12
 8003018:	4013      	ands	r3, r2
 800301a:	2b08      	cmp	r3, #8
 800301c:	d1ef      	bne.n	8002ffe <HAL_RCC_ClockConfig+0x106>
 800301e:	e03a      	b.n	8003096 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	2b03      	cmp	r3, #3
 8003026:	d111      	bne.n	800304c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003028:	e009      	b.n	800303e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800302a:	f7fe fb49 	bl	80016c0 <HAL_GetTick>
 800302e:	0002      	movs	r2, r0
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	4a4d      	ldr	r2, [pc, #308]	@ (800316c <HAL_RCC_ClockConfig+0x274>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d901      	bls.n	800303e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e08f      	b.n	800315e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800303e:	4b4c      	ldr	r3, [pc, #304]	@ (8003170 <HAL_RCC_ClockConfig+0x278>)
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	220c      	movs	r2, #12
 8003044:	4013      	ands	r3, r2
 8003046:	2b0c      	cmp	r3, #12
 8003048:	d1ef      	bne.n	800302a <HAL_RCC_ClockConfig+0x132>
 800304a:	e024      	b.n	8003096 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d11b      	bne.n	800308c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003054:	e009      	b.n	800306a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003056:	f7fe fb33 	bl	80016c0 <HAL_GetTick>
 800305a:	0002      	movs	r2, r0
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	4a42      	ldr	r2, [pc, #264]	@ (800316c <HAL_RCC_ClockConfig+0x274>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d901      	bls.n	800306a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e079      	b.n	800315e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800306a:	4b41      	ldr	r3, [pc, #260]	@ (8003170 <HAL_RCC_ClockConfig+0x278>)
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	220c      	movs	r2, #12
 8003070:	4013      	ands	r3, r2
 8003072:	2b04      	cmp	r3, #4
 8003074:	d1ef      	bne.n	8003056 <HAL_RCC_ClockConfig+0x15e>
 8003076:	e00e      	b.n	8003096 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003078:	f7fe fb22 	bl	80016c0 <HAL_GetTick>
 800307c:	0002      	movs	r2, r0
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	4a3a      	ldr	r2, [pc, #232]	@ (800316c <HAL_RCC_ClockConfig+0x274>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d901      	bls.n	800308c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e068      	b.n	800315e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800308c:	4b38      	ldr	r3, [pc, #224]	@ (8003170 <HAL_RCC_ClockConfig+0x278>)
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	220c      	movs	r2, #12
 8003092:	4013      	ands	r3, r2
 8003094:	d1f0      	bne.n	8003078 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003096:	4b34      	ldr	r3, [pc, #208]	@ (8003168 <HAL_RCC_ClockConfig+0x270>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2201      	movs	r2, #1
 800309c:	4013      	ands	r3, r2
 800309e:	683a      	ldr	r2, [r7, #0]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d21e      	bcs.n	80030e2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030a4:	4b30      	ldr	r3, [pc, #192]	@ (8003168 <HAL_RCC_ClockConfig+0x270>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2201      	movs	r2, #1
 80030aa:	4393      	bics	r3, r2
 80030ac:	0019      	movs	r1, r3
 80030ae:	4b2e      	ldr	r3, [pc, #184]	@ (8003168 <HAL_RCC_ClockConfig+0x270>)
 80030b0:	683a      	ldr	r2, [r7, #0]
 80030b2:	430a      	orrs	r2, r1
 80030b4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80030b6:	f7fe fb03 	bl	80016c0 <HAL_GetTick>
 80030ba:	0003      	movs	r3, r0
 80030bc:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030be:	e009      	b.n	80030d4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030c0:	f7fe fafe 	bl	80016c0 <HAL_GetTick>
 80030c4:	0002      	movs	r2, r0
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	4a28      	ldr	r2, [pc, #160]	@ (800316c <HAL_RCC_ClockConfig+0x274>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d901      	bls.n	80030d4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e044      	b.n	800315e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030d4:	4b24      	ldr	r3, [pc, #144]	@ (8003168 <HAL_RCC_ClockConfig+0x270>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2201      	movs	r2, #1
 80030da:	4013      	ands	r3, r2
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d1ee      	bne.n	80030c0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2204      	movs	r2, #4
 80030e8:	4013      	ands	r3, r2
 80030ea:	d009      	beq.n	8003100 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030ec:	4b20      	ldr	r3, [pc, #128]	@ (8003170 <HAL_RCC_ClockConfig+0x278>)
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	4a20      	ldr	r2, [pc, #128]	@ (8003174 <HAL_RCC_ClockConfig+0x27c>)
 80030f2:	4013      	ands	r3, r2
 80030f4:	0019      	movs	r1, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68da      	ldr	r2, [r3, #12]
 80030fa:	4b1d      	ldr	r3, [pc, #116]	@ (8003170 <HAL_RCC_ClockConfig+0x278>)
 80030fc:	430a      	orrs	r2, r1
 80030fe:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2208      	movs	r2, #8
 8003106:	4013      	ands	r3, r2
 8003108:	d00a      	beq.n	8003120 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800310a:	4b19      	ldr	r3, [pc, #100]	@ (8003170 <HAL_RCC_ClockConfig+0x278>)
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	4a1a      	ldr	r2, [pc, #104]	@ (8003178 <HAL_RCC_ClockConfig+0x280>)
 8003110:	4013      	ands	r3, r2
 8003112:	0019      	movs	r1, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	00da      	lsls	r2, r3, #3
 800311a:	4b15      	ldr	r3, [pc, #84]	@ (8003170 <HAL_RCC_ClockConfig+0x278>)
 800311c:	430a      	orrs	r2, r1
 800311e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003120:	f000 f832 	bl	8003188 <HAL_RCC_GetSysClockFreq>
 8003124:	0001      	movs	r1, r0
 8003126:	4b12      	ldr	r3, [pc, #72]	@ (8003170 <HAL_RCC_ClockConfig+0x278>)
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	091b      	lsrs	r3, r3, #4
 800312c:	220f      	movs	r2, #15
 800312e:	4013      	ands	r3, r2
 8003130:	4a12      	ldr	r2, [pc, #72]	@ (800317c <HAL_RCC_ClockConfig+0x284>)
 8003132:	5cd3      	ldrb	r3, [r2, r3]
 8003134:	000a      	movs	r2, r1
 8003136:	40da      	lsrs	r2, r3
 8003138:	4b11      	ldr	r3, [pc, #68]	@ (8003180 <HAL_RCC_ClockConfig+0x288>)
 800313a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800313c:	4b11      	ldr	r3, [pc, #68]	@ (8003184 <HAL_RCC_ClockConfig+0x28c>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	250b      	movs	r5, #11
 8003142:	197c      	adds	r4, r7, r5
 8003144:	0018      	movs	r0, r3
 8003146:	f7fe fa75 	bl	8001634 <HAL_InitTick>
 800314a:	0003      	movs	r3, r0
 800314c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800314e:	197b      	adds	r3, r7, r5
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d002      	beq.n	800315c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003156:	197b      	adds	r3, r7, r5
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	e000      	b.n	800315e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	0018      	movs	r0, r3
 8003160:	46bd      	mov	sp, r7
 8003162:	b004      	add	sp, #16
 8003164:	bdb0      	pop	{r4, r5, r7, pc}
 8003166:	46c0      	nop			@ (mov r8, r8)
 8003168:	40022000 	.word	0x40022000
 800316c:	00001388 	.word	0x00001388
 8003170:	40021000 	.word	0x40021000
 8003174:	fffff8ff 	.word	0xfffff8ff
 8003178:	ffffc7ff 	.word	0xffffc7ff
 800317c:	08005b50 	.word	0x08005b50
 8003180:	20000008 	.word	0x20000008
 8003184:	2000000c 	.word	0x2000000c

08003188 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003188:	b5b0      	push	{r4, r5, r7, lr}
 800318a:	b08e      	sub	sp, #56	@ 0x38
 800318c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800318e:	4b4c      	ldr	r3, [pc, #304]	@ (80032c0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003194:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003196:	230c      	movs	r3, #12
 8003198:	4013      	ands	r3, r2
 800319a:	2b0c      	cmp	r3, #12
 800319c:	d014      	beq.n	80031c8 <HAL_RCC_GetSysClockFreq+0x40>
 800319e:	d900      	bls.n	80031a2 <HAL_RCC_GetSysClockFreq+0x1a>
 80031a0:	e07b      	b.n	800329a <HAL_RCC_GetSysClockFreq+0x112>
 80031a2:	2b04      	cmp	r3, #4
 80031a4:	d002      	beq.n	80031ac <HAL_RCC_GetSysClockFreq+0x24>
 80031a6:	2b08      	cmp	r3, #8
 80031a8:	d00b      	beq.n	80031c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80031aa:	e076      	b.n	800329a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80031ac:	4b44      	ldr	r3, [pc, #272]	@ (80032c0 <HAL_RCC_GetSysClockFreq+0x138>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2210      	movs	r2, #16
 80031b2:	4013      	ands	r3, r2
 80031b4:	d002      	beq.n	80031bc <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80031b6:	4b43      	ldr	r3, [pc, #268]	@ (80032c4 <HAL_RCC_GetSysClockFreq+0x13c>)
 80031b8:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80031ba:	e07c      	b.n	80032b6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80031bc:	4b42      	ldr	r3, [pc, #264]	@ (80032c8 <HAL_RCC_GetSysClockFreq+0x140>)
 80031be:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80031c0:	e079      	b.n	80032b6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031c2:	4b42      	ldr	r3, [pc, #264]	@ (80032cc <HAL_RCC_GetSysClockFreq+0x144>)
 80031c4:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80031c6:	e076      	b.n	80032b6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80031c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031ca:	0c9a      	lsrs	r2, r3, #18
 80031cc:	230f      	movs	r3, #15
 80031ce:	401a      	ands	r2, r3
 80031d0:	4b3f      	ldr	r3, [pc, #252]	@ (80032d0 <HAL_RCC_GetSysClockFreq+0x148>)
 80031d2:	5c9b      	ldrb	r3, [r3, r2]
 80031d4:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80031d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031d8:	0d9a      	lsrs	r2, r3, #22
 80031da:	2303      	movs	r3, #3
 80031dc:	4013      	ands	r3, r2
 80031de:	3301      	adds	r3, #1
 80031e0:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031e2:	4b37      	ldr	r3, [pc, #220]	@ (80032c0 <HAL_RCC_GetSysClockFreq+0x138>)
 80031e4:	68da      	ldr	r2, [r3, #12]
 80031e6:	2380      	movs	r3, #128	@ 0x80
 80031e8:	025b      	lsls	r3, r3, #9
 80031ea:	4013      	ands	r3, r2
 80031ec:	d01a      	beq.n	8003224 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80031ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031f0:	61bb      	str	r3, [r7, #24]
 80031f2:	2300      	movs	r3, #0
 80031f4:	61fb      	str	r3, [r7, #28]
 80031f6:	4a35      	ldr	r2, [pc, #212]	@ (80032cc <HAL_RCC_GetSysClockFreq+0x144>)
 80031f8:	2300      	movs	r3, #0
 80031fa:	69b8      	ldr	r0, [r7, #24]
 80031fc:	69f9      	ldr	r1, [r7, #28]
 80031fe:	f7fd f839 	bl	8000274 <__aeabi_lmul>
 8003202:	0002      	movs	r2, r0
 8003204:	000b      	movs	r3, r1
 8003206:	0010      	movs	r0, r2
 8003208:	0019      	movs	r1, r3
 800320a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800320c:	613b      	str	r3, [r7, #16]
 800320e:	2300      	movs	r3, #0
 8003210:	617b      	str	r3, [r7, #20]
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	f7fd f80d 	bl	8000234 <__aeabi_uldivmod>
 800321a:	0002      	movs	r2, r0
 800321c:	000b      	movs	r3, r1
 800321e:	0013      	movs	r3, r2
 8003220:	637b      	str	r3, [r7, #52]	@ 0x34
 8003222:	e037      	b.n	8003294 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003224:	4b26      	ldr	r3, [pc, #152]	@ (80032c0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2210      	movs	r2, #16
 800322a:	4013      	ands	r3, r2
 800322c:	d01a      	beq.n	8003264 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800322e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003230:	60bb      	str	r3, [r7, #8]
 8003232:	2300      	movs	r3, #0
 8003234:	60fb      	str	r3, [r7, #12]
 8003236:	4a23      	ldr	r2, [pc, #140]	@ (80032c4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003238:	2300      	movs	r3, #0
 800323a:	68b8      	ldr	r0, [r7, #8]
 800323c:	68f9      	ldr	r1, [r7, #12]
 800323e:	f7fd f819 	bl	8000274 <__aeabi_lmul>
 8003242:	0002      	movs	r2, r0
 8003244:	000b      	movs	r3, r1
 8003246:	0010      	movs	r0, r2
 8003248:	0019      	movs	r1, r3
 800324a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800324c:	603b      	str	r3, [r7, #0]
 800324e:	2300      	movs	r3, #0
 8003250:	607b      	str	r3, [r7, #4]
 8003252:	683a      	ldr	r2, [r7, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f7fc ffed 	bl	8000234 <__aeabi_uldivmod>
 800325a:	0002      	movs	r2, r0
 800325c:	000b      	movs	r3, r1
 800325e:	0013      	movs	r3, r2
 8003260:	637b      	str	r3, [r7, #52]	@ 0x34
 8003262:	e017      	b.n	8003294 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003266:	0018      	movs	r0, r3
 8003268:	2300      	movs	r3, #0
 800326a:	0019      	movs	r1, r3
 800326c:	4a16      	ldr	r2, [pc, #88]	@ (80032c8 <HAL_RCC_GetSysClockFreq+0x140>)
 800326e:	2300      	movs	r3, #0
 8003270:	f7fd f800 	bl	8000274 <__aeabi_lmul>
 8003274:	0002      	movs	r2, r0
 8003276:	000b      	movs	r3, r1
 8003278:	0010      	movs	r0, r2
 800327a:	0019      	movs	r1, r3
 800327c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800327e:	001c      	movs	r4, r3
 8003280:	2300      	movs	r3, #0
 8003282:	001d      	movs	r5, r3
 8003284:	0022      	movs	r2, r4
 8003286:	002b      	movs	r3, r5
 8003288:	f7fc ffd4 	bl	8000234 <__aeabi_uldivmod>
 800328c:	0002      	movs	r2, r0
 800328e:	000b      	movs	r3, r1
 8003290:	0013      	movs	r3, r2
 8003292:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8003294:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003296:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003298:	e00d      	b.n	80032b6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800329a:	4b09      	ldr	r3, [pc, #36]	@ (80032c0 <HAL_RCC_GetSysClockFreq+0x138>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	0b5b      	lsrs	r3, r3, #13
 80032a0:	2207      	movs	r2, #7
 80032a2:	4013      	ands	r3, r2
 80032a4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80032a6:	6a3b      	ldr	r3, [r7, #32]
 80032a8:	3301      	adds	r3, #1
 80032aa:	2280      	movs	r2, #128	@ 0x80
 80032ac:	0212      	lsls	r2, r2, #8
 80032ae:	409a      	lsls	r2, r3
 80032b0:	0013      	movs	r3, r2
 80032b2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80032b4:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80032b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80032b8:	0018      	movs	r0, r3
 80032ba:	46bd      	mov	sp, r7
 80032bc:	b00e      	add	sp, #56	@ 0x38
 80032be:	bdb0      	pop	{r4, r5, r7, pc}
 80032c0:	40021000 	.word	0x40021000
 80032c4:	003d0900 	.word	0x003d0900
 80032c8:	00f42400 	.word	0x00f42400
 80032cc:	007a1200 	.word	0x007a1200
 80032d0:	08005b68 	.word	0x08005b68

080032d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032d8:	4b02      	ldr	r3, [pc, #8]	@ (80032e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80032da:	681b      	ldr	r3, [r3, #0]
}
 80032dc:	0018      	movs	r0, r3
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	46c0      	nop			@ (mov r8, r8)
 80032e4:	20000008 	.word	0x20000008

080032e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80032ec:	f7ff fff2 	bl	80032d4 <HAL_RCC_GetHCLKFreq>
 80032f0:	0001      	movs	r1, r0
 80032f2:	4b06      	ldr	r3, [pc, #24]	@ (800330c <HAL_RCC_GetPCLK1Freq+0x24>)
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	0a1b      	lsrs	r3, r3, #8
 80032f8:	2207      	movs	r2, #7
 80032fa:	4013      	ands	r3, r2
 80032fc:	4a04      	ldr	r2, [pc, #16]	@ (8003310 <HAL_RCC_GetPCLK1Freq+0x28>)
 80032fe:	5cd3      	ldrb	r3, [r2, r3]
 8003300:	40d9      	lsrs	r1, r3
 8003302:	000b      	movs	r3, r1
}
 8003304:	0018      	movs	r0, r3
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	46c0      	nop			@ (mov r8, r8)
 800330c:	40021000 	.word	0x40021000
 8003310:	08005b60 	.word	0x08005b60

08003314 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003318:	f7ff ffdc 	bl	80032d4 <HAL_RCC_GetHCLKFreq>
 800331c:	0001      	movs	r1, r0
 800331e:	4b06      	ldr	r3, [pc, #24]	@ (8003338 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	0adb      	lsrs	r3, r3, #11
 8003324:	2207      	movs	r2, #7
 8003326:	4013      	ands	r3, r2
 8003328:	4a04      	ldr	r2, [pc, #16]	@ (800333c <HAL_RCC_GetPCLK2Freq+0x28>)
 800332a:	5cd3      	ldrb	r3, [r2, r3]
 800332c:	40d9      	lsrs	r1, r3
 800332e:	000b      	movs	r3, r1
}
 8003330:	0018      	movs	r0, r3
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	46c0      	nop			@ (mov r8, r8)
 8003338:	40021000 	.word	0x40021000
 800333c:	08005b60 	.word	0x08005b60

08003340 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b086      	sub	sp, #24
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003348:	2317      	movs	r3, #23
 800334a:	18fb      	adds	r3, r7, r3
 800334c:	2200      	movs	r2, #0
 800334e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2220      	movs	r2, #32
 8003356:	4013      	ands	r3, r2
 8003358:	d106      	bne.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	2380      	movs	r3, #128	@ 0x80
 8003360:	011b      	lsls	r3, r3, #4
 8003362:	4013      	ands	r3, r2
 8003364:	d100      	bne.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8003366:	e104      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003368:	4bb1      	ldr	r3, [pc, #708]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800336a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800336c:	2380      	movs	r3, #128	@ 0x80
 800336e:	055b      	lsls	r3, r3, #21
 8003370:	4013      	ands	r3, r2
 8003372:	d10a      	bne.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003374:	4bae      	ldr	r3, [pc, #696]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003376:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003378:	4bad      	ldr	r3, [pc, #692]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800337a:	2180      	movs	r1, #128	@ 0x80
 800337c:	0549      	lsls	r1, r1, #21
 800337e:	430a      	orrs	r2, r1
 8003380:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8003382:	2317      	movs	r3, #23
 8003384:	18fb      	adds	r3, r7, r3
 8003386:	2201      	movs	r2, #1
 8003388:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800338a:	4baa      	ldr	r3, [pc, #680]	@ (8003634 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	2380      	movs	r3, #128	@ 0x80
 8003390:	005b      	lsls	r3, r3, #1
 8003392:	4013      	ands	r3, r2
 8003394:	d11a      	bne.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003396:	4ba7      	ldr	r3, [pc, #668]	@ (8003634 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	4ba6      	ldr	r3, [pc, #664]	@ (8003634 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800339c:	2180      	movs	r1, #128	@ 0x80
 800339e:	0049      	lsls	r1, r1, #1
 80033a0:	430a      	orrs	r2, r1
 80033a2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033a4:	f7fe f98c 	bl	80016c0 <HAL_GetTick>
 80033a8:	0003      	movs	r3, r0
 80033aa:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ac:	e008      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ae:	f7fe f987 	bl	80016c0 <HAL_GetTick>
 80033b2:	0002      	movs	r2, r0
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	2b64      	cmp	r3, #100	@ 0x64
 80033ba:	d901      	bls.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e133      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033c0:	4b9c      	ldr	r3, [pc, #624]	@ (8003634 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	2380      	movs	r3, #128	@ 0x80
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	4013      	ands	r3, r2
 80033ca:	d0f0      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80033cc:	4b98      	ldr	r3, [pc, #608]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	23c0      	movs	r3, #192	@ 0xc0
 80033d2:	039b      	lsls	r3, r3, #14
 80033d4:	4013      	ands	r3, r2
 80033d6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685a      	ldr	r2, [r3, #4]
 80033dc:	23c0      	movs	r3, #192	@ 0xc0
 80033de:	039b      	lsls	r3, r3, #14
 80033e0:	4013      	ands	r3, r2
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d107      	bne.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	689a      	ldr	r2, [r3, #8]
 80033ec:	23c0      	movs	r3, #192	@ 0xc0
 80033ee:	039b      	lsls	r3, r3, #14
 80033f0:	4013      	ands	r3, r2
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d013      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685a      	ldr	r2, [r3, #4]
 80033fc:	23c0      	movs	r3, #192	@ 0xc0
 80033fe:	029b      	lsls	r3, r3, #10
 8003400:	401a      	ands	r2, r3
 8003402:	23c0      	movs	r3, #192	@ 0xc0
 8003404:	029b      	lsls	r3, r3, #10
 8003406:	429a      	cmp	r2, r3
 8003408:	d10a      	bne.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800340a:	4b89      	ldr	r3, [pc, #548]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	2380      	movs	r3, #128	@ 0x80
 8003410:	029b      	lsls	r3, r3, #10
 8003412:	401a      	ands	r2, r3
 8003414:	2380      	movs	r3, #128	@ 0x80
 8003416:	029b      	lsls	r3, r3, #10
 8003418:	429a      	cmp	r2, r3
 800341a:	d101      	bne.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e103      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003420:	4b83      	ldr	r3, [pc, #524]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003422:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003424:	23c0      	movs	r3, #192	@ 0xc0
 8003426:	029b      	lsls	r3, r3, #10
 8003428:	4013      	ands	r3, r2
 800342a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d049      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685a      	ldr	r2, [r3, #4]
 8003436:	23c0      	movs	r3, #192	@ 0xc0
 8003438:	029b      	lsls	r3, r3, #10
 800343a:	4013      	ands	r3, r2
 800343c:	68fa      	ldr	r2, [r7, #12]
 800343e:	429a      	cmp	r2, r3
 8003440:	d004      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2220      	movs	r2, #32
 8003448:	4013      	ands	r3, r2
 800344a:	d10d      	bne.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689a      	ldr	r2, [r3, #8]
 8003450:	23c0      	movs	r3, #192	@ 0xc0
 8003452:	029b      	lsls	r3, r3, #10
 8003454:	4013      	ands	r3, r2
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	429a      	cmp	r2, r3
 800345a:	d034      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	2380      	movs	r3, #128	@ 0x80
 8003462:	011b      	lsls	r3, r3, #4
 8003464:	4013      	ands	r3, r2
 8003466:	d02e      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003468:	4b71      	ldr	r3, [pc, #452]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800346a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800346c:	4a72      	ldr	r2, [pc, #456]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800346e:	4013      	ands	r3, r2
 8003470:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003472:	4b6f      	ldr	r3, [pc, #444]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003474:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003476:	4b6e      	ldr	r3, [pc, #440]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003478:	2180      	movs	r1, #128	@ 0x80
 800347a:	0309      	lsls	r1, r1, #12
 800347c:	430a      	orrs	r2, r1
 800347e:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003480:	4b6b      	ldr	r3, [pc, #428]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003482:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003484:	4b6a      	ldr	r3, [pc, #424]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003486:	496d      	ldr	r1, [pc, #436]	@ (800363c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003488:	400a      	ands	r2, r1
 800348a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800348c:	4b68      	ldr	r3, [pc, #416]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	2380      	movs	r3, #128	@ 0x80
 8003496:	005b      	lsls	r3, r3, #1
 8003498:	4013      	ands	r3, r2
 800349a:	d014      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800349c:	f7fe f910 	bl	80016c0 <HAL_GetTick>
 80034a0:	0003      	movs	r3, r0
 80034a2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80034a4:	e009      	b.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034a6:	f7fe f90b 	bl	80016c0 <HAL_GetTick>
 80034aa:	0002      	movs	r2, r0
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	4a63      	ldr	r2, [pc, #396]	@ (8003640 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d901      	bls.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e0b6      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80034ba:	4b5d      	ldr	r3, [pc, #372]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80034bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80034be:	2380      	movs	r3, #128	@ 0x80
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	4013      	ands	r3, r2
 80034c4:	d0ef      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	2380      	movs	r3, #128	@ 0x80
 80034cc:	011b      	lsls	r3, r3, #4
 80034ce:	4013      	ands	r3, r2
 80034d0:	d01f      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	689a      	ldr	r2, [r3, #8]
 80034d6:	23c0      	movs	r3, #192	@ 0xc0
 80034d8:	029b      	lsls	r3, r3, #10
 80034da:	401a      	ands	r2, r3
 80034dc:	23c0      	movs	r3, #192	@ 0xc0
 80034de:	029b      	lsls	r3, r3, #10
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d10c      	bne.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80034e4:	4b52      	ldr	r3, [pc, #328]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a56      	ldr	r2, [pc, #344]	@ (8003644 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80034ea:	4013      	ands	r3, r2
 80034ec:	0019      	movs	r1, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	689a      	ldr	r2, [r3, #8]
 80034f2:	23c0      	movs	r3, #192	@ 0xc0
 80034f4:	039b      	lsls	r3, r3, #14
 80034f6:	401a      	ands	r2, r3
 80034f8:	4b4d      	ldr	r3, [pc, #308]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80034fa:	430a      	orrs	r2, r1
 80034fc:	601a      	str	r2, [r3, #0]
 80034fe:	4b4c      	ldr	r3, [pc, #304]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003500:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	689a      	ldr	r2, [r3, #8]
 8003506:	23c0      	movs	r3, #192	@ 0xc0
 8003508:	029b      	lsls	r3, r3, #10
 800350a:	401a      	ands	r2, r3
 800350c:	4b48      	ldr	r3, [pc, #288]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800350e:	430a      	orrs	r2, r1
 8003510:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2220      	movs	r2, #32
 8003518:	4013      	ands	r3, r2
 800351a:	d01f      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685a      	ldr	r2, [r3, #4]
 8003520:	23c0      	movs	r3, #192	@ 0xc0
 8003522:	029b      	lsls	r3, r3, #10
 8003524:	401a      	ands	r2, r3
 8003526:	23c0      	movs	r3, #192	@ 0xc0
 8003528:	029b      	lsls	r3, r3, #10
 800352a:	429a      	cmp	r2, r3
 800352c:	d10c      	bne.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x208>
 800352e:	4b40      	ldr	r3, [pc, #256]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a44      	ldr	r2, [pc, #272]	@ (8003644 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003534:	4013      	ands	r3, r2
 8003536:	0019      	movs	r1, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685a      	ldr	r2, [r3, #4]
 800353c:	23c0      	movs	r3, #192	@ 0xc0
 800353e:	039b      	lsls	r3, r3, #14
 8003540:	401a      	ands	r2, r3
 8003542:	4b3b      	ldr	r3, [pc, #236]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003544:	430a      	orrs	r2, r1
 8003546:	601a      	str	r2, [r3, #0]
 8003548:	4b39      	ldr	r3, [pc, #228]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800354a:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685a      	ldr	r2, [r3, #4]
 8003550:	23c0      	movs	r3, #192	@ 0xc0
 8003552:	029b      	lsls	r3, r3, #10
 8003554:	401a      	ands	r2, r3
 8003556:	4b36      	ldr	r3, [pc, #216]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003558:	430a      	orrs	r2, r1
 800355a:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800355c:	2317      	movs	r3, #23
 800355e:	18fb      	adds	r3, r7, r3
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d105      	bne.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003566:	4b32      	ldr	r3, [pc, #200]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003568:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800356a:	4b31      	ldr	r3, [pc, #196]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800356c:	4936      	ldr	r1, [pc, #216]	@ (8003648 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800356e:	400a      	ands	r2, r1
 8003570:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2201      	movs	r2, #1
 8003578:	4013      	ands	r3, r2
 800357a:	d009      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800357c:	4b2c      	ldr	r3, [pc, #176]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800357e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003580:	2203      	movs	r2, #3
 8003582:	4393      	bics	r3, r2
 8003584:	0019      	movs	r1, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	68da      	ldr	r2, [r3, #12]
 800358a:	4b29      	ldr	r3, [pc, #164]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800358c:	430a      	orrs	r2, r1
 800358e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2202      	movs	r2, #2
 8003596:	4013      	ands	r3, r2
 8003598:	d009      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800359a:	4b25      	ldr	r3, [pc, #148]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800359c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800359e:	220c      	movs	r2, #12
 80035a0:	4393      	bics	r3, r2
 80035a2:	0019      	movs	r1, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	691a      	ldr	r2, [r3, #16]
 80035a8:	4b21      	ldr	r3, [pc, #132]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80035aa:	430a      	orrs	r2, r1
 80035ac:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2204      	movs	r2, #4
 80035b4:	4013      	ands	r3, r2
 80035b6:	d009      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035b8:	4b1d      	ldr	r3, [pc, #116]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80035ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035bc:	4a23      	ldr	r2, [pc, #140]	@ (800364c <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 80035be:	4013      	ands	r3, r2
 80035c0:	0019      	movs	r1, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	695a      	ldr	r2, [r3, #20]
 80035c6:	4b1a      	ldr	r3, [pc, #104]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80035c8:	430a      	orrs	r2, r1
 80035ca:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2208      	movs	r2, #8
 80035d2:	4013      	ands	r3, r2
 80035d4:	d009      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035d6:	4b16      	ldr	r3, [pc, #88]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80035d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035da:	4a1d      	ldr	r2, [pc, #116]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80035dc:	4013      	ands	r3, r2
 80035de:	0019      	movs	r1, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	699a      	ldr	r2, [r3, #24]
 80035e4:	4b12      	ldr	r3, [pc, #72]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80035e6:	430a      	orrs	r2, r1
 80035e8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2240      	movs	r2, #64	@ 0x40
 80035f0:	4013      	ands	r3, r2
 80035f2:	d009      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035f4:	4b0e      	ldr	r3, [pc, #56]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80035f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035f8:	4a16      	ldr	r2, [pc, #88]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80035fa:	4013      	ands	r3, r2
 80035fc:	0019      	movs	r1, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a1a      	ldr	r2, [r3, #32]
 8003602:	4b0b      	ldr	r3, [pc, #44]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003604:	430a      	orrs	r2, r1
 8003606:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2280      	movs	r2, #128	@ 0x80
 800360e:	4013      	ands	r3, r2
 8003610:	d009      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003612:	4b07      	ldr	r3, [pc, #28]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003616:	4a10      	ldr	r2, [pc, #64]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8003618:	4013      	ands	r3, r2
 800361a:	0019      	movs	r1, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	69da      	ldr	r2, [r3, #28]
 8003620:	4b03      	ldr	r3, [pc, #12]	@ (8003630 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003622:	430a      	orrs	r2, r1
 8003624:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	0018      	movs	r0, r3
 800362a:	46bd      	mov	sp, r7
 800362c:	b006      	add	sp, #24
 800362e:	bd80      	pop	{r7, pc}
 8003630:	40021000 	.word	0x40021000
 8003634:	40007000 	.word	0x40007000
 8003638:	fffcffff 	.word	0xfffcffff
 800363c:	fff7ffff 	.word	0xfff7ffff
 8003640:	00001388 	.word	0x00001388
 8003644:	ffcfffff 	.word	0xffcfffff
 8003648:	efffffff 	.word	0xefffffff
 800364c:	fffff3ff 	.word	0xfffff3ff
 8003650:	ffffcfff 	.word	0xffffcfff
 8003654:	fbffffff 	.word	0xfbffffff
 8003658:	fff3ffff 	.word	0xfff3ffff

0800365c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e032      	b.n	80036d4 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2239      	movs	r2, #57	@ 0x39
 8003672:	5c9b      	ldrb	r3, [r3, r2]
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d107      	bne.n	800368a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2238      	movs	r2, #56	@ 0x38
 800367e:	2100      	movs	r1, #0
 8003680:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	0018      	movs	r0, r3
 8003686:	f7fd fdef 	bl	8001268 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2239      	movs	r2, #57	@ 0x39
 800368e:	2102      	movs	r1, #2
 8003690:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	3304      	adds	r3, #4
 800369a:	0019      	movs	r1, r3
 800369c:	0010      	movs	r0, r2
 800369e:	f000 fa51 	bl	8003b44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	223e      	movs	r2, #62	@ 0x3e
 80036a6:	2101      	movs	r1, #1
 80036a8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	223a      	movs	r2, #58	@ 0x3a
 80036ae:	2101      	movs	r1, #1
 80036b0:	5499      	strb	r1, [r3, r2]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	223b      	movs	r2, #59	@ 0x3b
 80036b6:	2101      	movs	r1, #1
 80036b8:	5499      	strb	r1, [r3, r2]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	223c      	movs	r2, #60	@ 0x3c
 80036be:	2101      	movs	r1, #1
 80036c0:	5499      	strb	r1, [r3, r2]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	223d      	movs	r2, #61	@ 0x3d
 80036c6:	2101      	movs	r1, #1
 80036c8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2239      	movs	r2, #57	@ 0x39
 80036ce:	2101      	movs	r1, #1
 80036d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	0018      	movs	r0, r3
 80036d6:	46bd      	mov	sp, r7
 80036d8:	b002      	add	sp, #8
 80036da:	bd80      	pop	{r7, pc}

080036dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e032      	b.n	8003754 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2239      	movs	r2, #57	@ 0x39
 80036f2:	5c9b      	ldrb	r3, [r3, r2]
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d107      	bne.n	800370a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2238      	movs	r2, #56	@ 0x38
 80036fe:	2100      	movs	r1, #0
 8003700:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	0018      	movs	r0, r3
 8003706:	f000 f829 	bl	800375c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2239      	movs	r2, #57	@ 0x39
 800370e:	2102      	movs	r1, #2
 8003710:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	3304      	adds	r3, #4
 800371a:	0019      	movs	r1, r3
 800371c:	0010      	movs	r0, r2
 800371e:	f000 fa11 	bl	8003b44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	223e      	movs	r2, #62	@ 0x3e
 8003726:	2101      	movs	r1, #1
 8003728:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	223a      	movs	r2, #58	@ 0x3a
 800372e:	2101      	movs	r1, #1
 8003730:	5499      	strb	r1, [r3, r2]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	223b      	movs	r2, #59	@ 0x3b
 8003736:	2101      	movs	r1, #1
 8003738:	5499      	strb	r1, [r3, r2]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	223c      	movs	r2, #60	@ 0x3c
 800373e:	2101      	movs	r1, #1
 8003740:	5499      	strb	r1, [r3, r2]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	223d      	movs	r2, #61	@ 0x3d
 8003746:	2101      	movs	r1, #1
 8003748:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2239      	movs	r2, #57	@ 0x39
 800374e:	2101      	movs	r1, #1
 8003750:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003752:	2300      	movs	r3, #0
}
 8003754:	0018      	movs	r0, r3
 8003756:	46bd      	mov	sp, r7
 8003758:	b002      	add	sp, #8
 800375a:	bd80      	pop	{r7, pc}

0800375c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003764:	46c0      	nop			@ (mov r8, r8)
 8003766:	46bd      	mov	sp, r7
 8003768:	b002      	add	sp, #8
 800376a:	bd80      	pop	{r7, pc}

0800376c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d101      	bne.n	8003780 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e03a      	b.n	80037f6 <HAL_TIM_OnePulse_Init+0x8a>
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2239      	movs	r2, #57	@ 0x39
 8003784:	5c9b      	ldrb	r3, [r3, r2]
 8003786:	b2db      	uxtb	r3, r3
 8003788:	2b00      	cmp	r3, #0
 800378a:	d107      	bne.n	800379c <HAL_TIM_OnePulse_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2238      	movs	r2, #56	@ 0x38
 8003790:	2100      	movs	r1, #0
 8003792:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	0018      	movs	r0, r3
 8003798:	f000 f831 	bl	80037fe <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2239      	movs	r2, #57	@ 0x39
 80037a0:	2102      	movs	r1, #2
 80037a2:	5499      	strb	r1, [r3, r2]

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	3304      	adds	r3, #4
 80037ac:	0019      	movs	r1, r3
 80037ae:	0010      	movs	r0, r2
 80037b0:	f000 f9c8 	bl	8003b44 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2108      	movs	r1, #8
 80037c0:	438a      	bics	r2, r1
 80037c2:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6819      	ldr	r1, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	683a      	ldr	r2, [r7, #0]
 80037d0:	430a      	orrs	r2, r1
 80037d2:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	223e      	movs	r2, #62	@ 0x3e
 80037d8:	2101      	movs	r1, #1
 80037da:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	223a      	movs	r2, #58	@ 0x3a
 80037e0:	2101      	movs	r1, #1
 80037e2:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	223b      	movs	r2, #59	@ 0x3b
 80037e8:	2101      	movs	r1, #1
 80037ea:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2239      	movs	r2, #57	@ 0x39
 80037f0:	2101      	movs	r1, #1
 80037f2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	0018      	movs	r0, r3
 80037f8:	46bd      	mov	sp, r7
 80037fa:	b002      	add	sp, #8
 80037fc:	bd80      	pop	{r7, pc}

080037fe <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b082      	sub	sp, #8
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8003806:	46c0      	nop			@ (mov r8, r8)
 8003808:	46bd      	mov	sp, r7
 800380a:	b002      	add	sp, #8
 800380c:	bd80      	pop	{r7, pc}
	...

08003810 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800381c:	2317      	movs	r3, #23
 800381e:	18fb      	adds	r3, r7, r3
 8003820:	2200      	movs	r2, #0
 8003822:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2238      	movs	r2, #56	@ 0x38
 8003828:	5c9b      	ldrb	r3, [r3, r2]
 800382a:	2b01      	cmp	r3, #1
 800382c:	d101      	bne.n	8003832 <HAL_TIM_PWM_ConfigChannel+0x22>
 800382e:	2302      	movs	r3, #2
 8003830:	e0ad      	b.n	800398e <HAL_TIM_PWM_ConfigChannel+0x17e>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2238      	movs	r2, #56	@ 0x38
 8003836:	2101      	movs	r1, #1
 8003838:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2b0c      	cmp	r3, #12
 800383e:	d100      	bne.n	8003842 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003840:	e076      	b.n	8003930 <HAL_TIM_PWM_ConfigChannel+0x120>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2b0c      	cmp	r3, #12
 8003846:	d900      	bls.n	800384a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8003848:	e095      	b.n	8003976 <HAL_TIM_PWM_ConfigChannel+0x166>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2b08      	cmp	r3, #8
 800384e:	d04e      	beq.n	80038ee <HAL_TIM_PWM_ConfigChannel+0xde>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b08      	cmp	r3, #8
 8003854:	d900      	bls.n	8003858 <HAL_TIM_PWM_ConfigChannel+0x48>
 8003856:	e08e      	b.n	8003976 <HAL_TIM_PWM_ConfigChannel+0x166>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d003      	beq.n	8003866 <HAL_TIM_PWM_ConfigChannel+0x56>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2b04      	cmp	r3, #4
 8003862:	d021      	beq.n	80038a8 <HAL_TIM_PWM_ConfigChannel+0x98>
 8003864:	e087      	b.n	8003976 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68ba      	ldr	r2, [r7, #8]
 800386c:	0011      	movs	r1, r2
 800386e:	0018      	movs	r0, r3
 8003870:	f000 f9bc 	bl	8003bec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	699a      	ldr	r2, [r3, #24]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2108      	movs	r1, #8
 8003880:	430a      	orrs	r2, r1
 8003882:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	699a      	ldr	r2, [r3, #24]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2104      	movs	r1, #4
 8003890:	438a      	bics	r2, r1
 8003892:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6999      	ldr	r1, [r3, #24]
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	68da      	ldr	r2, [r3, #12]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	430a      	orrs	r2, r1
 80038a4:	619a      	str	r2, [r3, #24]
      break;
 80038a6:	e06b      	b.n	8003980 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68ba      	ldr	r2, [r7, #8]
 80038ae:	0011      	movs	r1, r2
 80038b0:	0018      	movs	r0, r3
 80038b2:	f000 f9d7 	bl	8003c64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	699a      	ldr	r2, [r3, #24]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2180      	movs	r1, #128	@ 0x80
 80038c2:	0109      	lsls	r1, r1, #4
 80038c4:	430a      	orrs	r2, r1
 80038c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	699a      	ldr	r2, [r3, #24]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4931      	ldr	r1, [pc, #196]	@ (8003998 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80038d4:	400a      	ands	r2, r1
 80038d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6999      	ldr	r1, [r3, #24]
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	021a      	lsls	r2, r3, #8
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	430a      	orrs	r2, r1
 80038ea:	619a      	str	r2, [r3, #24]
      break;
 80038ec:	e048      	b.n	8003980 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68ba      	ldr	r2, [r7, #8]
 80038f4:	0011      	movs	r1, r2
 80038f6:	0018      	movs	r0, r3
 80038f8:	f000 f9f6 	bl	8003ce8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	69da      	ldr	r2, [r3, #28]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2108      	movs	r1, #8
 8003908:	430a      	orrs	r2, r1
 800390a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	69da      	ldr	r2, [r3, #28]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2104      	movs	r1, #4
 8003918:	438a      	bics	r2, r1
 800391a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	69d9      	ldr	r1, [r3, #28]
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	68da      	ldr	r2, [r3, #12]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	430a      	orrs	r2, r1
 800392c:	61da      	str	r2, [r3, #28]
      break;
 800392e:	e027      	b.n	8003980 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68ba      	ldr	r2, [r7, #8]
 8003936:	0011      	movs	r1, r2
 8003938:	0018      	movs	r0, r3
 800393a:	f000 fa15 	bl	8003d68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	69da      	ldr	r2, [r3, #28]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2180      	movs	r1, #128	@ 0x80
 800394a:	0109      	lsls	r1, r1, #4
 800394c:	430a      	orrs	r2, r1
 800394e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	69da      	ldr	r2, [r3, #28]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	490f      	ldr	r1, [pc, #60]	@ (8003998 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800395c:	400a      	ands	r2, r1
 800395e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	69d9      	ldr	r1, [r3, #28]
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	021a      	lsls	r2, r3, #8
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	430a      	orrs	r2, r1
 8003972:	61da      	str	r2, [r3, #28]
      break;
 8003974:	e004      	b.n	8003980 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8003976:	2317      	movs	r3, #23
 8003978:	18fb      	adds	r3, r7, r3
 800397a:	2201      	movs	r2, #1
 800397c:	701a      	strb	r2, [r3, #0]
      break;
 800397e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2238      	movs	r2, #56	@ 0x38
 8003984:	2100      	movs	r1, #0
 8003986:	5499      	strb	r1, [r3, r2]

  return status;
 8003988:	2317      	movs	r3, #23
 800398a:	18fb      	adds	r3, r7, r3
 800398c:	781b      	ldrb	r3, [r3, #0]
}
 800398e:	0018      	movs	r0, r3
 8003990:	46bd      	mov	sp, r7
 8003992:	b006      	add	sp, #24
 8003994:	bd80      	pop	{r7, pc}
 8003996:	46c0      	nop			@ (mov r8, r8)
 8003998:	fffffbff 	.word	0xfffffbff

0800399c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039a6:	230f      	movs	r3, #15
 80039a8:	18fb      	adds	r3, r7, r3
 80039aa:	2200      	movs	r2, #0
 80039ac:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2238      	movs	r2, #56	@ 0x38
 80039b2:	5c9b      	ldrb	r3, [r3, r2]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d101      	bne.n	80039bc <HAL_TIM_ConfigClockSource+0x20>
 80039b8:	2302      	movs	r3, #2
 80039ba:	e0bc      	b.n	8003b36 <HAL_TIM_ConfigClockSource+0x19a>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2238      	movs	r2, #56	@ 0x38
 80039c0:	2101      	movs	r1, #1
 80039c2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2239      	movs	r2, #57	@ 0x39
 80039c8:	2102      	movs	r1, #2
 80039ca:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	2277      	movs	r2, #119	@ 0x77
 80039d8:	4393      	bics	r3, r2
 80039da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	4a58      	ldr	r2, [pc, #352]	@ (8003b40 <HAL_TIM_ConfigClockSource+0x1a4>)
 80039e0:	4013      	ands	r3, r2
 80039e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68ba      	ldr	r2, [r7, #8]
 80039ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2280      	movs	r2, #128	@ 0x80
 80039f2:	0192      	lsls	r2, r2, #6
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d040      	beq.n	8003a7a <HAL_TIM_ConfigClockSource+0xde>
 80039f8:	2280      	movs	r2, #128	@ 0x80
 80039fa:	0192      	lsls	r2, r2, #6
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d900      	bls.n	8003a02 <HAL_TIM_ConfigClockSource+0x66>
 8003a00:	e088      	b.n	8003b14 <HAL_TIM_ConfigClockSource+0x178>
 8003a02:	2280      	movs	r2, #128	@ 0x80
 8003a04:	0152      	lsls	r2, r2, #5
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d100      	bne.n	8003a0c <HAL_TIM_ConfigClockSource+0x70>
 8003a0a:	e088      	b.n	8003b1e <HAL_TIM_ConfigClockSource+0x182>
 8003a0c:	2280      	movs	r2, #128	@ 0x80
 8003a0e:	0152      	lsls	r2, r2, #5
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d900      	bls.n	8003a16 <HAL_TIM_ConfigClockSource+0x7a>
 8003a14:	e07e      	b.n	8003b14 <HAL_TIM_ConfigClockSource+0x178>
 8003a16:	2b70      	cmp	r3, #112	@ 0x70
 8003a18:	d018      	beq.n	8003a4c <HAL_TIM_ConfigClockSource+0xb0>
 8003a1a:	d900      	bls.n	8003a1e <HAL_TIM_ConfigClockSource+0x82>
 8003a1c:	e07a      	b.n	8003b14 <HAL_TIM_ConfigClockSource+0x178>
 8003a1e:	2b60      	cmp	r3, #96	@ 0x60
 8003a20:	d04f      	beq.n	8003ac2 <HAL_TIM_ConfigClockSource+0x126>
 8003a22:	d900      	bls.n	8003a26 <HAL_TIM_ConfigClockSource+0x8a>
 8003a24:	e076      	b.n	8003b14 <HAL_TIM_ConfigClockSource+0x178>
 8003a26:	2b50      	cmp	r3, #80	@ 0x50
 8003a28:	d03b      	beq.n	8003aa2 <HAL_TIM_ConfigClockSource+0x106>
 8003a2a:	d900      	bls.n	8003a2e <HAL_TIM_ConfigClockSource+0x92>
 8003a2c:	e072      	b.n	8003b14 <HAL_TIM_ConfigClockSource+0x178>
 8003a2e:	2b40      	cmp	r3, #64	@ 0x40
 8003a30:	d057      	beq.n	8003ae2 <HAL_TIM_ConfigClockSource+0x146>
 8003a32:	d900      	bls.n	8003a36 <HAL_TIM_ConfigClockSource+0x9a>
 8003a34:	e06e      	b.n	8003b14 <HAL_TIM_ConfigClockSource+0x178>
 8003a36:	2b30      	cmp	r3, #48	@ 0x30
 8003a38:	d063      	beq.n	8003b02 <HAL_TIM_ConfigClockSource+0x166>
 8003a3a:	d86b      	bhi.n	8003b14 <HAL_TIM_ConfigClockSource+0x178>
 8003a3c:	2b20      	cmp	r3, #32
 8003a3e:	d060      	beq.n	8003b02 <HAL_TIM_ConfigClockSource+0x166>
 8003a40:	d868      	bhi.n	8003b14 <HAL_TIM_ConfigClockSource+0x178>
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d05d      	beq.n	8003b02 <HAL_TIM_ConfigClockSource+0x166>
 8003a46:	2b10      	cmp	r3, #16
 8003a48:	d05b      	beq.n	8003b02 <HAL_TIM_ConfigClockSource+0x166>
 8003a4a:	e063      	b.n	8003b14 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a5c:	f000 fa44 	bl	8003ee8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	2277      	movs	r2, #119	@ 0x77
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68ba      	ldr	r2, [r7, #8]
 8003a76:	609a      	str	r2, [r3, #8]
      break;
 8003a78:	e052      	b.n	8003b20 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a8a:	f000 fa2d 	bl	8003ee8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	689a      	ldr	r2, [r3, #8]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2180      	movs	r1, #128	@ 0x80
 8003a9a:	01c9      	lsls	r1, r1, #7
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	609a      	str	r2, [r3, #8]
      break;
 8003aa0:	e03e      	b.n	8003b20 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aae:	001a      	movs	r2, r3
 8003ab0:	f000 f9a0 	bl	8003df4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2150      	movs	r1, #80	@ 0x50
 8003aba:	0018      	movs	r0, r3
 8003abc:	f000 f9fa 	bl	8003eb4 <TIM_ITRx_SetConfig>
      break;
 8003ac0:	e02e      	b.n	8003b20 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ace:	001a      	movs	r2, r3
 8003ad0:	f000 f9be 	bl	8003e50 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2160      	movs	r1, #96	@ 0x60
 8003ada:	0018      	movs	r0, r3
 8003adc:	f000 f9ea 	bl	8003eb4 <TIM_ITRx_SetConfig>
      break;
 8003ae0:	e01e      	b.n	8003b20 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aee:	001a      	movs	r2, r3
 8003af0:	f000 f980 	bl	8003df4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2140      	movs	r1, #64	@ 0x40
 8003afa:	0018      	movs	r0, r3
 8003afc:	f000 f9da 	bl	8003eb4 <TIM_ITRx_SetConfig>
      break;
 8003b00:	e00e      	b.n	8003b20 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	0019      	movs	r1, r3
 8003b0c:	0010      	movs	r0, r2
 8003b0e:	f000 f9d1 	bl	8003eb4 <TIM_ITRx_SetConfig>
      break;
 8003b12:	e005      	b.n	8003b20 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003b14:	230f      	movs	r3, #15
 8003b16:	18fb      	adds	r3, r7, r3
 8003b18:	2201      	movs	r2, #1
 8003b1a:	701a      	strb	r2, [r3, #0]
      break;
 8003b1c:	e000      	b.n	8003b20 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003b1e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2239      	movs	r2, #57	@ 0x39
 8003b24:	2101      	movs	r1, #1
 8003b26:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2238      	movs	r2, #56	@ 0x38
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	5499      	strb	r1, [r3, r2]

  return status;
 8003b30:	230f      	movs	r3, #15
 8003b32:	18fb      	adds	r3, r7, r3
 8003b34:	781b      	ldrb	r3, [r3, #0]
}
 8003b36:	0018      	movs	r0, r3
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	b004      	add	sp, #16
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	46c0      	nop			@ (mov r8, r8)
 8003b40:	ffff00ff 	.word	0xffff00ff

08003b44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	2380      	movs	r3, #128	@ 0x80
 8003b58:	05db      	lsls	r3, r3, #23
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d007      	beq.n	8003b6e <TIM_Base_SetConfig+0x2a>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a1f      	ldr	r2, [pc, #124]	@ (8003be0 <TIM_Base_SetConfig+0x9c>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d003      	beq.n	8003b6e <TIM_Base_SetConfig+0x2a>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a1e      	ldr	r2, [pc, #120]	@ (8003be4 <TIM_Base_SetConfig+0xa0>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d108      	bne.n	8003b80 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2270      	movs	r2, #112	@ 0x70
 8003b72:	4393      	bics	r3, r2
 8003b74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	2380      	movs	r3, #128	@ 0x80
 8003b84:	05db      	lsls	r3, r3, #23
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d007      	beq.n	8003b9a <TIM_Base_SetConfig+0x56>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a14      	ldr	r2, [pc, #80]	@ (8003be0 <TIM_Base_SetConfig+0x9c>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d003      	beq.n	8003b9a <TIM_Base_SetConfig+0x56>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a13      	ldr	r2, [pc, #76]	@ (8003be4 <TIM_Base_SetConfig+0xa0>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d108      	bne.n	8003bac <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	4a12      	ldr	r2, [pc, #72]	@ (8003be8 <TIM_Base_SetConfig+0xa4>)
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2280      	movs	r2, #128	@ 0x80
 8003bb0:	4393      	bics	r3, r2
 8003bb2:	001a      	movs	r2, r3
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	689a      	ldr	r2, [r3, #8]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	615a      	str	r2, [r3, #20]
}
 8003bd8:	46c0      	nop			@ (mov r8, r8)
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	b004      	add	sp, #16
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	40010800 	.word	0x40010800
 8003be4:	40011400 	.word	0x40011400
 8003be8:	fffffcff 	.word	0xfffffcff

08003bec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b086      	sub	sp, #24
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a1b      	ldr	r3, [r3, #32]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	4393      	bics	r3, r2
 8003bfe:	001a      	movs	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a1b      	ldr	r3, [r3, #32]
 8003c08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	699b      	ldr	r3, [r3, #24]
 8003c14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2270      	movs	r2, #112	@ 0x70
 8003c1a:	4393      	bics	r3, r2
 8003c1c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2203      	movs	r2, #3
 8003c22:	4393      	bics	r3, r2
 8003c24:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	2202      	movs	r2, #2
 8003c34:	4393      	bics	r3, r2
 8003c36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	685a      	ldr	r2, [r3, #4]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	621a      	str	r2, [r3, #32]
}
 8003c5c:	46c0      	nop			@ (mov r8, r8)
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	b006      	add	sp, #24
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b086      	sub	sp, #24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	2210      	movs	r2, #16
 8003c74:	4393      	bics	r3, r2
 8003c76:	001a      	movs	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a1b      	ldr	r3, [r3, #32]
 8003c80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	4a13      	ldr	r2, [pc, #76]	@ (8003ce0 <TIM_OC2_SetConfig+0x7c>)
 8003c92:	4013      	ands	r3, r2
 8003c94:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	4a12      	ldr	r2, [pc, #72]	@ (8003ce4 <TIM_OC2_SetConfig+0x80>)
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	021b      	lsls	r3, r3, #8
 8003ca4:	68fa      	ldr	r2, [r7, #12]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	2220      	movs	r2, #32
 8003cae:	4393      	bics	r3, r2
 8003cb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	011b      	lsls	r3, r3, #4
 8003cb8:	697a      	ldr	r2, [r7, #20]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	693a      	ldr	r2, [r7, #16]
 8003cc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	685a      	ldr	r2, [r3, #4]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	697a      	ldr	r2, [r7, #20]
 8003cd6:	621a      	str	r2, [r3, #32]
}
 8003cd8:	46c0      	nop			@ (mov r8, r8)
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	b006      	add	sp, #24
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	ffff8fff 	.word	0xffff8fff
 8003ce4:	fffffcff 	.word	0xfffffcff

08003ce8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b086      	sub	sp, #24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	4a1a      	ldr	r2, [pc, #104]	@ (8003d60 <TIM_OC3_SetConfig+0x78>)
 8003cf8:	401a      	ands	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	69db      	ldr	r3, [r3, #28]
 8003d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2270      	movs	r2, #112	@ 0x70
 8003d14:	4393      	bics	r3, r2
 8003d16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2203      	movs	r2, #3
 8003d1c:	4393      	bics	r3, r2
 8003d1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	4a0d      	ldr	r2, [pc, #52]	@ (8003d64 <TIM_OC3_SetConfig+0x7c>)
 8003d2e:	4013      	ands	r3, r2
 8003d30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	021b      	lsls	r3, r3, #8
 8003d38:	697a      	ldr	r2, [r7, #20]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	697a      	ldr	r2, [r7, #20]
 8003d56:	621a      	str	r2, [r3, #32]
}
 8003d58:	46c0      	nop			@ (mov r8, r8)
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	b006      	add	sp, #24
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	fffffeff 	.word	0xfffffeff
 8003d64:	fffffdff 	.word	0xfffffdff

08003d68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b086      	sub	sp, #24
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a1b      	ldr	r3, [r3, #32]
 8003d76:	4a1b      	ldr	r2, [pc, #108]	@ (8003de4 <TIM_OC4_SetConfig+0x7c>)
 8003d78:	401a      	ands	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	69db      	ldr	r3, [r3, #28]
 8003d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	4a15      	ldr	r2, [pc, #84]	@ (8003de8 <TIM_OC4_SetConfig+0x80>)
 8003d94:	4013      	ands	r3, r2
 8003d96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	4a14      	ldr	r2, [pc, #80]	@ (8003dec <TIM_OC4_SetConfig+0x84>)
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	021b      	lsls	r3, r3, #8
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	4a10      	ldr	r2, [pc, #64]	@ (8003df0 <TIM_OC4_SetConfig+0x88>)
 8003db0:	4013      	ands	r3, r2
 8003db2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	031b      	lsls	r3, r3, #12
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	685a      	ldr	r2, [r3, #4]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	621a      	str	r2, [r3, #32]
}
 8003dda:	46c0      	nop			@ (mov r8, r8)
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	b006      	add	sp, #24
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	46c0      	nop			@ (mov r8, r8)
 8003de4:	ffffefff 	.word	0xffffefff
 8003de8:	ffff8fff 	.word	0xffff8fff
 8003dec:	fffffcff 	.word	0xfffffcff
 8003df0:	ffffdfff 	.word	0xffffdfff

08003df4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b086      	sub	sp, #24
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6a1b      	ldr	r3, [r3, #32]
 8003e04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	4393      	bics	r3, r2
 8003e0e:	001a      	movs	r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	22f0      	movs	r2, #240	@ 0xf0
 8003e1e:	4393      	bics	r3, r2
 8003e20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	011b      	lsls	r3, r3, #4
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	220a      	movs	r2, #10
 8003e30:	4393      	bics	r3, r2
 8003e32:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e34:	697a      	ldr	r2, [r7, #20]
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	621a      	str	r2, [r3, #32]
}
 8003e48:	46c0      	nop			@ (mov r8, r8)
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	b006      	add	sp, #24
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6a1b      	ldr	r3, [r3, #32]
 8003e60:	2210      	movs	r2, #16
 8003e62:	4393      	bics	r3, r2
 8003e64:	001a      	movs	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6a1b      	ldr	r3, [r3, #32]
 8003e74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	4a0d      	ldr	r2, [pc, #52]	@ (8003eb0 <TIM_TI2_ConfigInputStage+0x60>)
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	031b      	lsls	r3, r3, #12
 8003e82:	697a      	ldr	r2, [r7, #20]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	22a0      	movs	r2, #160	@ 0xa0
 8003e8c:	4393      	bics	r3, r2
 8003e8e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	011b      	lsls	r3, r3, #4
 8003e94:	693a      	ldr	r2, [r7, #16]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	621a      	str	r2, [r3, #32]
}
 8003ea6:	46c0      	nop			@ (mov r8, r8)
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	b006      	add	sp, #24
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	46c0      	nop			@ (mov r8, r8)
 8003eb0:	ffff0fff 	.word	0xffff0fff

08003eb4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2270      	movs	r2, #112	@ 0x70
 8003ec8:	4393      	bics	r3, r2
 8003eca:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	2207      	movs	r2, #7
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	609a      	str	r2, [r3, #8]
}
 8003ede:	46c0      	nop			@ (mov r8, r8)
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	b004      	add	sp, #16
 8003ee4:	bd80      	pop	{r7, pc}
	...

08003ee8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b086      	sub	sp, #24
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	60b9      	str	r1, [r7, #8]
 8003ef2:	607a      	str	r2, [r7, #4]
 8003ef4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	4a09      	ldr	r2, [pc, #36]	@ (8003f24 <TIM_ETR_SetConfig+0x3c>)
 8003f00:	4013      	ands	r3, r2
 8003f02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	021a      	lsls	r2, r3, #8
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	697a      	ldr	r2, [r7, #20]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	697a      	ldr	r2, [r7, #20]
 8003f1a:	609a      	str	r2, [r3, #8]
}
 8003f1c:	46c0      	nop			@ (mov r8, r8)
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	b006      	add	sp, #24
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	ffff00ff 	.word	0xffff00ff

08003f28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2238      	movs	r2, #56	@ 0x38
 8003f36:	5c9b      	ldrb	r3, [r3, r2]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d101      	bne.n	8003f40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f3c:	2302      	movs	r3, #2
 8003f3e:	e042      	b.n	8003fc6 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2238      	movs	r2, #56	@ 0x38
 8003f44:	2101      	movs	r1, #1
 8003f46:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2239      	movs	r2, #57	@ 0x39
 8003f4c:	2102      	movs	r1, #2
 8003f4e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2270      	movs	r2, #112	@ 0x70
 8003f64:	4393      	bics	r3, r2
 8003f66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	2380      	movs	r3, #128	@ 0x80
 8003f80:	05db      	lsls	r3, r3, #23
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d009      	beq.n	8003f9a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a11      	ldr	r2, [pc, #68]	@ (8003fd0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d004      	beq.n	8003f9a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a0f      	ldr	r2, [pc, #60]	@ (8003fd4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d10c      	bne.n	8003fb4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	2280      	movs	r2, #128	@ 0x80
 8003f9e:	4393      	bics	r3, r2
 8003fa0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	68ba      	ldr	r2, [r7, #8]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68ba      	ldr	r2, [r7, #8]
 8003fb2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2239      	movs	r2, #57	@ 0x39
 8003fb8:	2101      	movs	r1, #1
 8003fba:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2238      	movs	r2, #56	@ 0x38
 8003fc0:	2100      	movs	r1, #0
 8003fc2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	0018      	movs	r0, r3
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	b004      	add	sp, #16
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	46c0      	nop			@ (mov r8, r8)
 8003fd0:	40010800 	.word	0x40010800
 8003fd4:	40011400 	.word	0x40011400

08003fd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d101      	bne.n	8003fea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e044      	b.n	8004074 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d107      	bne.n	8004002 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2278      	movs	r2, #120	@ 0x78
 8003ff6:	2100      	movs	r1, #0
 8003ff8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	0018      	movs	r0, r3
 8003ffe:	f7fd f9b5 	bl	800136c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2224      	movs	r2, #36	@ 0x24
 8004006:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2101      	movs	r1, #1
 8004014:	438a      	bics	r2, r1
 8004016:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	0018      	movs	r0, r3
 800401c:	f000 f8d0 	bl	80041c0 <UART_SetConfig>
 8004020:	0003      	movs	r3, r0
 8004022:	2b01      	cmp	r3, #1
 8004024:	d101      	bne.n	800402a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e024      	b.n	8004074 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800402e:	2b00      	cmp	r3, #0
 8004030:	d003      	beq.n	800403a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	0018      	movs	r0, r3
 8004036:	f000 fb47 	bl	80046c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	685a      	ldr	r2, [r3, #4]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	490d      	ldr	r1, [pc, #52]	@ (800407c <HAL_UART_Init+0xa4>)
 8004046:	400a      	ands	r2, r1
 8004048:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	689a      	ldr	r2, [r3, #8]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	212a      	movs	r1, #42	@ 0x2a
 8004056:	438a      	bics	r2, r1
 8004058:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2101      	movs	r1, #1
 8004066:	430a      	orrs	r2, r1
 8004068:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	0018      	movs	r0, r3
 800406e:	f000 fbdf 	bl	8004830 <UART_CheckIdleState>
 8004072:	0003      	movs	r3, r0
}
 8004074:	0018      	movs	r0, r3
 8004076:	46bd      	mov	sp, r7
 8004078:	b002      	add	sp, #8
 800407a:	bd80      	pop	{r7, pc}
 800407c:	ffffb7ff 	.word	0xffffb7ff

08004080 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b08a      	sub	sp, #40	@ 0x28
 8004084:	af02      	add	r7, sp, #8
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	603b      	str	r3, [r7, #0]
 800408c:	1dbb      	adds	r3, r7, #6
 800408e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004094:	2b20      	cmp	r3, #32
 8004096:	d000      	beq.n	800409a <HAL_UART_Transmit+0x1a>
 8004098:	e08c      	b.n	80041b4 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d003      	beq.n	80040a8 <HAL_UART_Transmit+0x28>
 80040a0:	1dbb      	adds	r3, r7, #6
 80040a2:	881b      	ldrh	r3, [r3, #0]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d101      	bne.n	80040ac <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e084      	b.n	80041b6 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	689a      	ldr	r2, [r3, #8]
 80040b0:	2380      	movs	r3, #128	@ 0x80
 80040b2:	015b      	lsls	r3, r3, #5
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d109      	bne.n	80040cc <HAL_UART_Transmit+0x4c>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d105      	bne.n	80040cc <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	2201      	movs	r2, #1
 80040c4:	4013      	ands	r3, r2
 80040c6:	d001      	beq.n	80040cc <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e074      	b.n	80041b6 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2284      	movs	r2, #132	@ 0x84
 80040d0:	2100      	movs	r1, #0
 80040d2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2221      	movs	r2, #33	@ 0x21
 80040d8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040da:	f7fd faf1 	bl	80016c0 <HAL_GetTick>
 80040de:	0003      	movs	r3, r0
 80040e0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	1dba      	adds	r2, r7, #6
 80040e6:	2150      	movs	r1, #80	@ 0x50
 80040e8:	8812      	ldrh	r2, [r2, #0]
 80040ea:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	1dba      	adds	r2, r7, #6
 80040f0:	2152      	movs	r1, #82	@ 0x52
 80040f2:	8812      	ldrh	r2, [r2, #0]
 80040f4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	689a      	ldr	r2, [r3, #8]
 80040fa:	2380      	movs	r3, #128	@ 0x80
 80040fc:	015b      	lsls	r3, r3, #5
 80040fe:	429a      	cmp	r2, r3
 8004100:	d108      	bne.n	8004114 <HAL_UART_Transmit+0x94>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d104      	bne.n	8004114 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800410a:	2300      	movs	r3, #0
 800410c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	61bb      	str	r3, [r7, #24]
 8004112:	e003      	b.n	800411c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004118:	2300      	movs	r3, #0
 800411a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800411c:	e02f      	b.n	800417e <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800411e:	697a      	ldr	r2, [r7, #20]
 8004120:	68f8      	ldr	r0, [r7, #12]
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	9300      	str	r3, [sp, #0]
 8004126:	0013      	movs	r3, r2
 8004128:	2200      	movs	r2, #0
 800412a:	2180      	movs	r1, #128	@ 0x80
 800412c:	f000 fc28 	bl	8004980 <UART_WaitOnFlagUntilTimeout>
 8004130:	1e03      	subs	r3, r0, #0
 8004132:	d004      	beq.n	800413e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2220      	movs	r2, #32
 8004138:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e03b      	b.n	80041b6 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d10b      	bne.n	800415c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	881b      	ldrh	r3, [r3, #0]
 8004148:	001a      	movs	r2, r3
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	05d2      	lsls	r2, r2, #23
 8004150:	0dd2      	lsrs	r2, r2, #23
 8004152:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	3302      	adds	r3, #2
 8004158:	61bb      	str	r3, [r7, #24]
 800415a:	e007      	b.n	800416c <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	781a      	ldrb	r2, [r3, #0]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	3301      	adds	r3, #1
 800416a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2252      	movs	r2, #82	@ 0x52
 8004170:	5a9b      	ldrh	r3, [r3, r2]
 8004172:	b29b      	uxth	r3, r3
 8004174:	3b01      	subs	r3, #1
 8004176:	b299      	uxth	r1, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2252      	movs	r2, #82	@ 0x52
 800417c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2252      	movs	r2, #82	@ 0x52
 8004182:	5a9b      	ldrh	r3, [r3, r2]
 8004184:	b29b      	uxth	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1c9      	bne.n	800411e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	9300      	str	r3, [sp, #0]
 8004192:	0013      	movs	r3, r2
 8004194:	2200      	movs	r2, #0
 8004196:	2140      	movs	r1, #64	@ 0x40
 8004198:	f000 fbf2 	bl	8004980 <UART_WaitOnFlagUntilTimeout>
 800419c:	1e03      	subs	r3, r0, #0
 800419e:	d004      	beq.n	80041aa <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2220      	movs	r2, #32
 80041a4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e005      	b.n	80041b6 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2220      	movs	r2, #32
 80041ae:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80041b0:	2300      	movs	r3, #0
 80041b2:	e000      	b.n	80041b6 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80041b4:	2302      	movs	r3, #2
  }
}
 80041b6:	0018      	movs	r0, r3
 80041b8:	46bd      	mov	sp, r7
 80041ba:	b008      	add	sp, #32
 80041bc:	bd80      	pop	{r7, pc}
	...

080041c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041c0:	b5b0      	push	{r4, r5, r7, lr}
 80041c2:	b08e      	sub	sp, #56	@ 0x38
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041c8:	231a      	movs	r3, #26
 80041ca:	2218      	movs	r2, #24
 80041cc:	189b      	adds	r3, r3, r2
 80041ce:	19db      	adds	r3, r3, r7
 80041d0:	2200      	movs	r2, #0
 80041d2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	689a      	ldr	r2, [r3, #8]
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	431a      	orrs	r2, r3
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	431a      	orrs	r2, r3
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	69db      	ldr	r3, [r3, #28]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4ac6      	ldr	r2, [pc, #792]	@ (800450c <UART_SetConfig+0x34c>)
 80041f4:	4013      	ands	r3, r2
 80041f6:	0019      	movs	r1, r3
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80041fe:	430a      	orrs	r2, r1
 8004200:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	4ac1      	ldr	r2, [pc, #772]	@ (8004510 <UART_SetConfig+0x350>)
 800420a:	4013      	ands	r3, r2
 800420c:	0019      	movs	r1, r3
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	68da      	ldr	r2, [r3, #12]
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	430a      	orrs	r2, r1
 8004218:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4abb      	ldr	r2, [pc, #748]	@ (8004514 <UART_SetConfig+0x354>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d004      	beq.n	8004234 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	6a1b      	ldr	r3, [r3, #32]
 800422e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004230:	4313      	orrs	r3, r2
 8004232:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	4ab7      	ldr	r2, [pc, #732]	@ (8004518 <UART_SetConfig+0x358>)
 800423c:	4013      	ands	r3, r2
 800423e:	0019      	movs	r1, r3
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004246:	430a      	orrs	r2, r1
 8004248:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4ab3      	ldr	r2, [pc, #716]	@ (800451c <UART_SetConfig+0x35c>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d131      	bne.n	80042b8 <UART_SetConfig+0xf8>
 8004254:	4bb2      	ldr	r3, [pc, #712]	@ (8004520 <UART_SetConfig+0x360>)
 8004256:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004258:	2203      	movs	r2, #3
 800425a:	4013      	ands	r3, r2
 800425c:	2b03      	cmp	r3, #3
 800425e:	d01d      	beq.n	800429c <UART_SetConfig+0xdc>
 8004260:	d823      	bhi.n	80042aa <UART_SetConfig+0xea>
 8004262:	2b02      	cmp	r3, #2
 8004264:	d00c      	beq.n	8004280 <UART_SetConfig+0xc0>
 8004266:	d820      	bhi.n	80042aa <UART_SetConfig+0xea>
 8004268:	2b00      	cmp	r3, #0
 800426a:	d002      	beq.n	8004272 <UART_SetConfig+0xb2>
 800426c:	2b01      	cmp	r3, #1
 800426e:	d00e      	beq.n	800428e <UART_SetConfig+0xce>
 8004270:	e01b      	b.n	80042aa <UART_SetConfig+0xea>
 8004272:	231b      	movs	r3, #27
 8004274:	2218      	movs	r2, #24
 8004276:	189b      	adds	r3, r3, r2
 8004278:	19db      	adds	r3, r3, r7
 800427a:	2201      	movs	r2, #1
 800427c:	701a      	strb	r2, [r3, #0]
 800427e:	e09c      	b.n	80043ba <UART_SetConfig+0x1fa>
 8004280:	231b      	movs	r3, #27
 8004282:	2218      	movs	r2, #24
 8004284:	189b      	adds	r3, r3, r2
 8004286:	19db      	adds	r3, r3, r7
 8004288:	2202      	movs	r2, #2
 800428a:	701a      	strb	r2, [r3, #0]
 800428c:	e095      	b.n	80043ba <UART_SetConfig+0x1fa>
 800428e:	231b      	movs	r3, #27
 8004290:	2218      	movs	r2, #24
 8004292:	189b      	adds	r3, r3, r2
 8004294:	19db      	adds	r3, r3, r7
 8004296:	2204      	movs	r2, #4
 8004298:	701a      	strb	r2, [r3, #0]
 800429a:	e08e      	b.n	80043ba <UART_SetConfig+0x1fa>
 800429c:	231b      	movs	r3, #27
 800429e:	2218      	movs	r2, #24
 80042a0:	189b      	adds	r3, r3, r2
 80042a2:	19db      	adds	r3, r3, r7
 80042a4:	2208      	movs	r2, #8
 80042a6:	701a      	strb	r2, [r3, #0]
 80042a8:	e087      	b.n	80043ba <UART_SetConfig+0x1fa>
 80042aa:	231b      	movs	r3, #27
 80042ac:	2218      	movs	r2, #24
 80042ae:	189b      	adds	r3, r3, r2
 80042b0:	19db      	adds	r3, r3, r7
 80042b2:	2210      	movs	r2, #16
 80042b4:	701a      	strb	r2, [r3, #0]
 80042b6:	e080      	b.n	80043ba <UART_SetConfig+0x1fa>
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a99      	ldr	r2, [pc, #612]	@ (8004524 <UART_SetConfig+0x364>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d131      	bne.n	8004326 <UART_SetConfig+0x166>
 80042c2:	4b97      	ldr	r3, [pc, #604]	@ (8004520 <UART_SetConfig+0x360>)
 80042c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042c6:	220c      	movs	r2, #12
 80042c8:	4013      	ands	r3, r2
 80042ca:	2b0c      	cmp	r3, #12
 80042cc:	d01d      	beq.n	800430a <UART_SetConfig+0x14a>
 80042ce:	d823      	bhi.n	8004318 <UART_SetConfig+0x158>
 80042d0:	2b08      	cmp	r3, #8
 80042d2:	d00c      	beq.n	80042ee <UART_SetConfig+0x12e>
 80042d4:	d820      	bhi.n	8004318 <UART_SetConfig+0x158>
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d002      	beq.n	80042e0 <UART_SetConfig+0x120>
 80042da:	2b04      	cmp	r3, #4
 80042dc:	d00e      	beq.n	80042fc <UART_SetConfig+0x13c>
 80042de:	e01b      	b.n	8004318 <UART_SetConfig+0x158>
 80042e0:	231b      	movs	r3, #27
 80042e2:	2218      	movs	r2, #24
 80042e4:	189b      	adds	r3, r3, r2
 80042e6:	19db      	adds	r3, r3, r7
 80042e8:	2200      	movs	r2, #0
 80042ea:	701a      	strb	r2, [r3, #0]
 80042ec:	e065      	b.n	80043ba <UART_SetConfig+0x1fa>
 80042ee:	231b      	movs	r3, #27
 80042f0:	2218      	movs	r2, #24
 80042f2:	189b      	adds	r3, r3, r2
 80042f4:	19db      	adds	r3, r3, r7
 80042f6:	2202      	movs	r2, #2
 80042f8:	701a      	strb	r2, [r3, #0]
 80042fa:	e05e      	b.n	80043ba <UART_SetConfig+0x1fa>
 80042fc:	231b      	movs	r3, #27
 80042fe:	2218      	movs	r2, #24
 8004300:	189b      	adds	r3, r3, r2
 8004302:	19db      	adds	r3, r3, r7
 8004304:	2204      	movs	r2, #4
 8004306:	701a      	strb	r2, [r3, #0]
 8004308:	e057      	b.n	80043ba <UART_SetConfig+0x1fa>
 800430a:	231b      	movs	r3, #27
 800430c:	2218      	movs	r2, #24
 800430e:	189b      	adds	r3, r3, r2
 8004310:	19db      	adds	r3, r3, r7
 8004312:	2208      	movs	r2, #8
 8004314:	701a      	strb	r2, [r3, #0]
 8004316:	e050      	b.n	80043ba <UART_SetConfig+0x1fa>
 8004318:	231b      	movs	r3, #27
 800431a:	2218      	movs	r2, #24
 800431c:	189b      	adds	r3, r3, r2
 800431e:	19db      	adds	r3, r3, r7
 8004320:	2210      	movs	r2, #16
 8004322:	701a      	strb	r2, [r3, #0]
 8004324:	e049      	b.n	80043ba <UART_SetConfig+0x1fa>
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a7a      	ldr	r2, [pc, #488]	@ (8004514 <UART_SetConfig+0x354>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d13e      	bne.n	80043ae <UART_SetConfig+0x1ee>
 8004330:	4b7b      	ldr	r3, [pc, #492]	@ (8004520 <UART_SetConfig+0x360>)
 8004332:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004334:	23c0      	movs	r3, #192	@ 0xc0
 8004336:	011b      	lsls	r3, r3, #4
 8004338:	4013      	ands	r3, r2
 800433a:	22c0      	movs	r2, #192	@ 0xc0
 800433c:	0112      	lsls	r2, r2, #4
 800433e:	4293      	cmp	r3, r2
 8004340:	d027      	beq.n	8004392 <UART_SetConfig+0x1d2>
 8004342:	22c0      	movs	r2, #192	@ 0xc0
 8004344:	0112      	lsls	r2, r2, #4
 8004346:	4293      	cmp	r3, r2
 8004348:	d82a      	bhi.n	80043a0 <UART_SetConfig+0x1e0>
 800434a:	2280      	movs	r2, #128	@ 0x80
 800434c:	0112      	lsls	r2, r2, #4
 800434e:	4293      	cmp	r3, r2
 8004350:	d011      	beq.n	8004376 <UART_SetConfig+0x1b6>
 8004352:	2280      	movs	r2, #128	@ 0x80
 8004354:	0112      	lsls	r2, r2, #4
 8004356:	4293      	cmp	r3, r2
 8004358:	d822      	bhi.n	80043a0 <UART_SetConfig+0x1e0>
 800435a:	2b00      	cmp	r3, #0
 800435c:	d004      	beq.n	8004368 <UART_SetConfig+0x1a8>
 800435e:	2280      	movs	r2, #128	@ 0x80
 8004360:	00d2      	lsls	r2, r2, #3
 8004362:	4293      	cmp	r3, r2
 8004364:	d00e      	beq.n	8004384 <UART_SetConfig+0x1c4>
 8004366:	e01b      	b.n	80043a0 <UART_SetConfig+0x1e0>
 8004368:	231b      	movs	r3, #27
 800436a:	2218      	movs	r2, #24
 800436c:	189b      	adds	r3, r3, r2
 800436e:	19db      	adds	r3, r3, r7
 8004370:	2200      	movs	r2, #0
 8004372:	701a      	strb	r2, [r3, #0]
 8004374:	e021      	b.n	80043ba <UART_SetConfig+0x1fa>
 8004376:	231b      	movs	r3, #27
 8004378:	2218      	movs	r2, #24
 800437a:	189b      	adds	r3, r3, r2
 800437c:	19db      	adds	r3, r3, r7
 800437e:	2202      	movs	r2, #2
 8004380:	701a      	strb	r2, [r3, #0]
 8004382:	e01a      	b.n	80043ba <UART_SetConfig+0x1fa>
 8004384:	231b      	movs	r3, #27
 8004386:	2218      	movs	r2, #24
 8004388:	189b      	adds	r3, r3, r2
 800438a:	19db      	adds	r3, r3, r7
 800438c:	2204      	movs	r2, #4
 800438e:	701a      	strb	r2, [r3, #0]
 8004390:	e013      	b.n	80043ba <UART_SetConfig+0x1fa>
 8004392:	231b      	movs	r3, #27
 8004394:	2218      	movs	r2, #24
 8004396:	189b      	adds	r3, r3, r2
 8004398:	19db      	adds	r3, r3, r7
 800439a:	2208      	movs	r2, #8
 800439c:	701a      	strb	r2, [r3, #0]
 800439e:	e00c      	b.n	80043ba <UART_SetConfig+0x1fa>
 80043a0:	231b      	movs	r3, #27
 80043a2:	2218      	movs	r2, #24
 80043a4:	189b      	adds	r3, r3, r2
 80043a6:	19db      	adds	r3, r3, r7
 80043a8:	2210      	movs	r2, #16
 80043aa:	701a      	strb	r2, [r3, #0]
 80043ac:	e005      	b.n	80043ba <UART_SetConfig+0x1fa>
 80043ae:	231b      	movs	r3, #27
 80043b0:	2218      	movs	r2, #24
 80043b2:	189b      	adds	r3, r3, r2
 80043b4:	19db      	adds	r3, r3, r7
 80043b6:	2210      	movs	r2, #16
 80043b8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a55      	ldr	r2, [pc, #340]	@ (8004514 <UART_SetConfig+0x354>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d000      	beq.n	80043c6 <UART_SetConfig+0x206>
 80043c4:	e084      	b.n	80044d0 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80043c6:	231b      	movs	r3, #27
 80043c8:	2218      	movs	r2, #24
 80043ca:	189b      	adds	r3, r3, r2
 80043cc:	19db      	adds	r3, r3, r7
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	2b08      	cmp	r3, #8
 80043d2:	d01d      	beq.n	8004410 <UART_SetConfig+0x250>
 80043d4:	dc20      	bgt.n	8004418 <UART_SetConfig+0x258>
 80043d6:	2b04      	cmp	r3, #4
 80043d8:	d015      	beq.n	8004406 <UART_SetConfig+0x246>
 80043da:	dc1d      	bgt.n	8004418 <UART_SetConfig+0x258>
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d002      	beq.n	80043e6 <UART_SetConfig+0x226>
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d005      	beq.n	80043f0 <UART_SetConfig+0x230>
 80043e4:	e018      	b.n	8004418 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043e6:	f7fe ff7f 	bl	80032e8 <HAL_RCC_GetPCLK1Freq>
 80043ea:	0003      	movs	r3, r0
 80043ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80043ee:	e01c      	b.n	800442a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043f0:	4b4b      	ldr	r3, [pc, #300]	@ (8004520 <UART_SetConfig+0x360>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2210      	movs	r2, #16
 80043f6:	4013      	ands	r3, r2
 80043f8:	d002      	beq.n	8004400 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80043fa:	4b4b      	ldr	r3, [pc, #300]	@ (8004528 <UART_SetConfig+0x368>)
 80043fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80043fe:	e014      	b.n	800442a <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8004400:	4b4a      	ldr	r3, [pc, #296]	@ (800452c <UART_SetConfig+0x36c>)
 8004402:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004404:	e011      	b.n	800442a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004406:	f7fe febf 	bl	8003188 <HAL_RCC_GetSysClockFreq>
 800440a:	0003      	movs	r3, r0
 800440c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800440e:	e00c      	b.n	800442a <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004410:	2380      	movs	r3, #128	@ 0x80
 8004412:	021b      	lsls	r3, r3, #8
 8004414:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004416:	e008      	b.n	800442a <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8004418:	2300      	movs	r3, #0
 800441a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800441c:	231a      	movs	r3, #26
 800441e:	2218      	movs	r2, #24
 8004420:	189b      	adds	r3, r3, r2
 8004422:	19db      	adds	r3, r3, r7
 8004424:	2201      	movs	r2, #1
 8004426:	701a      	strb	r2, [r3, #0]
        break;
 8004428:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800442a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800442c:	2b00      	cmp	r3, #0
 800442e:	d100      	bne.n	8004432 <UART_SetConfig+0x272>
 8004430:	e132      	b.n	8004698 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	685a      	ldr	r2, [r3, #4]
 8004436:	0013      	movs	r3, r2
 8004438:	005b      	lsls	r3, r3, #1
 800443a:	189b      	adds	r3, r3, r2
 800443c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800443e:	429a      	cmp	r2, r3
 8004440:	d305      	bcc.n	800444e <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004448:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800444a:	429a      	cmp	r2, r3
 800444c:	d906      	bls.n	800445c <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 800444e:	231a      	movs	r3, #26
 8004450:	2218      	movs	r2, #24
 8004452:	189b      	adds	r3, r3, r2
 8004454:	19db      	adds	r3, r3, r7
 8004456:	2201      	movs	r2, #1
 8004458:	701a      	strb	r2, [r3, #0]
 800445a:	e11d      	b.n	8004698 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800445c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800445e:	613b      	str	r3, [r7, #16]
 8004460:	2300      	movs	r3, #0
 8004462:	617b      	str	r3, [r7, #20]
 8004464:	6939      	ldr	r1, [r7, #16]
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	000b      	movs	r3, r1
 800446a:	0e1b      	lsrs	r3, r3, #24
 800446c:	0010      	movs	r0, r2
 800446e:	0205      	lsls	r5, r0, #8
 8004470:	431d      	orrs	r5, r3
 8004472:	000b      	movs	r3, r1
 8004474:	021c      	lsls	r4, r3, #8
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	085b      	lsrs	r3, r3, #1
 800447c:	60bb      	str	r3, [r7, #8]
 800447e:	2300      	movs	r3, #0
 8004480:	60fb      	str	r3, [r7, #12]
 8004482:	68b8      	ldr	r0, [r7, #8]
 8004484:	68f9      	ldr	r1, [r7, #12]
 8004486:	1900      	adds	r0, r0, r4
 8004488:	4169      	adcs	r1, r5
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	603b      	str	r3, [r7, #0]
 8004490:	2300      	movs	r3, #0
 8004492:	607b      	str	r3, [r7, #4]
 8004494:	683a      	ldr	r2, [r7, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f7fb fecc 	bl	8000234 <__aeabi_uldivmod>
 800449c:	0002      	movs	r2, r0
 800449e:	000b      	movs	r3, r1
 80044a0:	0013      	movs	r3, r2
 80044a2:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80044a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80044a6:	23c0      	movs	r3, #192	@ 0xc0
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d309      	bcc.n	80044c2 <UART_SetConfig+0x302>
 80044ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80044b0:	2380      	movs	r3, #128	@ 0x80
 80044b2:	035b      	lsls	r3, r3, #13
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d204      	bcs.n	80044c2 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80044be:	60da      	str	r2, [r3, #12]
 80044c0:	e0ea      	b.n	8004698 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 80044c2:	231a      	movs	r3, #26
 80044c4:	2218      	movs	r2, #24
 80044c6:	189b      	adds	r3, r3, r2
 80044c8:	19db      	adds	r3, r3, r7
 80044ca:	2201      	movs	r2, #1
 80044cc:	701a      	strb	r2, [r3, #0]
 80044ce:	e0e3      	b.n	8004698 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	69da      	ldr	r2, [r3, #28]
 80044d4:	2380      	movs	r3, #128	@ 0x80
 80044d6:	021b      	lsls	r3, r3, #8
 80044d8:	429a      	cmp	r2, r3
 80044da:	d000      	beq.n	80044de <UART_SetConfig+0x31e>
 80044dc:	e085      	b.n	80045ea <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 80044de:	231b      	movs	r3, #27
 80044e0:	2218      	movs	r2, #24
 80044e2:	189b      	adds	r3, r3, r2
 80044e4:	19db      	adds	r3, r3, r7
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	2b08      	cmp	r3, #8
 80044ea:	d837      	bhi.n	800455c <UART_SetConfig+0x39c>
 80044ec:	009a      	lsls	r2, r3, #2
 80044ee:	4b10      	ldr	r3, [pc, #64]	@ (8004530 <UART_SetConfig+0x370>)
 80044f0:	18d3      	adds	r3, r2, r3
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044f6:	f7fe fef7 	bl	80032e8 <HAL_RCC_GetPCLK1Freq>
 80044fa:	0003      	movs	r3, r0
 80044fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80044fe:	e036      	b.n	800456e <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004500:	f7fe ff08 	bl	8003314 <HAL_RCC_GetPCLK2Freq>
 8004504:	0003      	movs	r3, r0
 8004506:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004508:	e031      	b.n	800456e <UART_SetConfig+0x3ae>
 800450a:	46c0      	nop			@ (mov r8, r8)
 800450c:	efff69f3 	.word	0xefff69f3
 8004510:	ffffcfff 	.word	0xffffcfff
 8004514:	40004800 	.word	0x40004800
 8004518:	fffff4ff 	.word	0xfffff4ff
 800451c:	40013800 	.word	0x40013800
 8004520:	40021000 	.word	0x40021000
 8004524:	40004400 	.word	0x40004400
 8004528:	003d0900 	.word	0x003d0900
 800452c:	00f42400 	.word	0x00f42400
 8004530:	08005b74 	.word	0x08005b74
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004534:	4b60      	ldr	r3, [pc, #384]	@ (80046b8 <UART_SetConfig+0x4f8>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2210      	movs	r2, #16
 800453a:	4013      	ands	r3, r2
 800453c:	d002      	beq.n	8004544 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800453e:	4b5f      	ldr	r3, [pc, #380]	@ (80046bc <UART_SetConfig+0x4fc>)
 8004540:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004542:	e014      	b.n	800456e <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8004544:	4b5e      	ldr	r3, [pc, #376]	@ (80046c0 <UART_SetConfig+0x500>)
 8004546:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004548:	e011      	b.n	800456e <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800454a:	f7fe fe1d 	bl	8003188 <HAL_RCC_GetSysClockFreq>
 800454e:	0003      	movs	r3, r0
 8004550:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004552:	e00c      	b.n	800456e <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004554:	2380      	movs	r3, #128	@ 0x80
 8004556:	021b      	lsls	r3, r3, #8
 8004558:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800455a:	e008      	b.n	800456e <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 800455c:	2300      	movs	r3, #0
 800455e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8004560:	231a      	movs	r3, #26
 8004562:	2218      	movs	r2, #24
 8004564:	189b      	adds	r3, r3, r2
 8004566:	19db      	adds	r3, r3, r7
 8004568:	2201      	movs	r2, #1
 800456a:	701a      	strb	r2, [r3, #0]
        break;
 800456c:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800456e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004570:	2b00      	cmp	r3, #0
 8004572:	d100      	bne.n	8004576 <UART_SetConfig+0x3b6>
 8004574:	e090      	b.n	8004698 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004578:	005a      	lsls	r2, r3, #1
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	085b      	lsrs	r3, r3, #1
 8004580:	18d2      	adds	r2, r2, r3
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	0019      	movs	r1, r3
 8004588:	0010      	movs	r0, r2
 800458a:	f7fb fdc7 	bl	800011c <__udivsi3>
 800458e:	0003      	movs	r3, r0
 8004590:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004594:	2b0f      	cmp	r3, #15
 8004596:	d921      	bls.n	80045dc <UART_SetConfig+0x41c>
 8004598:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800459a:	2380      	movs	r3, #128	@ 0x80
 800459c:	025b      	lsls	r3, r3, #9
 800459e:	429a      	cmp	r2, r3
 80045a0:	d21c      	bcs.n	80045dc <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045a4:	b29a      	uxth	r2, r3
 80045a6:	200e      	movs	r0, #14
 80045a8:	2418      	movs	r4, #24
 80045aa:	1903      	adds	r3, r0, r4
 80045ac:	19db      	adds	r3, r3, r7
 80045ae:	210f      	movs	r1, #15
 80045b0:	438a      	bics	r2, r1
 80045b2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045b6:	085b      	lsrs	r3, r3, #1
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	2207      	movs	r2, #7
 80045bc:	4013      	ands	r3, r2
 80045be:	b299      	uxth	r1, r3
 80045c0:	1903      	adds	r3, r0, r4
 80045c2:	19db      	adds	r3, r3, r7
 80045c4:	1902      	adds	r2, r0, r4
 80045c6:	19d2      	adds	r2, r2, r7
 80045c8:	8812      	ldrh	r2, [r2, #0]
 80045ca:	430a      	orrs	r2, r1
 80045cc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	1902      	adds	r2, r0, r4
 80045d4:	19d2      	adds	r2, r2, r7
 80045d6:	8812      	ldrh	r2, [r2, #0]
 80045d8:	60da      	str	r2, [r3, #12]
 80045da:	e05d      	b.n	8004698 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 80045dc:	231a      	movs	r3, #26
 80045de:	2218      	movs	r2, #24
 80045e0:	189b      	adds	r3, r3, r2
 80045e2:	19db      	adds	r3, r3, r7
 80045e4:	2201      	movs	r2, #1
 80045e6:	701a      	strb	r2, [r3, #0]
 80045e8:	e056      	b.n	8004698 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80045ea:	231b      	movs	r3, #27
 80045ec:	2218      	movs	r2, #24
 80045ee:	189b      	adds	r3, r3, r2
 80045f0:	19db      	adds	r3, r3, r7
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	2b08      	cmp	r3, #8
 80045f6:	d822      	bhi.n	800463e <UART_SetConfig+0x47e>
 80045f8:	009a      	lsls	r2, r3, #2
 80045fa:	4b32      	ldr	r3, [pc, #200]	@ (80046c4 <UART_SetConfig+0x504>)
 80045fc:	18d3      	adds	r3, r2, r3
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004602:	f7fe fe71 	bl	80032e8 <HAL_RCC_GetPCLK1Freq>
 8004606:	0003      	movs	r3, r0
 8004608:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800460a:	e021      	b.n	8004650 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800460c:	f7fe fe82 	bl	8003314 <HAL_RCC_GetPCLK2Freq>
 8004610:	0003      	movs	r3, r0
 8004612:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004614:	e01c      	b.n	8004650 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004616:	4b28      	ldr	r3, [pc, #160]	@ (80046b8 <UART_SetConfig+0x4f8>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2210      	movs	r2, #16
 800461c:	4013      	ands	r3, r2
 800461e:	d002      	beq.n	8004626 <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004620:	4b26      	ldr	r3, [pc, #152]	@ (80046bc <UART_SetConfig+0x4fc>)
 8004622:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004624:	e014      	b.n	8004650 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8004626:	4b26      	ldr	r3, [pc, #152]	@ (80046c0 <UART_SetConfig+0x500>)
 8004628:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800462a:	e011      	b.n	8004650 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800462c:	f7fe fdac 	bl	8003188 <HAL_RCC_GetSysClockFreq>
 8004630:	0003      	movs	r3, r0
 8004632:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004634:	e00c      	b.n	8004650 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004636:	2380      	movs	r3, #128	@ 0x80
 8004638:	021b      	lsls	r3, r3, #8
 800463a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800463c:	e008      	b.n	8004650 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 800463e:	2300      	movs	r3, #0
 8004640:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8004642:	231a      	movs	r3, #26
 8004644:	2218      	movs	r2, #24
 8004646:	189b      	adds	r3, r3, r2
 8004648:	19db      	adds	r3, r3, r7
 800464a:	2201      	movs	r2, #1
 800464c:	701a      	strb	r2, [r3, #0]
        break;
 800464e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004652:	2b00      	cmp	r3, #0
 8004654:	d020      	beq.n	8004698 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	085a      	lsrs	r2, r3, #1
 800465c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800465e:	18d2      	adds	r2, r2, r3
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	0019      	movs	r1, r3
 8004666:	0010      	movs	r0, r2
 8004668:	f7fb fd58 	bl	800011c <__udivsi3>
 800466c:	0003      	movs	r3, r0
 800466e:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004672:	2b0f      	cmp	r3, #15
 8004674:	d90a      	bls.n	800468c <UART_SetConfig+0x4cc>
 8004676:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004678:	2380      	movs	r3, #128	@ 0x80
 800467a:	025b      	lsls	r3, r3, #9
 800467c:	429a      	cmp	r2, r3
 800467e:	d205      	bcs.n	800468c <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004682:	b29a      	uxth	r2, r3
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	60da      	str	r2, [r3, #12]
 800468a:	e005      	b.n	8004698 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 800468c:	231a      	movs	r3, #26
 800468e:	2218      	movs	r2, #24
 8004690:	189b      	adds	r3, r3, r2
 8004692:	19db      	adds	r3, r3, r7
 8004694:	2201      	movs	r2, #1
 8004696:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	2200      	movs	r2, #0
 800469c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	2200      	movs	r2, #0
 80046a2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80046a4:	231a      	movs	r3, #26
 80046a6:	2218      	movs	r2, #24
 80046a8:	189b      	adds	r3, r3, r2
 80046aa:	19db      	adds	r3, r3, r7
 80046ac:	781b      	ldrb	r3, [r3, #0]
}
 80046ae:	0018      	movs	r0, r3
 80046b0:	46bd      	mov	sp, r7
 80046b2:	b00e      	add	sp, #56	@ 0x38
 80046b4:	bdb0      	pop	{r4, r5, r7, pc}
 80046b6:	46c0      	nop			@ (mov r8, r8)
 80046b8:	40021000 	.word	0x40021000
 80046bc:	003d0900 	.word	0x003d0900
 80046c0:	00f42400 	.word	0x00f42400
 80046c4:	08005b98 	.word	0x08005b98

080046c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d4:	2201      	movs	r2, #1
 80046d6:	4013      	ands	r3, r2
 80046d8:	d00b      	beq.n	80046f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	4a4a      	ldr	r2, [pc, #296]	@ (800480c <UART_AdvFeatureConfig+0x144>)
 80046e2:	4013      	ands	r3, r2
 80046e4:	0019      	movs	r1, r3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	430a      	orrs	r2, r1
 80046f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f6:	2202      	movs	r2, #2
 80046f8:	4013      	ands	r3, r2
 80046fa:	d00b      	beq.n	8004714 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	4a43      	ldr	r2, [pc, #268]	@ (8004810 <UART_AdvFeatureConfig+0x148>)
 8004704:	4013      	ands	r3, r2
 8004706:	0019      	movs	r1, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	430a      	orrs	r2, r1
 8004712:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004718:	2204      	movs	r2, #4
 800471a:	4013      	ands	r3, r2
 800471c:	d00b      	beq.n	8004736 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	4a3b      	ldr	r2, [pc, #236]	@ (8004814 <UART_AdvFeatureConfig+0x14c>)
 8004726:	4013      	ands	r3, r2
 8004728:	0019      	movs	r1, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	430a      	orrs	r2, r1
 8004734:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800473a:	2208      	movs	r2, #8
 800473c:	4013      	ands	r3, r2
 800473e:	d00b      	beq.n	8004758 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	4a34      	ldr	r2, [pc, #208]	@ (8004818 <UART_AdvFeatureConfig+0x150>)
 8004748:	4013      	ands	r3, r2
 800474a:	0019      	movs	r1, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	430a      	orrs	r2, r1
 8004756:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800475c:	2210      	movs	r2, #16
 800475e:	4013      	ands	r3, r2
 8004760:	d00b      	beq.n	800477a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	4a2c      	ldr	r2, [pc, #176]	@ (800481c <UART_AdvFeatureConfig+0x154>)
 800476a:	4013      	ands	r3, r2
 800476c:	0019      	movs	r1, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	430a      	orrs	r2, r1
 8004778:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800477e:	2220      	movs	r2, #32
 8004780:	4013      	ands	r3, r2
 8004782:	d00b      	beq.n	800479c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	4a25      	ldr	r2, [pc, #148]	@ (8004820 <UART_AdvFeatureConfig+0x158>)
 800478c:	4013      	ands	r3, r2
 800478e:	0019      	movs	r1, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	430a      	orrs	r2, r1
 800479a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a0:	2240      	movs	r2, #64	@ 0x40
 80047a2:	4013      	ands	r3, r2
 80047a4:	d01d      	beq.n	80047e2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	4a1d      	ldr	r2, [pc, #116]	@ (8004824 <UART_AdvFeatureConfig+0x15c>)
 80047ae:	4013      	ands	r3, r2
 80047b0:	0019      	movs	r1, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	430a      	orrs	r2, r1
 80047bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047c2:	2380      	movs	r3, #128	@ 0x80
 80047c4:	035b      	lsls	r3, r3, #13
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d10b      	bne.n	80047e2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	4a15      	ldr	r2, [pc, #84]	@ (8004828 <UART_AdvFeatureConfig+0x160>)
 80047d2:	4013      	ands	r3, r2
 80047d4:	0019      	movs	r1, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	430a      	orrs	r2, r1
 80047e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e6:	2280      	movs	r2, #128	@ 0x80
 80047e8:	4013      	ands	r3, r2
 80047ea:	d00b      	beq.n	8004804 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	4a0e      	ldr	r2, [pc, #56]	@ (800482c <UART_AdvFeatureConfig+0x164>)
 80047f4:	4013      	ands	r3, r2
 80047f6:	0019      	movs	r1, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	430a      	orrs	r2, r1
 8004802:	605a      	str	r2, [r3, #4]
  }
}
 8004804:	46c0      	nop			@ (mov r8, r8)
 8004806:	46bd      	mov	sp, r7
 8004808:	b002      	add	sp, #8
 800480a:	bd80      	pop	{r7, pc}
 800480c:	fffdffff 	.word	0xfffdffff
 8004810:	fffeffff 	.word	0xfffeffff
 8004814:	fffbffff 	.word	0xfffbffff
 8004818:	ffff7fff 	.word	0xffff7fff
 800481c:	ffffefff 	.word	0xffffefff
 8004820:	ffffdfff 	.word	0xffffdfff
 8004824:	ffefffff 	.word	0xffefffff
 8004828:	ff9fffff 	.word	0xff9fffff
 800482c:	fff7ffff 	.word	0xfff7ffff

08004830 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b092      	sub	sp, #72	@ 0x48
 8004834:	af02      	add	r7, sp, #8
 8004836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2284      	movs	r2, #132	@ 0x84
 800483c:	2100      	movs	r1, #0
 800483e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004840:	f7fc ff3e 	bl	80016c0 <HAL_GetTick>
 8004844:	0003      	movs	r3, r0
 8004846:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2208      	movs	r2, #8
 8004850:	4013      	ands	r3, r2
 8004852:	2b08      	cmp	r3, #8
 8004854:	d12c      	bne.n	80048b0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004856:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004858:	2280      	movs	r2, #128	@ 0x80
 800485a:	0391      	lsls	r1, r2, #14
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	4a46      	ldr	r2, [pc, #280]	@ (8004978 <UART_CheckIdleState+0x148>)
 8004860:	9200      	str	r2, [sp, #0]
 8004862:	2200      	movs	r2, #0
 8004864:	f000 f88c 	bl	8004980 <UART_WaitOnFlagUntilTimeout>
 8004868:	1e03      	subs	r3, r0, #0
 800486a:	d021      	beq.n	80048b0 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800486c:	f3ef 8310 	mrs	r3, PRIMASK
 8004870:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004874:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004876:	2301      	movs	r3, #1
 8004878:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800487a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800487c:	f383 8810 	msr	PRIMASK, r3
}
 8004880:	46c0      	nop			@ (mov r8, r8)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2180      	movs	r1, #128	@ 0x80
 800488e:	438a      	bics	r2, r1
 8004890:	601a      	str	r2, [r3, #0]
 8004892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004894:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004898:	f383 8810 	msr	PRIMASK, r3
}
 800489c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2220      	movs	r2, #32
 80048a2:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2278      	movs	r2, #120	@ 0x78
 80048a8:	2100      	movs	r1, #0
 80048aa:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e05f      	b.n	8004970 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2204      	movs	r2, #4
 80048b8:	4013      	ands	r3, r2
 80048ba:	2b04      	cmp	r3, #4
 80048bc:	d146      	bne.n	800494c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048c0:	2280      	movs	r2, #128	@ 0x80
 80048c2:	03d1      	lsls	r1, r2, #15
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	4a2c      	ldr	r2, [pc, #176]	@ (8004978 <UART_CheckIdleState+0x148>)
 80048c8:	9200      	str	r2, [sp, #0]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f000 f858 	bl	8004980 <UART_WaitOnFlagUntilTimeout>
 80048d0:	1e03      	subs	r3, r0, #0
 80048d2:	d03b      	beq.n	800494c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048d4:	f3ef 8310 	mrs	r3, PRIMASK
 80048d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80048da:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80048de:	2301      	movs	r3, #1
 80048e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	f383 8810 	msr	PRIMASK, r3
}
 80048e8:	46c0      	nop			@ (mov r8, r8)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4921      	ldr	r1, [pc, #132]	@ (800497c <UART_CheckIdleState+0x14c>)
 80048f6:	400a      	ands	r2, r1
 80048f8:	601a      	str	r2, [r3, #0]
 80048fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	f383 8810 	msr	PRIMASK, r3
}
 8004904:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004906:	f3ef 8310 	mrs	r3, PRIMASK
 800490a:	61bb      	str	r3, [r7, #24]
  return(result);
 800490c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800490e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004910:	2301      	movs	r3, #1
 8004912:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	f383 8810 	msr	PRIMASK, r3
}
 800491a:	46c0      	nop			@ (mov r8, r8)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	689a      	ldr	r2, [r3, #8]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2101      	movs	r1, #1
 8004928:	438a      	bics	r2, r1
 800492a:	609a      	str	r2, [r3, #8]
 800492c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800492e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004930:	6a3b      	ldr	r3, [r7, #32]
 8004932:	f383 8810 	msr	PRIMASK, r3
}
 8004936:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2280      	movs	r2, #128	@ 0x80
 800493c:	2120      	movs	r1, #32
 800493e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2278      	movs	r2, #120	@ 0x78
 8004944:	2100      	movs	r1, #0
 8004946:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e011      	b.n	8004970 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2220      	movs	r2, #32
 8004950:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2280      	movs	r2, #128	@ 0x80
 8004956:	2120      	movs	r1, #32
 8004958:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2278      	movs	r2, #120	@ 0x78
 800496a:	2100      	movs	r1, #0
 800496c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800496e:	2300      	movs	r3, #0
}
 8004970:	0018      	movs	r0, r3
 8004972:	46bd      	mov	sp, r7
 8004974:	b010      	add	sp, #64	@ 0x40
 8004976:	bd80      	pop	{r7, pc}
 8004978:	01ffffff 	.word	0x01ffffff
 800497c:	fffffedf 	.word	0xfffffedf

08004980 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	603b      	str	r3, [r7, #0]
 800498c:	1dfb      	adds	r3, r7, #7
 800498e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004990:	e04b      	b.n	8004a2a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	3301      	adds	r3, #1
 8004996:	d048      	beq.n	8004a2a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004998:	f7fc fe92 	bl	80016c0 <HAL_GetTick>
 800499c:	0002      	movs	r2, r0
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	69ba      	ldr	r2, [r7, #24]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d302      	bcc.n	80049ae <UART_WaitOnFlagUntilTimeout+0x2e>
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d101      	bne.n	80049b2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e04b      	b.n	8004a4a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2204      	movs	r2, #4
 80049ba:	4013      	ands	r3, r2
 80049bc:	d035      	beq.n	8004a2a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	69db      	ldr	r3, [r3, #28]
 80049c4:	2208      	movs	r2, #8
 80049c6:	4013      	ands	r3, r2
 80049c8:	2b08      	cmp	r3, #8
 80049ca:	d111      	bne.n	80049f0 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2208      	movs	r2, #8
 80049d2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	0018      	movs	r0, r3
 80049d8:	f000 f83c 	bl	8004a54 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2284      	movs	r2, #132	@ 0x84
 80049e0:	2108      	movs	r1, #8
 80049e2:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2278      	movs	r2, #120	@ 0x78
 80049e8:	2100      	movs	r1, #0
 80049ea:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e02c      	b.n	8004a4a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	69da      	ldr	r2, [r3, #28]
 80049f6:	2380      	movs	r3, #128	@ 0x80
 80049f8:	011b      	lsls	r3, r3, #4
 80049fa:	401a      	ands	r2, r3
 80049fc:	2380      	movs	r3, #128	@ 0x80
 80049fe:	011b      	lsls	r3, r3, #4
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d112      	bne.n	8004a2a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2280      	movs	r2, #128	@ 0x80
 8004a0a:	0112      	lsls	r2, r2, #4
 8004a0c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	0018      	movs	r0, r3
 8004a12:	f000 f81f 	bl	8004a54 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2284      	movs	r2, #132	@ 0x84
 8004a1a:	2120      	movs	r1, #32
 8004a1c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2278      	movs	r2, #120	@ 0x78
 8004a22:	2100      	movs	r1, #0
 8004a24:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e00f      	b.n	8004a4a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	69db      	ldr	r3, [r3, #28]
 8004a30:	68ba      	ldr	r2, [r7, #8]
 8004a32:	4013      	ands	r3, r2
 8004a34:	68ba      	ldr	r2, [r7, #8]
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	425a      	negs	r2, r3
 8004a3a:	4153      	adcs	r3, r2
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	001a      	movs	r2, r3
 8004a40:	1dfb      	adds	r3, r7, #7
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d0a4      	beq.n	8004992 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	0018      	movs	r0, r3
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	b004      	add	sp, #16
 8004a50:	bd80      	pop	{r7, pc}
	...

08004a54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b08e      	sub	sp, #56	@ 0x38
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a5c:	f3ef 8310 	mrs	r3, PRIMASK
 8004a60:	617b      	str	r3, [r7, #20]
  return(result);
 8004a62:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a64:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a66:	2301      	movs	r3, #1
 8004a68:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	f383 8810 	msr	PRIMASK, r3
}
 8004a70:	46c0      	nop			@ (mov r8, r8)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4926      	ldr	r1, [pc, #152]	@ (8004b18 <UART_EndRxTransfer+0xc4>)
 8004a7e:	400a      	ands	r2, r1
 8004a80:	601a      	str	r2, [r3, #0]
 8004a82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a84:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	f383 8810 	msr	PRIMASK, r3
}
 8004a8c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a8e:	f3ef 8310 	mrs	r3, PRIMASK
 8004a92:	623b      	str	r3, [r7, #32]
  return(result);
 8004a94:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a96:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a98:	2301      	movs	r3, #1
 8004a9a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a9e:	f383 8810 	msr	PRIMASK, r3
}
 8004aa2:	46c0      	nop			@ (mov r8, r8)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	689a      	ldr	r2, [r3, #8]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2101      	movs	r1, #1
 8004ab0:	438a      	bics	r2, r1
 8004ab2:	609a      	str	r2, [r3, #8]
 8004ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aba:	f383 8810 	msr	PRIMASK, r3
}
 8004abe:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d118      	bne.n	8004afa <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ac8:	f3ef 8310 	mrs	r3, PRIMASK
 8004acc:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ace:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f383 8810 	msr	PRIMASK, r3
}
 8004adc:	46c0      	nop			@ (mov r8, r8)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2110      	movs	r1, #16
 8004aea:	438a      	bics	r2, r1
 8004aec:	601a      	str	r2, [r3, #0]
 8004aee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004af0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	f383 8810 	msr	PRIMASK, r3
}
 8004af8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2280      	movs	r2, #128	@ 0x80
 8004afe:	2120      	movs	r1, #32
 8004b00:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004b0e:	46c0      	nop			@ (mov r8, r8)
 8004b10:	46bd      	mov	sp, r7
 8004b12:	b00e      	add	sp, #56	@ 0x38
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	46c0      	nop			@ (mov r8, r8)
 8004b18:	fffffedf 	.word	0xfffffedf

08004b1c <std>:
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	b510      	push	{r4, lr}
 8004b20:	0004      	movs	r4, r0
 8004b22:	6003      	str	r3, [r0, #0]
 8004b24:	6043      	str	r3, [r0, #4]
 8004b26:	6083      	str	r3, [r0, #8]
 8004b28:	8181      	strh	r1, [r0, #12]
 8004b2a:	6643      	str	r3, [r0, #100]	@ 0x64
 8004b2c:	81c2      	strh	r2, [r0, #14]
 8004b2e:	6103      	str	r3, [r0, #16]
 8004b30:	6143      	str	r3, [r0, #20]
 8004b32:	6183      	str	r3, [r0, #24]
 8004b34:	0019      	movs	r1, r3
 8004b36:	2208      	movs	r2, #8
 8004b38:	305c      	adds	r0, #92	@ 0x5c
 8004b3a:	f000 fa0f 	bl	8004f5c <memset>
 8004b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8004b6c <std+0x50>)
 8004b40:	6224      	str	r4, [r4, #32]
 8004b42:	6263      	str	r3, [r4, #36]	@ 0x24
 8004b44:	4b0a      	ldr	r3, [pc, #40]	@ (8004b70 <std+0x54>)
 8004b46:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004b48:	4b0a      	ldr	r3, [pc, #40]	@ (8004b74 <std+0x58>)
 8004b4a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8004b78 <std+0x5c>)
 8004b4e:	6323      	str	r3, [r4, #48]	@ 0x30
 8004b50:	4b0a      	ldr	r3, [pc, #40]	@ (8004b7c <std+0x60>)
 8004b52:	429c      	cmp	r4, r3
 8004b54:	d005      	beq.n	8004b62 <std+0x46>
 8004b56:	4b0a      	ldr	r3, [pc, #40]	@ (8004b80 <std+0x64>)
 8004b58:	429c      	cmp	r4, r3
 8004b5a:	d002      	beq.n	8004b62 <std+0x46>
 8004b5c:	4b09      	ldr	r3, [pc, #36]	@ (8004b84 <std+0x68>)
 8004b5e:	429c      	cmp	r4, r3
 8004b60:	d103      	bne.n	8004b6a <std+0x4e>
 8004b62:	0020      	movs	r0, r4
 8004b64:	3058      	adds	r0, #88	@ 0x58
 8004b66:	f000 fa79 	bl	800505c <__retarget_lock_init_recursive>
 8004b6a:	bd10      	pop	{r4, pc}
 8004b6c:	08004d85 	.word	0x08004d85
 8004b70:	08004dad 	.word	0x08004dad
 8004b74:	08004de5 	.word	0x08004de5
 8004b78:	08004e11 	.word	0x08004e11
 8004b7c:	2000024c 	.word	0x2000024c
 8004b80:	200002b4 	.word	0x200002b4
 8004b84:	2000031c 	.word	0x2000031c

08004b88 <stdio_exit_handler>:
 8004b88:	b510      	push	{r4, lr}
 8004b8a:	4a03      	ldr	r2, [pc, #12]	@ (8004b98 <stdio_exit_handler+0x10>)
 8004b8c:	4903      	ldr	r1, [pc, #12]	@ (8004b9c <stdio_exit_handler+0x14>)
 8004b8e:	4804      	ldr	r0, [pc, #16]	@ (8004ba0 <stdio_exit_handler+0x18>)
 8004b90:	f000 f86c 	bl	8004c6c <_fwalk_sglue>
 8004b94:	bd10      	pop	{r4, pc}
 8004b96:	46c0      	nop			@ (mov r8, r8)
 8004b98:	20000014 	.word	0x20000014
 8004b9c:	080058ed 	.word	0x080058ed
 8004ba0:	20000024 	.word	0x20000024

08004ba4 <cleanup_stdio>:
 8004ba4:	6841      	ldr	r1, [r0, #4]
 8004ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8004bd4 <cleanup_stdio+0x30>)
 8004ba8:	b510      	push	{r4, lr}
 8004baa:	0004      	movs	r4, r0
 8004bac:	4299      	cmp	r1, r3
 8004bae:	d001      	beq.n	8004bb4 <cleanup_stdio+0x10>
 8004bb0:	f000 fe9c 	bl	80058ec <_fflush_r>
 8004bb4:	68a1      	ldr	r1, [r4, #8]
 8004bb6:	4b08      	ldr	r3, [pc, #32]	@ (8004bd8 <cleanup_stdio+0x34>)
 8004bb8:	4299      	cmp	r1, r3
 8004bba:	d002      	beq.n	8004bc2 <cleanup_stdio+0x1e>
 8004bbc:	0020      	movs	r0, r4
 8004bbe:	f000 fe95 	bl	80058ec <_fflush_r>
 8004bc2:	68e1      	ldr	r1, [r4, #12]
 8004bc4:	4b05      	ldr	r3, [pc, #20]	@ (8004bdc <cleanup_stdio+0x38>)
 8004bc6:	4299      	cmp	r1, r3
 8004bc8:	d002      	beq.n	8004bd0 <cleanup_stdio+0x2c>
 8004bca:	0020      	movs	r0, r4
 8004bcc:	f000 fe8e 	bl	80058ec <_fflush_r>
 8004bd0:	bd10      	pop	{r4, pc}
 8004bd2:	46c0      	nop			@ (mov r8, r8)
 8004bd4:	2000024c 	.word	0x2000024c
 8004bd8:	200002b4 	.word	0x200002b4
 8004bdc:	2000031c 	.word	0x2000031c

08004be0 <global_stdio_init.part.0>:
 8004be0:	b510      	push	{r4, lr}
 8004be2:	4b09      	ldr	r3, [pc, #36]	@ (8004c08 <global_stdio_init.part.0+0x28>)
 8004be4:	4a09      	ldr	r2, [pc, #36]	@ (8004c0c <global_stdio_init.part.0+0x2c>)
 8004be6:	2104      	movs	r1, #4
 8004be8:	601a      	str	r2, [r3, #0]
 8004bea:	4809      	ldr	r0, [pc, #36]	@ (8004c10 <global_stdio_init.part.0+0x30>)
 8004bec:	2200      	movs	r2, #0
 8004bee:	f7ff ff95 	bl	8004b1c <std>
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	2109      	movs	r1, #9
 8004bf6:	4807      	ldr	r0, [pc, #28]	@ (8004c14 <global_stdio_init.part.0+0x34>)
 8004bf8:	f7ff ff90 	bl	8004b1c <std>
 8004bfc:	2202      	movs	r2, #2
 8004bfe:	2112      	movs	r1, #18
 8004c00:	4805      	ldr	r0, [pc, #20]	@ (8004c18 <global_stdio_init.part.0+0x38>)
 8004c02:	f7ff ff8b 	bl	8004b1c <std>
 8004c06:	bd10      	pop	{r4, pc}
 8004c08:	20000384 	.word	0x20000384
 8004c0c:	08004b89 	.word	0x08004b89
 8004c10:	2000024c 	.word	0x2000024c
 8004c14:	200002b4 	.word	0x200002b4
 8004c18:	2000031c 	.word	0x2000031c

08004c1c <__sfp_lock_acquire>:
 8004c1c:	b510      	push	{r4, lr}
 8004c1e:	4802      	ldr	r0, [pc, #8]	@ (8004c28 <__sfp_lock_acquire+0xc>)
 8004c20:	f000 fa1d 	bl	800505e <__retarget_lock_acquire_recursive>
 8004c24:	bd10      	pop	{r4, pc}
 8004c26:	46c0      	nop			@ (mov r8, r8)
 8004c28:	2000038d 	.word	0x2000038d

08004c2c <__sfp_lock_release>:
 8004c2c:	b510      	push	{r4, lr}
 8004c2e:	4802      	ldr	r0, [pc, #8]	@ (8004c38 <__sfp_lock_release+0xc>)
 8004c30:	f000 fa16 	bl	8005060 <__retarget_lock_release_recursive>
 8004c34:	bd10      	pop	{r4, pc}
 8004c36:	46c0      	nop			@ (mov r8, r8)
 8004c38:	2000038d 	.word	0x2000038d

08004c3c <__sinit>:
 8004c3c:	b510      	push	{r4, lr}
 8004c3e:	0004      	movs	r4, r0
 8004c40:	f7ff ffec 	bl	8004c1c <__sfp_lock_acquire>
 8004c44:	6a23      	ldr	r3, [r4, #32]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d002      	beq.n	8004c50 <__sinit+0x14>
 8004c4a:	f7ff ffef 	bl	8004c2c <__sfp_lock_release>
 8004c4e:	bd10      	pop	{r4, pc}
 8004c50:	4b04      	ldr	r3, [pc, #16]	@ (8004c64 <__sinit+0x28>)
 8004c52:	6223      	str	r3, [r4, #32]
 8004c54:	4b04      	ldr	r3, [pc, #16]	@ (8004c68 <__sinit+0x2c>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d1f6      	bne.n	8004c4a <__sinit+0xe>
 8004c5c:	f7ff ffc0 	bl	8004be0 <global_stdio_init.part.0>
 8004c60:	e7f3      	b.n	8004c4a <__sinit+0xe>
 8004c62:	46c0      	nop			@ (mov r8, r8)
 8004c64:	08004ba5 	.word	0x08004ba5
 8004c68:	20000384 	.word	0x20000384

08004c6c <_fwalk_sglue>:
 8004c6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c6e:	0014      	movs	r4, r2
 8004c70:	2600      	movs	r6, #0
 8004c72:	9000      	str	r0, [sp, #0]
 8004c74:	9101      	str	r1, [sp, #4]
 8004c76:	68a5      	ldr	r5, [r4, #8]
 8004c78:	6867      	ldr	r7, [r4, #4]
 8004c7a:	3f01      	subs	r7, #1
 8004c7c:	d504      	bpl.n	8004c88 <_fwalk_sglue+0x1c>
 8004c7e:	6824      	ldr	r4, [r4, #0]
 8004c80:	2c00      	cmp	r4, #0
 8004c82:	d1f8      	bne.n	8004c76 <_fwalk_sglue+0xa>
 8004c84:	0030      	movs	r0, r6
 8004c86:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004c88:	89ab      	ldrh	r3, [r5, #12]
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d908      	bls.n	8004ca0 <_fwalk_sglue+0x34>
 8004c8e:	220e      	movs	r2, #14
 8004c90:	5eab      	ldrsh	r3, [r5, r2]
 8004c92:	3301      	adds	r3, #1
 8004c94:	d004      	beq.n	8004ca0 <_fwalk_sglue+0x34>
 8004c96:	0029      	movs	r1, r5
 8004c98:	9800      	ldr	r0, [sp, #0]
 8004c9a:	9b01      	ldr	r3, [sp, #4]
 8004c9c:	4798      	blx	r3
 8004c9e:	4306      	orrs	r6, r0
 8004ca0:	3568      	adds	r5, #104	@ 0x68
 8004ca2:	e7ea      	b.n	8004c7a <_fwalk_sglue+0xe>

08004ca4 <iprintf>:
 8004ca4:	b40f      	push	{r0, r1, r2, r3}
 8004ca6:	b507      	push	{r0, r1, r2, lr}
 8004ca8:	4905      	ldr	r1, [pc, #20]	@ (8004cc0 <iprintf+0x1c>)
 8004caa:	ab04      	add	r3, sp, #16
 8004cac:	6808      	ldr	r0, [r1, #0]
 8004cae:	cb04      	ldmia	r3!, {r2}
 8004cb0:	6881      	ldr	r1, [r0, #8]
 8004cb2:	9301      	str	r3, [sp, #4]
 8004cb4:	f000 fafa 	bl	80052ac <_vfiprintf_r>
 8004cb8:	b003      	add	sp, #12
 8004cba:	bc08      	pop	{r3}
 8004cbc:	b004      	add	sp, #16
 8004cbe:	4718      	bx	r3
 8004cc0:	20000020 	.word	0x20000020

08004cc4 <_puts_r>:
 8004cc4:	6a03      	ldr	r3, [r0, #32]
 8004cc6:	b570      	push	{r4, r5, r6, lr}
 8004cc8:	0005      	movs	r5, r0
 8004cca:	000e      	movs	r6, r1
 8004ccc:	6884      	ldr	r4, [r0, #8]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d101      	bne.n	8004cd6 <_puts_r+0x12>
 8004cd2:	f7ff ffb3 	bl	8004c3c <__sinit>
 8004cd6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004cd8:	07db      	lsls	r3, r3, #31
 8004cda:	d405      	bmi.n	8004ce8 <_puts_r+0x24>
 8004cdc:	89a3      	ldrh	r3, [r4, #12]
 8004cde:	059b      	lsls	r3, r3, #22
 8004ce0:	d402      	bmi.n	8004ce8 <_puts_r+0x24>
 8004ce2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004ce4:	f000 f9bb 	bl	800505e <__retarget_lock_acquire_recursive>
 8004ce8:	89a3      	ldrh	r3, [r4, #12]
 8004cea:	071b      	lsls	r3, r3, #28
 8004cec:	d502      	bpl.n	8004cf4 <_puts_r+0x30>
 8004cee:	6923      	ldr	r3, [r4, #16]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d11f      	bne.n	8004d34 <_puts_r+0x70>
 8004cf4:	0021      	movs	r1, r4
 8004cf6:	0028      	movs	r0, r5
 8004cf8:	f000 f8d2 	bl	8004ea0 <__swsetup_r>
 8004cfc:	2800      	cmp	r0, #0
 8004cfe:	d019      	beq.n	8004d34 <_puts_r+0x70>
 8004d00:	2501      	movs	r5, #1
 8004d02:	426d      	negs	r5, r5
 8004d04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004d06:	07db      	lsls	r3, r3, #31
 8004d08:	d405      	bmi.n	8004d16 <_puts_r+0x52>
 8004d0a:	89a3      	ldrh	r3, [r4, #12]
 8004d0c:	059b      	lsls	r3, r3, #22
 8004d0e:	d402      	bmi.n	8004d16 <_puts_r+0x52>
 8004d10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d12:	f000 f9a5 	bl	8005060 <__retarget_lock_release_recursive>
 8004d16:	0028      	movs	r0, r5
 8004d18:	bd70      	pop	{r4, r5, r6, pc}
 8004d1a:	3601      	adds	r6, #1
 8004d1c:	60a3      	str	r3, [r4, #8]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	da04      	bge.n	8004d2c <_puts_r+0x68>
 8004d22:	69a2      	ldr	r2, [r4, #24]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	dc16      	bgt.n	8004d56 <_puts_r+0x92>
 8004d28:	290a      	cmp	r1, #10
 8004d2a:	d014      	beq.n	8004d56 <_puts_r+0x92>
 8004d2c:	6823      	ldr	r3, [r4, #0]
 8004d2e:	1c5a      	adds	r2, r3, #1
 8004d30:	6022      	str	r2, [r4, #0]
 8004d32:	7019      	strb	r1, [r3, #0]
 8004d34:	68a3      	ldr	r3, [r4, #8]
 8004d36:	7831      	ldrb	r1, [r6, #0]
 8004d38:	3b01      	subs	r3, #1
 8004d3a:	2900      	cmp	r1, #0
 8004d3c:	d1ed      	bne.n	8004d1a <_puts_r+0x56>
 8004d3e:	60a3      	str	r3, [r4, #8]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	da0f      	bge.n	8004d64 <_puts_r+0xa0>
 8004d44:	0022      	movs	r2, r4
 8004d46:	0028      	movs	r0, r5
 8004d48:	310a      	adds	r1, #10
 8004d4a:	f000 f867 	bl	8004e1c <__swbuf_r>
 8004d4e:	3001      	adds	r0, #1
 8004d50:	d0d6      	beq.n	8004d00 <_puts_r+0x3c>
 8004d52:	250a      	movs	r5, #10
 8004d54:	e7d6      	b.n	8004d04 <_puts_r+0x40>
 8004d56:	0022      	movs	r2, r4
 8004d58:	0028      	movs	r0, r5
 8004d5a:	f000 f85f 	bl	8004e1c <__swbuf_r>
 8004d5e:	3001      	adds	r0, #1
 8004d60:	d1e8      	bne.n	8004d34 <_puts_r+0x70>
 8004d62:	e7cd      	b.n	8004d00 <_puts_r+0x3c>
 8004d64:	6823      	ldr	r3, [r4, #0]
 8004d66:	1c5a      	adds	r2, r3, #1
 8004d68:	6022      	str	r2, [r4, #0]
 8004d6a:	220a      	movs	r2, #10
 8004d6c:	701a      	strb	r2, [r3, #0]
 8004d6e:	e7f0      	b.n	8004d52 <_puts_r+0x8e>

08004d70 <puts>:
 8004d70:	b510      	push	{r4, lr}
 8004d72:	4b03      	ldr	r3, [pc, #12]	@ (8004d80 <puts+0x10>)
 8004d74:	0001      	movs	r1, r0
 8004d76:	6818      	ldr	r0, [r3, #0]
 8004d78:	f7ff ffa4 	bl	8004cc4 <_puts_r>
 8004d7c:	bd10      	pop	{r4, pc}
 8004d7e:	46c0      	nop			@ (mov r8, r8)
 8004d80:	20000020 	.word	0x20000020

08004d84 <__sread>:
 8004d84:	b570      	push	{r4, r5, r6, lr}
 8004d86:	000c      	movs	r4, r1
 8004d88:	250e      	movs	r5, #14
 8004d8a:	5f49      	ldrsh	r1, [r1, r5]
 8004d8c:	f000 f914 	bl	8004fb8 <_read_r>
 8004d90:	2800      	cmp	r0, #0
 8004d92:	db03      	blt.n	8004d9c <__sread+0x18>
 8004d94:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004d96:	181b      	adds	r3, r3, r0
 8004d98:	6563      	str	r3, [r4, #84]	@ 0x54
 8004d9a:	bd70      	pop	{r4, r5, r6, pc}
 8004d9c:	89a3      	ldrh	r3, [r4, #12]
 8004d9e:	4a02      	ldr	r2, [pc, #8]	@ (8004da8 <__sread+0x24>)
 8004da0:	4013      	ands	r3, r2
 8004da2:	81a3      	strh	r3, [r4, #12]
 8004da4:	e7f9      	b.n	8004d9a <__sread+0x16>
 8004da6:	46c0      	nop			@ (mov r8, r8)
 8004da8:	ffffefff 	.word	0xffffefff

08004dac <__swrite>:
 8004dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dae:	001f      	movs	r7, r3
 8004db0:	898b      	ldrh	r3, [r1, #12]
 8004db2:	0005      	movs	r5, r0
 8004db4:	000c      	movs	r4, r1
 8004db6:	0016      	movs	r6, r2
 8004db8:	05db      	lsls	r3, r3, #23
 8004dba:	d505      	bpl.n	8004dc8 <__swrite+0x1c>
 8004dbc:	230e      	movs	r3, #14
 8004dbe:	5ec9      	ldrsh	r1, [r1, r3]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	2302      	movs	r3, #2
 8004dc4:	f000 f8e4 	bl	8004f90 <_lseek_r>
 8004dc8:	89a3      	ldrh	r3, [r4, #12]
 8004dca:	4a05      	ldr	r2, [pc, #20]	@ (8004de0 <__swrite+0x34>)
 8004dcc:	0028      	movs	r0, r5
 8004dce:	4013      	ands	r3, r2
 8004dd0:	81a3      	strh	r3, [r4, #12]
 8004dd2:	0032      	movs	r2, r6
 8004dd4:	230e      	movs	r3, #14
 8004dd6:	5ee1      	ldrsh	r1, [r4, r3]
 8004dd8:	003b      	movs	r3, r7
 8004dda:	f000 f901 	bl	8004fe0 <_write_r>
 8004dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004de0:	ffffefff 	.word	0xffffefff

08004de4 <__sseek>:
 8004de4:	b570      	push	{r4, r5, r6, lr}
 8004de6:	000c      	movs	r4, r1
 8004de8:	250e      	movs	r5, #14
 8004dea:	5f49      	ldrsh	r1, [r1, r5]
 8004dec:	f000 f8d0 	bl	8004f90 <_lseek_r>
 8004df0:	89a3      	ldrh	r3, [r4, #12]
 8004df2:	1c42      	adds	r2, r0, #1
 8004df4:	d103      	bne.n	8004dfe <__sseek+0x1a>
 8004df6:	4a05      	ldr	r2, [pc, #20]	@ (8004e0c <__sseek+0x28>)
 8004df8:	4013      	ands	r3, r2
 8004dfa:	81a3      	strh	r3, [r4, #12]
 8004dfc:	bd70      	pop	{r4, r5, r6, pc}
 8004dfe:	2280      	movs	r2, #128	@ 0x80
 8004e00:	0152      	lsls	r2, r2, #5
 8004e02:	4313      	orrs	r3, r2
 8004e04:	81a3      	strh	r3, [r4, #12]
 8004e06:	6560      	str	r0, [r4, #84]	@ 0x54
 8004e08:	e7f8      	b.n	8004dfc <__sseek+0x18>
 8004e0a:	46c0      	nop			@ (mov r8, r8)
 8004e0c:	ffffefff 	.word	0xffffefff

08004e10 <__sclose>:
 8004e10:	b510      	push	{r4, lr}
 8004e12:	230e      	movs	r3, #14
 8004e14:	5ec9      	ldrsh	r1, [r1, r3]
 8004e16:	f000 f8a9 	bl	8004f6c <_close_r>
 8004e1a:	bd10      	pop	{r4, pc}

08004e1c <__swbuf_r>:
 8004e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e1e:	0006      	movs	r6, r0
 8004e20:	000d      	movs	r5, r1
 8004e22:	0014      	movs	r4, r2
 8004e24:	2800      	cmp	r0, #0
 8004e26:	d004      	beq.n	8004e32 <__swbuf_r+0x16>
 8004e28:	6a03      	ldr	r3, [r0, #32]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d101      	bne.n	8004e32 <__swbuf_r+0x16>
 8004e2e:	f7ff ff05 	bl	8004c3c <__sinit>
 8004e32:	69a3      	ldr	r3, [r4, #24]
 8004e34:	60a3      	str	r3, [r4, #8]
 8004e36:	89a3      	ldrh	r3, [r4, #12]
 8004e38:	071b      	lsls	r3, r3, #28
 8004e3a:	d502      	bpl.n	8004e42 <__swbuf_r+0x26>
 8004e3c:	6923      	ldr	r3, [r4, #16]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d109      	bne.n	8004e56 <__swbuf_r+0x3a>
 8004e42:	0021      	movs	r1, r4
 8004e44:	0030      	movs	r0, r6
 8004e46:	f000 f82b 	bl	8004ea0 <__swsetup_r>
 8004e4a:	2800      	cmp	r0, #0
 8004e4c:	d003      	beq.n	8004e56 <__swbuf_r+0x3a>
 8004e4e:	2501      	movs	r5, #1
 8004e50:	426d      	negs	r5, r5
 8004e52:	0028      	movs	r0, r5
 8004e54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e56:	6923      	ldr	r3, [r4, #16]
 8004e58:	6820      	ldr	r0, [r4, #0]
 8004e5a:	b2ef      	uxtb	r7, r5
 8004e5c:	1ac0      	subs	r0, r0, r3
 8004e5e:	6963      	ldr	r3, [r4, #20]
 8004e60:	b2ed      	uxtb	r5, r5
 8004e62:	4283      	cmp	r3, r0
 8004e64:	dc05      	bgt.n	8004e72 <__swbuf_r+0x56>
 8004e66:	0021      	movs	r1, r4
 8004e68:	0030      	movs	r0, r6
 8004e6a:	f000 fd3f 	bl	80058ec <_fflush_r>
 8004e6e:	2800      	cmp	r0, #0
 8004e70:	d1ed      	bne.n	8004e4e <__swbuf_r+0x32>
 8004e72:	68a3      	ldr	r3, [r4, #8]
 8004e74:	3001      	adds	r0, #1
 8004e76:	3b01      	subs	r3, #1
 8004e78:	60a3      	str	r3, [r4, #8]
 8004e7a:	6823      	ldr	r3, [r4, #0]
 8004e7c:	1c5a      	adds	r2, r3, #1
 8004e7e:	6022      	str	r2, [r4, #0]
 8004e80:	701f      	strb	r7, [r3, #0]
 8004e82:	6963      	ldr	r3, [r4, #20]
 8004e84:	4283      	cmp	r3, r0
 8004e86:	d004      	beq.n	8004e92 <__swbuf_r+0x76>
 8004e88:	89a3      	ldrh	r3, [r4, #12]
 8004e8a:	07db      	lsls	r3, r3, #31
 8004e8c:	d5e1      	bpl.n	8004e52 <__swbuf_r+0x36>
 8004e8e:	2d0a      	cmp	r5, #10
 8004e90:	d1df      	bne.n	8004e52 <__swbuf_r+0x36>
 8004e92:	0021      	movs	r1, r4
 8004e94:	0030      	movs	r0, r6
 8004e96:	f000 fd29 	bl	80058ec <_fflush_r>
 8004e9a:	2800      	cmp	r0, #0
 8004e9c:	d0d9      	beq.n	8004e52 <__swbuf_r+0x36>
 8004e9e:	e7d6      	b.n	8004e4e <__swbuf_r+0x32>

08004ea0 <__swsetup_r>:
 8004ea0:	4b2d      	ldr	r3, [pc, #180]	@ (8004f58 <__swsetup_r+0xb8>)
 8004ea2:	b570      	push	{r4, r5, r6, lr}
 8004ea4:	0005      	movs	r5, r0
 8004ea6:	6818      	ldr	r0, [r3, #0]
 8004ea8:	000c      	movs	r4, r1
 8004eaa:	2800      	cmp	r0, #0
 8004eac:	d004      	beq.n	8004eb8 <__swsetup_r+0x18>
 8004eae:	6a03      	ldr	r3, [r0, #32]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d101      	bne.n	8004eb8 <__swsetup_r+0x18>
 8004eb4:	f7ff fec2 	bl	8004c3c <__sinit>
 8004eb8:	230c      	movs	r3, #12
 8004eba:	5ee2      	ldrsh	r2, [r4, r3]
 8004ebc:	0713      	lsls	r3, r2, #28
 8004ebe:	d423      	bmi.n	8004f08 <__swsetup_r+0x68>
 8004ec0:	06d3      	lsls	r3, r2, #27
 8004ec2:	d407      	bmi.n	8004ed4 <__swsetup_r+0x34>
 8004ec4:	2309      	movs	r3, #9
 8004ec6:	602b      	str	r3, [r5, #0]
 8004ec8:	2340      	movs	r3, #64	@ 0x40
 8004eca:	2001      	movs	r0, #1
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	81a3      	strh	r3, [r4, #12]
 8004ed0:	4240      	negs	r0, r0
 8004ed2:	e03a      	b.n	8004f4a <__swsetup_r+0xaa>
 8004ed4:	0752      	lsls	r2, r2, #29
 8004ed6:	d513      	bpl.n	8004f00 <__swsetup_r+0x60>
 8004ed8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004eda:	2900      	cmp	r1, #0
 8004edc:	d008      	beq.n	8004ef0 <__swsetup_r+0x50>
 8004ede:	0023      	movs	r3, r4
 8004ee0:	3344      	adds	r3, #68	@ 0x44
 8004ee2:	4299      	cmp	r1, r3
 8004ee4:	d002      	beq.n	8004eec <__swsetup_r+0x4c>
 8004ee6:	0028      	movs	r0, r5
 8004ee8:	f000 f8bc 	bl	8005064 <_free_r>
 8004eec:	2300      	movs	r3, #0
 8004eee:	6363      	str	r3, [r4, #52]	@ 0x34
 8004ef0:	2224      	movs	r2, #36	@ 0x24
 8004ef2:	89a3      	ldrh	r3, [r4, #12]
 8004ef4:	4393      	bics	r3, r2
 8004ef6:	81a3      	strh	r3, [r4, #12]
 8004ef8:	2300      	movs	r3, #0
 8004efa:	6063      	str	r3, [r4, #4]
 8004efc:	6923      	ldr	r3, [r4, #16]
 8004efe:	6023      	str	r3, [r4, #0]
 8004f00:	2308      	movs	r3, #8
 8004f02:	89a2      	ldrh	r2, [r4, #12]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	81a3      	strh	r3, [r4, #12]
 8004f08:	6923      	ldr	r3, [r4, #16]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d10b      	bne.n	8004f26 <__swsetup_r+0x86>
 8004f0e:	21a0      	movs	r1, #160	@ 0xa0
 8004f10:	2280      	movs	r2, #128	@ 0x80
 8004f12:	89a3      	ldrh	r3, [r4, #12]
 8004f14:	0089      	lsls	r1, r1, #2
 8004f16:	0092      	lsls	r2, r2, #2
 8004f18:	400b      	ands	r3, r1
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d003      	beq.n	8004f26 <__swsetup_r+0x86>
 8004f1e:	0021      	movs	r1, r4
 8004f20:	0028      	movs	r0, r5
 8004f22:	f000 fd39 	bl	8005998 <__smakebuf_r>
 8004f26:	230c      	movs	r3, #12
 8004f28:	5ee2      	ldrsh	r2, [r4, r3]
 8004f2a:	2101      	movs	r1, #1
 8004f2c:	0013      	movs	r3, r2
 8004f2e:	400b      	ands	r3, r1
 8004f30:	420a      	tst	r2, r1
 8004f32:	d00b      	beq.n	8004f4c <__swsetup_r+0xac>
 8004f34:	2300      	movs	r3, #0
 8004f36:	60a3      	str	r3, [r4, #8]
 8004f38:	6963      	ldr	r3, [r4, #20]
 8004f3a:	425b      	negs	r3, r3
 8004f3c:	61a3      	str	r3, [r4, #24]
 8004f3e:	2000      	movs	r0, #0
 8004f40:	6923      	ldr	r3, [r4, #16]
 8004f42:	4283      	cmp	r3, r0
 8004f44:	d101      	bne.n	8004f4a <__swsetup_r+0xaa>
 8004f46:	0613      	lsls	r3, r2, #24
 8004f48:	d4be      	bmi.n	8004ec8 <__swsetup_r+0x28>
 8004f4a:	bd70      	pop	{r4, r5, r6, pc}
 8004f4c:	0791      	lsls	r1, r2, #30
 8004f4e:	d400      	bmi.n	8004f52 <__swsetup_r+0xb2>
 8004f50:	6963      	ldr	r3, [r4, #20]
 8004f52:	60a3      	str	r3, [r4, #8]
 8004f54:	e7f3      	b.n	8004f3e <__swsetup_r+0x9e>
 8004f56:	46c0      	nop			@ (mov r8, r8)
 8004f58:	20000020 	.word	0x20000020

08004f5c <memset>:
 8004f5c:	0003      	movs	r3, r0
 8004f5e:	1882      	adds	r2, r0, r2
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d100      	bne.n	8004f66 <memset+0xa>
 8004f64:	4770      	bx	lr
 8004f66:	7019      	strb	r1, [r3, #0]
 8004f68:	3301      	adds	r3, #1
 8004f6a:	e7f9      	b.n	8004f60 <memset+0x4>

08004f6c <_close_r>:
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	b570      	push	{r4, r5, r6, lr}
 8004f70:	4d06      	ldr	r5, [pc, #24]	@ (8004f8c <_close_r+0x20>)
 8004f72:	0004      	movs	r4, r0
 8004f74:	0008      	movs	r0, r1
 8004f76:	602b      	str	r3, [r5, #0]
 8004f78:	f7fc faa9 	bl	80014ce <_close>
 8004f7c:	1c43      	adds	r3, r0, #1
 8004f7e:	d103      	bne.n	8004f88 <_close_r+0x1c>
 8004f80:	682b      	ldr	r3, [r5, #0]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d000      	beq.n	8004f88 <_close_r+0x1c>
 8004f86:	6023      	str	r3, [r4, #0]
 8004f88:	bd70      	pop	{r4, r5, r6, pc}
 8004f8a:	46c0      	nop			@ (mov r8, r8)
 8004f8c:	20000388 	.word	0x20000388

08004f90 <_lseek_r>:
 8004f90:	b570      	push	{r4, r5, r6, lr}
 8004f92:	0004      	movs	r4, r0
 8004f94:	0008      	movs	r0, r1
 8004f96:	0011      	movs	r1, r2
 8004f98:	001a      	movs	r2, r3
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	4d05      	ldr	r5, [pc, #20]	@ (8004fb4 <_lseek_r+0x24>)
 8004f9e:	602b      	str	r3, [r5, #0]
 8004fa0:	f7fc fab6 	bl	8001510 <_lseek>
 8004fa4:	1c43      	adds	r3, r0, #1
 8004fa6:	d103      	bne.n	8004fb0 <_lseek_r+0x20>
 8004fa8:	682b      	ldr	r3, [r5, #0]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d000      	beq.n	8004fb0 <_lseek_r+0x20>
 8004fae:	6023      	str	r3, [r4, #0]
 8004fb0:	bd70      	pop	{r4, r5, r6, pc}
 8004fb2:	46c0      	nop			@ (mov r8, r8)
 8004fb4:	20000388 	.word	0x20000388

08004fb8 <_read_r>:
 8004fb8:	b570      	push	{r4, r5, r6, lr}
 8004fba:	0004      	movs	r4, r0
 8004fbc:	0008      	movs	r0, r1
 8004fbe:	0011      	movs	r1, r2
 8004fc0:	001a      	movs	r2, r3
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	4d05      	ldr	r5, [pc, #20]	@ (8004fdc <_read_r+0x24>)
 8004fc6:	602b      	str	r3, [r5, #0]
 8004fc8:	f7fc fa48 	bl	800145c <_read>
 8004fcc:	1c43      	adds	r3, r0, #1
 8004fce:	d103      	bne.n	8004fd8 <_read_r+0x20>
 8004fd0:	682b      	ldr	r3, [r5, #0]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d000      	beq.n	8004fd8 <_read_r+0x20>
 8004fd6:	6023      	str	r3, [r4, #0]
 8004fd8:	bd70      	pop	{r4, r5, r6, pc}
 8004fda:	46c0      	nop			@ (mov r8, r8)
 8004fdc:	20000388 	.word	0x20000388

08004fe0 <_write_r>:
 8004fe0:	b570      	push	{r4, r5, r6, lr}
 8004fe2:	0004      	movs	r4, r0
 8004fe4:	0008      	movs	r0, r1
 8004fe6:	0011      	movs	r1, r2
 8004fe8:	001a      	movs	r2, r3
 8004fea:	2300      	movs	r3, #0
 8004fec:	4d05      	ldr	r5, [pc, #20]	@ (8005004 <_write_r+0x24>)
 8004fee:	602b      	str	r3, [r5, #0]
 8004ff0:	f7fc fa51 	bl	8001496 <_write>
 8004ff4:	1c43      	adds	r3, r0, #1
 8004ff6:	d103      	bne.n	8005000 <_write_r+0x20>
 8004ff8:	682b      	ldr	r3, [r5, #0]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d000      	beq.n	8005000 <_write_r+0x20>
 8004ffe:	6023      	str	r3, [r4, #0]
 8005000:	bd70      	pop	{r4, r5, r6, pc}
 8005002:	46c0      	nop			@ (mov r8, r8)
 8005004:	20000388 	.word	0x20000388

08005008 <__errno>:
 8005008:	4b01      	ldr	r3, [pc, #4]	@ (8005010 <__errno+0x8>)
 800500a:	6818      	ldr	r0, [r3, #0]
 800500c:	4770      	bx	lr
 800500e:	46c0      	nop			@ (mov r8, r8)
 8005010:	20000020 	.word	0x20000020

08005014 <__libc_init_array>:
 8005014:	b570      	push	{r4, r5, r6, lr}
 8005016:	2600      	movs	r6, #0
 8005018:	4c0c      	ldr	r4, [pc, #48]	@ (800504c <__libc_init_array+0x38>)
 800501a:	4d0d      	ldr	r5, [pc, #52]	@ (8005050 <__libc_init_array+0x3c>)
 800501c:	1b64      	subs	r4, r4, r5
 800501e:	10a4      	asrs	r4, r4, #2
 8005020:	42a6      	cmp	r6, r4
 8005022:	d109      	bne.n	8005038 <__libc_init_array+0x24>
 8005024:	2600      	movs	r6, #0
 8005026:	f000 fd3b 	bl	8005aa0 <_init>
 800502a:	4c0a      	ldr	r4, [pc, #40]	@ (8005054 <__libc_init_array+0x40>)
 800502c:	4d0a      	ldr	r5, [pc, #40]	@ (8005058 <__libc_init_array+0x44>)
 800502e:	1b64      	subs	r4, r4, r5
 8005030:	10a4      	asrs	r4, r4, #2
 8005032:	42a6      	cmp	r6, r4
 8005034:	d105      	bne.n	8005042 <__libc_init_array+0x2e>
 8005036:	bd70      	pop	{r4, r5, r6, pc}
 8005038:	00b3      	lsls	r3, r6, #2
 800503a:	58eb      	ldr	r3, [r5, r3]
 800503c:	4798      	blx	r3
 800503e:	3601      	adds	r6, #1
 8005040:	e7ee      	b.n	8005020 <__libc_init_array+0xc>
 8005042:	00b3      	lsls	r3, r6, #2
 8005044:	58eb      	ldr	r3, [r5, r3]
 8005046:	4798      	blx	r3
 8005048:	3601      	adds	r6, #1
 800504a:	e7f2      	b.n	8005032 <__libc_init_array+0x1e>
 800504c:	08005bf8 	.word	0x08005bf8
 8005050:	08005bf8 	.word	0x08005bf8
 8005054:	08005bfc 	.word	0x08005bfc
 8005058:	08005bf8 	.word	0x08005bf8

0800505c <__retarget_lock_init_recursive>:
 800505c:	4770      	bx	lr

0800505e <__retarget_lock_acquire_recursive>:
 800505e:	4770      	bx	lr

08005060 <__retarget_lock_release_recursive>:
 8005060:	4770      	bx	lr
	...

08005064 <_free_r>:
 8005064:	b570      	push	{r4, r5, r6, lr}
 8005066:	0005      	movs	r5, r0
 8005068:	1e0c      	subs	r4, r1, #0
 800506a:	d010      	beq.n	800508e <_free_r+0x2a>
 800506c:	3c04      	subs	r4, #4
 800506e:	6823      	ldr	r3, [r4, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	da00      	bge.n	8005076 <_free_r+0x12>
 8005074:	18e4      	adds	r4, r4, r3
 8005076:	0028      	movs	r0, r5
 8005078:	f000 f8e0 	bl	800523c <__malloc_lock>
 800507c:	4a1d      	ldr	r2, [pc, #116]	@ (80050f4 <_free_r+0x90>)
 800507e:	6813      	ldr	r3, [r2, #0]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d105      	bne.n	8005090 <_free_r+0x2c>
 8005084:	6063      	str	r3, [r4, #4]
 8005086:	6014      	str	r4, [r2, #0]
 8005088:	0028      	movs	r0, r5
 800508a:	f000 f8df 	bl	800524c <__malloc_unlock>
 800508e:	bd70      	pop	{r4, r5, r6, pc}
 8005090:	42a3      	cmp	r3, r4
 8005092:	d908      	bls.n	80050a6 <_free_r+0x42>
 8005094:	6820      	ldr	r0, [r4, #0]
 8005096:	1821      	adds	r1, r4, r0
 8005098:	428b      	cmp	r3, r1
 800509a:	d1f3      	bne.n	8005084 <_free_r+0x20>
 800509c:	6819      	ldr	r1, [r3, #0]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	1809      	adds	r1, r1, r0
 80050a2:	6021      	str	r1, [r4, #0]
 80050a4:	e7ee      	b.n	8005084 <_free_r+0x20>
 80050a6:	001a      	movs	r2, r3
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d001      	beq.n	80050b2 <_free_r+0x4e>
 80050ae:	42a3      	cmp	r3, r4
 80050b0:	d9f9      	bls.n	80050a6 <_free_r+0x42>
 80050b2:	6811      	ldr	r1, [r2, #0]
 80050b4:	1850      	adds	r0, r2, r1
 80050b6:	42a0      	cmp	r0, r4
 80050b8:	d10b      	bne.n	80050d2 <_free_r+0x6e>
 80050ba:	6820      	ldr	r0, [r4, #0]
 80050bc:	1809      	adds	r1, r1, r0
 80050be:	1850      	adds	r0, r2, r1
 80050c0:	6011      	str	r1, [r2, #0]
 80050c2:	4283      	cmp	r3, r0
 80050c4:	d1e0      	bne.n	8005088 <_free_r+0x24>
 80050c6:	6818      	ldr	r0, [r3, #0]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	1841      	adds	r1, r0, r1
 80050cc:	6011      	str	r1, [r2, #0]
 80050ce:	6053      	str	r3, [r2, #4]
 80050d0:	e7da      	b.n	8005088 <_free_r+0x24>
 80050d2:	42a0      	cmp	r0, r4
 80050d4:	d902      	bls.n	80050dc <_free_r+0x78>
 80050d6:	230c      	movs	r3, #12
 80050d8:	602b      	str	r3, [r5, #0]
 80050da:	e7d5      	b.n	8005088 <_free_r+0x24>
 80050dc:	6820      	ldr	r0, [r4, #0]
 80050de:	1821      	adds	r1, r4, r0
 80050e0:	428b      	cmp	r3, r1
 80050e2:	d103      	bne.n	80050ec <_free_r+0x88>
 80050e4:	6819      	ldr	r1, [r3, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	1809      	adds	r1, r1, r0
 80050ea:	6021      	str	r1, [r4, #0]
 80050ec:	6063      	str	r3, [r4, #4]
 80050ee:	6054      	str	r4, [r2, #4]
 80050f0:	e7ca      	b.n	8005088 <_free_r+0x24>
 80050f2:	46c0      	nop			@ (mov r8, r8)
 80050f4:	20000394 	.word	0x20000394

080050f8 <sbrk_aligned>:
 80050f8:	b570      	push	{r4, r5, r6, lr}
 80050fa:	4e0f      	ldr	r6, [pc, #60]	@ (8005138 <sbrk_aligned+0x40>)
 80050fc:	000d      	movs	r5, r1
 80050fe:	6831      	ldr	r1, [r6, #0]
 8005100:	0004      	movs	r4, r0
 8005102:	2900      	cmp	r1, #0
 8005104:	d102      	bne.n	800510c <sbrk_aligned+0x14>
 8005106:	f000 fcad 	bl	8005a64 <_sbrk_r>
 800510a:	6030      	str	r0, [r6, #0]
 800510c:	0029      	movs	r1, r5
 800510e:	0020      	movs	r0, r4
 8005110:	f000 fca8 	bl	8005a64 <_sbrk_r>
 8005114:	1c43      	adds	r3, r0, #1
 8005116:	d103      	bne.n	8005120 <sbrk_aligned+0x28>
 8005118:	2501      	movs	r5, #1
 800511a:	426d      	negs	r5, r5
 800511c:	0028      	movs	r0, r5
 800511e:	bd70      	pop	{r4, r5, r6, pc}
 8005120:	2303      	movs	r3, #3
 8005122:	1cc5      	adds	r5, r0, #3
 8005124:	439d      	bics	r5, r3
 8005126:	42a8      	cmp	r0, r5
 8005128:	d0f8      	beq.n	800511c <sbrk_aligned+0x24>
 800512a:	1a29      	subs	r1, r5, r0
 800512c:	0020      	movs	r0, r4
 800512e:	f000 fc99 	bl	8005a64 <_sbrk_r>
 8005132:	3001      	adds	r0, #1
 8005134:	d1f2      	bne.n	800511c <sbrk_aligned+0x24>
 8005136:	e7ef      	b.n	8005118 <sbrk_aligned+0x20>
 8005138:	20000390 	.word	0x20000390

0800513c <_malloc_r>:
 800513c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800513e:	2203      	movs	r2, #3
 8005140:	1ccb      	adds	r3, r1, #3
 8005142:	4393      	bics	r3, r2
 8005144:	3308      	adds	r3, #8
 8005146:	0005      	movs	r5, r0
 8005148:	001f      	movs	r7, r3
 800514a:	2b0c      	cmp	r3, #12
 800514c:	d234      	bcs.n	80051b8 <_malloc_r+0x7c>
 800514e:	270c      	movs	r7, #12
 8005150:	42b9      	cmp	r1, r7
 8005152:	d833      	bhi.n	80051bc <_malloc_r+0x80>
 8005154:	0028      	movs	r0, r5
 8005156:	f000 f871 	bl	800523c <__malloc_lock>
 800515a:	4e37      	ldr	r6, [pc, #220]	@ (8005238 <_malloc_r+0xfc>)
 800515c:	6833      	ldr	r3, [r6, #0]
 800515e:	001c      	movs	r4, r3
 8005160:	2c00      	cmp	r4, #0
 8005162:	d12f      	bne.n	80051c4 <_malloc_r+0x88>
 8005164:	0039      	movs	r1, r7
 8005166:	0028      	movs	r0, r5
 8005168:	f7ff ffc6 	bl	80050f8 <sbrk_aligned>
 800516c:	0004      	movs	r4, r0
 800516e:	1c43      	adds	r3, r0, #1
 8005170:	d15f      	bne.n	8005232 <_malloc_r+0xf6>
 8005172:	6834      	ldr	r4, [r6, #0]
 8005174:	9400      	str	r4, [sp, #0]
 8005176:	9b00      	ldr	r3, [sp, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d14a      	bne.n	8005212 <_malloc_r+0xd6>
 800517c:	2c00      	cmp	r4, #0
 800517e:	d052      	beq.n	8005226 <_malloc_r+0xea>
 8005180:	6823      	ldr	r3, [r4, #0]
 8005182:	0028      	movs	r0, r5
 8005184:	18e3      	adds	r3, r4, r3
 8005186:	9900      	ldr	r1, [sp, #0]
 8005188:	9301      	str	r3, [sp, #4]
 800518a:	f000 fc6b 	bl	8005a64 <_sbrk_r>
 800518e:	9b01      	ldr	r3, [sp, #4]
 8005190:	4283      	cmp	r3, r0
 8005192:	d148      	bne.n	8005226 <_malloc_r+0xea>
 8005194:	6823      	ldr	r3, [r4, #0]
 8005196:	0028      	movs	r0, r5
 8005198:	1aff      	subs	r7, r7, r3
 800519a:	0039      	movs	r1, r7
 800519c:	f7ff ffac 	bl	80050f8 <sbrk_aligned>
 80051a0:	3001      	adds	r0, #1
 80051a2:	d040      	beq.n	8005226 <_malloc_r+0xea>
 80051a4:	6823      	ldr	r3, [r4, #0]
 80051a6:	19db      	adds	r3, r3, r7
 80051a8:	6023      	str	r3, [r4, #0]
 80051aa:	6833      	ldr	r3, [r6, #0]
 80051ac:	685a      	ldr	r2, [r3, #4]
 80051ae:	2a00      	cmp	r2, #0
 80051b0:	d133      	bne.n	800521a <_malloc_r+0xde>
 80051b2:	9b00      	ldr	r3, [sp, #0]
 80051b4:	6033      	str	r3, [r6, #0]
 80051b6:	e019      	b.n	80051ec <_malloc_r+0xb0>
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	dac9      	bge.n	8005150 <_malloc_r+0x14>
 80051bc:	230c      	movs	r3, #12
 80051be:	602b      	str	r3, [r5, #0]
 80051c0:	2000      	movs	r0, #0
 80051c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80051c4:	6821      	ldr	r1, [r4, #0]
 80051c6:	1bc9      	subs	r1, r1, r7
 80051c8:	d420      	bmi.n	800520c <_malloc_r+0xd0>
 80051ca:	290b      	cmp	r1, #11
 80051cc:	d90a      	bls.n	80051e4 <_malloc_r+0xa8>
 80051ce:	19e2      	adds	r2, r4, r7
 80051d0:	6027      	str	r7, [r4, #0]
 80051d2:	42a3      	cmp	r3, r4
 80051d4:	d104      	bne.n	80051e0 <_malloc_r+0xa4>
 80051d6:	6032      	str	r2, [r6, #0]
 80051d8:	6863      	ldr	r3, [r4, #4]
 80051da:	6011      	str	r1, [r2, #0]
 80051dc:	6053      	str	r3, [r2, #4]
 80051de:	e005      	b.n	80051ec <_malloc_r+0xb0>
 80051e0:	605a      	str	r2, [r3, #4]
 80051e2:	e7f9      	b.n	80051d8 <_malloc_r+0x9c>
 80051e4:	6862      	ldr	r2, [r4, #4]
 80051e6:	42a3      	cmp	r3, r4
 80051e8:	d10e      	bne.n	8005208 <_malloc_r+0xcc>
 80051ea:	6032      	str	r2, [r6, #0]
 80051ec:	0028      	movs	r0, r5
 80051ee:	f000 f82d 	bl	800524c <__malloc_unlock>
 80051f2:	0020      	movs	r0, r4
 80051f4:	2207      	movs	r2, #7
 80051f6:	300b      	adds	r0, #11
 80051f8:	1d23      	adds	r3, r4, #4
 80051fa:	4390      	bics	r0, r2
 80051fc:	1ac2      	subs	r2, r0, r3
 80051fe:	4298      	cmp	r0, r3
 8005200:	d0df      	beq.n	80051c2 <_malloc_r+0x86>
 8005202:	1a1b      	subs	r3, r3, r0
 8005204:	50a3      	str	r3, [r4, r2]
 8005206:	e7dc      	b.n	80051c2 <_malloc_r+0x86>
 8005208:	605a      	str	r2, [r3, #4]
 800520a:	e7ef      	b.n	80051ec <_malloc_r+0xb0>
 800520c:	0023      	movs	r3, r4
 800520e:	6864      	ldr	r4, [r4, #4]
 8005210:	e7a6      	b.n	8005160 <_malloc_r+0x24>
 8005212:	9c00      	ldr	r4, [sp, #0]
 8005214:	6863      	ldr	r3, [r4, #4]
 8005216:	9300      	str	r3, [sp, #0]
 8005218:	e7ad      	b.n	8005176 <_malloc_r+0x3a>
 800521a:	001a      	movs	r2, r3
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	42a3      	cmp	r3, r4
 8005220:	d1fb      	bne.n	800521a <_malloc_r+0xde>
 8005222:	2300      	movs	r3, #0
 8005224:	e7da      	b.n	80051dc <_malloc_r+0xa0>
 8005226:	230c      	movs	r3, #12
 8005228:	0028      	movs	r0, r5
 800522a:	602b      	str	r3, [r5, #0]
 800522c:	f000 f80e 	bl	800524c <__malloc_unlock>
 8005230:	e7c6      	b.n	80051c0 <_malloc_r+0x84>
 8005232:	6007      	str	r7, [r0, #0]
 8005234:	e7da      	b.n	80051ec <_malloc_r+0xb0>
 8005236:	46c0      	nop			@ (mov r8, r8)
 8005238:	20000394 	.word	0x20000394

0800523c <__malloc_lock>:
 800523c:	b510      	push	{r4, lr}
 800523e:	4802      	ldr	r0, [pc, #8]	@ (8005248 <__malloc_lock+0xc>)
 8005240:	f7ff ff0d 	bl	800505e <__retarget_lock_acquire_recursive>
 8005244:	bd10      	pop	{r4, pc}
 8005246:	46c0      	nop			@ (mov r8, r8)
 8005248:	2000038c 	.word	0x2000038c

0800524c <__malloc_unlock>:
 800524c:	b510      	push	{r4, lr}
 800524e:	4802      	ldr	r0, [pc, #8]	@ (8005258 <__malloc_unlock+0xc>)
 8005250:	f7ff ff06 	bl	8005060 <__retarget_lock_release_recursive>
 8005254:	bd10      	pop	{r4, pc}
 8005256:	46c0      	nop			@ (mov r8, r8)
 8005258:	2000038c 	.word	0x2000038c

0800525c <__sfputc_r>:
 800525c:	6893      	ldr	r3, [r2, #8]
 800525e:	b510      	push	{r4, lr}
 8005260:	3b01      	subs	r3, #1
 8005262:	6093      	str	r3, [r2, #8]
 8005264:	2b00      	cmp	r3, #0
 8005266:	da04      	bge.n	8005272 <__sfputc_r+0x16>
 8005268:	6994      	ldr	r4, [r2, #24]
 800526a:	42a3      	cmp	r3, r4
 800526c:	db07      	blt.n	800527e <__sfputc_r+0x22>
 800526e:	290a      	cmp	r1, #10
 8005270:	d005      	beq.n	800527e <__sfputc_r+0x22>
 8005272:	6813      	ldr	r3, [r2, #0]
 8005274:	1c58      	adds	r0, r3, #1
 8005276:	6010      	str	r0, [r2, #0]
 8005278:	7019      	strb	r1, [r3, #0]
 800527a:	0008      	movs	r0, r1
 800527c:	bd10      	pop	{r4, pc}
 800527e:	f7ff fdcd 	bl	8004e1c <__swbuf_r>
 8005282:	0001      	movs	r1, r0
 8005284:	e7f9      	b.n	800527a <__sfputc_r+0x1e>

08005286 <__sfputs_r>:
 8005286:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005288:	0006      	movs	r6, r0
 800528a:	000f      	movs	r7, r1
 800528c:	0014      	movs	r4, r2
 800528e:	18d5      	adds	r5, r2, r3
 8005290:	42ac      	cmp	r4, r5
 8005292:	d101      	bne.n	8005298 <__sfputs_r+0x12>
 8005294:	2000      	movs	r0, #0
 8005296:	e007      	b.n	80052a8 <__sfputs_r+0x22>
 8005298:	7821      	ldrb	r1, [r4, #0]
 800529a:	003a      	movs	r2, r7
 800529c:	0030      	movs	r0, r6
 800529e:	f7ff ffdd 	bl	800525c <__sfputc_r>
 80052a2:	3401      	adds	r4, #1
 80052a4:	1c43      	adds	r3, r0, #1
 80052a6:	d1f3      	bne.n	8005290 <__sfputs_r+0xa>
 80052a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080052ac <_vfiprintf_r>:
 80052ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052ae:	b0a1      	sub	sp, #132	@ 0x84
 80052b0:	000f      	movs	r7, r1
 80052b2:	0015      	movs	r5, r2
 80052b4:	001e      	movs	r6, r3
 80052b6:	9003      	str	r0, [sp, #12]
 80052b8:	2800      	cmp	r0, #0
 80052ba:	d004      	beq.n	80052c6 <_vfiprintf_r+0x1a>
 80052bc:	6a03      	ldr	r3, [r0, #32]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d101      	bne.n	80052c6 <_vfiprintf_r+0x1a>
 80052c2:	f7ff fcbb 	bl	8004c3c <__sinit>
 80052c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80052c8:	07db      	lsls	r3, r3, #31
 80052ca:	d405      	bmi.n	80052d8 <_vfiprintf_r+0x2c>
 80052cc:	89bb      	ldrh	r3, [r7, #12]
 80052ce:	059b      	lsls	r3, r3, #22
 80052d0:	d402      	bmi.n	80052d8 <_vfiprintf_r+0x2c>
 80052d2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80052d4:	f7ff fec3 	bl	800505e <__retarget_lock_acquire_recursive>
 80052d8:	89bb      	ldrh	r3, [r7, #12]
 80052da:	071b      	lsls	r3, r3, #28
 80052dc:	d502      	bpl.n	80052e4 <_vfiprintf_r+0x38>
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d113      	bne.n	800530c <_vfiprintf_r+0x60>
 80052e4:	0039      	movs	r1, r7
 80052e6:	9803      	ldr	r0, [sp, #12]
 80052e8:	f7ff fdda 	bl	8004ea0 <__swsetup_r>
 80052ec:	2800      	cmp	r0, #0
 80052ee:	d00d      	beq.n	800530c <_vfiprintf_r+0x60>
 80052f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80052f2:	07db      	lsls	r3, r3, #31
 80052f4:	d503      	bpl.n	80052fe <_vfiprintf_r+0x52>
 80052f6:	2001      	movs	r0, #1
 80052f8:	4240      	negs	r0, r0
 80052fa:	b021      	add	sp, #132	@ 0x84
 80052fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052fe:	89bb      	ldrh	r3, [r7, #12]
 8005300:	059b      	lsls	r3, r3, #22
 8005302:	d4f8      	bmi.n	80052f6 <_vfiprintf_r+0x4a>
 8005304:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005306:	f7ff feab 	bl	8005060 <__retarget_lock_release_recursive>
 800530a:	e7f4      	b.n	80052f6 <_vfiprintf_r+0x4a>
 800530c:	2300      	movs	r3, #0
 800530e:	ac08      	add	r4, sp, #32
 8005310:	6163      	str	r3, [r4, #20]
 8005312:	3320      	adds	r3, #32
 8005314:	7663      	strb	r3, [r4, #25]
 8005316:	3310      	adds	r3, #16
 8005318:	76a3      	strb	r3, [r4, #26]
 800531a:	9607      	str	r6, [sp, #28]
 800531c:	002e      	movs	r6, r5
 800531e:	7833      	ldrb	r3, [r6, #0]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d001      	beq.n	8005328 <_vfiprintf_r+0x7c>
 8005324:	2b25      	cmp	r3, #37	@ 0x25
 8005326:	d148      	bne.n	80053ba <_vfiprintf_r+0x10e>
 8005328:	1b73      	subs	r3, r6, r5
 800532a:	9305      	str	r3, [sp, #20]
 800532c:	42ae      	cmp	r6, r5
 800532e:	d00b      	beq.n	8005348 <_vfiprintf_r+0x9c>
 8005330:	002a      	movs	r2, r5
 8005332:	0039      	movs	r1, r7
 8005334:	9803      	ldr	r0, [sp, #12]
 8005336:	f7ff ffa6 	bl	8005286 <__sfputs_r>
 800533a:	3001      	adds	r0, #1
 800533c:	d100      	bne.n	8005340 <_vfiprintf_r+0x94>
 800533e:	e0ae      	b.n	800549e <_vfiprintf_r+0x1f2>
 8005340:	6963      	ldr	r3, [r4, #20]
 8005342:	9a05      	ldr	r2, [sp, #20]
 8005344:	189b      	adds	r3, r3, r2
 8005346:	6163      	str	r3, [r4, #20]
 8005348:	7833      	ldrb	r3, [r6, #0]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d100      	bne.n	8005350 <_vfiprintf_r+0xa4>
 800534e:	e0a6      	b.n	800549e <_vfiprintf_r+0x1f2>
 8005350:	2201      	movs	r2, #1
 8005352:	2300      	movs	r3, #0
 8005354:	4252      	negs	r2, r2
 8005356:	6062      	str	r2, [r4, #4]
 8005358:	a904      	add	r1, sp, #16
 800535a:	3254      	adds	r2, #84	@ 0x54
 800535c:	1852      	adds	r2, r2, r1
 800535e:	1c75      	adds	r5, r6, #1
 8005360:	6023      	str	r3, [r4, #0]
 8005362:	60e3      	str	r3, [r4, #12]
 8005364:	60a3      	str	r3, [r4, #8]
 8005366:	7013      	strb	r3, [r2, #0]
 8005368:	65a3      	str	r3, [r4, #88]	@ 0x58
 800536a:	4b59      	ldr	r3, [pc, #356]	@ (80054d0 <_vfiprintf_r+0x224>)
 800536c:	2205      	movs	r2, #5
 800536e:	0018      	movs	r0, r3
 8005370:	7829      	ldrb	r1, [r5, #0]
 8005372:	9305      	str	r3, [sp, #20]
 8005374:	f000 fb88 	bl	8005a88 <memchr>
 8005378:	1c6e      	adds	r6, r5, #1
 800537a:	2800      	cmp	r0, #0
 800537c:	d11f      	bne.n	80053be <_vfiprintf_r+0x112>
 800537e:	6822      	ldr	r2, [r4, #0]
 8005380:	06d3      	lsls	r3, r2, #27
 8005382:	d504      	bpl.n	800538e <_vfiprintf_r+0xe2>
 8005384:	2353      	movs	r3, #83	@ 0x53
 8005386:	a904      	add	r1, sp, #16
 8005388:	185b      	adds	r3, r3, r1
 800538a:	2120      	movs	r1, #32
 800538c:	7019      	strb	r1, [r3, #0]
 800538e:	0713      	lsls	r3, r2, #28
 8005390:	d504      	bpl.n	800539c <_vfiprintf_r+0xf0>
 8005392:	2353      	movs	r3, #83	@ 0x53
 8005394:	a904      	add	r1, sp, #16
 8005396:	185b      	adds	r3, r3, r1
 8005398:	212b      	movs	r1, #43	@ 0x2b
 800539a:	7019      	strb	r1, [r3, #0]
 800539c:	782b      	ldrb	r3, [r5, #0]
 800539e:	2b2a      	cmp	r3, #42	@ 0x2a
 80053a0:	d016      	beq.n	80053d0 <_vfiprintf_r+0x124>
 80053a2:	002e      	movs	r6, r5
 80053a4:	2100      	movs	r1, #0
 80053a6:	200a      	movs	r0, #10
 80053a8:	68e3      	ldr	r3, [r4, #12]
 80053aa:	7832      	ldrb	r2, [r6, #0]
 80053ac:	1c75      	adds	r5, r6, #1
 80053ae:	3a30      	subs	r2, #48	@ 0x30
 80053b0:	2a09      	cmp	r2, #9
 80053b2:	d950      	bls.n	8005456 <_vfiprintf_r+0x1aa>
 80053b4:	2900      	cmp	r1, #0
 80053b6:	d111      	bne.n	80053dc <_vfiprintf_r+0x130>
 80053b8:	e017      	b.n	80053ea <_vfiprintf_r+0x13e>
 80053ba:	3601      	adds	r6, #1
 80053bc:	e7af      	b.n	800531e <_vfiprintf_r+0x72>
 80053be:	9b05      	ldr	r3, [sp, #20]
 80053c0:	6822      	ldr	r2, [r4, #0]
 80053c2:	1ac0      	subs	r0, r0, r3
 80053c4:	2301      	movs	r3, #1
 80053c6:	4083      	lsls	r3, r0
 80053c8:	4313      	orrs	r3, r2
 80053ca:	0035      	movs	r5, r6
 80053cc:	6023      	str	r3, [r4, #0]
 80053ce:	e7cc      	b.n	800536a <_vfiprintf_r+0xbe>
 80053d0:	9b07      	ldr	r3, [sp, #28]
 80053d2:	1d19      	adds	r1, r3, #4
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	9107      	str	r1, [sp, #28]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	db01      	blt.n	80053e0 <_vfiprintf_r+0x134>
 80053dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80053de:	e004      	b.n	80053ea <_vfiprintf_r+0x13e>
 80053e0:	425b      	negs	r3, r3
 80053e2:	60e3      	str	r3, [r4, #12]
 80053e4:	2302      	movs	r3, #2
 80053e6:	4313      	orrs	r3, r2
 80053e8:	6023      	str	r3, [r4, #0]
 80053ea:	7833      	ldrb	r3, [r6, #0]
 80053ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80053ee:	d10c      	bne.n	800540a <_vfiprintf_r+0x15e>
 80053f0:	7873      	ldrb	r3, [r6, #1]
 80053f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80053f4:	d134      	bne.n	8005460 <_vfiprintf_r+0x1b4>
 80053f6:	9b07      	ldr	r3, [sp, #28]
 80053f8:	3602      	adds	r6, #2
 80053fa:	1d1a      	adds	r2, r3, #4
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	9207      	str	r2, [sp, #28]
 8005400:	2b00      	cmp	r3, #0
 8005402:	da01      	bge.n	8005408 <_vfiprintf_r+0x15c>
 8005404:	2301      	movs	r3, #1
 8005406:	425b      	negs	r3, r3
 8005408:	9309      	str	r3, [sp, #36]	@ 0x24
 800540a:	4d32      	ldr	r5, [pc, #200]	@ (80054d4 <_vfiprintf_r+0x228>)
 800540c:	2203      	movs	r2, #3
 800540e:	0028      	movs	r0, r5
 8005410:	7831      	ldrb	r1, [r6, #0]
 8005412:	f000 fb39 	bl	8005a88 <memchr>
 8005416:	2800      	cmp	r0, #0
 8005418:	d006      	beq.n	8005428 <_vfiprintf_r+0x17c>
 800541a:	2340      	movs	r3, #64	@ 0x40
 800541c:	1b40      	subs	r0, r0, r5
 800541e:	4083      	lsls	r3, r0
 8005420:	6822      	ldr	r2, [r4, #0]
 8005422:	3601      	adds	r6, #1
 8005424:	4313      	orrs	r3, r2
 8005426:	6023      	str	r3, [r4, #0]
 8005428:	7831      	ldrb	r1, [r6, #0]
 800542a:	2206      	movs	r2, #6
 800542c:	482a      	ldr	r0, [pc, #168]	@ (80054d8 <_vfiprintf_r+0x22c>)
 800542e:	1c75      	adds	r5, r6, #1
 8005430:	7621      	strb	r1, [r4, #24]
 8005432:	f000 fb29 	bl	8005a88 <memchr>
 8005436:	2800      	cmp	r0, #0
 8005438:	d040      	beq.n	80054bc <_vfiprintf_r+0x210>
 800543a:	4b28      	ldr	r3, [pc, #160]	@ (80054dc <_vfiprintf_r+0x230>)
 800543c:	2b00      	cmp	r3, #0
 800543e:	d122      	bne.n	8005486 <_vfiprintf_r+0x1da>
 8005440:	2207      	movs	r2, #7
 8005442:	9b07      	ldr	r3, [sp, #28]
 8005444:	3307      	adds	r3, #7
 8005446:	4393      	bics	r3, r2
 8005448:	3308      	adds	r3, #8
 800544a:	9307      	str	r3, [sp, #28]
 800544c:	6963      	ldr	r3, [r4, #20]
 800544e:	9a04      	ldr	r2, [sp, #16]
 8005450:	189b      	adds	r3, r3, r2
 8005452:	6163      	str	r3, [r4, #20]
 8005454:	e762      	b.n	800531c <_vfiprintf_r+0x70>
 8005456:	4343      	muls	r3, r0
 8005458:	002e      	movs	r6, r5
 800545a:	2101      	movs	r1, #1
 800545c:	189b      	adds	r3, r3, r2
 800545e:	e7a4      	b.n	80053aa <_vfiprintf_r+0xfe>
 8005460:	2300      	movs	r3, #0
 8005462:	200a      	movs	r0, #10
 8005464:	0019      	movs	r1, r3
 8005466:	3601      	adds	r6, #1
 8005468:	6063      	str	r3, [r4, #4]
 800546a:	7832      	ldrb	r2, [r6, #0]
 800546c:	1c75      	adds	r5, r6, #1
 800546e:	3a30      	subs	r2, #48	@ 0x30
 8005470:	2a09      	cmp	r2, #9
 8005472:	d903      	bls.n	800547c <_vfiprintf_r+0x1d0>
 8005474:	2b00      	cmp	r3, #0
 8005476:	d0c8      	beq.n	800540a <_vfiprintf_r+0x15e>
 8005478:	9109      	str	r1, [sp, #36]	@ 0x24
 800547a:	e7c6      	b.n	800540a <_vfiprintf_r+0x15e>
 800547c:	4341      	muls	r1, r0
 800547e:	002e      	movs	r6, r5
 8005480:	2301      	movs	r3, #1
 8005482:	1889      	adds	r1, r1, r2
 8005484:	e7f1      	b.n	800546a <_vfiprintf_r+0x1be>
 8005486:	aa07      	add	r2, sp, #28
 8005488:	9200      	str	r2, [sp, #0]
 800548a:	0021      	movs	r1, r4
 800548c:	003a      	movs	r2, r7
 800548e:	4b14      	ldr	r3, [pc, #80]	@ (80054e0 <_vfiprintf_r+0x234>)
 8005490:	9803      	ldr	r0, [sp, #12]
 8005492:	e000      	b.n	8005496 <_vfiprintf_r+0x1ea>
 8005494:	bf00      	nop
 8005496:	9004      	str	r0, [sp, #16]
 8005498:	9b04      	ldr	r3, [sp, #16]
 800549a:	3301      	adds	r3, #1
 800549c:	d1d6      	bne.n	800544c <_vfiprintf_r+0x1a0>
 800549e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80054a0:	07db      	lsls	r3, r3, #31
 80054a2:	d405      	bmi.n	80054b0 <_vfiprintf_r+0x204>
 80054a4:	89bb      	ldrh	r3, [r7, #12]
 80054a6:	059b      	lsls	r3, r3, #22
 80054a8:	d402      	bmi.n	80054b0 <_vfiprintf_r+0x204>
 80054aa:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80054ac:	f7ff fdd8 	bl	8005060 <__retarget_lock_release_recursive>
 80054b0:	89bb      	ldrh	r3, [r7, #12]
 80054b2:	065b      	lsls	r3, r3, #25
 80054b4:	d500      	bpl.n	80054b8 <_vfiprintf_r+0x20c>
 80054b6:	e71e      	b.n	80052f6 <_vfiprintf_r+0x4a>
 80054b8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80054ba:	e71e      	b.n	80052fa <_vfiprintf_r+0x4e>
 80054bc:	aa07      	add	r2, sp, #28
 80054be:	9200      	str	r2, [sp, #0]
 80054c0:	0021      	movs	r1, r4
 80054c2:	003a      	movs	r2, r7
 80054c4:	4b06      	ldr	r3, [pc, #24]	@ (80054e0 <_vfiprintf_r+0x234>)
 80054c6:	9803      	ldr	r0, [sp, #12]
 80054c8:	f000 f87c 	bl	80055c4 <_printf_i>
 80054cc:	e7e3      	b.n	8005496 <_vfiprintf_r+0x1ea>
 80054ce:	46c0      	nop			@ (mov r8, r8)
 80054d0:	08005bbc 	.word	0x08005bbc
 80054d4:	08005bc2 	.word	0x08005bc2
 80054d8:	08005bc6 	.word	0x08005bc6
 80054dc:	00000000 	.word	0x00000000
 80054e0:	08005287 	.word	0x08005287

080054e4 <_printf_common>:
 80054e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054e6:	0016      	movs	r6, r2
 80054e8:	9301      	str	r3, [sp, #4]
 80054ea:	688a      	ldr	r2, [r1, #8]
 80054ec:	690b      	ldr	r3, [r1, #16]
 80054ee:	000c      	movs	r4, r1
 80054f0:	9000      	str	r0, [sp, #0]
 80054f2:	4293      	cmp	r3, r2
 80054f4:	da00      	bge.n	80054f8 <_printf_common+0x14>
 80054f6:	0013      	movs	r3, r2
 80054f8:	0022      	movs	r2, r4
 80054fa:	6033      	str	r3, [r6, #0]
 80054fc:	3243      	adds	r2, #67	@ 0x43
 80054fe:	7812      	ldrb	r2, [r2, #0]
 8005500:	2a00      	cmp	r2, #0
 8005502:	d001      	beq.n	8005508 <_printf_common+0x24>
 8005504:	3301      	adds	r3, #1
 8005506:	6033      	str	r3, [r6, #0]
 8005508:	6823      	ldr	r3, [r4, #0]
 800550a:	069b      	lsls	r3, r3, #26
 800550c:	d502      	bpl.n	8005514 <_printf_common+0x30>
 800550e:	6833      	ldr	r3, [r6, #0]
 8005510:	3302      	adds	r3, #2
 8005512:	6033      	str	r3, [r6, #0]
 8005514:	6822      	ldr	r2, [r4, #0]
 8005516:	2306      	movs	r3, #6
 8005518:	0015      	movs	r5, r2
 800551a:	401d      	ands	r5, r3
 800551c:	421a      	tst	r2, r3
 800551e:	d027      	beq.n	8005570 <_printf_common+0x8c>
 8005520:	0023      	movs	r3, r4
 8005522:	3343      	adds	r3, #67	@ 0x43
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	1e5a      	subs	r2, r3, #1
 8005528:	4193      	sbcs	r3, r2
 800552a:	6822      	ldr	r2, [r4, #0]
 800552c:	0692      	lsls	r2, r2, #26
 800552e:	d430      	bmi.n	8005592 <_printf_common+0xae>
 8005530:	0022      	movs	r2, r4
 8005532:	9901      	ldr	r1, [sp, #4]
 8005534:	9800      	ldr	r0, [sp, #0]
 8005536:	9d08      	ldr	r5, [sp, #32]
 8005538:	3243      	adds	r2, #67	@ 0x43
 800553a:	47a8      	blx	r5
 800553c:	3001      	adds	r0, #1
 800553e:	d025      	beq.n	800558c <_printf_common+0xa8>
 8005540:	2206      	movs	r2, #6
 8005542:	6823      	ldr	r3, [r4, #0]
 8005544:	2500      	movs	r5, #0
 8005546:	4013      	ands	r3, r2
 8005548:	2b04      	cmp	r3, #4
 800554a:	d105      	bne.n	8005558 <_printf_common+0x74>
 800554c:	6833      	ldr	r3, [r6, #0]
 800554e:	68e5      	ldr	r5, [r4, #12]
 8005550:	1aed      	subs	r5, r5, r3
 8005552:	43eb      	mvns	r3, r5
 8005554:	17db      	asrs	r3, r3, #31
 8005556:	401d      	ands	r5, r3
 8005558:	68a3      	ldr	r3, [r4, #8]
 800555a:	6922      	ldr	r2, [r4, #16]
 800555c:	4293      	cmp	r3, r2
 800555e:	dd01      	ble.n	8005564 <_printf_common+0x80>
 8005560:	1a9b      	subs	r3, r3, r2
 8005562:	18ed      	adds	r5, r5, r3
 8005564:	2600      	movs	r6, #0
 8005566:	42b5      	cmp	r5, r6
 8005568:	d120      	bne.n	80055ac <_printf_common+0xc8>
 800556a:	2000      	movs	r0, #0
 800556c:	e010      	b.n	8005590 <_printf_common+0xac>
 800556e:	3501      	adds	r5, #1
 8005570:	68e3      	ldr	r3, [r4, #12]
 8005572:	6832      	ldr	r2, [r6, #0]
 8005574:	1a9b      	subs	r3, r3, r2
 8005576:	42ab      	cmp	r3, r5
 8005578:	ddd2      	ble.n	8005520 <_printf_common+0x3c>
 800557a:	0022      	movs	r2, r4
 800557c:	2301      	movs	r3, #1
 800557e:	9901      	ldr	r1, [sp, #4]
 8005580:	9800      	ldr	r0, [sp, #0]
 8005582:	9f08      	ldr	r7, [sp, #32]
 8005584:	3219      	adds	r2, #25
 8005586:	47b8      	blx	r7
 8005588:	3001      	adds	r0, #1
 800558a:	d1f0      	bne.n	800556e <_printf_common+0x8a>
 800558c:	2001      	movs	r0, #1
 800558e:	4240      	negs	r0, r0
 8005590:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005592:	2030      	movs	r0, #48	@ 0x30
 8005594:	18e1      	adds	r1, r4, r3
 8005596:	3143      	adds	r1, #67	@ 0x43
 8005598:	7008      	strb	r0, [r1, #0]
 800559a:	0021      	movs	r1, r4
 800559c:	1c5a      	adds	r2, r3, #1
 800559e:	3145      	adds	r1, #69	@ 0x45
 80055a0:	7809      	ldrb	r1, [r1, #0]
 80055a2:	18a2      	adds	r2, r4, r2
 80055a4:	3243      	adds	r2, #67	@ 0x43
 80055a6:	3302      	adds	r3, #2
 80055a8:	7011      	strb	r1, [r2, #0]
 80055aa:	e7c1      	b.n	8005530 <_printf_common+0x4c>
 80055ac:	0022      	movs	r2, r4
 80055ae:	2301      	movs	r3, #1
 80055b0:	9901      	ldr	r1, [sp, #4]
 80055b2:	9800      	ldr	r0, [sp, #0]
 80055b4:	9f08      	ldr	r7, [sp, #32]
 80055b6:	321a      	adds	r2, #26
 80055b8:	47b8      	blx	r7
 80055ba:	3001      	adds	r0, #1
 80055bc:	d0e6      	beq.n	800558c <_printf_common+0xa8>
 80055be:	3601      	adds	r6, #1
 80055c0:	e7d1      	b.n	8005566 <_printf_common+0x82>
	...

080055c4 <_printf_i>:
 80055c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055c6:	b08b      	sub	sp, #44	@ 0x2c
 80055c8:	9206      	str	r2, [sp, #24]
 80055ca:	000a      	movs	r2, r1
 80055cc:	3243      	adds	r2, #67	@ 0x43
 80055ce:	9307      	str	r3, [sp, #28]
 80055d0:	9005      	str	r0, [sp, #20]
 80055d2:	9203      	str	r2, [sp, #12]
 80055d4:	7e0a      	ldrb	r2, [r1, #24]
 80055d6:	000c      	movs	r4, r1
 80055d8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80055da:	2a78      	cmp	r2, #120	@ 0x78
 80055dc:	d809      	bhi.n	80055f2 <_printf_i+0x2e>
 80055de:	2a62      	cmp	r2, #98	@ 0x62
 80055e0:	d80b      	bhi.n	80055fa <_printf_i+0x36>
 80055e2:	2a00      	cmp	r2, #0
 80055e4:	d100      	bne.n	80055e8 <_printf_i+0x24>
 80055e6:	e0bc      	b.n	8005762 <_printf_i+0x19e>
 80055e8:	497b      	ldr	r1, [pc, #492]	@ (80057d8 <_printf_i+0x214>)
 80055ea:	9104      	str	r1, [sp, #16]
 80055ec:	2a58      	cmp	r2, #88	@ 0x58
 80055ee:	d100      	bne.n	80055f2 <_printf_i+0x2e>
 80055f0:	e090      	b.n	8005714 <_printf_i+0x150>
 80055f2:	0025      	movs	r5, r4
 80055f4:	3542      	adds	r5, #66	@ 0x42
 80055f6:	702a      	strb	r2, [r5, #0]
 80055f8:	e022      	b.n	8005640 <_printf_i+0x7c>
 80055fa:	0010      	movs	r0, r2
 80055fc:	3863      	subs	r0, #99	@ 0x63
 80055fe:	2815      	cmp	r0, #21
 8005600:	d8f7      	bhi.n	80055f2 <_printf_i+0x2e>
 8005602:	f7fa fd81 	bl	8000108 <__gnu_thumb1_case_shi>
 8005606:	0016      	.short	0x0016
 8005608:	fff6001f 	.word	0xfff6001f
 800560c:	fff6fff6 	.word	0xfff6fff6
 8005610:	001ffff6 	.word	0x001ffff6
 8005614:	fff6fff6 	.word	0xfff6fff6
 8005618:	fff6fff6 	.word	0xfff6fff6
 800561c:	003600a1 	.word	0x003600a1
 8005620:	fff60080 	.word	0xfff60080
 8005624:	00b2fff6 	.word	0x00b2fff6
 8005628:	0036fff6 	.word	0x0036fff6
 800562c:	fff6fff6 	.word	0xfff6fff6
 8005630:	0084      	.short	0x0084
 8005632:	0025      	movs	r5, r4
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	3542      	adds	r5, #66	@ 0x42
 8005638:	1d11      	adds	r1, r2, #4
 800563a:	6019      	str	r1, [r3, #0]
 800563c:	6813      	ldr	r3, [r2, #0]
 800563e:	702b      	strb	r3, [r5, #0]
 8005640:	2301      	movs	r3, #1
 8005642:	e0a0      	b.n	8005786 <_printf_i+0x1c2>
 8005644:	6818      	ldr	r0, [r3, #0]
 8005646:	6809      	ldr	r1, [r1, #0]
 8005648:	1d02      	adds	r2, r0, #4
 800564a:	060d      	lsls	r5, r1, #24
 800564c:	d50b      	bpl.n	8005666 <_printf_i+0xa2>
 800564e:	6806      	ldr	r6, [r0, #0]
 8005650:	601a      	str	r2, [r3, #0]
 8005652:	2e00      	cmp	r6, #0
 8005654:	da03      	bge.n	800565e <_printf_i+0x9a>
 8005656:	232d      	movs	r3, #45	@ 0x2d
 8005658:	9a03      	ldr	r2, [sp, #12]
 800565a:	4276      	negs	r6, r6
 800565c:	7013      	strb	r3, [r2, #0]
 800565e:	4b5e      	ldr	r3, [pc, #376]	@ (80057d8 <_printf_i+0x214>)
 8005660:	270a      	movs	r7, #10
 8005662:	9304      	str	r3, [sp, #16]
 8005664:	e018      	b.n	8005698 <_printf_i+0xd4>
 8005666:	6806      	ldr	r6, [r0, #0]
 8005668:	601a      	str	r2, [r3, #0]
 800566a:	0649      	lsls	r1, r1, #25
 800566c:	d5f1      	bpl.n	8005652 <_printf_i+0x8e>
 800566e:	b236      	sxth	r6, r6
 8005670:	e7ef      	b.n	8005652 <_printf_i+0x8e>
 8005672:	6808      	ldr	r0, [r1, #0]
 8005674:	6819      	ldr	r1, [r3, #0]
 8005676:	c940      	ldmia	r1!, {r6}
 8005678:	0605      	lsls	r5, r0, #24
 800567a:	d402      	bmi.n	8005682 <_printf_i+0xbe>
 800567c:	0640      	lsls	r0, r0, #25
 800567e:	d500      	bpl.n	8005682 <_printf_i+0xbe>
 8005680:	b2b6      	uxth	r6, r6
 8005682:	6019      	str	r1, [r3, #0]
 8005684:	4b54      	ldr	r3, [pc, #336]	@ (80057d8 <_printf_i+0x214>)
 8005686:	270a      	movs	r7, #10
 8005688:	9304      	str	r3, [sp, #16]
 800568a:	2a6f      	cmp	r2, #111	@ 0x6f
 800568c:	d100      	bne.n	8005690 <_printf_i+0xcc>
 800568e:	3f02      	subs	r7, #2
 8005690:	0023      	movs	r3, r4
 8005692:	2200      	movs	r2, #0
 8005694:	3343      	adds	r3, #67	@ 0x43
 8005696:	701a      	strb	r2, [r3, #0]
 8005698:	6863      	ldr	r3, [r4, #4]
 800569a:	60a3      	str	r3, [r4, #8]
 800569c:	2b00      	cmp	r3, #0
 800569e:	db03      	blt.n	80056a8 <_printf_i+0xe4>
 80056a0:	2104      	movs	r1, #4
 80056a2:	6822      	ldr	r2, [r4, #0]
 80056a4:	438a      	bics	r2, r1
 80056a6:	6022      	str	r2, [r4, #0]
 80056a8:	2e00      	cmp	r6, #0
 80056aa:	d102      	bne.n	80056b2 <_printf_i+0xee>
 80056ac:	9d03      	ldr	r5, [sp, #12]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d00c      	beq.n	80056cc <_printf_i+0x108>
 80056b2:	9d03      	ldr	r5, [sp, #12]
 80056b4:	0030      	movs	r0, r6
 80056b6:	0039      	movs	r1, r7
 80056b8:	f7fa fdb6 	bl	8000228 <__aeabi_uidivmod>
 80056bc:	9b04      	ldr	r3, [sp, #16]
 80056be:	3d01      	subs	r5, #1
 80056c0:	5c5b      	ldrb	r3, [r3, r1]
 80056c2:	702b      	strb	r3, [r5, #0]
 80056c4:	0033      	movs	r3, r6
 80056c6:	0006      	movs	r6, r0
 80056c8:	429f      	cmp	r7, r3
 80056ca:	d9f3      	bls.n	80056b4 <_printf_i+0xf0>
 80056cc:	2f08      	cmp	r7, #8
 80056ce:	d109      	bne.n	80056e4 <_printf_i+0x120>
 80056d0:	6823      	ldr	r3, [r4, #0]
 80056d2:	07db      	lsls	r3, r3, #31
 80056d4:	d506      	bpl.n	80056e4 <_printf_i+0x120>
 80056d6:	6862      	ldr	r2, [r4, #4]
 80056d8:	6923      	ldr	r3, [r4, #16]
 80056da:	429a      	cmp	r2, r3
 80056dc:	dc02      	bgt.n	80056e4 <_printf_i+0x120>
 80056de:	2330      	movs	r3, #48	@ 0x30
 80056e0:	3d01      	subs	r5, #1
 80056e2:	702b      	strb	r3, [r5, #0]
 80056e4:	9b03      	ldr	r3, [sp, #12]
 80056e6:	1b5b      	subs	r3, r3, r5
 80056e8:	6123      	str	r3, [r4, #16]
 80056ea:	9b07      	ldr	r3, [sp, #28]
 80056ec:	0021      	movs	r1, r4
 80056ee:	9300      	str	r3, [sp, #0]
 80056f0:	9805      	ldr	r0, [sp, #20]
 80056f2:	9b06      	ldr	r3, [sp, #24]
 80056f4:	aa09      	add	r2, sp, #36	@ 0x24
 80056f6:	f7ff fef5 	bl	80054e4 <_printf_common>
 80056fa:	3001      	adds	r0, #1
 80056fc:	d148      	bne.n	8005790 <_printf_i+0x1cc>
 80056fe:	2001      	movs	r0, #1
 8005700:	4240      	negs	r0, r0
 8005702:	b00b      	add	sp, #44	@ 0x2c
 8005704:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005706:	2220      	movs	r2, #32
 8005708:	6809      	ldr	r1, [r1, #0]
 800570a:	430a      	orrs	r2, r1
 800570c:	6022      	str	r2, [r4, #0]
 800570e:	2278      	movs	r2, #120	@ 0x78
 8005710:	4932      	ldr	r1, [pc, #200]	@ (80057dc <_printf_i+0x218>)
 8005712:	9104      	str	r1, [sp, #16]
 8005714:	0021      	movs	r1, r4
 8005716:	3145      	adds	r1, #69	@ 0x45
 8005718:	700a      	strb	r2, [r1, #0]
 800571a:	6819      	ldr	r1, [r3, #0]
 800571c:	6822      	ldr	r2, [r4, #0]
 800571e:	c940      	ldmia	r1!, {r6}
 8005720:	0610      	lsls	r0, r2, #24
 8005722:	d402      	bmi.n	800572a <_printf_i+0x166>
 8005724:	0650      	lsls	r0, r2, #25
 8005726:	d500      	bpl.n	800572a <_printf_i+0x166>
 8005728:	b2b6      	uxth	r6, r6
 800572a:	6019      	str	r1, [r3, #0]
 800572c:	07d3      	lsls	r3, r2, #31
 800572e:	d502      	bpl.n	8005736 <_printf_i+0x172>
 8005730:	2320      	movs	r3, #32
 8005732:	4313      	orrs	r3, r2
 8005734:	6023      	str	r3, [r4, #0]
 8005736:	2e00      	cmp	r6, #0
 8005738:	d001      	beq.n	800573e <_printf_i+0x17a>
 800573a:	2710      	movs	r7, #16
 800573c:	e7a8      	b.n	8005690 <_printf_i+0xcc>
 800573e:	2220      	movs	r2, #32
 8005740:	6823      	ldr	r3, [r4, #0]
 8005742:	4393      	bics	r3, r2
 8005744:	6023      	str	r3, [r4, #0]
 8005746:	e7f8      	b.n	800573a <_printf_i+0x176>
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	680d      	ldr	r5, [r1, #0]
 800574c:	1d10      	adds	r0, r2, #4
 800574e:	6949      	ldr	r1, [r1, #20]
 8005750:	6018      	str	r0, [r3, #0]
 8005752:	6813      	ldr	r3, [r2, #0]
 8005754:	062e      	lsls	r6, r5, #24
 8005756:	d501      	bpl.n	800575c <_printf_i+0x198>
 8005758:	6019      	str	r1, [r3, #0]
 800575a:	e002      	b.n	8005762 <_printf_i+0x19e>
 800575c:	066d      	lsls	r5, r5, #25
 800575e:	d5fb      	bpl.n	8005758 <_printf_i+0x194>
 8005760:	8019      	strh	r1, [r3, #0]
 8005762:	2300      	movs	r3, #0
 8005764:	9d03      	ldr	r5, [sp, #12]
 8005766:	6123      	str	r3, [r4, #16]
 8005768:	e7bf      	b.n	80056ea <_printf_i+0x126>
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	1d11      	adds	r1, r2, #4
 800576e:	6019      	str	r1, [r3, #0]
 8005770:	6815      	ldr	r5, [r2, #0]
 8005772:	2100      	movs	r1, #0
 8005774:	0028      	movs	r0, r5
 8005776:	6862      	ldr	r2, [r4, #4]
 8005778:	f000 f986 	bl	8005a88 <memchr>
 800577c:	2800      	cmp	r0, #0
 800577e:	d001      	beq.n	8005784 <_printf_i+0x1c0>
 8005780:	1b40      	subs	r0, r0, r5
 8005782:	6060      	str	r0, [r4, #4]
 8005784:	6863      	ldr	r3, [r4, #4]
 8005786:	6123      	str	r3, [r4, #16]
 8005788:	2300      	movs	r3, #0
 800578a:	9a03      	ldr	r2, [sp, #12]
 800578c:	7013      	strb	r3, [r2, #0]
 800578e:	e7ac      	b.n	80056ea <_printf_i+0x126>
 8005790:	002a      	movs	r2, r5
 8005792:	6923      	ldr	r3, [r4, #16]
 8005794:	9906      	ldr	r1, [sp, #24]
 8005796:	9805      	ldr	r0, [sp, #20]
 8005798:	9d07      	ldr	r5, [sp, #28]
 800579a:	47a8      	blx	r5
 800579c:	3001      	adds	r0, #1
 800579e:	d0ae      	beq.n	80056fe <_printf_i+0x13a>
 80057a0:	6823      	ldr	r3, [r4, #0]
 80057a2:	079b      	lsls	r3, r3, #30
 80057a4:	d415      	bmi.n	80057d2 <_printf_i+0x20e>
 80057a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057a8:	68e0      	ldr	r0, [r4, #12]
 80057aa:	4298      	cmp	r0, r3
 80057ac:	daa9      	bge.n	8005702 <_printf_i+0x13e>
 80057ae:	0018      	movs	r0, r3
 80057b0:	e7a7      	b.n	8005702 <_printf_i+0x13e>
 80057b2:	0022      	movs	r2, r4
 80057b4:	2301      	movs	r3, #1
 80057b6:	9906      	ldr	r1, [sp, #24]
 80057b8:	9805      	ldr	r0, [sp, #20]
 80057ba:	9e07      	ldr	r6, [sp, #28]
 80057bc:	3219      	adds	r2, #25
 80057be:	47b0      	blx	r6
 80057c0:	3001      	adds	r0, #1
 80057c2:	d09c      	beq.n	80056fe <_printf_i+0x13a>
 80057c4:	3501      	adds	r5, #1
 80057c6:	68e3      	ldr	r3, [r4, #12]
 80057c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80057ca:	1a9b      	subs	r3, r3, r2
 80057cc:	42ab      	cmp	r3, r5
 80057ce:	dcf0      	bgt.n	80057b2 <_printf_i+0x1ee>
 80057d0:	e7e9      	b.n	80057a6 <_printf_i+0x1e2>
 80057d2:	2500      	movs	r5, #0
 80057d4:	e7f7      	b.n	80057c6 <_printf_i+0x202>
 80057d6:	46c0      	nop			@ (mov r8, r8)
 80057d8:	08005bcd 	.word	0x08005bcd
 80057dc:	08005bde 	.word	0x08005bde

080057e0 <__sflush_r>:
 80057e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057e2:	220c      	movs	r2, #12
 80057e4:	5e8b      	ldrsh	r3, [r1, r2]
 80057e6:	0005      	movs	r5, r0
 80057e8:	000c      	movs	r4, r1
 80057ea:	071a      	lsls	r2, r3, #28
 80057ec:	d456      	bmi.n	800589c <__sflush_r+0xbc>
 80057ee:	684a      	ldr	r2, [r1, #4]
 80057f0:	2a00      	cmp	r2, #0
 80057f2:	dc02      	bgt.n	80057fa <__sflush_r+0x1a>
 80057f4:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80057f6:	2a00      	cmp	r2, #0
 80057f8:	dd4e      	ble.n	8005898 <__sflush_r+0xb8>
 80057fa:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80057fc:	2f00      	cmp	r7, #0
 80057fe:	d04b      	beq.n	8005898 <__sflush_r+0xb8>
 8005800:	2200      	movs	r2, #0
 8005802:	2080      	movs	r0, #128	@ 0x80
 8005804:	682e      	ldr	r6, [r5, #0]
 8005806:	602a      	str	r2, [r5, #0]
 8005808:	001a      	movs	r2, r3
 800580a:	0140      	lsls	r0, r0, #5
 800580c:	6a21      	ldr	r1, [r4, #32]
 800580e:	4002      	ands	r2, r0
 8005810:	4203      	tst	r3, r0
 8005812:	d033      	beq.n	800587c <__sflush_r+0x9c>
 8005814:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005816:	89a3      	ldrh	r3, [r4, #12]
 8005818:	075b      	lsls	r3, r3, #29
 800581a:	d506      	bpl.n	800582a <__sflush_r+0x4a>
 800581c:	6863      	ldr	r3, [r4, #4]
 800581e:	1ad2      	subs	r2, r2, r3
 8005820:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005822:	2b00      	cmp	r3, #0
 8005824:	d001      	beq.n	800582a <__sflush_r+0x4a>
 8005826:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005828:	1ad2      	subs	r2, r2, r3
 800582a:	2300      	movs	r3, #0
 800582c:	0028      	movs	r0, r5
 800582e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8005830:	6a21      	ldr	r1, [r4, #32]
 8005832:	47b8      	blx	r7
 8005834:	89a2      	ldrh	r2, [r4, #12]
 8005836:	1c43      	adds	r3, r0, #1
 8005838:	d106      	bne.n	8005848 <__sflush_r+0x68>
 800583a:	6829      	ldr	r1, [r5, #0]
 800583c:	291d      	cmp	r1, #29
 800583e:	d846      	bhi.n	80058ce <__sflush_r+0xee>
 8005840:	4b29      	ldr	r3, [pc, #164]	@ (80058e8 <__sflush_r+0x108>)
 8005842:	410b      	asrs	r3, r1
 8005844:	07db      	lsls	r3, r3, #31
 8005846:	d442      	bmi.n	80058ce <__sflush_r+0xee>
 8005848:	2300      	movs	r3, #0
 800584a:	6063      	str	r3, [r4, #4]
 800584c:	6923      	ldr	r3, [r4, #16]
 800584e:	6023      	str	r3, [r4, #0]
 8005850:	04d2      	lsls	r2, r2, #19
 8005852:	d505      	bpl.n	8005860 <__sflush_r+0x80>
 8005854:	1c43      	adds	r3, r0, #1
 8005856:	d102      	bne.n	800585e <__sflush_r+0x7e>
 8005858:	682b      	ldr	r3, [r5, #0]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d100      	bne.n	8005860 <__sflush_r+0x80>
 800585e:	6560      	str	r0, [r4, #84]	@ 0x54
 8005860:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005862:	602e      	str	r6, [r5, #0]
 8005864:	2900      	cmp	r1, #0
 8005866:	d017      	beq.n	8005898 <__sflush_r+0xb8>
 8005868:	0023      	movs	r3, r4
 800586a:	3344      	adds	r3, #68	@ 0x44
 800586c:	4299      	cmp	r1, r3
 800586e:	d002      	beq.n	8005876 <__sflush_r+0x96>
 8005870:	0028      	movs	r0, r5
 8005872:	f7ff fbf7 	bl	8005064 <_free_r>
 8005876:	2300      	movs	r3, #0
 8005878:	6363      	str	r3, [r4, #52]	@ 0x34
 800587a:	e00d      	b.n	8005898 <__sflush_r+0xb8>
 800587c:	2301      	movs	r3, #1
 800587e:	0028      	movs	r0, r5
 8005880:	47b8      	blx	r7
 8005882:	0002      	movs	r2, r0
 8005884:	1c43      	adds	r3, r0, #1
 8005886:	d1c6      	bne.n	8005816 <__sflush_r+0x36>
 8005888:	682b      	ldr	r3, [r5, #0]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d0c3      	beq.n	8005816 <__sflush_r+0x36>
 800588e:	2b1d      	cmp	r3, #29
 8005890:	d001      	beq.n	8005896 <__sflush_r+0xb6>
 8005892:	2b16      	cmp	r3, #22
 8005894:	d11a      	bne.n	80058cc <__sflush_r+0xec>
 8005896:	602e      	str	r6, [r5, #0]
 8005898:	2000      	movs	r0, #0
 800589a:	e01e      	b.n	80058da <__sflush_r+0xfa>
 800589c:	690e      	ldr	r6, [r1, #16]
 800589e:	2e00      	cmp	r6, #0
 80058a0:	d0fa      	beq.n	8005898 <__sflush_r+0xb8>
 80058a2:	680f      	ldr	r7, [r1, #0]
 80058a4:	600e      	str	r6, [r1, #0]
 80058a6:	1bba      	subs	r2, r7, r6
 80058a8:	9201      	str	r2, [sp, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	079b      	lsls	r3, r3, #30
 80058ae:	d100      	bne.n	80058b2 <__sflush_r+0xd2>
 80058b0:	694a      	ldr	r2, [r1, #20]
 80058b2:	60a2      	str	r2, [r4, #8]
 80058b4:	9b01      	ldr	r3, [sp, #4]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	ddee      	ble.n	8005898 <__sflush_r+0xb8>
 80058ba:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80058bc:	0032      	movs	r2, r6
 80058be:	001f      	movs	r7, r3
 80058c0:	0028      	movs	r0, r5
 80058c2:	9b01      	ldr	r3, [sp, #4]
 80058c4:	6a21      	ldr	r1, [r4, #32]
 80058c6:	47b8      	blx	r7
 80058c8:	2800      	cmp	r0, #0
 80058ca:	dc07      	bgt.n	80058dc <__sflush_r+0xfc>
 80058cc:	89a2      	ldrh	r2, [r4, #12]
 80058ce:	2340      	movs	r3, #64	@ 0x40
 80058d0:	2001      	movs	r0, #1
 80058d2:	4313      	orrs	r3, r2
 80058d4:	b21b      	sxth	r3, r3
 80058d6:	81a3      	strh	r3, [r4, #12]
 80058d8:	4240      	negs	r0, r0
 80058da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80058dc:	9b01      	ldr	r3, [sp, #4]
 80058de:	1836      	adds	r6, r6, r0
 80058e0:	1a1b      	subs	r3, r3, r0
 80058e2:	9301      	str	r3, [sp, #4]
 80058e4:	e7e6      	b.n	80058b4 <__sflush_r+0xd4>
 80058e6:	46c0      	nop			@ (mov r8, r8)
 80058e8:	dfbffffe 	.word	0xdfbffffe

080058ec <_fflush_r>:
 80058ec:	690b      	ldr	r3, [r1, #16]
 80058ee:	b570      	push	{r4, r5, r6, lr}
 80058f0:	0005      	movs	r5, r0
 80058f2:	000c      	movs	r4, r1
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d102      	bne.n	80058fe <_fflush_r+0x12>
 80058f8:	2500      	movs	r5, #0
 80058fa:	0028      	movs	r0, r5
 80058fc:	bd70      	pop	{r4, r5, r6, pc}
 80058fe:	2800      	cmp	r0, #0
 8005900:	d004      	beq.n	800590c <_fflush_r+0x20>
 8005902:	6a03      	ldr	r3, [r0, #32]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d101      	bne.n	800590c <_fflush_r+0x20>
 8005908:	f7ff f998 	bl	8004c3c <__sinit>
 800590c:	220c      	movs	r2, #12
 800590e:	5ea3      	ldrsh	r3, [r4, r2]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d0f1      	beq.n	80058f8 <_fflush_r+0xc>
 8005914:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005916:	07d2      	lsls	r2, r2, #31
 8005918:	d404      	bmi.n	8005924 <_fflush_r+0x38>
 800591a:	059b      	lsls	r3, r3, #22
 800591c:	d402      	bmi.n	8005924 <_fflush_r+0x38>
 800591e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005920:	f7ff fb9d 	bl	800505e <__retarget_lock_acquire_recursive>
 8005924:	0028      	movs	r0, r5
 8005926:	0021      	movs	r1, r4
 8005928:	f7ff ff5a 	bl	80057e0 <__sflush_r>
 800592c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800592e:	0005      	movs	r5, r0
 8005930:	07db      	lsls	r3, r3, #31
 8005932:	d4e2      	bmi.n	80058fa <_fflush_r+0xe>
 8005934:	89a3      	ldrh	r3, [r4, #12]
 8005936:	059b      	lsls	r3, r3, #22
 8005938:	d4df      	bmi.n	80058fa <_fflush_r+0xe>
 800593a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800593c:	f7ff fb90 	bl	8005060 <__retarget_lock_release_recursive>
 8005940:	e7db      	b.n	80058fa <_fflush_r+0xe>
	...

08005944 <__swhatbuf_r>:
 8005944:	b570      	push	{r4, r5, r6, lr}
 8005946:	000e      	movs	r6, r1
 8005948:	001d      	movs	r5, r3
 800594a:	230e      	movs	r3, #14
 800594c:	5ec9      	ldrsh	r1, [r1, r3]
 800594e:	0014      	movs	r4, r2
 8005950:	b096      	sub	sp, #88	@ 0x58
 8005952:	2900      	cmp	r1, #0
 8005954:	da0c      	bge.n	8005970 <__swhatbuf_r+0x2c>
 8005956:	89b2      	ldrh	r2, [r6, #12]
 8005958:	2380      	movs	r3, #128	@ 0x80
 800595a:	0011      	movs	r1, r2
 800595c:	4019      	ands	r1, r3
 800595e:	421a      	tst	r2, r3
 8005960:	d114      	bne.n	800598c <__swhatbuf_r+0x48>
 8005962:	2380      	movs	r3, #128	@ 0x80
 8005964:	00db      	lsls	r3, r3, #3
 8005966:	2000      	movs	r0, #0
 8005968:	6029      	str	r1, [r5, #0]
 800596a:	6023      	str	r3, [r4, #0]
 800596c:	b016      	add	sp, #88	@ 0x58
 800596e:	bd70      	pop	{r4, r5, r6, pc}
 8005970:	466a      	mov	r2, sp
 8005972:	f000 f853 	bl	8005a1c <_fstat_r>
 8005976:	2800      	cmp	r0, #0
 8005978:	dbed      	blt.n	8005956 <__swhatbuf_r+0x12>
 800597a:	23f0      	movs	r3, #240	@ 0xf0
 800597c:	9901      	ldr	r1, [sp, #4]
 800597e:	021b      	lsls	r3, r3, #8
 8005980:	4019      	ands	r1, r3
 8005982:	4b04      	ldr	r3, [pc, #16]	@ (8005994 <__swhatbuf_r+0x50>)
 8005984:	18c9      	adds	r1, r1, r3
 8005986:	424b      	negs	r3, r1
 8005988:	4159      	adcs	r1, r3
 800598a:	e7ea      	b.n	8005962 <__swhatbuf_r+0x1e>
 800598c:	2100      	movs	r1, #0
 800598e:	2340      	movs	r3, #64	@ 0x40
 8005990:	e7e9      	b.n	8005966 <__swhatbuf_r+0x22>
 8005992:	46c0      	nop			@ (mov r8, r8)
 8005994:	ffffe000 	.word	0xffffe000

08005998 <__smakebuf_r>:
 8005998:	b5f0      	push	{r4, r5, r6, r7, lr}
 800599a:	2602      	movs	r6, #2
 800599c:	898b      	ldrh	r3, [r1, #12]
 800599e:	0005      	movs	r5, r0
 80059a0:	000c      	movs	r4, r1
 80059a2:	b085      	sub	sp, #20
 80059a4:	4233      	tst	r3, r6
 80059a6:	d007      	beq.n	80059b8 <__smakebuf_r+0x20>
 80059a8:	0023      	movs	r3, r4
 80059aa:	3347      	adds	r3, #71	@ 0x47
 80059ac:	6023      	str	r3, [r4, #0]
 80059ae:	6123      	str	r3, [r4, #16]
 80059b0:	2301      	movs	r3, #1
 80059b2:	6163      	str	r3, [r4, #20]
 80059b4:	b005      	add	sp, #20
 80059b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059b8:	ab03      	add	r3, sp, #12
 80059ba:	aa02      	add	r2, sp, #8
 80059bc:	f7ff ffc2 	bl	8005944 <__swhatbuf_r>
 80059c0:	9f02      	ldr	r7, [sp, #8]
 80059c2:	9001      	str	r0, [sp, #4]
 80059c4:	0039      	movs	r1, r7
 80059c6:	0028      	movs	r0, r5
 80059c8:	f7ff fbb8 	bl	800513c <_malloc_r>
 80059cc:	2800      	cmp	r0, #0
 80059ce:	d108      	bne.n	80059e2 <__smakebuf_r+0x4a>
 80059d0:	220c      	movs	r2, #12
 80059d2:	5ea3      	ldrsh	r3, [r4, r2]
 80059d4:	059a      	lsls	r2, r3, #22
 80059d6:	d4ed      	bmi.n	80059b4 <__smakebuf_r+0x1c>
 80059d8:	2203      	movs	r2, #3
 80059da:	4393      	bics	r3, r2
 80059dc:	431e      	orrs	r6, r3
 80059de:	81a6      	strh	r6, [r4, #12]
 80059e0:	e7e2      	b.n	80059a8 <__smakebuf_r+0x10>
 80059e2:	2380      	movs	r3, #128	@ 0x80
 80059e4:	89a2      	ldrh	r2, [r4, #12]
 80059e6:	6020      	str	r0, [r4, #0]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	81a3      	strh	r3, [r4, #12]
 80059ec:	9b03      	ldr	r3, [sp, #12]
 80059ee:	6120      	str	r0, [r4, #16]
 80059f0:	6167      	str	r7, [r4, #20]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d00c      	beq.n	8005a10 <__smakebuf_r+0x78>
 80059f6:	0028      	movs	r0, r5
 80059f8:	230e      	movs	r3, #14
 80059fa:	5ee1      	ldrsh	r1, [r4, r3]
 80059fc:	f000 f820 	bl	8005a40 <_isatty_r>
 8005a00:	2800      	cmp	r0, #0
 8005a02:	d005      	beq.n	8005a10 <__smakebuf_r+0x78>
 8005a04:	2303      	movs	r3, #3
 8005a06:	89a2      	ldrh	r2, [r4, #12]
 8005a08:	439a      	bics	r2, r3
 8005a0a:	3b02      	subs	r3, #2
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	81a3      	strh	r3, [r4, #12]
 8005a10:	89a3      	ldrh	r3, [r4, #12]
 8005a12:	9a01      	ldr	r2, [sp, #4]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	81a3      	strh	r3, [r4, #12]
 8005a18:	e7cc      	b.n	80059b4 <__smakebuf_r+0x1c>
	...

08005a1c <_fstat_r>:
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	b570      	push	{r4, r5, r6, lr}
 8005a20:	4d06      	ldr	r5, [pc, #24]	@ (8005a3c <_fstat_r+0x20>)
 8005a22:	0004      	movs	r4, r0
 8005a24:	0008      	movs	r0, r1
 8005a26:	0011      	movs	r1, r2
 8005a28:	602b      	str	r3, [r5, #0]
 8005a2a:	f7fb fd5a 	bl	80014e2 <_fstat>
 8005a2e:	1c43      	adds	r3, r0, #1
 8005a30:	d103      	bne.n	8005a3a <_fstat_r+0x1e>
 8005a32:	682b      	ldr	r3, [r5, #0]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d000      	beq.n	8005a3a <_fstat_r+0x1e>
 8005a38:	6023      	str	r3, [r4, #0]
 8005a3a:	bd70      	pop	{r4, r5, r6, pc}
 8005a3c:	20000388 	.word	0x20000388

08005a40 <_isatty_r>:
 8005a40:	2300      	movs	r3, #0
 8005a42:	b570      	push	{r4, r5, r6, lr}
 8005a44:	4d06      	ldr	r5, [pc, #24]	@ (8005a60 <_isatty_r+0x20>)
 8005a46:	0004      	movs	r4, r0
 8005a48:	0008      	movs	r0, r1
 8005a4a:	602b      	str	r3, [r5, #0]
 8005a4c:	f7fb fd57 	bl	80014fe <_isatty>
 8005a50:	1c43      	adds	r3, r0, #1
 8005a52:	d103      	bne.n	8005a5c <_isatty_r+0x1c>
 8005a54:	682b      	ldr	r3, [r5, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d000      	beq.n	8005a5c <_isatty_r+0x1c>
 8005a5a:	6023      	str	r3, [r4, #0]
 8005a5c:	bd70      	pop	{r4, r5, r6, pc}
 8005a5e:	46c0      	nop			@ (mov r8, r8)
 8005a60:	20000388 	.word	0x20000388

08005a64 <_sbrk_r>:
 8005a64:	2300      	movs	r3, #0
 8005a66:	b570      	push	{r4, r5, r6, lr}
 8005a68:	4d06      	ldr	r5, [pc, #24]	@ (8005a84 <_sbrk_r+0x20>)
 8005a6a:	0004      	movs	r4, r0
 8005a6c:	0008      	movs	r0, r1
 8005a6e:	602b      	str	r3, [r5, #0]
 8005a70:	f7fb fd5a 	bl	8001528 <_sbrk>
 8005a74:	1c43      	adds	r3, r0, #1
 8005a76:	d103      	bne.n	8005a80 <_sbrk_r+0x1c>
 8005a78:	682b      	ldr	r3, [r5, #0]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d000      	beq.n	8005a80 <_sbrk_r+0x1c>
 8005a7e:	6023      	str	r3, [r4, #0]
 8005a80:	bd70      	pop	{r4, r5, r6, pc}
 8005a82:	46c0      	nop			@ (mov r8, r8)
 8005a84:	20000388 	.word	0x20000388

08005a88 <memchr>:
 8005a88:	b2c9      	uxtb	r1, r1
 8005a8a:	1882      	adds	r2, r0, r2
 8005a8c:	4290      	cmp	r0, r2
 8005a8e:	d101      	bne.n	8005a94 <memchr+0xc>
 8005a90:	2000      	movs	r0, #0
 8005a92:	4770      	bx	lr
 8005a94:	7803      	ldrb	r3, [r0, #0]
 8005a96:	428b      	cmp	r3, r1
 8005a98:	d0fb      	beq.n	8005a92 <memchr+0xa>
 8005a9a:	3001      	adds	r0, #1
 8005a9c:	e7f6      	b.n	8005a8c <memchr+0x4>
	...

08005aa0 <_init>:
 8005aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aa2:	46c0      	nop			@ (mov r8, r8)
 8005aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aa6:	bc08      	pop	{r3}
 8005aa8:	469e      	mov	lr, r3
 8005aaa:	4770      	bx	lr

08005aac <_fini>:
 8005aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aae:	46c0      	nop			@ (mov r8, r8)
 8005ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ab2:	bc08      	pop	{r3}
 8005ab4:	469e      	mov	lr, r3
 8005ab6:	4770      	bx	lr
