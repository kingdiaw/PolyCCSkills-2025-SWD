
rotary_encoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f70  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08004030  08004030  00005030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004168  08004168  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004168  08004168  00005168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004170  08004170  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004170  08004170  00005170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004174  08004174  00005174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004178  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  20000068  080041e0  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  080041e0  000062dc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bcd4  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d22  00000000  00000000  00011d64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab8  00000000  00000000  00013a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000084e  00000000  00000000  00014540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014ae6  00000000  00000000  00014d8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e723  00000000  00000000  00029874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007a66d  00000000  00000000  00037f97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b2604  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d7c  00000000  00000000  000b2648  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000b53c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004018 	.word	0x08004018

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08004018 	.word	0x08004018

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	@ (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	@ (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			@ (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f834 	bl	80002d0 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			@ (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4699      	mov	r9, r3
 800027a:	0c03      	lsrs	r3, r0, #16
 800027c:	469c      	mov	ip, r3
 800027e:	0413      	lsls	r3, r2, #16
 8000280:	4647      	mov	r7, r8
 8000282:	0c1b      	lsrs	r3, r3, #16
 8000284:	001d      	movs	r5, r3
 8000286:	000e      	movs	r6, r1
 8000288:	4661      	mov	r1, ip
 800028a:	0404      	lsls	r4, r0, #16
 800028c:	0c24      	lsrs	r4, r4, #16
 800028e:	b580      	push	{r7, lr}
 8000290:	0007      	movs	r7, r0
 8000292:	0c10      	lsrs	r0, r2, #16
 8000294:	434b      	muls	r3, r1
 8000296:	4365      	muls	r5, r4
 8000298:	4341      	muls	r1, r0
 800029a:	4360      	muls	r0, r4
 800029c:	0c2c      	lsrs	r4, r5, #16
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	1824      	adds	r4, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	42a3      	cmp	r3, r4
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	@ 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4356      	muls	r6, r2
 80002b6:	0c23      	lsrs	r3, r4, #16
 80002b8:	042d      	lsls	r5, r5, #16
 80002ba:	0c2d      	lsrs	r5, r5, #16
 80002bc:	1989      	adds	r1, r1, r6
 80002be:	4463      	add	r3, ip
 80002c0:	0424      	lsls	r4, r4, #16
 80002c2:	1960      	adds	r0, r4, r5
 80002c4:	18c9      	adds	r1, r1, r3
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			@ (mov r8, r8)

080002d0 <__udivmoddi4>:
 80002d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d2:	4657      	mov	r7, sl
 80002d4:	464e      	mov	r6, r9
 80002d6:	4645      	mov	r5, r8
 80002d8:	46de      	mov	lr, fp
 80002da:	b5e0      	push	{r5, r6, r7, lr}
 80002dc:	0004      	movs	r4, r0
 80002de:	000d      	movs	r5, r1
 80002e0:	4692      	mov	sl, r2
 80002e2:	4699      	mov	r9, r3
 80002e4:	b083      	sub	sp, #12
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d830      	bhi.n	800034c <__udivmoddi4+0x7c>
 80002ea:	d02d      	beq.n	8000348 <__udivmoddi4+0x78>
 80002ec:	4649      	mov	r1, r9
 80002ee:	4650      	mov	r0, sl
 80002f0:	f000 f8ba 	bl	8000468 <__clzdi2>
 80002f4:	0029      	movs	r1, r5
 80002f6:	0006      	movs	r6, r0
 80002f8:	0020      	movs	r0, r4
 80002fa:	f000 f8b5 	bl	8000468 <__clzdi2>
 80002fe:	1a33      	subs	r3, r6, r0
 8000300:	4698      	mov	r8, r3
 8000302:	3b20      	subs	r3, #32
 8000304:	d434      	bmi.n	8000370 <__udivmoddi4+0xa0>
 8000306:	469b      	mov	fp, r3
 8000308:	4653      	mov	r3, sl
 800030a:	465a      	mov	r2, fp
 800030c:	4093      	lsls	r3, r2
 800030e:	4642      	mov	r2, r8
 8000310:	001f      	movs	r7, r3
 8000312:	4653      	mov	r3, sl
 8000314:	4093      	lsls	r3, r2
 8000316:	001e      	movs	r6, r3
 8000318:	42af      	cmp	r7, r5
 800031a:	d83b      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800031c:	42af      	cmp	r7, r5
 800031e:	d100      	bne.n	8000322 <__udivmoddi4+0x52>
 8000320:	e079      	b.n	8000416 <__udivmoddi4+0x146>
 8000322:	465b      	mov	r3, fp
 8000324:	1ba4      	subs	r4, r4, r6
 8000326:	41bd      	sbcs	r5, r7
 8000328:	2b00      	cmp	r3, #0
 800032a:	da00      	bge.n	800032e <__udivmoddi4+0x5e>
 800032c:	e076      	b.n	800041c <__udivmoddi4+0x14c>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	2301      	movs	r3, #1
 8000338:	465a      	mov	r2, fp
 800033a:	4093      	lsls	r3, r2
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2301      	movs	r3, #1
 8000340:	4642      	mov	r2, r8
 8000342:	4093      	lsls	r3, r2
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	e029      	b.n	800039c <__udivmoddi4+0xcc>
 8000348:	4282      	cmp	r2, r0
 800034a:	d9cf      	bls.n	80002ec <__udivmoddi4+0x1c>
 800034c:	2200      	movs	r2, #0
 800034e:	2300      	movs	r3, #0
 8000350:	9200      	str	r2, [sp, #0]
 8000352:	9301      	str	r3, [sp, #4]
 8000354:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <__udivmoddi4+0x8e>
 800035a:	601c      	str	r4, [r3, #0]
 800035c:	605d      	str	r5, [r3, #4]
 800035e:	9800      	ldr	r0, [sp, #0]
 8000360:	9901      	ldr	r1, [sp, #4]
 8000362:	b003      	add	sp, #12
 8000364:	bcf0      	pop	{r4, r5, r6, r7}
 8000366:	46bb      	mov	fp, r7
 8000368:	46b2      	mov	sl, r6
 800036a:	46a9      	mov	r9, r5
 800036c:	46a0      	mov	r8, r4
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000370:	4642      	mov	r2, r8
 8000372:	469b      	mov	fp, r3
 8000374:	2320      	movs	r3, #32
 8000376:	1a9b      	subs	r3, r3, r2
 8000378:	4652      	mov	r2, sl
 800037a:	40da      	lsrs	r2, r3
 800037c:	4641      	mov	r1, r8
 800037e:	0013      	movs	r3, r2
 8000380:	464a      	mov	r2, r9
 8000382:	408a      	lsls	r2, r1
 8000384:	0017      	movs	r7, r2
 8000386:	4642      	mov	r2, r8
 8000388:	431f      	orrs	r7, r3
 800038a:	4653      	mov	r3, sl
 800038c:	4093      	lsls	r3, r2
 800038e:	001e      	movs	r6, r3
 8000390:	42af      	cmp	r7, r5
 8000392:	d9c3      	bls.n	800031c <__udivmoddi4+0x4c>
 8000394:	2200      	movs	r2, #0
 8000396:	2300      	movs	r3, #0
 8000398:	9200      	str	r2, [sp, #0]
 800039a:	9301      	str	r3, [sp, #4]
 800039c:	4643      	mov	r3, r8
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d0d8      	beq.n	8000354 <__udivmoddi4+0x84>
 80003a2:	07fb      	lsls	r3, r7, #31
 80003a4:	0872      	lsrs	r2, r6, #1
 80003a6:	431a      	orrs	r2, r3
 80003a8:	4646      	mov	r6, r8
 80003aa:	087b      	lsrs	r3, r7, #1
 80003ac:	e00e      	b.n	80003cc <__udivmoddi4+0xfc>
 80003ae:	42ab      	cmp	r3, r5
 80003b0:	d101      	bne.n	80003b6 <__udivmoddi4+0xe6>
 80003b2:	42a2      	cmp	r2, r4
 80003b4:	d80c      	bhi.n	80003d0 <__udivmoddi4+0x100>
 80003b6:	1aa4      	subs	r4, r4, r2
 80003b8:	419d      	sbcs	r5, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2100      	movs	r1, #0
 80003c2:	3e01      	subs	r6, #1
 80003c4:	1824      	adds	r4, r4, r0
 80003c6:	414d      	adcs	r5, r1
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d006      	beq.n	80003da <__udivmoddi4+0x10a>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d9ee      	bls.n	80003ae <__udivmoddi4+0xde>
 80003d0:	3e01      	subs	r6, #1
 80003d2:	1924      	adds	r4, r4, r4
 80003d4:	416d      	adcs	r5, r5
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d1f8      	bne.n	80003cc <__udivmoddi4+0xfc>
 80003da:	9800      	ldr	r0, [sp, #0]
 80003dc:	9901      	ldr	r1, [sp, #4]
 80003de:	465b      	mov	r3, fp
 80003e0:	1900      	adds	r0, r0, r4
 80003e2:	4169      	adcs	r1, r5
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db24      	blt.n	8000432 <__udivmoddi4+0x162>
 80003e8:	002b      	movs	r3, r5
 80003ea:	465a      	mov	r2, fp
 80003ec:	4644      	mov	r4, r8
 80003ee:	40d3      	lsrs	r3, r2
 80003f0:	002a      	movs	r2, r5
 80003f2:	40e2      	lsrs	r2, r4
 80003f4:	001c      	movs	r4, r3
 80003f6:	465b      	mov	r3, fp
 80003f8:	0015      	movs	r5, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	db2a      	blt.n	8000454 <__udivmoddi4+0x184>
 80003fe:	0026      	movs	r6, r4
 8000400:	409e      	lsls	r6, r3
 8000402:	0033      	movs	r3, r6
 8000404:	0026      	movs	r6, r4
 8000406:	4647      	mov	r7, r8
 8000408:	40be      	lsls	r6, r7
 800040a:	0032      	movs	r2, r6
 800040c:	1a80      	subs	r0, r0, r2
 800040e:	4199      	sbcs	r1, r3
 8000410:	9000      	str	r0, [sp, #0]
 8000412:	9101      	str	r1, [sp, #4]
 8000414:	e79e      	b.n	8000354 <__udivmoddi4+0x84>
 8000416:	42a3      	cmp	r3, r4
 8000418:	d8bc      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800041a:	e782      	b.n	8000322 <__udivmoddi4+0x52>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	2100      	movs	r1, #0
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	2200      	movs	r2, #0
 8000426:	9100      	str	r1, [sp, #0]
 8000428:	9201      	str	r2, [sp, #4]
 800042a:	2201      	movs	r2, #1
 800042c:	40da      	lsrs	r2, r3
 800042e:	9201      	str	r2, [sp, #4]
 8000430:	e785      	b.n	800033e <__udivmoddi4+0x6e>
 8000432:	4642      	mov	r2, r8
 8000434:	2320      	movs	r3, #32
 8000436:	1a9b      	subs	r3, r3, r2
 8000438:	002a      	movs	r2, r5
 800043a:	4646      	mov	r6, r8
 800043c:	409a      	lsls	r2, r3
 800043e:	0023      	movs	r3, r4
 8000440:	40f3      	lsrs	r3, r6
 8000442:	4644      	mov	r4, r8
 8000444:	4313      	orrs	r3, r2
 8000446:	002a      	movs	r2, r5
 8000448:	40e2      	lsrs	r2, r4
 800044a:	001c      	movs	r4, r3
 800044c:	465b      	mov	r3, fp
 800044e:	0015      	movs	r5, r2
 8000450:	2b00      	cmp	r3, #0
 8000452:	dad4      	bge.n	80003fe <__udivmoddi4+0x12e>
 8000454:	4642      	mov	r2, r8
 8000456:	002f      	movs	r7, r5
 8000458:	2320      	movs	r3, #32
 800045a:	0026      	movs	r6, r4
 800045c:	4097      	lsls	r7, r2
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	40de      	lsrs	r6, r3
 8000462:	003b      	movs	r3, r7
 8000464:	4333      	orrs	r3, r6
 8000466:	e7cd      	b.n	8000404 <__udivmoddi4+0x134>

08000468 <__clzdi2>:
 8000468:	b510      	push	{r4, lr}
 800046a:	2900      	cmp	r1, #0
 800046c:	d103      	bne.n	8000476 <__clzdi2+0xe>
 800046e:	f000 f807 	bl	8000480 <__clzsi2>
 8000472:	3020      	adds	r0, #32
 8000474:	e002      	b.n	800047c <__clzdi2+0x14>
 8000476:	0008      	movs	r0, r1
 8000478:	f000 f802 	bl	8000480 <__clzsi2>
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__clzsi2>:
 8000480:	211c      	movs	r1, #28
 8000482:	2301      	movs	r3, #1
 8000484:	041b      	lsls	r3, r3, #16
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0xe>
 800048a:	0c00      	lsrs	r0, r0, #16
 800048c:	3910      	subs	r1, #16
 800048e:	0a1b      	lsrs	r3, r3, #8
 8000490:	4298      	cmp	r0, r3
 8000492:	d301      	bcc.n	8000498 <__clzsi2+0x18>
 8000494:	0a00      	lsrs	r0, r0, #8
 8000496:	3908      	subs	r1, #8
 8000498:	091b      	lsrs	r3, r3, #4
 800049a:	4298      	cmp	r0, r3
 800049c:	d301      	bcc.n	80004a2 <__clzsi2+0x22>
 800049e:	0900      	lsrs	r0, r0, #4
 80004a0:	3904      	subs	r1, #4
 80004a2:	a202      	add	r2, pc, #8	@ (adr r2, 80004ac <__clzsi2+0x2c>)
 80004a4:	5c10      	ldrb	r0, [r2, r0]
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	4770      	bx	lr
 80004aa:	46c0      	nop			@ (mov r8, r8)
 80004ac:	02020304 	.word	0x02020304
 80004b0:	01010101 	.word	0x01010101
	...

080004bc <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Function to send data over UART (for debugging)
int __io_putchar(int ch) {
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 80004c4:	2301      	movs	r3, #1
 80004c6:	425b      	negs	r3, r3
 80004c8:	1d39      	adds	r1, r7, #4
 80004ca:	4804      	ldr	r0, [pc, #16]	@ (80004dc <__io_putchar+0x20>)
 80004cc:	2201      	movs	r2, #1
 80004ce:	f002 f893 	bl	80025f8 <HAL_UART_Transmit>
	return ch;
 80004d2:	687b      	ldr	r3, [r7, #4]
}
 80004d4:	0018      	movs	r0, r3
 80004d6:	46bd      	mov	sp, r7
 80004d8:	b002      	add	sp, #8
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	200000d8 	.word	0x200000d8

080004e0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004e0:	b590      	push	{r4, r7, lr}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004e6:	f000 fc51 	bl	8000d8c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004ea:	f000 f891 	bl	8000610 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004ee:	f000 f973 	bl	80007d8 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80004f2:	f000 f941 	bl	8000778 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 80004f6:	f000 f8ff 	bl	80006f8 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	RotaryEncoder_Init(&encoder, GPIOA, GPIO_PIN_10, GPIOB, GPIO_PIN_3, GPIOB,
 80004fa:	4c3b      	ldr	r4, [pc, #236]	@ (80005e8 <main+0x108>)
 80004fc:	2380      	movs	r3, #128	@ 0x80
 80004fe:	00da      	lsls	r2, r3, #3
 8000500:	23a0      	movs	r3, #160	@ 0xa0
 8000502:	05d9      	lsls	r1, r3, #23
 8000504:	4839      	ldr	r0, [pc, #228]	@ (80005ec <main+0x10c>)
 8000506:	2320      	movs	r3, #32
 8000508:	9302      	str	r3, [sp, #8]
 800050a:	4b37      	ldr	r3, [pc, #220]	@ (80005e8 <main+0x108>)
 800050c:	9301      	str	r3, [sp, #4]
 800050e:	2308      	movs	r3, #8
 8000510:	9300      	str	r3, [sp, #0]
 8000512:	0023      	movs	r3, r4
 8000514:	f000 fa10 	bl	8000938 <RotaryEncoder_Init>
	GPIO_PIN_5);
	pos = 0;
 8000518:	4b35      	ldr	r3, [pc, #212]	@ (80005f0 <main+0x110>)
 800051a:	2200      	movs	r2, #0
 800051c:	701a      	strb	r2, [r3, #0]
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		sw_state_new = RotaryEncoder_ReadSwitch(&encoder);
 800051e:	4b33      	ldr	r3, [pc, #204]	@ (80005ec <main+0x10c>)
 8000520:	0018      	movs	r0, r3
 8000522:	f000 fa70 	bl	8000a06 <RotaryEncoder_ReadSwitch>
 8000526:	0003      	movs	r3, r0
 8000528:	001a      	movs	r2, r3
 800052a:	4b32      	ldr	r3, [pc, #200]	@ (80005f4 <main+0x114>)
 800052c:	701a      	strb	r2, [r3, #0]

		if (sw_state_old == GPIO_PIN_SET && sw_state_new ==GPIO_PIN_RESET) {
 800052e:	4b32      	ldr	r3, [pc, #200]	@ (80005f8 <main+0x118>)
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	2b01      	cmp	r3, #1
 8000534:	d107      	bne.n	8000546 <main+0x66>
 8000536:	4b2f      	ldr	r3, [pc, #188]	@ (80005f4 <main+0x114>)
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d103      	bne.n	8000546 <main+0x66>
			printf("Button Pressed!\n");
 800053e:	4b2f      	ldr	r3, [pc, #188]	@ (80005fc <main+0x11c>)
 8000540:	0018      	movs	r0, r3
 8000542:	f002 fed1 	bl	80032e8 <puts>
		}
		sw_state_old = sw_state_new;
 8000546:	4b2b      	ldr	r3, [pc, #172]	@ (80005f4 <main+0x114>)
 8000548:	781a      	ldrb	r2, [r3, #0]
 800054a:	4b2b      	ldr	r3, [pc, #172]	@ (80005f8 <main+0x118>)
 800054c:	701a      	strb	r2, [r3, #0]

		if (encoder.direction != ROTARY_NONE) {
 800054e:	4b27      	ldr	r3, [pc, #156]	@ (80005ec <main+0x10c>)
 8000550:	7f1b      	ldrb	r3, [r3, #28]
 8000552:	b2db      	uxtb	r3, r3
 8000554:	2b00      	cmp	r3, #0
 8000556:	d043      	beq.n	80005e0 <main+0x100>
			printf("Encoder Direction: %s\n", encoder.direction==1?"CW":"CCW");
 8000558:	4b24      	ldr	r3, [pc, #144]	@ (80005ec <main+0x10c>)
 800055a:	7f1b      	ldrb	r3, [r3, #28]
 800055c:	b2db      	uxtb	r3, r3
 800055e:	2b01      	cmp	r3, #1
 8000560:	d101      	bne.n	8000566 <main+0x86>
 8000562:	4b27      	ldr	r3, [pc, #156]	@ (8000600 <main+0x120>)
 8000564:	e000      	b.n	8000568 <main+0x88>
 8000566:	4b27      	ldr	r3, [pc, #156]	@ (8000604 <main+0x124>)
 8000568:	4a27      	ldr	r2, [pc, #156]	@ (8000608 <main+0x128>)
 800056a:	0019      	movs	r1, r3
 800056c:	0010      	movs	r0, r2
 800056e:	f002 fe55 	bl	800321c <iprintf>
			if (encoder.direction == ROTARY_CW) {
 8000572:	4b1e      	ldr	r3, [pc, #120]	@ (80005ec <main+0x10c>)
 8000574:	7f1b      	ldrb	r3, [r3, #28]
 8000576:	b2db      	uxtb	r3, r3
 8000578:	2b01      	cmp	r3, #1
 800057a:	d114      	bne.n	80005a6 <main+0xc6>
				if (++pos > 5)
 800057c:	4b1c      	ldr	r3, [pc, #112]	@ (80005f0 <main+0x110>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	b25b      	sxtb	r3, r3
 8000582:	b2db      	uxtb	r3, r3
 8000584:	3301      	adds	r3, #1
 8000586:	b2db      	uxtb	r3, r3
 8000588:	b25a      	sxtb	r2, r3
 800058a:	4b19      	ldr	r3, [pc, #100]	@ (80005f0 <main+0x110>)
 800058c:	701a      	strb	r2, [r3, #0]
 800058e:	4b18      	ldr	r3, [pc, #96]	@ (80005f0 <main+0x110>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	b25b      	sxtb	r3, r3
 8000594:	2b05      	cmp	r3, #5
 8000596:	dd02      	ble.n	800059e <main+0xbe>
					pos = 5;
 8000598:	4b15      	ldr	r3, [pc, #84]	@ (80005f0 <main+0x110>)
 800059a:	2205      	movs	r2, #5
 800059c:	701a      	strb	r2, [r3, #0]
				encoder.direction = ROTARY_NONE;
 800059e:	4b13      	ldr	r3, [pc, #76]	@ (80005ec <main+0x10c>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	771a      	strb	r2, [r3, #28]
 80005a4:	e013      	b.n	80005ce <main+0xee>
			} else {
				if (--pos < 0)
 80005a6:	4b12      	ldr	r3, [pc, #72]	@ (80005f0 <main+0x110>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	b25b      	sxtb	r3, r3
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	3b01      	subs	r3, #1
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	b25a      	sxtb	r2, r3
 80005b4:	4b0e      	ldr	r3, [pc, #56]	@ (80005f0 <main+0x110>)
 80005b6:	701a      	strb	r2, [r3, #0]
 80005b8:	4b0d      	ldr	r3, [pc, #52]	@ (80005f0 <main+0x110>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	b25b      	sxtb	r3, r3
 80005be:	2b00      	cmp	r3, #0
 80005c0:	da02      	bge.n	80005c8 <main+0xe8>
					pos = 0;
 80005c2:	4b0b      	ldr	r3, [pc, #44]	@ (80005f0 <main+0x110>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	701a      	strb	r2, [r3, #0]
				encoder.direction = ROTARY_NONE;
 80005c8:	4b08      	ldr	r3, [pc, #32]	@ (80005ec <main+0x10c>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	771a      	strb	r2, [r3, #28]
			}
			printf("Encoder Pos: %d\n", pos);
 80005ce:	4b08      	ldr	r3, [pc, #32]	@ (80005f0 <main+0x110>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	b25b      	sxtb	r3, r3
 80005d4:	001a      	movs	r2, r3
 80005d6:	4b0d      	ldr	r3, [pc, #52]	@ (800060c <main+0x12c>)
 80005d8:	0011      	movs	r1, r2
 80005da:	0018      	movs	r0, r3
 80005dc:	f002 fe1e 	bl	800321c <iprintf>
		}
		HAL_Delay(50);	//debounching
 80005e0:	2032      	movs	r0, #50	@ 0x32
 80005e2:	f000 fc43 	bl	8000e6c <HAL_Delay>
		sw_state_new = RotaryEncoder_ReadSwitch(&encoder);
 80005e6:	e79a      	b.n	800051e <main+0x3e>
 80005e8:	50000400 	.word	0x50000400
 80005ec:	20000160 	.word	0x20000160
 80005f0:	20000180 	.word	0x20000180
 80005f4:	20000181 	.word	0x20000181
 80005f8:	20000182 	.word	0x20000182
 80005fc:	08004030 	.word	0x08004030
 8000600:	08004040 	.word	0x08004040
 8000604:	08004044 	.word	0x08004044
 8000608:	08004048 	.word	0x08004048
 800060c:	08004060 	.word	0x08004060

08000610 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000610:	b590      	push	{r4, r7, lr}
 8000612:	b09d      	sub	sp, #116	@ 0x74
 8000614:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000616:	2438      	movs	r4, #56	@ 0x38
 8000618:	193b      	adds	r3, r7, r4
 800061a:	0018      	movs	r0, r3
 800061c:	2338      	movs	r3, #56	@ 0x38
 800061e:	001a      	movs	r2, r3
 8000620:	2100      	movs	r1, #0
 8000622:	f002 ff57 	bl	80034d4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000626:	2324      	movs	r3, #36	@ 0x24
 8000628:	18fb      	adds	r3, r7, r3
 800062a:	0018      	movs	r0, r3
 800062c:	2314      	movs	r3, #20
 800062e:	001a      	movs	r2, r3
 8000630:	2100      	movs	r1, #0
 8000632:	f002 ff4f 	bl	80034d4 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000636:	003b      	movs	r3, r7
 8000638:	0018      	movs	r0, r3
 800063a:	2324      	movs	r3, #36	@ 0x24
 800063c:	001a      	movs	r2, r3
 800063e:	2100      	movs	r1, #0
 8000640:	f002 ff48 	bl	80034d4 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000644:	4b2a      	ldr	r3, [pc, #168]	@ (80006f0 <SystemClock_Config+0xe0>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a2a      	ldr	r2, [pc, #168]	@ (80006f4 <SystemClock_Config+0xe4>)
 800064a:	401a      	ands	r2, r3
 800064c:	4b28      	ldr	r3, [pc, #160]	@ (80006f0 <SystemClock_Config+0xe0>)
 800064e:	2180      	movs	r1, #128	@ 0x80
 8000650:	0109      	lsls	r1, r1, #4
 8000652:	430a      	orrs	r2, r1
 8000654:	601a      	str	r2, [r3, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000656:	0021      	movs	r1, r4
 8000658:	187b      	adds	r3, r7, r1
 800065a:	2202      	movs	r2, #2
 800065c:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800065e:	187b      	adds	r3, r7, r1
 8000660:	2201      	movs	r2, #1
 8000662:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000664:	187b      	adds	r3, r7, r1
 8000666:	2210      	movs	r2, #16
 8000668:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066a:	187b      	adds	r3, r7, r1
 800066c:	2202      	movs	r2, #2
 800066e:	629a      	str	r2, [r3, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000670:	187b      	adds	r3, r7, r1
 8000672:	2200      	movs	r2, #0
 8000674:	62da      	str	r2, [r3, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 8000676:	187b      	adds	r3, r7, r1
 8000678:	2200      	movs	r2, #0
 800067a:	631a      	str	r2, [r3, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800067c:	187b      	adds	r3, r7, r1
 800067e:	2280      	movs	r2, #128	@ 0x80
 8000680:	03d2      	lsls	r2, r2, #15
 8000682:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000684:	187b      	adds	r3, r7, r1
 8000686:	0018      	movs	r0, r3
 8000688:	f000 ffec 	bl	8001664 <HAL_RCC_OscConfig>
 800068c:	1e03      	subs	r3, r0, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0x84>
		Error_Handler();
 8000690:	f000 f94c 	bl	800092c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000694:	2124      	movs	r1, #36	@ 0x24
 8000696:	187b      	adds	r3, r7, r1
 8000698:	220f      	movs	r2, #15
 800069a:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069c:	187b      	adds	r3, r7, r1
 800069e:	2203      	movs	r2, #3
 80006a0:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a2:	187b      	adds	r3, r7, r1
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a8:	187b      	adds	r3, r7, r1
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ae:	187b      	adds	r3, r7, r1
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80006b4:	187b      	adds	r3, r7, r1
 80006b6:	2101      	movs	r1, #1
 80006b8:	0018      	movs	r0, r3
 80006ba:	f001 fb97 	bl	8001dec <HAL_RCC_ClockConfig>
 80006be:	1e03      	subs	r3, r0, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0xb6>
		Error_Handler();
 80006c2:	f000 f933 	bl	800092c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2
 80006c6:	003b      	movs	r3, r7
 80006c8:	220a      	movs	r2, #10
 80006ca:	601a      	str	r2, [r3, #0]
			| RCC_PERIPHCLK_I2C1;
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006cc:	003b      	movs	r3, r7
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80006d2:	003b      	movs	r3, r7
 80006d4:	2200      	movs	r2, #0
 80006d6:	619a      	str	r2, [r3, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80006d8:	003b      	movs	r3, r7
 80006da:	0018      	movs	r0, r3
 80006dc:	f001 fdaa 	bl	8002234 <HAL_RCCEx_PeriphCLKConfig>
 80006e0:	1e03      	subs	r3, r0, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0xd8>
		Error_Handler();
 80006e4:	f000 f922 	bl	800092c <Error_Handler>
	}
}
 80006e8:	46c0      	nop			@ (mov r8, r8)
 80006ea:	46bd      	mov	sp, r7
 80006ec:	b01d      	add	sp, #116	@ 0x74
 80006ee:	bd90      	pop	{r4, r7, pc}
 80006f0:	40007000 	.word	0x40007000
 80006f4:	ffffe7ff 	.word	0xffffe7ff

080006f8 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80006fc:	4b1b      	ldr	r3, [pc, #108]	@ (800076c <MX_I2C1_Init+0x74>)
 80006fe:	4a1c      	ldr	r2, [pc, #112]	@ (8000770 <MX_I2C1_Init+0x78>)
 8000700:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00506682;
 8000702:	4b1a      	ldr	r3, [pc, #104]	@ (800076c <MX_I2C1_Init+0x74>)
 8000704:	4a1b      	ldr	r2, [pc, #108]	@ (8000774 <MX_I2C1_Init+0x7c>)
 8000706:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8000708:	4b18      	ldr	r3, [pc, #96]	@ (800076c <MX_I2C1_Init+0x74>)
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800070e:	4b17      	ldr	r3, [pc, #92]	@ (800076c <MX_I2C1_Init+0x74>)
 8000710:	2201      	movs	r2, #1
 8000712:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000714:	4b15      	ldr	r3, [pc, #84]	@ (800076c <MX_I2C1_Init+0x74>)
 8000716:	2200      	movs	r2, #0
 8000718:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 800071a:	4b14      	ldr	r3, [pc, #80]	@ (800076c <MX_I2C1_Init+0x74>)
 800071c:	2200      	movs	r2, #0
 800071e:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000720:	4b12      	ldr	r3, [pc, #72]	@ (800076c <MX_I2C1_Init+0x74>)
 8000722:	2200      	movs	r2, #0
 8000724:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000726:	4b11      	ldr	r3, [pc, #68]	@ (800076c <MX_I2C1_Init+0x74>)
 8000728:	2200      	movs	r2, #0
 800072a:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800072c:	4b0f      	ldr	r3, [pc, #60]	@ (800076c <MX_I2C1_Init+0x74>)
 800072e:	2200      	movs	r2, #0
 8000730:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000732:	4b0e      	ldr	r3, [pc, #56]	@ (800076c <MX_I2C1_Init+0x74>)
 8000734:	0018      	movs	r0, r3
 8000736:	f000 fe67 	bl	8001408 <HAL_I2C_Init>
 800073a:	1e03      	subs	r3, r0, #0
 800073c:	d001      	beq.n	8000742 <MX_I2C1_Init+0x4a>
		Error_Handler();
 800073e:	f000 f8f5 	bl	800092c <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8000742:	4b0a      	ldr	r3, [pc, #40]	@ (800076c <MX_I2C1_Init+0x74>)
 8000744:	2100      	movs	r1, #0
 8000746:	0018      	movs	r0, r3
 8000748:	f000 fef4 	bl	8001534 <HAL_I2CEx_ConfigAnalogFilter>
 800074c:	1e03      	subs	r3, r0, #0
 800074e:	d001      	beq.n	8000754 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8000750:	f000 f8ec 	bl	800092c <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8000754:	4b05      	ldr	r3, [pc, #20]	@ (800076c <MX_I2C1_Init+0x74>)
 8000756:	2100      	movs	r1, #0
 8000758:	0018      	movs	r0, r3
 800075a:	f000 ff37 	bl	80015cc <HAL_I2CEx_ConfigDigitalFilter>
 800075e:	1e03      	subs	r3, r0, #0
 8000760:	d001      	beq.n	8000766 <MX_I2C1_Init+0x6e>
		Error_Handler();
 8000762:	f000 f8e3 	bl	800092c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000766:	46c0      	nop			@ (mov r8, r8)
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	20000084 	.word	0x20000084
 8000770:	40005400 	.word	0x40005400
 8000774:	00506682 	.word	0x00506682

08000778 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800077c:	4b14      	ldr	r3, [pc, #80]	@ (80007d0 <MX_USART2_UART_Init+0x58>)
 800077e:	4a15      	ldr	r2, [pc, #84]	@ (80007d4 <MX_USART2_UART_Init+0x5c>)
 8000780:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000782:	4b13      	ldr	r3, [pc, #76]	@ (80007d0 <MX_USART2_UART_Init+0x58>)
 8000784:	22e1      	movs	r2, #225	@ 0xe1
 8000786:	0252      	lsls	r2, r2, #9
 8000788:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800078a:	4b11      	ldr	r3, [pc, #68]	@ (80007d0 <MX_USART2_UART_Init+0x58>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000790:	4b0f      	ldr	r3, [pc, #60]	@ (80007d0 <MX_USART2_UART_Init+0x58>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000796:	4b0e      	ldr	r3, [pc, #56]	@ (80007d0 <MX_USART2_UART_Init+0x58>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800079c:	4b0c      	ldr	r3, [pc, #48]	@ (80007d0 <MX_USART2_UART_Init+0x58>)
 800079e:	220c      	movs	r2, #12
 80007a0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	@ (80007d0 <MX_USART2_UART_Init+0x58>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a8:	4b09      	ldr	r3, [pc, #36]	@ (80007d0 <MX_USART2_UART_Init+0x58>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ae:	4b08      	ldr	r3, [pc, #32]	@ (80007d0 <MX_USART2_UART_Init+0x58>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007b4:	4b06      	ldr	r3, [pc, #24]	@ (80007d0 <MX_USART2_UART_Init+0x58>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80007ba:	4b05      	ldr	r3, [pc, #20]	@ (80007d0 <MX_USART2_UART_Init+0x58>)
 80007bc:	0018      	movs	r0, r3
 80007be:	f001 fec7 	bl	8002550 <HAL_UART_Init>
 80007c2:	1e03      	subs	r3, r0, #0
 80007c4:	d001      	beq.n	80007ca <MX_USART2_UART_Init+0x52>
		Error_Handler();
 80007c6:	f000 f8b1 	bl	800092c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80007ca:	46c0      	nop			@ (mov r8, r8)
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	200000d8 	.word	0x200000d8
 80007d4:	40004400 	.word	0x40004400

080007d8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80007d8:	b590      	push	{r4, r7, lr}
 80007da:	b08b      	sub	sp, #44	@ 0x2c
 80007dc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80007de:	2414      	movs	r4, #20
 80007e0:	193b      	adds	r3, r7, r4
 80007e2:	0018      	movs	r0, r3
 80007e4:	2314      	movs	r3, #20
 80007e6:	001a      	movs	r2, r3
 80007e8:	2100      	movs	r1, #0
 80007ea:	f002 fe73 	bl	80034d4 <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80007ee:	4b4c      	ldr	r3, [pc, #304]	@ (8000920 <MX_GPIO_Init+0x148>)
 80007f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80007f2:	4b4b      	ldr	r3, [pc, #300]	@ (8000920 <MX_GPIO_Init+0x148>)
 80007f4:	2104      	movs	r1, #4
 80007f6:	430a      	orrs	r2, r1
 80007f8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80007fa:	4b49      	ldr	r3, [pc, #292]	@ (8000920 <MX_GPIO_Init+0x148>)
 80007fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007fe:	2204      	movs	r2, #4
 8000800:	4013      	ands	r3, r2
 8000802:	613b      	str	r3, [r7, #16]
 8000804:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000806:	4b46      	ldr	r3, [pc, #280]	@ (8000920 <MX_GPIO_Init+0x148>)
 8000808:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800080a:	4b45      	ldr	r3, [pc, #276]	@ (8000920 <MX_GPIO_Init+0x148>)
 800080c:	2180      	movs	r1, #128	@ 0x80
 800080e:	430a      	orrs	r2, r1
 8000810:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000812:	4b43      	ldr	r3, [pc, #268]	@ (8000920 <MX_GPIO_Init+0x148>)
 8000814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000816:	2280      	movs	r2, #128	@ 0x80
 8000818:	4013      	ands	r3, r2
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800081e:	4b40      	ldr	r3, [pc, #256]	@ (8000920 <MX_GPIO_Init+0x148>)
 8000820:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000822:	4b3f      	ldr	r3, [pc, #252]	@ (8000920 <MX_GPIO_Init+0x148>)
 8000824:	2101      	movs	r1, #1
 8000826:	430a      	orrs	r2, r1
 8000828:	62da      	str	r2, [r3, #44]	@ 0x2c
 800082a:	4b3d      	ldr	r3, [pc, #244]	@ (8000920 <MX_GPIO_Init+0x148>)
 800082c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800082e:	2201      	movs	r2, #1
 8000830:	4013      	ands	r3, r2
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000836:	4b3a      	ldr	r3, [pc, #232]	@ (8000920 <MX_GPIO_Init+0x148>)
 8000838:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800083a:	4b39      	ldr	r3, [pc, #228]	@ (8000920 <MX_GPIO_Init+0x148>)
 800083c:	2102      	movs	r1, #2
 800083e:	430a      	orrs	r2, r1
 8000840:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000842:	4b37      	ldr	r3, [pc, #220]	@ (8000920 <MX_GPIO_Init+0x148>)
 8000844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000846:	2202      	movs	r2, #2
 8000848:	4013      	ands	r3, r2
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800084e:	23a0      	movs	r3, #160	@ 0xa0
 8000850:	05db      	lsls	r3, r3, #23
 8000852:	2200      	movs	r2, #0
 8000854:	2120      	movs	r1, #32
 8000856:	0018      	movs	r0, r3
 8000858:	f000 fd9d 	bl	8001396 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800085c:	193b      	adds	r3, r7, r4
 800085e:	2280      	movs	r2, #128	@ 0x80
 8000860:	0192      	lsls	r2, r2, #6
 8000862:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000864:	193b      	adds	r3, r7, r4
 8000866:	2284      	movs	r2, #132	@ 0x84
 8000868:	0392      	lsls	r2, r2, #14
 800086a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	193b      	adds	r3, r7, r4
 800086e:	2200      	movs	r2, #0
 8000870:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000872:	193b      	adds	r3, r7, r4
 8000874:	4a2b      	ldr	r2, [pc, #172]	@ (8000924 <MX_GPIO_Init+0x14c>)
 8000876:	0019      	movs	r1, r3
 8000878:	0010      	movs	r0, r2
 800087a:	f000 fbf9 	bl	8001070 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 800087e:	193b      	adds	r3, r7, r4
 8000880:	2220      	movs	r2, #32
 8000882:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000884:	193b      	adds	r3, r7, r4
 8000886:	2201      	movs	r2, #1
 8000888:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	193b      	adds	r3, r7, r4
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000890:	193b      	adds	r3, r7, r4
 8000892:	2200      	movs	r2, #0
 8000894:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000896:	193a      	adds	r2, r7, r4
 8000898:	23a0      	movs	r3, #160	@ 0xa0
 800089a:	05db      	lsls	r3, r3, #23
 800089c:	0011      	movs	r1, r2
 800089e:	0018      	movs	r0, r3
 80008a0:	f000 fbe6 	bl	8001070 <HAL_GPIO_Init>

	/*Configure GPIO pin : Sig_A_Pin */
	GPIO_InitStruct.Pin = Sig_A_Pin;
 80008a4:	193b      	adds	r3, r7, r4
 80008a6:	2280      	movs	r2, #128	@ 0x80
 80008a8:	00d2      	lsls	r2, r2, #3
 80008aa:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ac:	193b      	adds	r3, r7, r4
 80008ae:	2288      	movs	r2, #136	@ 0x88
 80008b0:	0352      	lsls	r2, r2, #13
 80008b2:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	193b      	adds	r3, r7, r4
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(Sig_A_GPIO_Port, &GPIO_InitStruct);
 80008ba:	193a      	adds	r2, r7, r4
 80008bc:	23a0      	movs	r3, #160	@ 0xa0
 80008be:	05db      	lsls	r3, r3, #23
 80008c0:	0011      	movs	r1, r2
 80008c2:	0018      	movs	r0, r3
 80008c4:	f000 fbd4 	bl	8001070 <HAL_GPIO_Init>

	/*Configure GPIO pin : Sig_B_Pin */
	GPIO_InitStruct.Pin = Sig_B_Pin;
 80008c8:	193b      	adds	r3, r7, r4
 80008ca:	2208      	movs	r2, #8
 80008cc:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ce:	193b      	adds	r3, r7, r4
 80008d0:	2200      	movs	r2, #0
 80008d2:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	193b      	adds	r3, r7, r4
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(Sig_B_GPIO_Port, &GPIO_InitStruct);
 80008da:	193b      	adds	r3, r7, r4
 80008dc:	4a12      	ldr	r2, [pc, #72]	@ (8000928 <MX_GPIO_Init+0x150>)
 80008de:	0019      	movs	r1, r3
 80008e0:	0010      	movs	r0, r2
 80008e2:	f000 fbc5 	bl	8001070 <HAL_GPIO_Init>

	/*Configure GPIO pin : Encoder_SW_Pin */
	GPIO_InitStruct.Pin = Encoder_SW_Pin;
 80008e6:	0021      	movs	r1, r4
 80008e8:	187b      	adds	r3, r7, r1
 80008ea:	2220      	movs	r2, #32
 80008ec:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ee:	187b      	adds	r3, r7, r1
 80008f0:	2200      	movs	r2, #0
 80008f2:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008f4:	187b      	adds	r3, r7, r1
 80008f6:	2201      	movs	r2, #1
 80008f8:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(Encoder_SW_GPIO_Port, &GPIO_InitStruct);
 80008fa:	187b      	adds	r3, r7, r1
 80008fc:	4a0a      	ldr	r2, [pc, #40]	@ (8000928 <MX_GPIO_Init+0x150>)
 80008fe:	0019      	movs	r1, r3
 8000900:	0010      	movs	r0, r2
 8000902:	f000 fbb5 	bl	8001070 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000906:	2200      	movs	r2, #0
 8000908:	2100      	movs	r1, #0
 800090a:	2007      	movs	r0, #7
 800090c:	f000 fb7e 	bl	800100c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000910:	2007      	movs	r0, #7
 8000912:	f000 fb90 	bl	8001036 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000916:	46c0      	nop			@ (mov r8, r8)
 8000918:	46bd      	mov	sp, r7
 800091a:	b00b      	add	sp, #44	@ 0x2c
 800091c:	bd90      	pop	{r4, r7, pc}
 800091e:	46c0      	nop			@ (mov r8, r8)
 8000920:	40021000 	.word	0x40021000
 8000924:	50000800 	.word	0x50000800
 8000928:	50000400 	.word	0x50000400

0800092c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000930:	b672      	cpsid	i
}
 8000932:	46c0      	nop			@ (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000934:	46c0      	nop			@ (mov r8, r8)
 8000936:	e7fd      	b.n	8000934 <Error_Handler+0x8>

08000938 <RotaryEncoder_Init>:

static RotaryEncoder_t *encoder_instance = NULL;

void RotaryEncoder_Init(RotaryEncoder_t *encoder, GPIO_TypeDef *A_Port,
		uint16_t A_Pin, GPIO_TypeDef *B_Port, uint16_t B_Pin,
		GPIO_TypeDef *SW_Port, uint16_t SW_Pin) {
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	603b      	str	r3, [r7, #0]
 8000944:	1dbb      	adds	r3, r7, #6
 8000946:	801a      	strh	r2, [r3, #0]
	encoder->A_Port = A_Port;
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	68ba      	ldr	r2, [r7, #8]
 800094c:	601a      	str	r2, [r3, #0]
	encoder->A_Pin = A_Pin;
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	1dba      	adds	r2, r7, #6
 8000952:	8812      	ldrh	r2, [r2, #0]
 8000954:	809a      	strh	r2, [r3, #4]

	encoder->B_Port = B_Port;
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	683a      	ldr	r2, [r7, #0]
 800095a:	609a      	str	r2, [r3, #8]
	encoder->B_Pin = B_Pin;
 800095c:	68fa      	ldr	r2, [r7, #12]
 800095e:	2318      	movs	r3, #24
 8000960:	18fb      	adds	r3, r7, r3
 8000962:	881b      	ldrh	r3, [r3, #0]
 8000964:	8193      	strh	r3, [r2, #12]

	encoder->SW_Port = SW_Port;
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	69fa      	ldr	r2, [r7, #28]
 800096a:	611a      	str	r2, [r3, #16]
	encoder->SW_Pin = SW_Pin;
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	2220      	movs	r2, #32
 8000970:	18ba      	adds	r2, r7, r2
 8000972:	8812      	ldrh	r2, [r2, #0]
 8000974:	829a      	strh	r2, [r3, #20]

	encoder->counter = 0;
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	2200      	movs	r2, #0
 800097a:	619a      	str	r2, [r3, #24]
	encoder->direction = ROTARY_NONE;
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	2200      	movs	r2, #0
 8000980:	771a      	strb	r2, [r3, #28]

	encoder_instance = encoder;
 8000982:	4b03      	ldr	r3, [pc, #12]	@ (8000990 <RotaryEncoder_Init+0x58>)
 8000984:	68fa      	ldr	r2, [r7, #12]
 8000986:	601a      	str	r2, [r3, #0]
}
 8000988:	46c0      	nop			@ (mov r8, r8)
 800098a:	46bd      	mov	sp, r7
 800098c:	b004      	add	sp, #16
 800098e:	bd80      	pop	{r7, pc}
 8000990:	20000184 	.word	0x20000184

08000994 <RotaryEncoder_Update>:

// Function to handle encoder movement
void RotaryEncoder_Update(RotaryEncoder_t *encoder) {
 8000994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
	uint8_t A_State = HAL_GPIO_ReadPin(encoder->A_Port, encoder->A_Pin);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	889b      	ldrh	r3, [r3, #4]
 80009a4:	250f      	movs	r5, #15
 80009a6:	197c      	adds	r4, r7, r5
 80009a8:	0019      	movs	r1, r3
 80009aa:	0010      	movs	r0, r2
 80009ac:	f000 fcd6 	bl	800135c <HAL_GPIO_ReadPin>
 80009b0:	0003      	movs	r3, r0
 80009b2:	7023      	strb	r3, [r4, #0]
	uint8_t B_State = HAL_GPIO_ReadPin(encoder->B_Port, encoder->B_Pin);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	689a      	ldr	r2, [r3, #8]
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	899b      	ldrh	r3, [r3, #12]
 80009bc:	260e      	movs	r6, #14
 80009be:	19bc      	adds	r4, r7, r6
 80009c0:	0019      	movs	r1, r3
 80009c2:	0010      	movs	r0, r2
 80009c4:	f000 fcca 	bl	800135c <HAL_GPIO_ReadPin>
 80009c8:	0003      	movs	r3, r0
 80009ca:	7023      	strb	r3, [r4, #0]

	if (A_State) {
 80009cc:	197b      	adds	r3, r7, r5
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d014      	beq.n	80009fe <RotaryEncoder_Update+0x6a>
		if (B_State) {
 80009d4:	19bb      	adds	r3, r7, r6
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d008      	beq.n	80009ee <RotaryEncoder_Update+0x5a>
			encoder->direction = ROTARY_CCW;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2202      	movs	r2, #2
 80009e0:	771a      	strb	r2, [r3, #28]
			encoder->counter--;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	699b      	ldr	r3, [r3, #24]
 80009e6:	1e5a      	subs	r2, r3, #1
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	619a      	str	r2, [r3, #24]
		} else {
			encoder->direction = ROTARY_CW;
			encoder->counter++;
		}
	}
}
 80009ec:	e007      	b.n	80009fe <RotaryEncoder_Update+0x6a>
			encoder->direction = ROTARY_CW;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2201      	movs	r2, #1
 80009f2:	771a      	strb	r2, [r3, #28]
			encoder->counter++;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	1c5a      	adds	r2, r3, #1
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	619a      	str	r2, [r3, #24]
}
 80009fe:	46c0      	nop			@ (mov r8, r8)
 8000a00:	46bd      	mov	sp, r7
 8000a02:	b005      	add	sp, #20
 8000a04:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000a06 <RotaryEncoder_ReadSwitch>:

// Read switch state
uint8_t RotaryEncoder_ReadSwitch(RotaryEncoder_t *encoder) {
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b082      	sub	sp, #8
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(encoder->SW_Port, encoder->SW_Pin);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	691a      	ldr	r2, [r3, #16]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	8a9b      	ldrh	r3, [r3, #20]
 8000a16:	0019      	movs	r1, r3
 8000a18:	0010      	movs	r0, r2
 8000a1a:	f000 fc9f 	bl	800135c <HAL_GPIO_ReadPin>
 8000a1e:	0003      	movs	r3, r0
}
 8000a20:	0018      	movs	r0, r3
 8000a22:	46bd      	mov	sp, r7
 8000a24:	b002      	add	sp, #8
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <HAL_GPIO_EXTI_Callback>:

// EXTI Callback (Must be placed inside stm32l0xx_it.c)
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	0002      	movs	r2, r0
 8000a30:	1dbb      	adds	r3, r7, #6
 8000a32:	801a      	strh	r2, [r3, #0]
	if (encoder_instance == NULL)
 8000a34:	4b0a      	ldr	r3, [pc, #40]	@ (8000a60 <HAL_GPIO_EXTI_Callback+0x38>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d00c      	beq.n	8000a56 <HAL_GPIO_EXTI_Callback+0x2e>
		return;

	if (GPIO_Pin == encoder_instance->A_Pin) {
 8000a3c:	4b08      	ldr	r3, [pc, #32]	@ (8000a60 <HAL_GPIO_EXTI_Callback+0x38>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	889b      	ldrh	r3, [r3, #4]
 8000a42:	1dba      	adds	r2, r7, #6
 8000a44:	8812      	ldrh	r2, [r2, #0]
 8000a46:	429a      	cmp	r2, r3
 8000a48:	d106      	bne.n	8000a58 <HAL_GPIO_EXTI_Callback+0x30>
		RotaryEncoder_Update(encoder_instance);
 8000a4a:	4b05      	ldr	r3, [pc, #20]	@ (8000a60 <HAL_GPIO_EXTI_Callback+0x38>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f7ff ffa0 	bl	8000994 <RotaryEncoder_Update>
 8000a54:	e000      	b.n	8000a58 <HAL_GPIO_EXTI_Callback+0x30>
		return;
 8000a56:	46c0      	nop			@ (mov r8, r8)
	}
}
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	b002      	add	sp, #8
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	46c0      	nop			@ (mov r8, r8)
 8000a60:	20000184 	.word	0x20000184

08000a64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a68:	4b07      	ldr	r3, [pc, #28]	@ (8000a88 <HAL_MspInit+0x24>)
 8000a6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a6c:	4b06      	ldr	r3, [pc, #24]	@ (8000a88 <HAL_MspInit+0x24>)
 8000a6e:	2101      	movs	r1, #1
 8000a70:	430a      	orrs	r2, r1
 8000a72:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a74:	4b04      	ldr	r3, [pc, #16]	@ (8000a88 <HAL_MspInit+0x24>)
 8000a76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000a78:	4b03      	ldr	r3, [pc, #12]	@ (8000a88 <HAL_MspInit+0x24>)
 8000a7a:	2180      	movs	r1, #128	@ 0x80
 8000a7c:	0549      	lsls	r1, r1, #21
 8000a7e:	430a      	orrs	r2, r1
 8000a80:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a82:	46c0      	nop			@ (mov r8, r8)
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40021000 	.word	0x40021000

08000a8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a8c:	b590      	push	{r4, r7, lr}
 8000a8e:	b089      	sub	sp, #36	@ 0x24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a94:	240c      	movs	r4, #12
 8000a96:	193b      	adds	r3, r7, r4
 8000a98:	0018      	movs	r0, r3
 8000a9a:	2314      	movs	r3, #20
 8000a9c:	001a      	movs	r2, r3
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	f002 fd18 	bl	80034d4 <memset>
  if(hi2c->Instance==I2C1)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a17      	ldr	r2, [pc, #92]	@ (8000b08 <HAL_I2C_MspInit+0x7c>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d128      	bne.n	8000b00 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aae:	4b17      	ldr	r3, [pc, #92]	@ (8000b0c <HAL_I2C_MspInit+0x80>)
 8000ab0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000ab2:	4b16      	ldr	r3, [pc, #88]	@ (8000b0c <HAL_I2C_MspInit+0x80>)
 8000ab4:	2102      	movs	r1, #2
 8000ab6:	430a      	orrs	r2, r1
 8000ab8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000aba:	4b14      	ldr	r3, [pc, #80]	@ (8000b0c <HAL_I2C_MspInit+0x80>)
 8000abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000abe:	2202      	movs	r2, #2
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	60bb      	str	r3, [r7, #8]
 8000ac4:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ac6:	0021      	movs	r1, r4
 8000ac8:	187b      	adds	r3, r7, r1
 8000aca:	22c0      	movs	r2, #192	@ 0xc0
 8000acc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ace:	187b      	adds	r3, r7, r1
 8000ad0:	2212      	movs	r2, #18
 8000ad2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	187b      	adds	r3, r7, r1
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ada:	187b      	adds	r3, r7, r1
 8000adc:	2203      	movs	r2, #3
 8000ade:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000ae0:	187b      	adds	r3, r7, r1
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae6:	187b      	adds	r3, r7, r1
 8000ae8:	4a09      	ldr	r2, [pc, #36]	@ (8000b10 <HAL_I2C_MspInit+0x84>)
 8000aea:	0019      	movs	r1, r3
 8000aec:	0010      	movs	r0, r2
 8000aee:	f000 fabf 	bl	8001070 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000af2:	4b06      	ldr	r3, [pc, #24]	@ (8000b0c <HAL_I2C_MspInit+0x80>)
 8000af4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000af6:	4b05      	ldr	r3, [pc, #20]	@ (8000b0c <HAL_I2C_MspInit+0x80>)
 8000af8:	2180      	movs	r1, #128	@ 0x80
 8000afa:	0389      	lsls	r1, r1, #14
 8000afc:	430a      	orrs	r2, r1
 8000afe:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b00:	46c0      	nop			@ (mov r8, r8)
 8000b02:	46bd      	mov	sp, r7
 8000b04:	b009      	add	sp, #36	@ 0x24
 8000b06:	bd90      	pop	{r4, r7, pc}
 8000b08:	40005400 	.word	0x40005400
 8000b0c:	40021000 	.word	0x40021000
 8000b10:	50000400 	.word	0x50000400

08000b14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b14:	b590      	push	{r4, r7, lr}
 8000b16:	b089      	sub	sp, #36	@ 0x24
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1c:	240c      	movs	r4, #12
 8000b1e:	193b      	adds	r3, r7, r4
 8000b20:	0018      	movs	r0, r3
 8000b22:	2314      	movs	r3, #20
 8000b24:	001a      	movs	r2, r3
 8000b26:	2100      	movs	r1, #0
 8000b28:	f002 fcd4 	bl	80034d4 <memset>
  if(huart->Instance==USART2)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a18      	ldr	r2, [pc, #96]	@ (8000b94 <HAL_UART_MspInit+0x80>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d129      	bne.n	8000b8a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b36:	4b18      	ldr	r3, [pc, #96]	@ (8000b98 <HAL_UART_MspInit+0x84>)
 8000b38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000b3a:	4b17      	ldr	r3, [pc, #92]	@ (8000b98 <HAL_UART_MspInit+0x84>)
 8000b3c:	2180      	movs	r1, #128	@ 0x80
 8000b3e:	0289      	lsls	r1, r1, #10
 8000b40:	430a      	orrs	r2, r1
 8000b42:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b44:	4b14      	ldr	r3, [pc, #80]	@ (8000b98 <HAL_UART_MspInit+0x84>)
 8000b46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000b48:	4b13      	ldr	r3, [pc, #76]	@ (8000b98 <HAL_UART_MspInit+0x84>)
 8000b4a:	2101      	movs	r1, #1
 8000b4c:	430a      	orrs	r2, r1
 8000b4e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000b50:	4b11      	ldr	r3, [pc, #68]	@ (8000b98 <HAL_UART_MspInit+0x84>)
 8000b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b54:	2201      	movs	r2, #1
 8000b56:	4013      	ands	r3, r2
 8000b58:	60bb      	str	r3, [r7, #8]
 8000b5a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b5c:	0021      	movs	r1, r4
 8000b5e:	187b      	adds	r3, r7, r1
 8000b60:	220c      	movs	r2, #12
 8000b62:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b64:	187b      	adds	r3, r7, r1
 8000b66:	2202      	movs	r2, #2
 8000b68:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	187b      	adds	r3, r7, r1
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b70:	187b      	adds	r3, r7, r1
 8000b72:	2203      	movs	r2, #3
 8000b74:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000b76:	187b      	adds	r3, r7, r1
 8000b78:	2204      	movs	r2, #4
 8000b7a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7c:	187a      	adds	r2, r7, r1
 8000b7e:	23a0      	movs	r3, #160	@ 0xa0
 8000b80:	05db      	lsls	r3, r3, #23
 8000b82:	0011      	movs	r1, r2
 8000b84:	0018      	movs	r0, r3
 8000b86:	f000 fa73 	bl	8001070 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b8a:	46c0      	nop			@ (mov r8, r8)
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	b009      	add	sp, #36	@ 0x24
 8000b90:	bd90      	pop	{r4, r7, pc}
 8000b92:	46c0      	nop			@ (mov r8, r8)
 8000b94:	40004400 	.word	0x40004400
 8000b98:	40021000 	.word	0x40021000

08000b9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ba0:	46c0      	nop			@ (mov r8, r8)
 8000ba2:	e7fd      	b.n	8000ba0 <NMI_Handler+0x4>

08000ba4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ba8:	46c0      	nop			@ (mov r8, r8)
 8000baa:	e7fd      	b.n	8000ba8 <HardFault_Handler+0x4>

08000bac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000bb0:	46c0      	nop			@ (mov r8, r8)
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bba:	46c0      	nop			@ (mov r8, r8)
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc4:	f000 f936 	bl	8000e34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc8:	46c0      	nop			@ (mov r8, r8)
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE END EXTI2_3_IRQn 0 */
  //HAL_GPIO_EXTI_IRQHandler(Sig_B_Pin);
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8000bd2:	46c0      	nop			@ (mov r8, r8)
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Sig_A_Pin);
 8000bdc:	2380      	movs	r3, #128	@ 0x80
 8000bde:	00db      	lsls	r3, r3, #3
 8000be0:	0018      	movs	r0, r3
 8000be2:	f000 fbf5 	bl	80013d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000be6:	2380      	movs	r3, #128	@ 0x80
 8000be8:	019b      	lsls	r3, r3, #6
 8000bea:	0018      	movs	r0, r3
 8000bec:	f000 fbf0 	bl	80013d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000bf0:	46c0      	nop			@ (mov r8, r8)
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b086      	sub	sp, #24
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	60f8      	str	r0, [r7, #12]
 8000bfe:	60b9      	str	r1, [r7, #8]
 8000c00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c02:	2300      	movs	r3, #0
 8000c04:	617b      	str	r3, [r7, #20]
 8000c06:	e00a      	b.n	8000c1e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c08:	e000      	b.n	8000c0c <_read+0x16>
 8000c0a:	bf00      	nop
 8000c0c:	0001      	movs	r1, r0
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	1c5a      	adds	r2, r3, #1
 8000c12:	60ba      	str	r2, [r7, #8]
 8000c14:	b2ca      	uxtb	r2, r1
 8000c16:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	617b      	str	r3, [r7, #20]
 8000c1e:	697a      	ldr	r2, [r7, #20]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	429a      	cmp	r2, r3
 8000c24:	dbf0      	blt.n	8000c08 <_read+0x12>
  }

  return len;
 8000c26:	687b      	ldr	r3, [r7, #4]
}
 8000c28:	0018      	movs	r0, r3
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	b006      	add	sp, #24
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]
 8000c40:	e009      	b.n	8000c56 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	1c5a      	adds	r2, r3, #1
 8000c46:	60ba      	str	r2, [r7, #8]
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	f7ff fc36 	bl	80004bc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	3301      	adds	r3, #1
 8000c54:	617b      	str	r3, [r7, #20]
 8000c56:	697a      	ldr	r2, [r7, #20]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	429a      	cmp	r2, r3
 8000c5c:	dbf1      	blt.n	8000c42 <_write+0x12>
  }
  return len;
 8000c5e:	687b      	ldr	r3, [r7, #4]
}
 8000c60:	0018      	movs	r0, r3
 8000c62:	46bd      	mov	sp, r7
 8000c64:	b006      	add	sp, #24
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <_close>:

int _close(int file)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c70:	2301      	movs	r3, #1
 8000c72:	425b      	negs	r3, r3
}
 8000c74:	0018      	movs	r0, r3
 8000c76:	46bd      	mov	sp, r7
 8000c78:	b002      	add	sp, #8
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	2280      	movs	r2, #128	@ 0x80
 8000c8a:	0192      	lsls	r2, r2, #6
 8000c8c:	605a      	str	r2, [r3, #4]
  return 0;
 8000c8e:	2300      	movs	r3, #0
}
 8000c90:	0018      	movs	r0, r3
 8000c92:	46bd      	mov	sp, r7
 8000c94:	b002      	add	sp, #8
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <_isatty>:

int _isatty(int file)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ca0:	2301      	movs	r3, #1
}
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	b002      	add	sp, #8
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b084      	sub	sp, #16
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	60f8      	str	r0, [r7, #12]
 8000cb2:	60b9      	str	r1, [r7, #8]
 8000cb4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cb6:	2300      	movs	r3, #0
}
 8000cb8:	0018      	movs	r0, r3
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	b004      	add	sp, #16
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cc8:	4a14      	ldr	r2, [pc, #80]	@ (8000d1c <_sbrk+0x5c>)
 8000cca:	4b15      	ldr	r3, [pc, #84]	@ (8000d20 <_sbrk+0x60>)
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cd4:	4b13      	ldr	r3, [pc, #76]	@ (8000d24 <_sbrk+0x64>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d102      	bne.n	8000ce2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cdc:	4b11      	ldr	r3, [pc, #68]	@ (8000d24 <_sbrk+0x64>)
 8000cde:	4a12      	ldr	r2, [pc, #72]	@ (8000d28 <_sbrk+0x68>)
 8000ce0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ce2:	4b10      	ldr	r3, [pc, #64]	@ (8000d24 <_sbrk+0x64>)
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	18d3      	adds	r3, r2, r3
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	d207      	bcs.n	8000d00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cf0:	f002 fc46 	bl	8003580 <__errno>
 8000cf4:	0003      	movs	r3, r0
 8000cf6:	220c      	movs	r2, #12
 8000cf8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	425b      	negs	r3, r3
 8000cfe:	e009      	b.n	8000d14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d00:	4b08      	ldr	r3, [pc, #32]	@ (8000d24 <_sbrk+0x64>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d06:	4b07      	ldr	r3, [pc, #28]	@ (8000d24 <_sbrk+0x64>)
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	18d2      	adds	r2, r2, r3
 8000d0e:	4b05      	ldr	r3, [pc, #20]	@ (8000d24 <_sbrk+0x64>)
 8000d10:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000d12:	68fb      	ldr	r3, [r7, #12]
}
 8000d14:	0018      	movs	r0, r3
 8000d16:	46bd      	mov	sp, r7
 8000d18:	b006      	add	sp, #24
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	20002000 	.word	0x20002000
 8000d20:	00000400 	.word	0x00000400
 8000d24:	20000188 	.word	0x20000188
 8000d28:	200002e0 	.word	0x200002e0

08000d2c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d30:	46c0      	nop			@ (mov r8, r8)
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
	...

08000d38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000d38:	480d      	ldr	r0, [pc, #52]	@ (8000d70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d3a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d3c:	f7ff fff6 	bl	8000d2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d40:	480c      	ldr	r0, [pc, #48]	@ (8000d74 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d42:	490d      	ldr	r1, [pc, #52]	@ (8000d78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d44:	4a0d      	ldr	r2, [pc, #52]	@ (8000d7c <LoopForever+0xe>)
  movs r3, #0
 8000d46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d48:	e002      	b.n	8000d50 <LoopCopyDataInit>

08000d4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d4e:	3304      	adds	r3, #4

08000d50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d54:	d3f9      	bcc.n	8000d4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d56:	4a0a      	ldr	r2, [pc, #40]	@ (8000d80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d58:	4c0a      	ldr	r4, [pc, #40]	@ (8000d84 <LoopForever+0x16>)
  movs r3, #0
 8000d5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d5c:	e001      	b.n	8000d62 <LoopFillZerobss>

08000d5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d60:	3204      	adds	r2, #4

08000d62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d64:	d3fb      	bcc.n	8000d5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d66:	f002 fc11 	bl	800358c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d6a:	f7ff fbb9 	bl	80004e0 <main>

08000d6e <LoopForever>:

LoopForever:
    b LoopForever
 8000d6e:	e7fe      	b.n	8000d6e <LoopForever>
  ldr   r0, =_estack
 8000d70:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000d74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d78:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000d7c:	08004178 	.word	0x08004178
  ldr r2, =_sbss
 8000d80:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000d84:	200002dc 	.word	0x200002dc

08000d88 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d88:	e7fe      	b.n	8000d88 <ADC1_COMP_IRQHandler>
	...

08000d8c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d92:	1dfb      	adds	r3, r7, #7
 8000d94:	2200      	movs	r2, #0
 8000d96:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000d98:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc8 <HAL_Init+0x3c>)
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc8 <HAL_Init+0x3c>)
 8000d9e:	2140      	movs	r1, #64	@ 0x40
 8000da0:	430a      	orrs	r2, r1
 8000da2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000da4:	2000      	movs	r0, #0
 8000da6:	f000 f811 	bl	8000dcc <HAL_InitTick>
 8000daa:	1e03      	subs	r3, r0, #0
 8000dac:	d003      	beq.n	8000db6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000dae:	1dfb      	adds	r3, r7, #7
 8000db0:	2201      	movs	r2, #1
 8000db2:	701a      	strb	r2, [r3, #0]
 8000db4:	e001      	b.n	8000dba <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000db6:	f7ff fe55 	bl	8000a64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dba:	1dfb      	adds	r3, r7, #7
 8000dbc:	781b      	ldrb	r3, [r3, #0]
}
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	b002      	add	sp, #8
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	46c0      	nop			@ (mov r8, r8)
 8000dc8:	40022000 	.word	0x40022000

08000dcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dcc:	b590      	push	{r4, r7, lr}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dd4:	4b14      	ldr	r3, [pc, #80]	@ (8000e28 <HAL_InitTick+0x5c>)
 8000dd6:	681c      	ldr	r4, [r3, #0]
 8000dd8:	4b14      	ldr	r3, [pc, #80]	@ (8000e2c <HAL_InitTick+0x60>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	0019      	movs	r1, r3
 8000dde:	23fa      	movs	r3, #250	@ 0xfa
 8000de0:	0098      	lsls	r0, r3, #2
 8000de2:	f7ff f99b 	bl	800011c <__udivsi3>
 8000de6:	0003      	movs	r3, r0
 8000de8:	0019      	movs	r1, r3
 8000dea:	0020      	movs	r0, r4
 8000dec:	f7ff f996 	bl	800011c <__udivsi3>
 8000df0:	0003      	movs	r3, r0
 8000df2:	0018      	movs	r0, r3
 8000df4:	f000 f92f 	bl	8001056 <HAL_SYSTICK_Config>
 8000df8:	1e03      	subs	r3, r0, #0
 8000dfa:	d001      	beq.n	8000e00 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	e00f      	b.n	8000e20 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2b03      	cmp	r3, #3
 8000e04:	d80b      	bhi.n	8000e1e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e06:	6879      	ldr	r1, [r7, #4]
 8000e08:	2301      	movs	r3, #1
 8000e0a:	425b      	negs	r3, r3
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	0018      	movs	r0, r3
 8000e10:	f000 f8fc 	bl	800100c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e14:	4b06      	ldr	r3, [pc, #24]	@ (8000e30 <HAL_InitTick+0x64>)
 8000e16:	687a      	ldr	r2, [r7, #4]
 8000e18:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	e000      	b.n	8000e20 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
}
 8000e20:	0018      	movs	r0, r3
 8000e22:	46bd      	mov	sp, r7
 8000e24:	b003      	add	sp, #12
 8000e26:	bd90      	pop	{r4, r7, pc}
 8000e28:	20000000 	.word	0x20000000
 8000e2c:	20000008 	.word	0x20000008
 8000e30:	20000004 	.word	0x20000004

08000e34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e38:	4b05      	ldr	r3, [pc, #20]	@ (8000e50 <HAL_IncTick+0x1c>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	001a      	movs	r2, r3
 8000e3e:	4b05      	ldr	r3, [pc, #20]	@ (8000e54 <HAL_IncTick+0x20>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	18d2      	adds	r2, r2, r3
 8000e44:	4b03      	ldr	r3, [pc, #12]	@ (8000e54 <HAL_IncTick+0x20>)
 8000e46:	601a      	str	r2, [r3, #0]
}
 8000e48:	46c0      	nop			@ (mov r8, r8)
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	46c0      	nop			@ (mov r8, r8)
 8000e50:	20000008 	.word	0x20000008
 8000e54:	2000018c 	.word	0x2000018c

08000e58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e5c:	4b02      	ldr	r3, [pc, #8]	@ (8000e68 <HAL_GetTick+0x10>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
}
 8000e60:	0018      	movs	r0, r3
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	46c0      	nop			@ (mov r8, r8)
 8000e68:	2000018c 	.word	0x2000018c

08000e6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e74:	f7ff fff0 	bl	8000e58 <HAL_GetTick>
 8000e78:	0003      	movs	r3, r0
 8000e7a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	3301      	adds	r3, #1
 8000e84:	d005      	beq.n	8000e92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e86:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb0 <HAL_Delay+0x44>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	001a      	movs	r2, r3
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	189b      	adds	r3, r3, r2
 8000e90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e92:	46c0      	nop			@ (mov r8, r8)
 8000e94:	f7ff ffe0 	bl	8000e58 <HAL_GetTick>
 8000e98:	0002      	movs	r2, r0
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	68fa      	ldr	r2, [r7, #12]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	d8f7      	bhi.n	8000e94 <HAL_Delay+0x28>
  {
  }
}
 8000ea4:	46c0      	nop			@ (mov r8, r8)
 8000ea6:	46c0      	nop			@ (mov r8, r8)
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	b004      	add	sp, #16
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	46c0      	nop			@ (mov r8, r8)
 8000eb0:	20000008 	.word	0x20000008

08000eb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	0002      	movs	r2, r0
 8000ebc:	1dfb      	adds	r3, r7, #7
 8000ebe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ec0:	1dfb      	adds	r3, r7, #7
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ec6:	d809      	bhi.n	8000edc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ec8:	1dfb      	adds	r3, r7, #7
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	001a      	movs	r2, r3
 8000ece:	231f      	movs	r3, #31
 8000ed0:	401a      	ands	r2, r3
 8000ed2:	4b04      	ldr	r3, [pc, #16]	@ (8000ee4 <__NVIC_EnableIRQ+0x30>)
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	4091      	lsls	r1, r2
 8000ed8:	000a      	movs	r2, r1
 8000eda:	601a      	str	r2, [r3, #0]
  }
}
 8000edc:	46c0      	nop			@ (mov r8, r8)
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	b002      	add	sp, #8
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	e000e100 	.word	0xe000e100

08000ee8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee8:	b590      	push	{r4, r7, lr}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	0002      	movs	r2, r0
 8000ef0:	6039      	str	r1, [r7, #0]
 8000ef2:	1dfb      	adds	r3, r7, #7
 8000ef4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ef6:	1dfb      	adds	r3, r7, #7
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	2b7f      	cmp	r3, #127	@ 0x7f
 8000efc:	d828      	bhi.n	8000f50 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000efe:	4a2f      	ldr	r2, [pc, #188]	@ (8000fbc <__NVIC_SetPriority+0xd4>)
 8000f00:	1dfb      	adds	r3, r7, #7
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	b25b      	sxtb	r3, r3
 8000f06:	089b      	lsrs	r3, r3, #2
 8000f08:	33c0      	adds	r3, #192	@ 0xc0
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	589b      	ldr	r3, [r3, r2]
 8000f0e:	1dfa      	adds	r2, r7, #7
 8000f10:	7812      	ldrb	r2, [r2, #0]
 8000f12:	0011      	movs	r1, r2
 8000f14:	2203      	movs	r2, #3
 8000f16:	400a      	ands	r2, r1
 8000f18:	00d2      	lsls	r2, r2, #3
 8000f1a:	21ff      	movs	r1, #255	@ 0xff
 8000f1c:	4091      	lsls	r1, r2
 8000f1e:	000a      	movs	r2, r1
 8000f20:	43d2      	mvns	r2, r2
 8000f22:	401a      	ands	r2, r3
 8000f24:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	019b      	lsls	r3, r3, #6
 8000f2a:	22ff      	movs	r2, #255	@ 0xff
 8000f2c:	401a      	ands	r2, r3
 8000f2e:	1dfb      	adds	r3, r7, #7
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	0018      	movs	r0, r3
 8000f34:	2303      	movs	r3, #3
 8000f36:	4003      	ands	r3, r0
 8000f38:	00db      	lsls	r3, r3, #3
 8000f3a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f3c:	481f      	ldr	r0, [pc, #124]	@ (8000fbc <__NVIC_SetPriority+0xd4>)
 8000f3e:	1dfb      	adds	r3, r7, #7
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	b25b      	sxtb	r3, r3
 8000f44:	089b      	lsrs	r3, r3, #2
 8000f46:	430a      	orrs	r2, r1
 8000f48:	33c0      	adds	r3, #192	@ 0xc0
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f4e:	e031      	b.n	8000fb4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f50:	4a1b      	ldr	r2, [pc, #108]	@ (8000fc0 <__NVIC_SetPriority+0xd8>)
 8000f52:	1dfb      	adds	r3, r7, #7
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	0019      	movs	r1, r3
 8000f58:	230f      	movs	r3, #15
 8000f5a:	400b      	ands	r3, r1
 8000f5c:	3b08      	subs	r3, #8
 8000f5e:	089b      	lsrs	r3, r3, #2
 8000f60:	3306      	adds	r3, #6
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	18d3      	adds	r3, r2, r3
 8000f66:	3304      	adds	r3, #4
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	1dfa      	adds	r2, r7, #7
 8000f6c:	7812      	ldrb	r2, [r2, #0]
 8000f6e:	0011      	movs	r1, r2
 8000f70:	2203      	movs	r2, #3
 8000f72:	400a      	ands	r2, r1
 8000f74:	00d2      	lsls	r2, r2, #3
 8000f76:	21ff      	movs	r1, #255	@ 0xff
 8000f78:	4091      	lsls	r1, r2
 8000f7a:	000a      	movs	r2, r1
 8000f7c:	43d2      	mvns	r2, r2
 8000f7e:	401a      	ands	r2, r3
 8000f80:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	019b      	lsls	r3, r3, #6
 8000f86:	22ff      	movs	r2, #255	@ 0xff
 8000f88:	401a      	ands	r2, r3
 8000f8a:	1dfb      	adds	r3, r7, #7
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	0018      	movs	r0, r3
 8000f90:	2303      	movs	r3, #3
 8000f92:	4003      	ands	r3, r0
 8000f94:	00db      	lsls	r3, r3, #3
 8000f96:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f98:	4809      	ldr	r0, [pc, #36]	@ (8000fc0 <__NVIC_SetPriority+0xd8>)
 8000f9a:	1dfb      	adds	r3, r7, #7
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	001c      	movs	r4, r3
 8000fa0:	230f      	movs	r3, #15
 8000fa2:	4023      	ands	r3, r4
 8000fa4:	3b08      	subs	r3, #8
 8000fa6:	089b      	lsrs	r3, r3, #2
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	3306      	adds	r3, #6
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	18c3      	adds	r3, r0, r3
 8000fb0:	3304      	adds	r3, #4
 8000fb2:	601a      	str	r2, [r3, #0]
}
 8000fb4:	46c0      	nop			@ (mov r8, r8)
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	b003      	add	sp, #12
 8000fba:	bd90      	pop	{r4, r7, pc}
 8000fbc:	e000e100 	.word	0xe000e100
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	1e5a      	subs	r2, r3, #1
 8000fd0:	2380      	movs	r3, #128	@ 0x80
 8000fd2:	045b      	lsls	r3, r3, #17
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d301      	bcc.n	8000fdc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e010      	b.n	8000ffe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fdc:	4b0a      	ldr	r3, [pc, #40]	@ (8001008 <SysTick_Config+0x44>)
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	3a01      	subs	r2, #1
 8000fe2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	425b      	negs	r3, r3
 8000fe8:	2103      	movs	r1, #3
 8000fea:	0018      	movs	r0, r3
 8000fec:	f7ff ff7c 	bl	8000ee8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff0:	4b05      	ldr	r3, [pc, #20]	@ (8001008 <SysTick_Config+0x44>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ff6:	4b04      	ldr	r3, [pc, #16]	@ (8001008 <SysTick_Config+0x44>)
 8000ff8:	2207      	movs	r2, #7
 8000ffa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	0018      	movs	r0, r3
 8001000:	46bd      	mov	sp, r7
 8001002:	b002      	add	sp, #8
 8001004:	bd80      	pop	{r7, pc}
 8001006:	46c0      	nop			@ (mov r8, r8)
 8001008:	e000e010 	.word	0xe000e010

0800100c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	60b9      	str	r1, [r7, #8]
 8001014:	607a      	str	r2, [r7, #4]
 8001016:	210f      	movs	r1, #15
 8001018:	187b      	adds	r3, r7, r1
 800101a:	1c02      	adds	r2, r0, #0
 800101c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800101e:	68ba      	ldr	r2, [r7, #8]
 8001020:	187b      	adds	r3, r7, r1
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	b25b      	sxtb	r3, r3
 8001026:	0011      	movs	r1, r2
 8001028:	0018      	movs	r0, r3
 800102a:	f7ff ff5d 	bl	8000ee8 <__NVIC_SetPriority>
}
 800102e:	46c0      	nop			@ (mov r8, r8)
 8001030:	46bd      	mov	sp, r7
 8001032:	b004      	add	sp, #16
 8001034:	bd80      	pop	{r7, pc}

08001036 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b082      	sub	sp, #8
 800103a:	af00      	add	r7, sp, #0
 800103c:	0002      	movs	r2, r0
 800103e:	1dfb      	adds	r3, r7, #7
 8001040:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001042:	1dfb      	adds	r3, r7, #7
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	b25b      	sxtb	r3, r3
 8001048:	0018      	movs	r0, r3
 800104a:	f7ff ff33 	bl	8000eb4 <__NVIC_EnableIRQ>
}
 800104e:	46c0      	nop			@ (mov r8, r8)
 8001050:	46bd      	mov	sp, r7
 8001052:	b002      	add	sp, #8
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b082      	sub	sp, #8
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	0018      	movs	r0, r3
 8001062:	f7ff ffaf 	bl	8000fc4 <SysTick_Config>
 8001066:	0003      	movs	r3, r0
}
 8001068:	0018      	movs	r0, r3
 800106a:	46bd      	mov	sp, r7
 800106c:	b002      	add	sp, #8
 800106e:	bd80      	pop	{r7, pc}

08001070 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800107a:	2300      	movs	r3, #0
 800107c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800107e:	2300      	movs	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001082:	2300      	movs	r3, #0
 8001084:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001086:	e14f      	b.n	8001328 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2101      	movs	r1, #1
 800108e:	697a      	ldr	r2, [r7, #20]
 8001090:	4091      	lsls	r1, r2
 8001092:	000a      	movs	r2, r1
 8001094:	4013      	ands	r3, r2
 8001096:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d100      	bne.n	80010a0 <HAL_GPIO_Init+0x30>
 800109e:	e140      	b.n	8001322 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	2203      	movs	r2, #3
 80010a6:	4013      	ands	r3, r2
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d005      	beq.n	80010b8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	2203      	movs	r2, #3
 80010b2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d130      	bne.n	800111a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	2203      	movs	r2, #3
 80010c4:	409a      	lsls	r2, r3
 80010c6:	0013      	movs	r3, r2
 80010c8:	43da      	mvns	r2, r3
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	4013      	ands	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	68da      	ldr	r2, [r3, #12]
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	409a      	lsls	r2, r3
 80010da:	0013      	movs	r3, r2
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	4313      	orrs	r3, r2
 80010e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010ee:	2201      	movs	r2, #1
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	409a      	lsls	r2, r3
 80010f4:	0013      	movs	r3, r2
 80010f6:	43da      	mvns	r2, r3
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	4013      	ands	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	091b      	lsrs	r3, r3, #4
 8001104:	2201      	movs	r2, #1
 8001106:	401a      	ands	r2, r3
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	409a      	lsls	r2, r3
 800110c:	0013      	movs	r3, r2
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	4313      	orrs	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	2203      	movs	r2, #3
 8001120:	4013      	ands	r3, r2
 8001122:	2b03      	cmp	r3, #3
 8001124:	d017      	beq.n	8001156 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	68db      	ldr	r3, [r3, #12]
 800112a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	2203      	movs	r2, #3
 8001132:	409a      	lsls	r2, r3
 8001134:	0013      	movs	r3, r2
 8001136:	43da      	mvns	r2, r3
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	4013      	ands	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	689a      	ldr	r2, [r3, #8]
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	409a      	lsls	r2, r3
 8001148:	0013      	movs	r3, r2
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	4313      	orrs	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	2203      	movs	r2, #3
 800115c:	4013      	ands	r3, r2
 800115e:	2b02      	cmp	r3, #2
 8001160:	d123      	bne.n	80011aa <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	08da      	lsrs	r2, r3, #3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	3208      	adds	r2, #8
 800116a:	0092      	lsls	r2, r2, #2
 800116c:	58d3      	ldr	r3, [r2, r3]
 800116e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	2207      	movs	r2, #7
 8001174:	4013      	ands	r3, r2
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	220f      	movs	r2, #15
 800117a:	409a      	lsls	r2, r3
 800117c:	0013      	movs	r3, r2
 800117e:	43da      	mvns	r2, r3
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	4013      	ands	r3, r2
 8001184:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	691a      	ldr	r2, [r3, #16]
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	2107      	movs	r1, #7
 800118e:	400b      	ands	r3, r1
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	409a      	lsls	r2, r3
 8001194:	0013      	movs	r3, r2
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	4313      	orrs	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	08da      	lsrs	r2, r3, #3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3208      	adds	r2, #8
 80011a4:	0092      	lsls	r2, r2, #2
 80011a6:	6939      	ldr	r1, [r7, #16]
 80011a8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	2203      	movs	r2, #3
 80011b6:	409a      	lsls	r2, r3
 80011b8:	0013      	movs	r3, r2
 80011ba:	43da      	mvns	r2, r3
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	4013      	ands	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	2203      	movs	r2, #3
 80011c8:	401a      	ands	r2, r3
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	409a      	lsls	r2, r3
 80011d0:	0013      	movs	r3, r2
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685a      	ldr	r2, [r3, #4]
 80011e2:	23c0      	movs	r3, #192	@ 0xc0
 80011e4:	029b      	lsls	r3, r3, #10
 80011e6:	4013      	ands	r3, r2
 80011e8:	d100      	bne.n	80011ec <HAL_GPIO_Init+0x17c>
 80011ea:	e09a      	b.n	8001322 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ec:	4b54      	ldr	r3, [pc, #336]	@ (8001340 <HAL_GPIO_Init+0x2d0>)
 80011ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011f0:	4b53      	ldr	r3, [pc, #332]	@ (8001340 <HAL_GPIO_Init+0x2d0>)
 80011f2:	2101      	movs	r1, #1
 80011f4:	430a      	orrs	r2, r1
 80011f6:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80011f8:	4a52      	ldr	r2, [pc, #328]	@ (8001344 <HAL_GPIO_Init+0x2d4>)
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	089b      	lsrs	r3, r3, #2
 80011fe:	3302      	adds	r3, #2
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	589b      	ldr	r3, [r3, r2]
 8001204:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	2203      	movs	r2, #3
 800120a:	4013      	ands	r3, r2
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	220f      	movs	r2, #15
 8001210:	409a      	lsls	r2, r3
 8001212:	0013      	movs	r3, r2
 8001214:	43da      	mvns	r2, r3
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	4013      	ands	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	23a0      	movs	r3, #160	@ 0xa0
 8001220:	05db      	lsls	r3, r3, #23
 8001222:	429a      	cmp	r2, r3
 8001224:	d019      	beq.n	800125a <HAL_GPIO_Init+0x1ea>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a47      	ldr	r2, [pc, #284]	@ (8001348 <HAL_GPIO_Init+0x2d8>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d013      	beq.n	8001256 <HAL_GPIO_Init+0x1e6>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a46      	ldr	r2, [pc, #280]	@ (800134c <HAL_GPIO_Init+0x2dc>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d00d      	beq.n	8001252 <HAL_GPIO_Init+0x1e2>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a45      	ldr	r2, [pc, #276]	@ (8001350 <HAL_GPIO_Init+0x2e0>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d007      	beq.n	800124e <HAL_GPIO_Init+0x1de>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a44      	ldr	r2, [pc, #272]	@ (8001354 <HAL_GPIO_Init+0x2e4>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d101      	bne.n	800124a <HAL_GPIO_Init+0x1da>
 8001246:	2305      	movs	r3, #5
 8001248:	e008      	b.n	800125c <HAL_GPIO_Init+0x1ec>
 800124a:	2306      	movs	r3, #6
 800124c:	e006      	b.n	800125c <HAL_GPIO_Init+0x1ec>
 800124e:	2303      	movs	r3, #3
 8001250:	e004      	b.n	800125c <HAL_GPIO_Init+0x1ec>
 8001252:	2302      	movs	r3, #2
 8001254:	e002      	b.n	800125c <HAL_GPIO_Init+0x1ec>
 8001256:	2301      	movs	r3, #1
 8001258:	e000      	b.n	800125c <HAL_GPIO_Init+0x1ec>
 800125a:	2300      	movs	r3, #0
 800125c:	697a      	ldr	r2, [r7, #20]
 800125e:	2103      	movs	r1, #3
 8001260:	400a      	ands	r2, r1
 8001262:	0092      	lsls	r2, r2, #2
 8001264:	4093      	lsls	r3, r2
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	4313      	orrs	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800126c:	4935      	ldr	r1, [pc, #212]	@ (8001344 <HAL_GPIO_Init+0x2d4>)
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	089b      	lsrs	r3, r3, #2
 8001272:	3302      	adds	r3, #2
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800127a:	4b37      	ldr	r3, [pc, #220]	@ (8001358 <HAL_GPIO_Init+0x2e8>)
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	43da      	mvns	r2, r3
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	4013      	ands	r3, r2
 8001288:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685a      	ldr	r2, [r3, #4]
 800128e:	2380      	movs	r3, #128	@ 0x80
 8001290:	035b      	lsls	r3, r3, #13
 8001292:	4013      	ands	r3, r2
 8001294:	d003      	beq.n	800129e <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	4313      	orrs	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800129e:	4b2e      	ldr	r3, [pc, #184]	@ (8001358 <HAL_GPIO_Init+0x2e8>)
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80012a4:	4b2c      	ldr	r3, [pc, #176]	@ (8001358 <HAL_GPIO_Init+0x2e8>)
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	43da      	mvns	r2, r3
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	4013      	ands	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685a      	ldr	r2, [r3, #4]
 80012b8:	2380      	movs	r3, #128	@ 0x80
 80012ba:	039b      	lsls	r3, r3, #14
 80012bc:	4013      	ands	r3, r2
 80012be:	d003      	beq.n	80012c8 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012c8:	4b23      	ldr	r3, [pc, #140]	@ (8001358 <HAL_GPIO_Init+0x2e8>)
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80012ce:	4b22      	ldr	r3, [pc, #136]	@ (8001358 <HAL_GPIO_Init+0x2e8>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	43da      	mvns	r2, r3
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	4013      	ands	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685a      	ldr	r2, [r3, #4]
 80012e2:	2380      	movs	r3, #128	@ 0x80
 80012e4:	029b      	lsls	r3, r3, #10
 80012e6:	4013      	ands	r3, r2
 80012e8:	d003      	beq.n	80012f2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012f2:	4b19      	ldr	r3, [pc, #100]	@ (8001358 <HAL_GPIO_Init+0x2e8>)
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012f8:	4b17      	ldr	r3, [pc, #92]	@ (8001358 <HAL_GPIO_Init+0x2e8>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	43da      	mvns	r2, r3
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	4013      	ands	r3, r2
 8001306:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685a      	ldr	r2, [r3, #4]
 800130c:	2380      	movs	r3, #128	@ 0x80
 800130e:	025b      	lsls	r3, r3, #9
 8001310:	4013      	ands	r3, r2
 8001312:	d003      	beq.n	800131c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	4313      	orrs	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800131c:	4b0e      	ldr	r3, [pc, #56]	@ (8001358 <HAL_GPIO_Init+0x2e8>)
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	3301      	adds	r3, #1
 8001326:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	40da      	lsrs	r2, r3
 8001330:	1e13      	subs	r3, r2, #0
 8001332:	d000      	beq.n	8001336 <HAL_GPIO_Init+0x2c6>
 8001334:	e6a8      	b.n	8001088 <HAL_GPIO_Init+0x18>
  }
}
 8001336:	46c0      	nop			@ (mov r8, r8)
 8001338:	46c0      	nop			@ (mov r8, r8)
 800133a:	46bd      	mov	sp, r7
 800133c:	b006      	add	sp, #24
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40021000 	.word	0x40021000
 8001344:	40010000 	.word	0x40010000
 8001348:	50000400 	.word	0x50000400
 800134c:	50000800 	.word	0x50000800
 8001350:	50000c00 	.word	0x50000c00
 8001354:	50001c00 	.word	0x50001c00
 8001358:	40010400 	.word	0x40010400

0800135c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	000a      	movs	r2, r1
 8001366:	1cbb      	adds	r3, r7, #2
 8001368:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	691b      	ldr	r3, [r3, #16]
 800136e:	1cba      	adds	r2, r7, #2
 8001370:	8812      	ldrh	r2, [r2, #0]
 8001372:	4013      	ands	r3, r2
 8001374:	d004      	beq.n	8001380 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001376:	230f      	movs	r3, #15
 8001378:	18fb      	adds	r3, r7, r3
 800137a:	2201      	movs	r2, #1
 800137c:	701a      	strb	r2, [r3, #0]
 800137e:	e003      	b.n	8001388 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001380:	230f      	movs	r3, #15
 8001382:	18fb      	adds	r3, r7, r3
 8001384:	2200      	movs	r2, #0
 8001386:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001388:	230f      	movs	r3, #15
 800138a:	18fb      	adds	r3, r7, r3
 800138c:	781b      	ldrb	r3, [r3, #0]
}
 800138e:	0018      	movs	r0, r3
 8001390:	46bd      	mov	sp, r7
 8001392:	b004      	add	sp, #16
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
 800139e:	0008      	movs	r0, r1
 80013a0:	0011      	movs	r1, r2
 80013a2:	1cbb      	adds	r3, r7, #2
 80013a4:	1c02      	adds	r2, r0, #0
 80013a6:	801a      	strh	r2, [r3, #0]
 80013a8:	1c7b      	adds	r3, r7, #1
 80013aa:	1c0a      	adds	r2, r1, #0
 80013ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013ae:	1c7b      	adds	r3, r7, #1
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d004      	beq.n	80013c0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013b6:	1cbb      	adds	r3, r7, #2
 80013b8:	881a      	ldrh	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80013be:	e003      	b.n	80013c8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80013c0:	1cbb      	adds	r3, r7, #2
 80013c2:	881a      	ldrh	r2, [r3, #0]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80013c8:	46c0      	nop			@ (mov r8, r8)
 80013ca:	46bd      	mov	sp, r7
 80013cc:	b002      	add	sp, #8
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	0002      	movs	r2, r0
 80013d8:	1dbb      	adds	r3, r7, #6
 80013da:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80013dc:	4b09      	ldr	r3, [pc, #36]	@ (8001404 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80013de:	695b      	ldr	r3, [r3, #20]
 80013e0:	1dba      	adds	r2, r7, #6
 80013e2:	8812      	ldrh	r2, [r2, #0]
 80013e4:	4013      	ands	r3, r2
 80013e6:	d008      	beq.n	80013fa <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013e8:	4b06      	ldr	r3, [pc, #24]	@ (8001404 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80013ea:	1dba      	adds	r2, r7, #6
 80013ec:	8812      	ldrh	r2, [r2, #0]
 80013ee:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013f0:	1dbb      	adds	r3, r7, #6
 80013f2:	881b      	ldrh	r3, [r3, #0]
 80013f4:	0018      	movs	r0, r3
 80013f6:	f7ff fb17 	bl	8000a28 <HAL_GPIO_EXTI_Callback>
  }
}
 80013fa:	46c0      	nop			@ (mov r8, r8)
 80013fc:	46bd      	mov	sp, r7
 80013fe:	b002      	add	sp, #8
 8001400:	bd80      	pop	{r7, pc}
 8001402:	46c0      	nop			@ (mov r8, r8)
 8001404:	40010400 	.word	0x40010400

08001408 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d101      	bne.n	800141a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e082      	b.n	8001520 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2241      	movs	r2, #65	@ 0x41
 800141e:	5c9b      	ldrb	r3, [r3, r2]
 8001420:	b2db      	uxtb	r3, r3
 8001422:	2b00      	cmp	r3, #0
 8001424:	d107      	bne.n	8001436 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2240      	movs	r2, #64	@ 0x40
 800142a:	2100      	movs	r1, #0
 800142c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	0018      	movs	r0, r3
 8001432:	f7ff fb2b 	bl	8000a8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2241      	movs	r2, #65	@ 0x41
 800143a:	2124      	movs	r1, #36	@ 0x24
 800143c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2101      	movs	r1, #1
 800144a:	438a      	bics	r2, r1
 800144c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685a      	ldr	r2, [r3, #4]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4934      	ldr	r1, [pc, #208]	@ (8001528 <HAL_I2C_Init+0x120>)
 8001458:	400a      	ands	r2, r1
 800145a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	689a      	ldr	r2, [r3, #8]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4931      	ldr	r1, [pc, #196]	@ (800152c <HAL_I2C_Init+0x124>)
 8001468:	400a      	ands	r2, r1
 800146a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d108      	bne.n	8001486 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689a      	ldr	r2, [r3, #8]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2180      	movs	r1, #128	@ 0x80
 800147e:	0209      	lsls	r1, r1, #8
 8001480:	430a      	orrs	r2, r1
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	e007      	b.n	8001496 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	689a      	ldr	r2, [r3, #8]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2184      	movs	r1, #132	@ 0x84
 8001490:	0209      	lsls	r1, r1, #8
 8001492:	430a      	orrs	r2, r1
 8001494:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	68db      	ldr	r3, [r3, #12]
 800149a:	2b02      	cmp	r3, #2
 800149c:	d104      	bne.n	80014a8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2280      	movs	r2, #128	@ 0x80
 80014a4:	0112      	lsls	r2, r2, #4
 80014a6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	685a      	ldr	r2, [r3, #4]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	491f      	ldr	r1, [pc, #124]	@ (8001530 <HAL_I2C_Init+0x128>)
 80014b4:	430a      	orrs	r2, r1
 80014b6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	68da      	ldr	r2, [r3, #12]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	491a      	ldr	r1, [pc, #104]	@ (800152c <HAL_I2C_Init+0x124>)
 80014c4:	400a      	ands	r2, r1
 80014c6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	691a      	ldr	r2, [r3, #16]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	695b      	ldr	r3, [r3, #20]
 80014d0:	431a      	orrs	r2, r3
 80014d2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	430a      	orrs	r2, r1
 80014e0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	69d9      	ldr	r1, [r3, #28]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6a1a      	ldr	r2, [r3, #32]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	430a      	orrs	r2, r1
 80014f0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2101      	movs	r1, #1
 80014fe:	430a      	orrs	r2, r1
 8001500:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2200      	movs	r2, #0
 8001506:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2241      	movs	r2, #65	@ 0x41
 800150c:	2120      	movs	r1, #32
 800150e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2242      	movs	r2, #66	@ 0x42
 800151a:	2100      	movs	r1, #0
 800151c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800151e:	2300      	movs	r3, #0
}
 8001520:	0018      	movs	r0, r3
 8001522:	46bd      	mov	sp, r7
 8001524:	b002      	add	sp, #8
 8001526:	bd80      	pop	{r7, pc}
 8001528:	f0ffffff 	.word	0xf0ffffff
 800152c:	ffff7fff 	.word	0xffff7fff
 8001530:	02008000 	.word	0x02008000

08001534 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2241      	movs	r2, #65	@ 0x41
 8001542:	5c9b      	ldrb	r3, [r3, r2]
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b20      	cmp	r3, #32
 8001548:	d138      	bne.n	80015bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2240      	movs	r2, #64	@ 0x40
 800154e:	5c9b      	ldrb	r3, [r3, r2]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d101      	bne.n	8001558 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001554:	2302      	movs	r3, #2
 8001556:	e032      	b.n	80015be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2240      	movs	r2, #64	@ 0x40
 800155c:	2101      	movs	r1, #1
 800155e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2241      	movs	r2, #65	@ 0x41
 8001564:	2124      	movs	r1, #36	@ 0x24
 8001566:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2101      	movs	r1, #1
 8001574:	438a      	bics	r2, r1
 8001576:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4911      	ldr	r1, [pc, #68]	@ (80015c8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001584:	400a      	ands	r2, r1
 8001586:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6819      	ldr	r1, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	683a      	ldr	r2, [r7, #0]
 8001594:	430a      	orrs	r2, r1
 8001596:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2101      	movs	r1, #1
 80015a4:	430a      	orrs	r2, r1
 80015a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2241      	movs	r2, #65	@ 0x41
 80015ac:	2120      	movs	r1, #32
 80015ae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2240      	movs	r2, #64	@ 0x40
 80015b4:	2100      	movs	r1, #0
 80015b6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80015b8:	2300      	movs	r3, #0
 80015ba:	e000      	b.n	80015be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80015bc:	2302      	movs	r3, #2
  }
}
 80015be:	0018      	movs	r0, r3
 80015c0:	46bd      	mov	sp, r7
 80015c2:	b002      	add	sp, #8
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	46c0      	nop			@ (mov r8, r8)
 80015c8:	ffffefff 	.word	0xffffefff

080015cc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2241      	movs	r2, #65	@ 0x41
 80015da:	5c9b      	ldrb	r3, [r3, r2]
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2b20      	cmp	r3, #32
 80015e0:	d139      	bne.n	8001656 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2240      	movs	r2, #64	@ 0x40
 80015e6:	5c9b      	ldrb	r3, [r3, r2]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d101      	bne.n	80015f0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80015ec:	2302      	movs	r3, #2
 80015ee:	e033      	b.n	8001658 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2240      	movs	r2, #64	@ 0x40
 80015f4:	2101      	movs	r1, #1
 80015f6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2241      	movs	r2, #65	@ 0x41
 80015fc:	2124      	movs	r1, #36	@ 0x24
 80015fe:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2101      	movs	r1, #1
 800160c:	438a      	bics	r2, r1
 800160e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	4a11      	ldr	r2, [pc, #68]	@ (8001660 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800161c:	4013      	ands	r3, r2
 800161e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	021b      	lsls	r3, r3, #8
 8001624:	68fa      	ldr	r2, [r7, #12]
 8001626:	4313      	orrs	r3, r2
 8001628:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2101      	movs	r1, #1
 800163e:	430a      	orrs	r2, r1
 8001640:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2241      	movs	r2, #65	@ 0x41
 8001646:	2120      	movs	r1, #32
 8001648:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2240      	movs	r2, #64	@ 0x40
 800164e:	2100      	movs	r1, #0
 8001650:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001652:	2300      	movs	r3, #0
 8001654:	e000      	b.n	8001658 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001656:	2302      	movs	r3, #2
  }
}
 8001658:	0018      	movs	r0, r3
 800165a:	46bd      	mov	sp, r7
 800165c:	b004      	add	sp, #16
 800165e:	bd80      	pop	{r7, pc}
 8001660:	fffff0ff 	.word	0xfffff0ff

08001664 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001664:	b5b0      	push	{r4, r5, r7, lr}
 8001666:	b08a      	sub	sp, #40	@ 0x28
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d102      	bne.n	8001678 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	f000 fbaf 	bl	8001dd6 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001678:	4bcf      	ldr	r3, [pc, #828]	@ (80019b8 <HAL_RCC_OscConfig+0x354>)
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	220c      	movs	r2, #12
 800167e:	4013      	ands	r3, r2
 8001680:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001682:	4bcd      	ldr	r3, [pc, #820]	@ (80019b8 <HAL_RCC_OscConfig+0x354>)
 8001684:	68da      	ldr	r2, [r3, #12]
 8001686:	2380      	movs	r3, #128	@ 0x80
 8001688:	025b      	lsls	r3, r3, #9
 800168a:	4013      	ands	r3, r2
 800168c:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2201      	movs	r2, #1
 8001694:	4013      	ands	r3, r2
 8001696:	d100      	bne.n	800169a <HAL_RCC_OscConfig+0x36>
 8001698:	e07e      	b.n	8001798 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800169a:	6a3b      	ldr	r3, [r7, #32]
 800169c:	2b08      	cmp	r3, #8
 800169e:	d007      	beq.n	80016b0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80016a0:	6a3b      	ldr	r3, [r7, #32]
 80016a2:	2b0c      	cmp	r3, #12
 80016a4:	d112      	bne.n	80016cc <HAL_RCC_OscConfig+0x68>
 80016a6:	69fa      	ldr	r2, [r7, #28]
 80016a8:	2380      	movs	r3, #128	@ 0x80
 80016aa:	025b      	lsls	r3, r3, #9
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d10d      	bne.n	80016cc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b0:	4bc1      	ldr	r3, [pc, #772]	@ (80019b8 <HAL_RCC_OscConfig+0x354>)
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	2380      	movs	r3, #128	@ 0x80
 80016b6:	029b      	lsls	r3, r3, #10
 80016b8:	4013      	ands	r3, r2
 80016ba:	d100      	bne.n	80016be <HAL_RCC_OscConfig+0x5a>
 80016bc:	e06b      	b.n	8001796 <HAL_RCC_OscConfig+0x132>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d167      	bne.n	8001796 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	f000 fb85 	bl	8001dd6 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685a      	ldr	r2, [r3, #4]
 80016d0:	2380      	movs	r3, #128	@ 0x80
 80016d2:	025b      	lsls	r3, r3, #9
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d107      	bne.n	80016e8 <HAL_RCC_OscConfig+0x84>
 80016d8:	4bb7      	ldr	r3, [pc, #732]	@ (80019b8 <HAL_RCC_OscConfig+0x354>)
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	4bb6      	ldr	r3, [pc, #728]	@ (80019b8 <HAL_RCC_OscConfig+0x354>)
 80016de:	2180      	movs	r1, #128	@ 0x80
 80016e0:	0249      	lsls	r1, r1, #9
 80016e2:	430a      	orrs	r2, r1
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	e027      	b.n	8001738 <HAL_RCC_OscConfig+0xd4>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685a      	ldr	r2, [r3, #4]
 80016ec:	23a0      	movs	r3, #160	@ 0xa0
 80016ee:	02db      	lsls	r3, r3, #11
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d10e      	bne.n	8001712 <HAL_RCC_OscConfig+0xae>
 80016f4:	4bb0      	ldr	r3, [pc, #704]	@ (80019b8 <HAL_RCC_OscConfig+0x354>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	4baf      	ldr	r3, [pc, #700]	@ (80019b8 <HAL_RCC_OscConfig+0x354>)
 80016fa:	2180      	movs	r1, #128	@ 0x80
 80016fc:	02c9      	lsls	r1, r1, #11
 80016fe:	430a      	orrs	r2, r1
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	4bad      	ldr	r3, [pc, #692]	@ (80019b8 <HAL_RCC_OscConfig+0x354>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	4bac      	ldr	r3, [pc, #688]	@ (80019b8 <HAL_RCC_OscConfig+0x354>)
 8001708:	2180      	movs	r1, #128	@ 0x80
 800170a:	0249      	lsls	r1, r1, #9
 800170c:	430a      	orrs	r2, r1
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	e012      	b.n	8001738 <HAL_RCC_OscConfig+0xd4>
 8001712:	4ba9      	ldr	r3, [pc, #676]	@ (80019b8 <HAL_RCC_OscConfig+0x354>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	4ba8      	ldr	r3, [pc, #672]	@ (80019b8 <HAL_RCC_OscConfig+0x354>)
 8001718:	49a8      	ldr	r1, [pc, #672]	@ (80019bc <HAL_RCC_OscConfig+0x358>)
 800171a:	400a      	ands	r2, r1
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	4ba6      	ldr	r3, [pc, #664]	@ (80019b8 <HAL_RCC_OscConfig+0x354>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	2380      	movs	r3, #128	@ 0x80
 8001724:	025b      	lsls	r3, r3, #9
 8001726:	4013      	ands	r3, r2
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	4ba2      	ldr	r3, [pc, #648]	@ (80019b8 <HAL_RCC_OscConfig+0x354>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	4ba1      	ldr	r3, [pc, #644]	@ (80019b8 <HAL_RCC_OscConfig+0x354>)
 8001732:	49a3      	ldr	r1, [pc, #652]	@ (80019c0 <HAL_RCC_OscConfig+0x35c>)
 8001734:	400a      	ands	r2, r1
 8001736:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d015      	beq.n	800176c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001740:	f7ff fb8a 	bl	8000e58 <HAL_GetTick>
 8001744:	0003      	movs	r3, r0
 8001746:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001748:	e009      	b.n	800175e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800174a:	f7ff fb85 	bl	8000e58 <HAL_GetTick>
 800174e:	0002      	movs	r2, r0
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b64      	cmp	r3, #100	@ 0x64
 8001756:	d902      	bls.n	800175e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	f000 fb3c 	bl	8001dd6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800175e:	4b96      	ldr	r3, [pc, #600]	@ (80019b8 <HAL_RCC_OscConfig+0x354>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	2380      	movs	r3, #128	@ 0x80
 8001764:	029b      	lsls	r3, r3, #10
 8001766:	4013      	ands	r3, r2
 8001768:	d0ef      	beq.n	800174a <HAL_RCC_OscConfig+0xe6>
 800176a:	e015      	b.n	8001798 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800176c:	f7ff fb74 	bl	8000e58 <HAL_GetTick>
 8001770:	0003      	movs	r3, r0
 8001772:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001774:	e008      	b.n	8001788 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001776:	f7ff fb6f 	bl	8000e58 <HAL_GetTick>
 800177a:	0002      	movs	r2, r0
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	2b64      	cmp	r3, #100	@ 0x64
 8001782:	d901      	bls.n	8001788 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	e326      	b.n	8001dd6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001788:	4b8b      	ldr	r3, [pc, #556]	@ (80019b8 <HAL_RCC_OscConfig+0x354>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	2380      	movs	r3, #128	@ 0x80
 800178e:	029b      	lsls	r3, r3, #10
 8001790:	4013      	ands	r3, r2
 8001792:	d1f0      	bne.n	8001776 <HAL_RCC_OscConfig+0x112>
 8001794:	e000      	b.n	8001798 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001796:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2202      	movs	r2, #2
 800179e:	4013      	ands	r3, r2
 80017a0:	d100      	bne.n	80017a4 <HAL_RCC_OscConfig+0x140>
 80017a2:	e08b      	b.n	80018bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017aa:	6a3b      	ldr	r3, [r7, #32]
 80017ac:	2b04      	cmp	r3, #4
 80017ae:	d005      	beq.n	80017bc <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017b0:	6a3b      	ldr	r3, [r7, #32]
 80017b2:	2b0c      	cmp	r3, #12
 80017b4:	d13e      	bne.n	8001834 <HAL_RCC_OscConfig+0x1d0>
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d13b      	bne.n	8001834 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80017bc:	4b7e      	ldr	r3, [pc, #504]	@ (80019b8 <HAL_RCC_OscConfig+0x354>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2204      	movs	r2, #4
 80017c2:	4013      	ands	r3, r2
 80017c4:	d004      	beq.n	80017d0 <HAL_RCC_OscConfig+0x16c>
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d101      	bne.n	80017d0 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e302      	b.n	8001dd6 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d0:	4b79      	ldr	r3, [pc, #484]	@ (80019b8 <HAL_RCC_OscConfig+0x354>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	4a7b      	ldr	r2, [pc, #492]	@ (80019c4 <HAL_RCC_OscConfig+0x360>)
 80017d6:	4013      	ands	r3, r2
 80017d8:	0019      	movs	r1, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	691b      	ldr	r3, [r3, #16]
 80017de:	021a      	lsls	r2, r3, #8
 80017e0:	4b75      	ldr	r3, [pc, #468]	@ (80019b8 <HAL_RCC_OscConfig+0x354>)
 80017e2:	430a      	orrs	r2, r1
 80017e4:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80017e6:	4b74      	ldr	r3, [pc, #464]	@ (80019b8 <HAL_RCC_OscConfig+0x354>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2209      	movs	r2, #9
 80017ec:	4393      	bics	r3, r2
 80017ee:	0019      	movs	r1, r3
 80017f0:	4b71      	ldr	r3, [pc, #452]	@ (80019b8 <HAL_RCC_OscConfig+0x354>)
 80017f2:	697a      	ldr	r2, [r7, #20]
 80017f4:	430a      	orrs	r2, r1
 80017f6:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017f8:	f000 fc40 	bl	800207c <HAL_RCC_GetSysClockFreq>
 80017fc:	0001      	movs	r1, r0
 80017fe:	4b6e      	ldr	r3, [pc, #440]	@ (80019b8 <HAL_RCC_OscConfig+0x354>)
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	091b      	lsrs	r3, r3, #4
 8001804:	220f      	movs	r2, #15
 8001806:	4013      	ands	r3, r2
 8001808:	4a6f      	ldr	r2, [pc, #444]	@ (80019c8 <HAL_RCC_OscConfig+0x364>)
 800180a:	5cd3      	ldrb	r3, [r2, r3]
 800180c:	000a      	movs	r2, r1
 800180e:	40da      	lsrs	r2, r3
 8001810:	4b6e      	ldr	r3, [pc, #440]	@ (80019cc <HAL_RCC_OscConfig+0x368>)
 8001812:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001814:	4b6e      	ldr	r3, [pc, #440]	@ (80019d0 <HAL_RCC_OscConfig+0x36c>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2513      	movs	r5, #19
 800181a:	197c      	adds	r4, r7, r5
 800181c:	0018      	movs	r0, r3
 800181e:	f7ff fad5 	bl	8000dcc <HAL_InitTick>
 8001822:	0003      	movs	r3, r0
 8001824:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001826:	197b      	adds	r3, r7, r5
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d046      	beq.n	80018bc <HAL_RCC_OscConfig+0x258>
      {
        return status;
 800182e:	197b      	adds	r3, r7, r5
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	e2d0      	b.n	8001dd6 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d027      	beq.n	800188a <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800183a:	4b5f      	ldr	r3, [pc, #380]	@ (80019b8 <HAL_RCC_OscConfig+0x354>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2209      	movs	r2, #9
 8001840:	4393      	bics	r3, r2
 8001842:	0019      	movs	r1, r3
 8001844:	4b5c      	ldr	r3, [pc, #368]	@ (80019b8 <HAL_RCC_OscConfig+0x354>)
 8001846:	697a      	ldr	r2, [r7, #20]
 8001848:	430a      	orrs	r2, r1
 800184a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800184c:	f7ff fb04 	bl	8000e58 <HAL_GetTick>
 8001850:	0003      	movs	r3, r0
 8001852:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001854:	e008      	b.n	8001868 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001856:	f7ff faff 	bl	8000e58 <HAL_GetTick>
 800185a:	0002      	movs	r2, r0
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e2b6      	b.n	8001dd6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001868:	4b53      	ldr	r3, [pc, #332]	@ (80019b8 <HAL_RCC_OscConfig+0x354>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2204      	movs	r2, #4
 800186e:	4013      	ands	r3, r2
 8001870:	d0f1      	beq.n	8001856 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001872:	4b51      	ldr	r3, [pc, #324]	@ (80019b8 <HAL_RCC_OscConfig+0x354>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	4a53      	ldr	r2, [pc, #332]	@ (80019c4 <HAL_RCC_OscConfig+0x360>)
 8001878:	4013      	ands	r3, r2
 800187a:	0019      	movs	r1, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	691b      	ldr	r3, [r3, #16]
 8001880:	021a      	lsls	r2, r3, #8
 8001882:	4b4d      	ldr	r3, [pc, #308]	@ (80019b8 <HAL_RCC_OscConfig+0x354>)
 8001884:	430a      	orrs	r2, r1
 8001886:	605a      	str	r2, [r3, #4]
 8001888:	e018      	b.n	80018bc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800188a:	4b4b      	ldr	r3, [pc, #300]	@ (80019b8 <HAL_RCC_OscConfig+0x354>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	4b4a      	ldr	r3, [pc, #296]	@ (80019b8 <HAL_RCC_OscConfig+0x354>)
 8001890:	2101      	movs	r1, #1
 8001892:	438a      	bics	r2, r1
 8001894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001896:	f7ff fadf 	bl	8000e58 <HAL_GetTick>
 800189a:	0003      	movs	r3, r0
 800189c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018a0:	f7ff fada 	bl	8000e58 <HAL_GetTick>
 80018a4:	0002      	movs	r2, r0
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e291      	b.n	8001dd6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80018b2:	4b41      	ldr	r3, [pc, #260]	@ (80019b8 <HAL_RCC_OscConfig+0x354>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2204      	movs	r2, #4
 80018b8:	4013      	ands	r3, r2
 80018ba:	d1f1      	bne.n	80018a0 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2210      	movs	r2, #16
 80018c2:	4013      	ands	r3, r2
 80018c4:	d100      	bne.n	80018c8 <HAL_RCC_OscConfig+0x264>
 80018c6:	e0a1      	b.n	8001a0c <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018c8:	6a3b      	ldr	r3, [r7, #32]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d140      	bne.n	8001950 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018ce:	4b3a      	ldr	r3, [pc, #232]	@ (80019b8 <HAL_RCC_OscConfig+0x354>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	2380      	movs	r3, #128	@ 0x80
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4013      	ands	r3, r2
 80018d8:	d005      	beq.n	80018e6 <HAL_RCC_OscConfig+0x282>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d101      	bne.n	80018e6 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e277      	b.n	8001dd6 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018e6:	4b34      	ldr	r3, [pc, #208]	@ (80019b8 <HAL_RCC_OscConfig+0x354>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	4a3a      	ldr	r2, [pc, #232]	@ (80019d4 <HAL_RCC_OscConfig+0x370>)
 80018ec:	4013      	ands	r3, r2
 80018ee:	0019      	movs	r1, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80018f4:	4b30      	ldr	r3, [pc, #192]	@ (80019b8 <HAL_RCC_OscConfig+0x354>)
 80018f6:	430a      	orrs	r2, r1
 80018f8:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018fa:	4b2f      	ldr	r3, [pc, #188]	@ (80019b8 <HAL_RCC_OscConfig+0x354>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	021b      	lsls	r3, r3, #8
 8001900:	0a19      	lsrs	r1, r3, #8
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a1b      	ldr	r3, [r3, #32]
 8001906:	061a      	lsls	r2, r3, #24
 8001908:	4b2b      	ldr	r3, [pc, #172]	@ (80019b8 <HAL_RCC_OscConfig+0x354>)
 800190a:	430a      	orrs	r2, r1
 800190c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001912:	0b5b      	lsrs	r3, r3, #13
 8001914:	3301      	adds	r3, #1
 8001916:	2280      	movs	r2, #128	@ 0x80
 8001918:	0212      	lsls	r2, r2, #8
 800191a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800191c:	4b26      	ldr	r3, [pc, #152]	@ (80019b8 <HAL_RCC_OscConfig+0x354>)
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	091b      	lsrs	r3, r3, #4
 8001922:	210f      	movs	r1, #15
 8001924:	400b      	ands	r3, r1
 8001926:	4928      	ldr	r1, [pc, #160]	@ (80019c8 <HAL_RCC_OscConfig+0x364>)
 8001928:	5ccb      	ldrb	r3, [r1, r3]
 800192a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800192c:	4b27      	ldr	r3, [pc, #156]	@ (80019cc <HAL_RCC_OscConfig+0x368>)
 800192e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001930:	4b27      	ldr	r3, [pc, #156]	@ (80019d0 <HAL_RCC_OscConfig+0x36c>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2513      	movs	r5, #19
 8001936:	197c      	adds	r4, r7, r5
 8001938:	0018      	movs	r0, r3
 800193a:	f7ff fa47 	bl	8000dcc <HAL_InitTick>
 800193e:	0003      	movs	r3, r0
 8001940:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001942:	197b      	adds	r3, r7, r5
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d060      	beq.n	8001a0c <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 800194a:	197b      	adds	r3, r7, r5
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	e242      	b.n	8001dd6 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	69db      	ldr	r3, [r3, #28]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d03f      	beq.n	80019d8 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001958:	4b17      	ldr	r3, [pc, #92]	@ (80019b8 <HAL_RCC_OscConfig+0x354>)
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	4b16      	ldr	r3, [pc, #88]	@ (80019b8 <HAL_RCC_OscConfig+0x354>)
 800195e:	2180      	movs	r1, #128	@ 0x80
 8001960:	0049      	lsls	r1, r1, #1
 8001962:	430a      	orrs	r2, r1
 8001964:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001966:	f7ff fa77 	bl	8000e58 <HAL_GetTick>
 800196a:	0003      	movs	r3, r0
 800196c:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800196e:	e008      	b.n	8001982 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001970:	f7ff fa72 	bl	8000e58 <HAL_GetTick>
 8001974:	0002      	movs	r2, r0
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e229      	b.n	8001dd6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001982:	4b0d      	ldr	r3, [pc, #52]	@ (80019b8 <HAL_RCC_OscConfig+0x354>)
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	2380      	movs	r3, #128	@ 0x80
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	4013      	ands	r3, r2
 800198c:	d0f0      	beq.n	8001970 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800198e:	4b0a      	ldr	r3, [pc, #40]	@ (80019b8 <HAL_RCC_OscConfig+0x354>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	4a10      	ldr	r2, [pc, #64]	@ (80019d4 <HAL_RCC_OscConfig+0x370>)
 8001994:	4013      	ands	r3, r2
 8001996:	0019      	movs	r1, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800199c:	4b06      	ldr	r3, [pc, #24]	@ (80019b8 <HAL_RCC_OscConfig+0x354>)
 800199e:	430a      	orrs	r2, r1
 80019a0:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019a2:	4b05      	ldr	r3, [pc, #20]	@ (80019b8 <HAL_RCC_OscConfig+0x354>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	021b      	lsls	r3, r3, #8
 80019a8:	0a19      	lsrs	r1, r3, #8
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a1b      	ldr	r3, [r3, #32]
 80019ae:	061a      	lsls	r2, r3, #24
 80019b0:	4b01      	ldr	r3, [pc, #4]	@ (80019b8 <HAL_RCC_OscConfig+0x354>)
 80019b2:	430a      	orrs	r2, r1
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	e029      	b.n	8001a0c <HAL_RCC_OscConfig+0x3a8>
 80019b8:	40021000 	.word	0x40021000
 80019bc:	fffeffff 	.word	0xfffeffff
 80019c0:	fffbffff 	.word	0xfffbffff
 80019c4:	ffffe0ff 	.word	0xffffe0ff
 80019c8:	080040c8 	.word	0x080040c8
 80019cc:	20000000 	.word	0x20000000
 80019d0:	20000004 	.word	0x20000004
 80019d4:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80019d8:	4bbd      	ldr	r3, [pc, #756]	@ (8001cd0 <HAL_RCC_OscConfig+0x66c>)
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	4bbc      	ldr	r3, [pc, #752]	@ (8001cd0 <HAL_RCC_OscConfig+0x66c>)
 80019de:	49bd      	ldr	r1, [pc, #756]	@ (8001cd4 <HAL_RCC_OscConfig+0x670>)
 80019e0:	400a      	ands	r2, r1
 80019e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e4:	f7ff fa38 	bl	8000e58 <HAL_GetTick>
 80019e8:	0003      	movs	r3, r0
 80019ea:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80019ec:	e008      	b.n	8001a00 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019ee:	f7ff fa33 	bl	8000e58 <HAL_GetTick>
 80019f2:	0002      	movs	r2, r0
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e1ea      	b.n	8001dd6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001a00:	4bb3      	ldr	r3, [pc, #716]	@ (8001cd0 <HAL_RCC_OscConfig+0x66c>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	2380      	movs	r3, #128	@ 0x80
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	4013      	ands	r3, r2
 8001a0a:	d1f0      	bne.n	80019ee <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2208      	movs	r2, #8
 8001a12:	4013      	ands	r3, r2
 8001a14:	d036      	beq.n	8001a84 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	695b      	ldr	r3, [r3, #20]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d019      	beq.n	8001a52 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a1e:	4bac      	ldr	r3, [pc, #688]	@ (8001cd0 <HAL_RCC_OscConfig+0x66c>)
 8001a20:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001a22:	4bab      	ldr	r3, [pc, #684]	@ (8001cd0 <HAL_RCC_OscConfig+0x66c>)
 8001a24:	2101      	movs	r1, #1
 8001a26:	430a      	orrs	r2, r1
 8001a28:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a2a:	f7ff fa15 	bl	8000e58 <HAL_GetTick>
 8001a2e:	0003      	movs	r3, r0
 8001a30:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a34:	f7ff fa10 	bl	8000e58 <HAL_GetTick>
 8001a38:	0002      	movs	r2, r0
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e1c7      	b.n	8001dd6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a46:	4ba2      	ldr	r3, [pc, #648]	@ (8001cd0 <HAL_RCC_OscConfig+0x66c>)
 8001a48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	d0f1      	beq.n	8001a34 <HAL_RCC_OscConfig+0x3d0>
 8001a50:	e018      	b.n	8001a84 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a52:	4b9f      	ldr	r3, [pc, #636]	@ (8001cd0 <HAL_RCC_OscConfig+0x66c>)
 8001a54:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001a56:	4b9e      	ldr	r3, [pc, #632]	@ (8001cd0 <HAL_RCC_OscConfig+0x66c>)
 8001a58:	2101      	movs	r1, #1
 8001a5a:	438a      	bics	r2, r1
 8001a5c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a5e:	f7ff f9fb 	bl	8000e58 <HAL_GetTick>
 8001a62:	0003      	movs	r3, r0
 8001a64:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a68:	f7ff f9f6 	bl	8000e58 <HAL_GetTick>
 8001a6c:	0002      	movs	r2, r0
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e1ad      	b.n	8001dd6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a7a:	4b95      	ldr	r3, [pc, #596]	@ (8001cd0 <HAL_RCC_OscConfig+0x66c>)
 8001a7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a7e:	2202      	movs	r2, #2
 8001a80:	4013      	ands	r3, r2
 8001a82:	d1f1      	bne.n	8001a68 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2204      	movs	r2, #4
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	d100      	bne.n	8001a90 <HAL_RCC_OscConfig+0x42c>
 8001a8e:	e0ae      	b.n	8001bee <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a90:	2027      	movs	r0, #39	@ 0x27
 8001a92:	183b      	adds	r3, r7, r0
 8001a94:	2200      	movs	r2, #0
 8001a96:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a98:	4b8d      	ldr	r3, [pc, #564]	@ (8001cd0 <HAL_RCC_OscConfig+0x66c>)
 8001a9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001a9c:	2380      	movs	r3, #128	@ 0x80
 8001a9e:	055b      	lsls	r3, r3, #21
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	d109      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aa4:	4b8a      	ldr	r3, [pc, #552]	@ (8001cd0 <HAL_RCC_OscConfig+0x66c>)
 8001aa6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001aa8:	4b89      	ldr	r3, [pc, #548]	@ (8001cd0 <HAL_RCC_OscConfig+0x66c>)
 8001aaa:	2180      	movs	r1, #128	@ 0x80
 8001aac:	0549      	lsls	r1, r1, #21
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001ab2:	183b      	adds	r3, r7, r0
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ab8:	4b87      	ldr	r3, [pc, #540]	@ (8001cd8 <HAL_RCC_OscConfig+0x674>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	2380      	movs	r3, #128	@ 0x80
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	d11a      	bne.n	8001afa <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ac4:	4b84      	ldr	r3, [pc, #528]	@ (8001cd8 <HAL_RCC_OscConfig+0x674>)
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	4b83      	ldr	r3, [pc, #524]	@ (8001cd8 <HAL_RCC_OscConfig+0x674>)
 8001aca:	2180      	movs	r1, #128	@ 0x80
 8001acc:	0049      	lsls	r1, r1, #1
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ad2:	f7ff f9c1 	bl	8000e58 <HAL_GetTick>
 8001ad6:	0003      	movs	r3, r0
 8001ad8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001adc:	f7ff f9bc 	bl	8000e58 <HAL_GetTick>
 8001ae0:	0002      	movs	r2, r0
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b64      	cmp	r3, #100	@ 0x64
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e173      	b.n	8001dd6 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aee:	4b7a      	ldr	r3, [pc, #488]	@ (8001cd8 <HAL_RCC_OscConfig+0x674>)
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	2380      	movs	r3, #128	@ 0x80
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	4013      	ands	r3, r2
 8001af8:	d0f0      	beq.n	8001adc <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689a      	ldr	r2, [r3, #8]
 8001afe:	2380      	movs	r3, #128	@ 0x80
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d107      	bne.n	8001b16 <HAL_RCC_OscConfig+0x4b2>
 8001b06:	4b72      	ldr	r3, [pc, #456]	@ (8001cd0 <HAL_RCC_OscConfig+0x66c>)
 8001b08:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b0a:	4b71      	ldr	r3, [pc, #452]	@ (8001cd0 <HAL_RCC_OscConfig+0x66c>)
 8001b0c:	2180      	movs	r1, #128	@ 0x80
 8001b0e:	0049      	lsls	r1, r1, #1
 8001b10:	430a      	orrs	r2, r1
 8001b12:	651a      	str	r2, [r3, #80]	@ 0x50
 8001b14:	e031      	b.n	8001b7a <HAL_RCC_OscConfig+0x516>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d10c      	bne.n	8001b38 <HAL_RCC_OscConfig+0x4d4>
 8001b1e:	4b6c      	ldr	r3, [pc, #432]	@ (8001cd0 <HAL_RCC_OscConfig+0x66c>)
 8001b20:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b22:	4b6b      	ldr	r3, [pc, #428]	@ (8001cd0 <HAL_RCC_OscConfig+0x66c>)
 8001b24:	496b      	ldr	r1, [pc, #428]	@ (8001cd4 <HAL_RCC_OscConfig+0x670>)
 8001b26:	400a      	ands	r2, r1
 8001b28:	651a      	str	r2, [r3, #80]	@ 0x50
 8001b2a:	4b69      	ldr	r3, [pc, #420]	@ (8001cd0 <HAL_RCC_OscConfig+0x66c>)
 8001b2c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b2e:	4b68      	ldr	r3, [pc, #416]	@ (8001cd0 <HAL_RCC_OscConfig+0x66c>)
 8001b30:	496a      	ldr	r1, [pc, #424]	@ (8001cdc <HAL_RCC_OscConfig+0x678>)
 8001b32:	400a      	ands	r2, r1
 8001b34:	651a      	str	r2, [r3, #80]	@ 0x50
 8001b36:	e020      	b.n	8001b7a <HAL_RCC_OscConfig+0x516>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689a      	ldr	r2, [r3, #8]
 8001b3c:	23a0      	movs	r3, #160	@ 0xa0
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d10e      	bne.n	8001b62 <HAL_RCC_OscConfig+0x4fe>
 8001b44:	4b62      	ldr	r3, [pc, #392]	@ (8001cd0 <HAL_RCC_OscConfig+0x66c>)
 8001b46:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b48:	4b61      	ldr	r3, [pc, #388]	@ (8001cd0 <HAL_RCC_OscConfig+0x66c>)
 8001b4a:	2180      	movs	r1, #128	@ 0x80
 8001b4c:	00c9      	lsls	r1, r1, #3
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	651a      	str	r2, [r3, #80]	@ 0x50
 8001b52:	4b5f      	ldr	r3, [pc, #380]	@ (8001cd0 <HAL_RCC_OscConfig+0x66c>)
 8001b54:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b56:	4b5e      	ldr	r3, [pc, #376]	@ (8001cd0 <HAL_RCC_OscConfig+0x66c>)
 8001b58:	2180      	movs	r1, #128	@ 0x80
 8001b5a:	0049      	lsls	r1, r1, #1
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	651a      	str	r2, [r3, #80]	@ 0x50
 8001b60:	e00b      	b.n	8001b7a <HAL_RCC_OscConfig+0x516>
 8001b62:	4b5b      	ldr	r3, [pc, #364]	@ (8001cd0 <HAL_RCC_OscConfig+0x66c>)
 8001b64:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b66:	4b5a      	ldr	r3, [pc, #360]	@ (8001cd0 <HAL_RCC_OscConfig+0x66c>)
 8001b68:	495a      	ldr	r1, [pc, #360]	@ (8001cd4 <HAL_RCC_OscConfig+0x670>)
 8001b6a:	400a      	ands	r2, r1
 8001b6c:	651a      	str	r2, [r3, #80]	@ 0x50
 8001b6e:	4b58      	ldr	r3, [pc, #352]	@ (8001cd0 <HAL_RCC_OscConfig+0x66c>)
 8001b70:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001b72:	4b57      	ldr	r3, [pc, #348]	@ (8001cd0 <HAL_RCC_OscConfig+0x66c>)
 8001b74:	4959      	ldr	r1, [pc, #356]	@ (8001cdc <HAL_RCC_OscConfig+0x678>)
 8001b76:	400a      	ands	r2, r1
 8001b78:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d015      	beq.n	8001bae <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b82:	f7ff f969 	bl	8000e58 <HAL_GetTick>
 8001b86:	0003      	movs	r3, r0
 8001b88:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b8a:	e009      	b.n	8001ba0 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b8c:	f7ff f964 	bl	8000e58 <HAL_GetTick>
 8001b90:	0002      	movs	r2, r0
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	4a52      	ldr	r2, [pc, #328]	@ (8001ce0 <HAL_RCC_OscConfig+0x67c>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e11a      	b.n	8001dd6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ba0:	4b4b      	ldr	r3, [pc, #300]	@ (8001cd0 <HAL_RCC_OscConfig+0x66c>)
 8001ba2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001ba4:	2380      	movs	r3, #128	@ 0x80
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	4013      	ands	r3, r2
 8001baa:	d0ef      	beq.n	8001b8c <HAL_RCC_OscConfig+0x528>
 8001bac:	e014      	b.n	8001bd8 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bae:	f7ff f953 	bl	8000e58 <HAL_GetTick>
 8001bb2:	0003      	movs	r3, r0
 8001bb4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001bb6:	e009      	b.n	8001bcc <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bb8:	f7ff f94e 	bl	8000e58 <HAL_GetTick>
 8001bbc:	0002      	movs	r2, r0
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	4a47      	ldr	r2, [pc, #284]	@ (8001ce0 <HAL_RCC_OscConfig+0x67c>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d901      	bls.n	8001bcc <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e104      	b.n	8001dd6 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001bcc:	4b40      	ldr	r3, [pc, #256]	@ (8001cd0 <HAL_RCC_OscConfig+0x66c>)
 8001bce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001bd0:	2380      	movs	r3, #128	@ 0x80
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	d1ef      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001bd8:	2327      	movs	r3, #39	@ 0x27
 8001bda:	18fb      	adds	r3, r7, r3
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d105      	bne.n	8001bee <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001be2:	4b3b      	ldr	r3, [pc, #236]	@ (8001cd0 <HAL_RCC_OscConfig+0x66c>)
 8001be4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001be6:	4b3a      	ldr	r3, [pc, #232]	@ (8001cd0 <HAL_RCC_OscConfig+0x66c>)
 8001be8:	493e      	ldr	r1, [pc, #248]	@ (8001ce4 <HAL_RCC_OscConfig+0x680>)
 8001bea:	400a      	ands	r2, r1
 8001bec:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2220      	movs	r2, #32
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	d049      	beq.n	8001c8c <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d026      	beq.n	8001c4e <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001c00:	4b33      	ldr	r3, [pc, #204]	@ (8001cd0 <HAL_RCC_OscConfig+0x66c>)
 8001c02:	689a      	ldr	r2, [r3, #8]
 8001c04:	4b32      	ldr	r3, [pc, #200]	@ (8001cd0 <HAL_RCC_OscConfig+0x66c>)
 8001c06:	2101      	movs	r1, #1
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	4b30      	ldr	r3, [pc, #192]	@ (8001cd0 <HAL_RCC_OscConfig+0x66c>)
 8001c0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c10:	4b2f      	ldr	r3, [pc, #188]	@ (8001cd0 <HAL_RCC_OscConfig+0x66c>)
 8001c12:	2101      	movs	r1, #1
 8001c14:	430a      	orrs	r2, r1
 8001c16:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c18:	4b33      	ldr	r3, [pc, #204]	@ (8001ce8 <HAL_RCC_OscConfig+0x684>)
 8001c1a:	6a1a      	ldr	r2, [r3, #32]
 8001c1c:	4b32      	ldr	r3, [pc, #200]	@ (8001ce8 <HAL_RCC_OscConfig+0x684>)
 8001c1e:	2180      	movs	r1, #128	@ 0x80
 8001c20:	0189      	lsls	r1, r1, #6
 8001c22:	430a      	orrs	r2, r1
 8001c24:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c26:	f7ff f917 	bl	8000e58 <HAL_GetTick>
 8001c2a:	0003      	movs	r3, r0
 8001c2c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c30:	f7ff f912 	bl	8000e58 <HAL_GetTick>
 8001c34:	0002      	movs	r2, r0
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e0c9      	b.n	8001dd6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c42:	4b23      	ldr	r3, [pc, #140]	@ (8001cd0 <HAL_RCC_OscConfig+0x66c>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	2202      	movs	r2, #2
 8001c48:	4013      	ands	r3, r2
 8001c4a:	d0f1      	beq.n	8001c30 <HAL_RCC_OscConfig+0x5cc>
 8001c4c:	e01e      	b.n	8001c8c <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001c4e:	4b20      	ldr	r3, [pc, #128]	@ (8001cd0 <HAL_RCC_OscConfig+0x66c>)
 8001c50:	689a      	ldr	r2, [r3, #8]
 8001c52:	4b1f      	ldr	r3, [pc, #124]	@ (8001cd0 <HAL_RCC_OscConfig+0x66c>)
 8001c54:	2101      	movs	r1, #1
 8001c56:	438a      	bics	r2, r1
 8001c58:	609a      	str	r2, [r3, #8]
 8001c5a:	4b23      	ldr	r3, [pc, #140]	@ (8001ce8 <HAL_RCC_OscConfig+0x684>)
 8001c5c:	6a1a      	ldr	r2, [r3, #32]
 8001c5e:	4b22      	ldr	r3, [pc, #136]	@ (8001ce8 <HAL_RCC_OscConfig+0x684>)
 8001c60:	4922      	ldr	r1, [pc, #136]	@ (8001cec <HAL_RCC_OscConfig+0x688>)
 8001c62:	400a      	ands	r2, r1
 8001c64:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c66:	f7ff f8f7 	bl	8000e58 <HAL_GetTick>
 8001c6a:	0003      	movs	r3, r0
 8001c6c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c70:	f7ff f8f2 	bl	8000e58 <HAL_GetTick>
 8001c74:	0002      	movs	r2, r0
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e0a9      	b.n	8001dd6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c82:	4b13      	ldr	r3, [pc, #76]	@ (8001cd0 <HAL_RCC_OscConfig+0x66c>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	2202      	movs	r2, #2
 8001c88:	4013      	ands	r3, r2
 8001c8a:	d1f1      	bne.n	8001c70 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d100      	bne.n	8001c96 <HAL_RCC_OscConfig+0x632>
 8001c94:	e09e      	b.n	8001dd4 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c96:	6a3b      	ldr	r3, [r7, #32]
 8001c98:	2b0c      	cmp	r3, #12
 8001c9a:	d100      	bne.n	8001c9e <HAL_RCC_OscConfig+0x63a>
 8001c9c:	e077      	b.n	8001d8e <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d158      	bne.n	8001d58 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd0 <HAL_RCC_OscConfig+0x66c>)
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	4b09      	ldr	r3, [pc, #36]	@ (8001cd0 <HAL_RCC_OscConfig+0x66c>)
 8001cac:	4910      	ldr	r1, [pc, #64]	@ (8001cf0 <HAL_RCC_OscConfig+0x68c>)
 8001cae:	400a      	ands	r2, r1
 8001cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb2:	f7ff f8d1 	bl	8000e58 <HAL_GetTick>
 8001cb6:	0003      	movs	r3, r0
 8001cb8:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001cba:	e01b      	b.n	8001cf4 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cbc:	f7ff f8cc 	bl	8000e58 <HAL_GetTick>
 8001cc0:	0002      	movs	r2, r0
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d914      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e083      	b.n	8001dd6 <HAL_RCC_OscConfig+0x772>
 8001cce:	46c0      	nop			@ (mov r8, r8)
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	fffffeff 	.word	0xfffffeff
 8001cd8:	40007000 	.word	0x40007000
 8001cdc:	fffffbff 	.word	0xfffffbff
 8001ce0:	00001388 	.word	0x00001388
 8001ce4:	efffffff 	.word	0xefffffff
 8001ce8:	40010000 	.word	0x40010000
 8001cec:	ffffdfff 	.word	0xffffdfff
 8001cf0:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001cf4:	4b3a      	ldr	r3, [pc, #232]	@ (8001de0 <HAL_RCC_OscConfig+0x77c>)
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	2380      	movs	r3, #128	@ 0x80
 8001cfa:	049b      	lsls	r3, r3, #18
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	d1dd      	bne.n	8001cbc <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d00:	4b37      	ldr	r3, [pc, #220]	@ (8001de0 <HAL_RCC_OscConfig+0x77c>)
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	4a37      	ldr	r2, [pc, #220]	@ (8001de4 <HAL_RCC_OscConfig+0x780>)
 8001d06:	4013      	ands	r3, r2
 8001d08:	0019      	movs	r1, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d12:	431a      	orrs	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d18:	431a      	orrs	r2, r3
 8001d1a:	4b31      	ldr	r3, [pc, #196]	@ (8001de0 <HAL_RCC_OscConfig+0x77c>)
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d20:	4b2f      	ldr	r3, [pc, #188]	@ (8001de0 <HAL_RCC_OscConfig+0x77c>)
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	4b2e      	ldr	r3, [pc, #184]	@ (8001de0 <HAL_RCC_OscConfig+0x77c>)
 8001d26:	2180      	movs	r1, #128	@ 0x80
 8001d28:	0449      	lsls	r1, r1, #17
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d2e:	f7ff f893 	bl	8000e58 <HAL_GetTick>
 8001d32:	0003      	movs	r3, r0
 8001d34:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d38:	f7ff f88e 	bl	8000e58 <HAL_GetTick>
 8001d3c:	0002      	movs	r2, r0
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e045      	b.n	8001dd6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001d4a:	4b25      	ldr	r3, [pc, #148]	@ (8001de0 <HAL_RCC_OscConfig+0x77c>)
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	2380      	movs	r3, #128	@ 0x80
 8001d50:	049b      	lsls	r3, r3, #18
 8001d52:	4013      	ands	r3, r2
 8001d54:	d0f0      	beq.n	8001d38 <HAL_RCC_OscConfig+0x6d4>
 8001d56:	e03d      	b.n	8001dd4 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d58:	4b21      	ldr	r3, [pc, #132]	@ (8001de0 <HAL_RCC_OscConfig+0x77c>)
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	4b20      	ldr	r3, [pc, #128]	@ (8001de0 <HAL_RCC_OscConfig+0x77c>)
 8001d5e:	4922      	ldr	r1, [pc, #136]	@ (8001de8 <HAL_RCC_OscConfig+0x784>)
 8001d60:	400a      	ands	r2, r1
 8001d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d64:	f7ff f878 	bl	8000e58 <HAL_GetTick>
 8001d68:	0003      	movs	r3, r0
 8001d6a:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001d6c:	e008      	b.n	8001d80 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d6e:	f7ff f873 	bl	8000e58 <HAL_GetTick>
 8001d72:	0002      	movs	r2, r0
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e02a      	b.n	8001dd6 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001d80:	4b17      	ldr	r3, [pc, #92]	@ (8001de0 <HAL_RCC_OscConfig+0x77c>)
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	2380      	movs	r3, #128	@ 0x80
 8001d86:	049b      	lsls	r3, r3, #18
 8001d88:	4013      	ands	r3, r2
 8001d8a:	d1f0      	bne.n	8001d6e <HAL_RCC_OscConfig+0x70a>
 8001d8c:	e022      	b.n	8001dd4 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d101      	bne.n	8001d9a <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e01d      	b.n	8001dd6 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d9a:	4b11      	ldr	r3, [pc, #68]	@ (8001de0 <HAL_RCC_OscConfig+0x77c>)
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001da0:	69fa      	ldr	r2, [r7, #28]
 8001da2:	2380      	movs	r3, #128	@ 0x80
 8001da4:	025b      	lsls	r3, r3, #9
 8001da6:	401a      	ands	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d10f      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001db0:	69fa      	ldr	r2, [r7, #28]
 8001db2:	23f0      	movs	r3, #240	@ 0xf0
 8001db4:	039b      	lsls	r3, r3, #14
 8001db6:	401a      	ands	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d107      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001dc0:	69fa      	ldr	r2, [r7, #28]
 8001dc2:	23c0      	movs	r3, #192	@ 0xc0
 8001dc4:	041b      	lsls	r3, r3, #16
 8001dc6:	401a      	ands	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d001      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e000      	b.n	8001dd6 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	0018      	movs	r0, r3
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	b00a      	add	sp, #40	@ 0x28
 8001ddc:	bdb0      	pop	{r4, r5, r7, pc}
 8001dde:	46c0      	nop			@ (mov r8, r8)
 8001de0:	40021000 	.word	0x40021000
 8001de4:	ff02ffff 	.word	0xff02ffff
 8001de8:	feffffff 	.word	0xfeffffff

08001dec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dec:	b5b0      	push	{r4, r5, r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d101      	bne.n	8001e00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e128      	b.n	8002052 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e00:	4b96      	ldr	r3, [pc, #600]	@ (800205c <HAL_RCC_ClockConfig+0x270>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2201      	movs	r2, #1
 8001e06:	4013      	ands	r3, r2
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d91e      	bls.n	8001e4c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e0e:	4b93      	ldr	r3, [pc, #588]	@ (800205c <HAL_RCC_ClockConfig+0x270>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2201      	movs	r2, #1
 8001e14:	4393      	bics	r3, r2
 8001e16:	0019      	movs	r1, r3
 8001e18:	4b90      	ldr	r3, [pc, #576]	@ (800205c <HAL_RCC_ClockConfig+0x270>)
 8001e1a:	683a      	ldr	r2, [r7, #0]
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e20:	f7ff f81a 	bl	8000e58 <HAL_GetTick>
 8001e24:	0003      	movs	r3, r0
 8001e26:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e28:	e009      	b.n	8001e3e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e2a:	f7ff f815 	bl	8000e58 <HAL_GetTick>
 8001e2e:	0002      	movs	r2, r0
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	4a8a      	ldr	r2, [pc, #552]	@ (8002060 <HAL_RCC_ClockConfig+0x274>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e109      	b.n	8002052 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e3e:	4b87      	ldr	r3, [pc, #540]	@ (800205c <HAL_RCC_ClockConfig+0x270>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2201      	movs	r2, #1
 8001e44:	4013      	ands	r3, r2
 8001e46:	683a      	ldr	r2, [r7, #0]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d1ee      	bne.n	8001e2a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2202      	movs	r2, #2
 8001e52:	4013      	ands	r3, r2
 8001e54:	d009      	beq.n	8001e6a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e56:	4b83      	ldr	r3, [pc, #524]	@ (8002064 <HAL_RCC_ClockConfig+0x278>)
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	22f0      	movs	r2, #240	@ 0xf0
 8001e5c:	4393      	bics	r3, r2
 8001e5e:	0019      	movs	r1, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689a      	ldr	r2, [r3, #8]
 8001e64:	4b7f      	ldr	r3, [pc, #508]	@ (8002064 <HAL_RCC_ClockConfig+0x278>)
 8001e66:	430a      	orrs	r2, r1
 8001e68:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	4013      	ands	r3, r2
 8001e72:	d100      	bne.n	8001e76 <HAL_RCC_ClockConfig+0x8a>
 8001e74:	e089      	b.n	8001f8a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d107      	bne.n	8001e8e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e7e:	4b79      	ldr	r3, [pc, #484]	@ (8002064 <HAL_RCC_ClockConfig+0x278>)
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	2380      	movs	r3, #128	@ 0x80
 8001e84:	029b      	lsls	r3, r3, #10
 8001e86:	4013      	ands	r3, r2
 8001e88:	d120      	bne.n	8001ecc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e0e1      	b.n	8002052 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	2b03      	cmp	r3, #3
 8001e94:	d107      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e96:	4b73      	ldr	r3, [pc, #460]	@ (8002064 <HAL_RCC_ClockConfig+0x278>)
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	2380      	movs	r3, #128	@ 0x80
 8001e9c:	049b      	lsls	r3, r3, #18
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	d114      	bne.n	8001ecc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e0d5      	b.n	8002052 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d106      	bne.n	8001ebc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001eae:	4b6d      	ldr	r3, [pc, #436]	@ (8002064 <HAL_RCC_ClockConfig+0x278>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2204      	movs	r2, #4
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	d109      	bne.n	8001ecc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e0ca      	b.n	8002052 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001ebc:	4b69      	ldr	r3, [pc, #420]	@ (8002064 <HAL_RCC_ClockConfig+0x278>)
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	2380      	movs	r3, #128	@ 0x80
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	d101      	bne.n	8001ecc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e0c2      	b.n	8002052 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ecc:	4b65      	ldr	r3, [pc, #404]	@ (8002064 <HAL_RCC_ClockConfig+0x278>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	2203      	movs	r2, #3
 8001ed2:	4393      	bics	r3, r2
 8001ed4:	0019      	movs	r1, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685a      	ldr	r2, [r3, #4]
 8001eda:	4b62      	ldr	r3, [pc, #392]	@ (8002064 <HAL_RCC_ClockConfig+0x278>)
 8001edc:	430a      	orrs	r2, r1
 8001ede:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ee0:	f7fe ffba 	bl	8000e58 <HAL_GetTick>
 8001ee4:	0003      	movs	r3, r0
 8001ee6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d111      	bne.n	8001f14 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ef0:	e009      	b.n	8001f06 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ef2:	f7fe ffb1 	bl	8000e58 <HAL_GetTick>
 8001ef6:	0002      	movs	r2, r0
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	4a58      	ldr	r2, [pc, #352]	@ (8002060 <HAL_RCC_ClockConfig+0x274>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e0a5      	b.n	8002052 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f06:	4b57      	ldr	r3, [pc, #348]	@ (8002064 <HAL_RCC_ClockConfig+0x278>)
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	220c      	movs	r2, #12
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	2b08      	cmp	r3, #8
 8001f10:	d1ef      	bne.n	8001ef2 <HAL_RCC_ClockConfig+0x106>
 8001f12:	e03a      	b.n	8001f8a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	2b03      	cmp	r3, #3
 8001f1a:	d111      	bne.n	8001f40 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f1c:	e009      	b.n	8001f32 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f1e:	f7fe ff9b 	bl	8000e58 <HAL_GetTick>
 8001f22:	0002      	movs	r2, r0
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	4a4d      	ldr	r2, [pc, #308]	@ (8002060 <HAL_RCC_ClockConfig+0x274>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e08f      	b.n	8002052 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f32:	4b4c      	ldr	r3, [pc, #304]	@ (8002064 <HAL_RCC_ClockConfig+0x278>)
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	220c      	movs	r2, #12
 8001f38:	4013      	ands	r3, r2
 8001f3a:	2b0c      	cmp	r3, #12
 8001f3c:	d1ef      	bne.n	8001f1e <HAL_RCC_ClockConfig+0x132>
 8001f3e:	e024      	b.n	8001f8a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d11b      	bne.n	8001f80 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f48:	e009      	b.n	8001f5e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f4a:	f7fe ff85 	bl	8000e58 <HAL_GetTick>
 8001f4e:	0002      	movs	r2, r0
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	4a42      	ldr	r2, [pc, #264]	@ (8002060 <HAL_RCC_ClockConfig+0x274>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e079      	b.n	8002052 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f5e:	4b41      	ldr	r3, [pc, #260]	@ (8002064 <HAL_RCC_ClockConfig+0x278>)
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	220c      	movs	r2, #12
 8001f64:	4013      	ands	r3, r2
 8001f66:	2b04      	cmp	r3, #4
 8001f68:	d1ef      	bne.n	8001f4a <HAL_RCC_ClockConfig+0x15e>
 8001f6a:	e00e      	b.n	8001f8a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f6c:	f7fe ff74 	bl	8000e58 <HAL_GetTick>
 8001f70:	0002      	movs	r2, r0
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	4a3a      	ldr	r2, [pc, #232]	@ (8002060 <HAL_RCC_ClockConfig+0x274>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e068      	b.n	8002052 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001f80:	4b38      	ldr	r3, [pc, #224]	@ (8002064 <HAL_RCC_ClockConfig+0x278>)
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	220c      	movs	r2, #12
 8001f86:	4013      	ands	r3, r2
 8001f88:	d1f0      	bne.n	8001f6c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f8a:	4b34      	ldr	r3, [pc, #208]	@ (800205c <HAL_RCC_ClockConfig+0x270>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	4013      	ands	r3, r2
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d21e      	bcs.n	8001fd6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f98:	4b30      	ldr	r3, [pc, #192]	@ (800205c <HAL_RCC_ClockConfig+0x270>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	4393      	bics	r3, r2
 8001fa0:	0019      	movs	r1, r3
 8001fa2:	4b2e      	ldr	r3, [pc, #184]	@ (800205c <HAL_RCC_ClockConfig+0x270>)
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001faa:	f7fe ff55 	bl	8000e58 <HAL_GetTick>
 8001fae:	0003      	movs	r3, r0
 8001fb0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb2:	e009      	b.n	8001fc8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fb4:	f7fe ff50 	bl	8000e58 <HAL_GetTick>
 8001fb8:	0002      	movs	r2, r0
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	4a28      	ldr	r2, [pc, #160]	@ (8002060 <HAL_RCC_ClockConfig+0x274>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d901      	bls.n	8001fc8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e044      	b.n	8002052 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc8:	4b24      	ldr	r3, [pc, #144]	@ (800205c <HAL_RCC_ClockConfig+0x270>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	4013      	ands	r3, r2
 8001fd0:	683a      	ldr	r2, [r7, #0]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d1ee      	bne.n	8001fb4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2204      	movs	r2, #4
 8001fdc:	4013      	ands	r3, r2
 8001fde:	d009      	beq.n	8001ff4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fe0:	4b20      	ldr	r3, [pc, #128]	@ (8002064 <HAL_RCC_ClockConfig+0x278>)
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	4a20      	ldr	r2, [pc, #128]	@ (8002068 <HAL_RCC_ClockConfig+0x27c>)
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	0019      	movs	r1, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	68da      	ldr	r2, [r3, #12]
 8001fee:	4b1d      	ldr	r3, [pc, #116]	@ (8002064 <HAL_RCC_ClockConfig+0x278>)
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2208      	movs	r2, #8
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	d00a      	beq.n	8002014 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ffe:	4b19      	ldr	r3, [pc, #100]	@ (8002064 <HAL_RCC_ClockConfig+0x278>)
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	4a1a      	ldr	r2, [pc, #104]	@ (800206c <HAL_RCC_ClockConfig+0x280>)
 8002004:	4013      	ands	r3, r2
 8002006:	0019      	movs	r1, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	00da      	lsls	r2, r3, #3
 800200e:	4b15      	ldr	r3, [pc, #84]	@ (8002064 <HAL_RCC_ClockConfig+0x278>)
 8002010:	430a      	orrs	r2, r1
 8002012:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002014:	f000 f832 	bl	800207c <HAL_RCC_GetSysClockFreq>
 8002018:	0001      	movs	r1, r0
 800201a:	4b12      	ldr	r3, [pc, #72]	@ (8002064 <HAL_RCC_ClockConfig+0x278>)
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	091b      	lsrs	r3, r3, #4
 8002020:	220f      	movs	r2, #15
 8002022:	4013      	ands	r3, r2
 8002024:	4a12      	ldr	r2, [pc, #72]	@ (8002070 <HAL_RCC_ClockConfig+0x284>)
 8002026:	5cd3      	ldrb	r3, [r2, r3]
 8002028:	000a      	movs	r2, r1
 800202a:	40da      	lsrs	r2, r3
 800202c:	4b11      	ldr	r3, [pc, #68]	@ (8002074 <HAL_RCC_ClockConfig+0x288>)
 800202e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002030:	4b11      	ldr	r3, [pc, #68]	@ (8002078 <HAL_RCC_ClockConfig+0x28c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	250b      	movs	r5, #11
 8002036:	197c      	adds	r4, r7, r5
 8002038:	0018      	movs	r0, r3
 800203a:	f7fe fec7 	bl	8000dcc <HAL_InitTick>
 800203e:	0003      	movs	r3, r0
 8002040:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002042:	197b      	adds	r3, r7, r5
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d002      	beq.n	8002050 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800204a:	197b      	adds	r3, r7, r5
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	e000      	b.n	8002052 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	0018      	movs	r0, r3
 8002054:	46bd      	mov	sp, r7
 8002056:	b004      	add	sp, #16
 8002058:	bdb0      	pop	{r4, r5, r7, pc}
 800205a:	46c0      	nop			@ (mov r8, r8)
 800205c:	40022000 	.word	0x40022000
 8002060:	00001388 	.word	0x00001388
 8002064:	40021000 	.word	0x40021000
 8002068:	fffff8ff 	.word	0xfffff8ff
 800206c:	ffffc7ff 	.word	0xffffc7ff
 8002070:	080040c8 	.word	0x080040c8
 8002074:	20000000 	.word	0x20000000
 8002078:	20000004 	.word	0x20000004

0800207c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800207c:	b5b0      	push	{r4, r5, r7, lr}
 800207e:	b08e      	sub	sp, #56	@ 0x38
 8002080:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002082:	4b4c      	ldr	r3, [pc, #304]	@ (80021b4 <HAL_RCC_GetSysClockFreq+0x138>)
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002088:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800208a:	230c      	movs	r3, #12
 800208c:	4013      	ands	r3, r2
 800208e:	2b0c      	cmp	r3, #12
 8002090:	d014      	beq.n	80020bc <HAL_RCC_GetSysClockFreq+0x40>
 8002092:	d900      	bls.n	8002096 <HAL_RCC_GetSysClockFreq+0x1a>
 8002094:	e07b      	b.n	800218e <HAL_RCC_GetSysClockFreq+0x112>
 8002096:	2b04      	cmp	r3, #4
 8002098:	d002      	beq.n	80020a0 <HAL_RCC_GetSysClockFreq+0x24>
 800209a:	2b08      	cmp	r3, #8
 800209c:	d00b      	beq.n	80020b6 <HAL_RCC_GetSysClockFreq+0x3a>
 800209e:	e076      	b.n	800218e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80020a0:	4b44      	ldr	r3, [pc, #272]	@ (80021b4 <HAL_RCC_GetSysClockFreq+0x138>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2210      	movs	r2, #16
 80020a6:	4013      	ands	r3, r2
 80020a8:	d002      	beq.n	80020b0 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80020aa:	4b43      	ldr	r3, [pc, #268]	@ (80021b8 <HAL_RCC_GetSysClockFreq+0x13c>)
 80020ac:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80020ae:	e07c      	b.n	80021aa <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80020b0:	4b42      	ldr	r3, [pc, #264]	@ (80021bc <HAL_RCC_GetSysClockFreq+0x140>)
 80020b2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80020b4:	e079      	b.n	80021aa <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020b6:	4b42      	ldr	r3, [pc, #264]	@ (80021c0 <HAL_RCC_GetSysClockFreq+0x144>)
 80020b8:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80020ba:	e076      	b.n	80021aa <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80020bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020be:	0c9a      	lsrs	r2, r3, #18
 80020c0:	230f      	movs	r3, #15
 80020c2:	401a      	ands	r2, r3
 80020c4:	4b3f      	ldr	r3, [pc, #252]	@ (80021c4 <HAL_RCC_GetSysClockFreq+0x148>)
 80020c6:	5c9b      	ldrb	r3, [r3, r2]
 80020c8:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80020ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020cc:	0d9a      	lsrs	r2, r3, #22
 80020ce:	2303      	movs	r3, #3
 80020d0:	4013      	ands	r3, r2
 80020d2:	3301      	adds	r3, #1
 80020d4:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020d6:	4b37      	ldr	r3, [pc, #220]	@ (80021b4 <HAL_RCC_GetSysClockFreq+0x138>)
 80020d8:	68da      	ldr	r2, [r3, #12]
 80020da:	2380      	movs	r3, #128	@ 0x80
 80020dc:	025b      	lsls	r3, r3, #9
 80020de:	4013      	ands	r3, r2
 80020e0:	d01a      	beq.n	8002118 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80020e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020e4:	61bb      	str	r3, [r7, #24]
 80020e6:	2300      	movs	r3, #0
 80020e8:	61fb      	str	r3, [r7, #28]
 80020ea:	4a35      	ldr	r2, [pc, #212]	@ (80021c0 <HAL_RCC_GetSysClockFreq+0x144>)
 80020ec:	2300      	movs	r3, #0
 80020ee:	69b8      	ldr	r0, [r7, #24]
 80020f0:	69f9      	ldr	r1, [r7, #28]
 80020f2:	f7fe f8bf 	bl	8000274 <__aeabi_lmul>
 80020f6:	0002      	movs	r2, r0
 80020f8:	000b      	movs	r3, r1
 80020fa:	0010      	movs	r0, r2
 80020fc:	0019      	movs	r1, r3
 80020fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002100:	613b      	str	r3, [r7, #16]
 8002102:	2300      	movs	r3, #0
 8002104:	617b      	str	r3, [r7, #20]
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	f7fe f893 	bl	8000234 <__aeabi_uldivmod>
 800210e:	0002      	movs	r2, r0
 8002110:	000b      	movs	r3, r1
 8002112:	0013      	movs	r3, r2
 8002114:	637b      	str	r3, [r7, #52]	@ 0x34
 8002116:	e037      	b.n	8002188 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002118:	4b26      	ldr	r3, [pc, #152]	@ (80021b4 <HAL_RCC_GetSysClockFreq+0x138>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2210      	movs	r2, #16
 800211e:	4013      	ands	r3, r2
 8002120:	d01a      	beq.n	8002158 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002124:	60bb      	str	r3, [r7, #8]
 8002126:	2300      	movs	r3, #0
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	4a23      	ldr	r2, [pc, #140]	@ (80021b8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800212c:	2300      	movs	r3, #0
 800212e:	68b8      	ldr	r0, [r7, #8]
 8002130:	68f9      	ldr	r1, [r7, #12]
 8002132:	f7fe f89f 	bl	8000274 <__aeabi_lmul>
 8002136:	0002      	movs	r2, r0
 8002138:	000b      	movs	r3, r1
 800213a:	0010      	movs	r0, r2
 800213c:	0019      	movs	r1, r3
 800213e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002140:	603b      	str	r3, [r7, #0]
 8002142:	2300      	movs	r3, #0
 8002144:	607b      	str	r3, [r7, #4]
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f7fe f873 	bl	8000234 <__aeabi_uldivmod>
 800214e:	0002      	movs	r2, r0
 8002150:	000b      	movs	r3, r1
 8002152:	0013      	movs	r3, r2
 8002154:	637b      	str	r3, [r7, #52]	@ 0x34
 8002156:	e017      	b.n	8002188 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800215a:	0018      	movs	r0, r3
 800215c:	2300      	movs	r3, #0
 800215e:	0019      	movs	r1, r3
 8002160:	4a16      	ldr	r2, [pc, #88]	@ (80021bc <HAL_RCC_GetSysClockFreq+0x140>)
 8002162:	2300      	movs	r3, #0
 8002164:	f7fe f886 	bl	8000274 <__aeabi_lmul>
 8002168:	0002      	movs	r2, r0
 800216a:	000b      	movs	r3, r1
 800216c:	0010      	movs	r0, r2
 800216e:	0019      	movs	r1, r3
 8002170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002172:	001c      	movs	r4, r3
 8002174:	2300      	movs	r3, #0
 8002176:	001d      	movs	r5, r3
 8002178:	0022      	movs	r2, r4
 800217a:	002b      	movs	r3, r5
 800217c:	f7fe f85a 	bl	8000234 <__aeabi_uldivmod>
 8002180:	0002      	movs	r2, r0
 8002182:	000b      	movs	r3, r1
 8002184:	0013      	movs	r3, r2
 8002186:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8002188:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800218a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800218c:	e00d      	b.n	80021aa <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800218e:	4b09      	ldr	r3, [pc, #36]	@ (80021b4 <HAL_RCC_GetSysClockFreq+0x138>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	0b5b      	lsrs	r3, r3, #13
 8002194:	2207      	movs	r2, #7
 8002196:	4013      	ands	r3, r2
 8002198:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800219a:	6a3b      	ldr	r3, [r7, #32]
 800219c:	3301      	adds	r3, #1
 800219e:	2280      	movs	r2, #128	@ 0x80
 80021a0:	0212      	lsls	r2, r2, #8
 80021a2:	409a      	lsls	r2, r3
 80021a4:	0013      	movs	r3, r2
 80021a6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80021a8:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80021aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80021ac:	0018      	movs	r0, r3
 80021ae:	46bd      	mov	sp, r7
 80021b0:	b00e      	add	sp, #56	@ 0x38
 80021b2:	bdb0      	pop	{r4, r5, r7, pc}
 80021b4:	40021000 	.word	0x40021000
 80021b8:	003d0900 	.word	0x003d0900
 80021bc:	00f42400 	.word	0x00f42400
 80021c0:	007a1200 	.word	0x007a1200
 80021c4:	080040e0 	.word	0x080040e0

080021c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021cc:	4b02      	ldr	r3, [pc, #8]	@ (80021d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80021ce:	681b      	ldr	r3, [r3, #0]
}
 80021d0:	0018      	movs	r0, r3
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	46c0      	nop			@ (mov r8, r8)
 80021d8:	20000000 	.word	0x20000000

080021dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021e0:	f7ff fff2 	bl	80021c8 <HAL_RCC_GetHCLKFreq>
 80021e4:	0001      	movs	r1, r0
 80021e6:	4b06      	ldr	r3, [pc, #24]	@ (8002200 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	0a1b      	lsrs	r3, r3, #8
 80021ec:	2207      	movs	r2, #7
 80021ee:	4013      	ands	r3, r2
 80021f0:	4a04      	ldr	r2, [pc, #16]	@ (8002204 <HAL_RCC_GetPCLK1Freq+0x28>)
 80021f2:	5cd3      	ldrb	r3, [r2, r3]
 80021f4:	40d9      	lsrs	r1, r3
 80021f6:	000b      	movs	r3, r1
}
 80021f8:	0018      	movs	r0, r3
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	46c0      	nop			@ (mov r8, r8)
 8002200:	40021000 	.word	0x40021000
 8002204:	080040d8 	.word	0x080040d8

08002208 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800220c:	f7ff ffdc 	bl	80021c8 <HAL_RCC_GetHCLKFreq>
 8002210:	0001      	movs	r1, r0
 8002212:	4b06      	ldr	r3, [pc, #24]	@ (800222c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	0adb      	lsrs	r3, r3, #11
 8002218:	2207      	movs	r2, #7
 800221a:	4013      	ands	r3, r2
 800221c:	4a04      	ldr	r2, [pc, #16]	@ (8002230 <HAL_RCC_GetPCLK2Freq+0x28>)
 800221e:	5cd3      	ldrb	r3, [r2, r3]
 8002220:	40d9      	lsrs	r1, r3
 8002222:	000b      	movs	r3, r1
}
 8002224:	0018      	movs	r0, r3
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	46c0      	nop			@ (mov r8, r8)
 800222c:	40021000 	.word	0x40021000
 8002230:	080040d8 	.word	0x080040d8

08002234 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800223c:	2317      	movs	r3, #23
 800223e:	18fb      	adds	r3, r7, r3
 8002240:	2200      	movs	r2, #0
 8002242:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2220      	movs	r2, #32
 800224a:	4013      	ands	r3, r2
 800224c:	d106      	bne.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	2380      	movs	r3, #128	@ 0x80
 8002254:	011b      	lsls	r3, r3, #4
 8002256:	4013      	ands	r3, r2
 8002258:	d100      	bne.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x28>
 800225a:	e104      	b.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800225c:	4bb1      	ldr	r3, [pc, #708]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800225e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002260:	2380      	movs	r3, #128	@ 0x80
 8002262:	055b      	lsls	r3, r3, #21
 8002264:	4013      	ands	r3, r2
 8002266:	d10a      	bne.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002268:	4bae      	ldr	r3, [pc, #696]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800226a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800226c:	4bad      	ldr	r3, [pc, #692]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800226e:	2180      	movs	r1, #128	@ 0x80
 8002270:	0549      	lsls	r1, r1, #21
 8002272:	430a      	orrs	r2, r1
 8002274:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002276:	2317      	movs	r3, #23
 8002278:	18fb      	adds	r3, r7, r3
 800227a:	2201      	movs	r2, #1
 800227c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800227e:	4baa      	ldr	r3, [pc, #680]	@ (8002528 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	2380      	movs	r3, #128	@ 0x80
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	4013      	ands	r3, r2
 8002288:	d11a      	bne.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800228a:	4ba7      	ldr	r3, [pc, #668]	@ (8002528 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	4ba6      	ldr	r3, [pc, #664]	@ (8002528 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002290:	2180      	movs	r1, #128	@ 0x80
 8002292:	0049      	lsls	r1, r1, #1
 8002294:	430a      	orrs	r2, r1
 8002296:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002298:	f7fe fdde 	bl	8000e58 <HAL_GetTick>
 800229c:	0003      	movs	r3, r0
 800229e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a0:	e008      	b.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022a2:	f7fe fdd9 	bl	8000e58 <HAL_GetTick>
 80022a6:	0002      	movs	r2, r0
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b64      	cmp	r3, #100	@ 0x64
 80022ae:	d901      	bls.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e133      	b.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b4:	4b9c      	ldr	r3, [pc, #624]	@ (8002528 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	2380      	movs	r3, #128	@ 0x80
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	4013      	ands	r3, r2
 80022be:	d0f0      	beq.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80022c0:	4b98      	ldr	r3, [pc, #608]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	23c0      	movs	r3, #192	@ 0xc0
 80022c6:	039b      	lsls	r3, r3, #14
 80022c8:	4013      	ands	r3, r2
 80022ca:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685a      	ldr	r2, [r3, #4]
 80022d0:	23c0      	movs	r3, #192	@ 0xc0
 80022d2:	039b      	lsls	r3, r3, #14
 80022d4:	4013      	ands	r3, r2
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d107      	bne.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	23c0      	movs	r3, #192	@ 0xc0
 80022e2:	039b      	lsls	r3, r3, #14
 80022e4:	4013      	ands	r3, r2
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d013      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685a      	ldr	r2, [r3, #4]
 80022f0:	23c0      	movs	r3, #192	@ 0xc0
 80022f2:	029b      	lsls	r3, r3, #10
 80022f4:	401a      	ands	r2, r3
 80022f6:	23c0      	movs	r3, #192	@ 0xc0
 80022f8:	029b      	lsls	r3, r3, #10
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d10a      	bne.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80022fe:	4b89      	ldr	r3, [pc, #548]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	2380      	movs	r3, #128	@ 0x80
 8002304:	029b      	lsls	r3, r3, #10
 8002306:	401a      	ands	r2, r3
 8002308:	2380      	movs	r3, #128	@ 0x80
 800230a:	029b      	lsls	r3, r3, #10
 800230c:	429a      	cmp	r2, r3
 800230e:	d101      	bne.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e103      	b.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002314:	4b83      	ldr	r3, [pc, #524]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002316:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002318:	23c0      	movs	r3, #192	@ 0xc0
 800231a:	029b      	lsls	r3, r3, #10
 800231c:	4013      	ands	r3, r2
 800231e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d049      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685a      	ldr	r2, [r3, #4]
 800232a:	23c0      	movs	r3, #192	@ 0xc0
 800232c:	029b      	lsls	r3, r3, #10
 800232e:	4013      	ands	r3, r2
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	429a      	cmp	r2, r3
 8002334:	d004      	beq.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2220      	movs	r2, #32
 800233c:	4013      	ands	r3, r2
 800233e:	d10d      	bne.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689a      	ldr	r2, [r3, #8]
 8002344:	23c0      	movs	r3, #192	@ 0xc0
 8002346:	029b      	lsls	r3, r3, #10
 8002348:	4013      	ands	r3, r2
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	429a      	cmp	r2, r3
 800234e:	d034      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	2380      	movs	r3, #128	@ 0x80
 8002356:	011b      	lsls	r3, r3, #4
 8002358:	4013      	ands	r3, r2
 800235a:	d02e      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800235c:	4b71      	ldr	r3, [pc, #452]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800235e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002360:	4a72      	ldr	r2, [pc, #456]	@ (800252c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002362:	4013      	ands	r3, r2
 8002364:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002366:	4b6f      	ldr	r3, [pc, #444]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002368:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800236a:	4b6e      	ldr	r3, [pc, #440]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800236c:	2180      	movs	r1, #128	@ 0x80
 800236e:	0309      	lsls	r1, r1, #12
 8002370:	430a      	orrs	r2, r1
 8002372:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002374:	4b6b      	ldr	r3, [pc, #428]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002376:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002378:	4b6a      	ldr	r3, [pc, #424]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800237a:	496d      	ldr	r1, [pc, #436]	@ (8002530 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800237c:	400a      	ands	r2, r1
 800237e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002380:	4b68      	ldr	r3, [pc, #416]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	2380      	movs	r3, #128	@ 0x80
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	4013      	ands	r3, r2
 800238e:	d014      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002390:	f7fe fd62 	bl	8000e58 <HAL_GetTick>
 8002394:	0003      	movs	r3, r0
 8002396:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002398:	e009      	b.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800239a:	f7fe fd5d 	bl	8000e58 <HAL_GetTick>
 800239e:	0002      	movs	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	4a63      	ldr	r2, [pc, #396]	@ (8002534 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d901      	bls.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e0b6      	b.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80023ae:	4b5d      	ldr	r3, [pc, #372]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80023b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80023b2:	2380      	movs	r3, #128	@ 0x80
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	4013      	ands	r3, r2
 80023b8:	d0ef      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	2380      	movs	r3, #128	@ 0x80
 80023c0:	011b      	lsls	r3, r3, #4
 80023c2:	4013      	ands	r3, r2
 80023c4:	d01f      	beq.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	689a      	ldr	r2, [r3, #8]
 80023ca:	23c0      	movs	r3, #192	@ 0xc0
 80023cc:	029b      	lsls	r3, r3, #10
 80023ce:	401a      	ands	r2, r3
 80023d0:	23c0      	movs	r3, #192	@ 0xc0
 80023d2:	029b      	lsls	r3, r3, #10
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d10c      	bne.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80023d8:	4b52      	ldr	r3, [pc, #328]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a56      	ldr	r2, [pc, #344]	@ (8002538 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80023de:	4013      	ands	r3, r2
 80023e0:	0019      	movs	r1, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	689a      	ldr	r2, [r3, #8]
 80023e6:	23c0      	movs	r3, #192	@ 0xc0
 80023e8:	039b      	lsls	r3, r3, #14
 80023ea:	401a      	ands	r2, r3
 80023ec:	4b4d      	ldr	r3, [pc, #308]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80023ee:	430a      	orrs	r2, r1
 80023f0:	601a      	str	r2, [r3, #0]
 80023f2:	4b4c      	ldr	r3, [pc, #304]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80023f4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	689a      	ldr	r2, [r3, #8]
 80023fa:	23c0      	movs	r3, #192	@ 0xc0
 80023fc:	029b      	lsls	r3, r3, #10
 80023fe:	401a      	ands	r2, r3
 8002400:	4b48      	ldr	r3, [pc, #288]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002402:	430a      	orrs	r2, r1
 8002404:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2220      	movs	r2, #32
 800240c:	4013      	ands	r3, r2
 800240e:	d01f      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685a      	ldr	r2, [r3, #4]
 8002414:	23c0      	movs	r3, #192	@ 0xc0
 8002416:	029b      	lsls	r3, r3, #10
 8002418:	401a      	ands	r2, r3
 800241a:	23c0      	movs	r3, #192	@ 0xc0
 800241c:	029b      	lsls	r3, r3, #10
 800241e:	429a      	cmp	r2, r3
 8002420:	d10c      	bne.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x208>
 8002422:	4b40      	ldr	r3, [pc, #256]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a44      	ldr	r2, [pc, #272]	@ (8002538 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002428:	4013      	ands	r3, r2
 800242a:	0019      	movs	r1, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685a      	ldr	r2, [r3, #4]
 8002430:	23c0      	movs	r3, #192	@ 0xc0
 8002432:	039b      	lsls	r3, r3, #14
 8002434:	401a      	ands	r2, r3
 8002436:	4b3b      	ldr	r3, [pc, #236]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002438:	430a      	orrs	r2, r1
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	4b39      	ldr	r3, [pc, #228]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800243e:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	23c0      	movs	r3, #192	@ 0xc0
 8002446:	029b      	lsls	r3, r3, #10
 8002448:	401a      	ands	r2, r3
 800244a:	4b36      	ldr	r3, [pc, #216]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800244c:	430a      	orrs	r2, r1
 800244e:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002450:	2317      	movs	r3, #23
 8002452:	18fb      	adds	r3, r7, r3
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d105      	bne.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800245a:	4b32      	ldr	r3, [pc, #200]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800245c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800245e:	4b31      	ldr	r3, [pc, #196]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002460:	4936      	ldr	r1, [pc, #216]	@ (800253c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002462:	400a      	ands	r2, r1
 8002464:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2201      	movs	r2, #1
 800246c:	4013      	ands	r3, r2
 800246e:	d009      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002470:	4b2c      	ldr	r3, [pc, #176]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002472:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002474:	2203      	movs	r2, #3
 8002476:	4393      	bics	r3, r2
 8002478:	0019      	movs	r1, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	68da      	ldr	r2, [r3, #12]
 800247e:	4b29      	ldr	r3, [pc, #164]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002480:	430a      	orrs	r2, r1
 8002482:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2202      	movs	r2, #2
 800248a:	4013      	ands	r3, r2
 800248c:	d009      	beq.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800248e:	4b25      	ldr	r3, [pc, #148]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002492:	220c      	movs	r2, #12
 8002494:	4393      	bics	r3, r2
 8002496:	0019      	movs	r1, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	691a      	ldr	r2, [r3, #16]
 800249c:	4b21      	ldr	r3, [pc, #132]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800249e:	430a      	orrs	r2, r1
 80024a0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2204      	movs	r2, #4
 80024a8:	4013      	ands	r3, r2
 80024aa:	d009      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80024ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024b0:	4a23      	ldr	r2, [pc, #140]	@ (8002540 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 80024b2:	4013      	ands	r3, r2
 80024b4:	0019      	movs	r1, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	695a      	ldr	r2, [r3, #20]
 80024ba:	4b1a      	ldr	r3, [pc, #104]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80024bc:	430a      	orrs	r2, r1
 80024be:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2208      	movs	r2, #8
 80024c6:	4013      	ands	r3, r2
 80024c8:	d009      	beq.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024ca:	4b16      	ldr	r3, [pc, #88]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80024cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ce:	4a1d      	ldr	r2, [pc, #116]	@ (8002544 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80024d0:	4013      	ands	r3, r2
 80024d2:	0019      	movs	r1, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	699a      	ldr	r2, [r3, #24]
 80024d8:	4b12      	ldr	r3, [pc, #72]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80024da:	430a      	orrs	r2, r1
 80024dc:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2240      	movs	r2, #64	@ 0x40
 80024e4:	4013      	ands	r3, r2
 80024e6:	d009      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80024ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ec:	4a16      	ldr	r2, [pc, #88]	@ (8002548 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80024ee:	4013      	ands	r3, r2
 80024f0:	0019      	movs	r1, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a1a      	ldr	r2, [r3, #32]
 80024f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80024f8:	430a      	orrs	r2, r1
 80024fa:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2280      	movs	r2, #128	@ 0x80
 8002502:	4013      	ands	r3, r2
 8002504:	d009      	beq.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002506:	4b07      	ldr	r3, [pc, #28]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002508:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800250a:	4a10      	ldr	r2, [pc, #64]	@ (800254c <HAL_RCCEx_PeriphCLKConfig+0x318>)
 800250c:	4013      	ands	r3, r2
 800250e:	0019      	movs	r1, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	69da      	ldr	r2, [r3, #28]
 8002514:	4b03      	ldr	r3, [pc, #12]	@ (8002524 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002516:	430a      	orrs	r2, r1
 8002518:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	0018      	movs	r0, r3
 800251e:	46bd      	mov	sp, r7
 8002520:	b006      	add	sp, #24
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40021000 	.word	0x40021000
 8002528:	40007000 	.word	0x40007000
 800252c:	fffcffff 	.word	0xfffcffff
 8002530:	fff7ffff 	.word	0xfff7ffff
 8002534:	00001388 	.word	0x00001388
 8002538:	ffcfffff 	.word	0xffcfffff
 800253c:	efffffff 	.word	0xefffffff
 8002540:	fffff3ff 	.word	0xfffff3ff
 8002544:	ffffcfff 	.word	0xffffcfff
 8002548:	fbffffff 	.word	0xfbffffff
 800254c:	fff3ffff 	.word	0xfff3ffff

08002550 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e044      	b.n	80025ec <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002566:	2b00      	cmp	r3, #0
 8002568:	d107      	bne.n	800257a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2278      	movs	r2, #120	@ 0x78
 800256e:	2100      	movs	r1, #0
 8002570:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	0018      	movs	r0, r3
 8002576:	f7fe facd 	bl	8000b14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2224      	movs	r2, #36	@ 0x24
 800257e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2101      	movs	r1, #1
 800258c:	438a      	bics	r2, r1
 800258e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	0018      	movs	r0, r3
 8002594:	f000 f8d0 	bl	8002738 <UART_SetConfig>
 8002598:	0003      	movs	r3, r0
 800259a:	2b01      	cmp	r3, #1
 800259c:	d101      	bne.n	80025a2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e024      	b.n	80025ec <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d003      	beq.n	80025b2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	0018      	movs	r0, r3
 80025ae:	f000 fb47 	bl	8002c40 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	490d      	ldr	r1, [pc, #52]	@ (80025f4 <HAL_UART_Init+0xa4>)
 80025be:	400a      	ands	r2, r1
 80025c0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	212a      	movs	r1, #42	@ 0x2a
 80025ce:	438a      	bics	r2, r1
 80025d0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2101      	movs	r1, #1
 80025de:	430a      	orrs	r2, r1
 80025e0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	0018      	movs	r0, r3
 80025e6:	f000 fbdf 	bl	8002da8 <UART_CheckIdleState>
 80025ea:	0003      	movs	r3, r0
}
 80025ec:	0018      	movs	r0, r3
 80025ee:	46bd      	mov	sp, r7
 80025f0:	b002      	add	sp, #8
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	ffffb7ff 	.word	0xffffb7ff

080025f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b08a      	sub	sp, #40	@ 0x28
 80025fc:	af02      	add	r7, sp, #8
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	603b      	str	r3, [r7, #0]
 8002604:	1dbb      	adds	r3, r7, #6
 8002606:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800260c:	2b20      	cmp	r3, #32
 800260e:	d000      	beq.n	8002612 <HAL_UART_Transmit+0x1a>
 8002610:	e08c      	b.n	800272c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d003      	beq.n	8002620 <HAL_UART_Transmit+0x28>
 8002618:	1dbb      	adds	r3, r7, #6
 800261a:	881b      	ldrh	r3, [r3, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d101      	bne.n	8002624 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e084      	b.n	800272e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	2380      	movs	r3, #128	@ 0x80
 800262a:	015b      	lsls	r3, r3, #5
 800262c:	429a      	cmp	r2, r3
 800262e:	d109      	bne.n	8002644 <HAL_UART_Transmit+0x4c>
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d105      	bne.n	8002644 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	2201      	movs	r2, #1
 800263c:	4013      	ands	r3, r2
 800263e:	d001      	beq.n	8002644 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e074      	b.n	800272e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2284      	movs	r2, #132	@ 0x84
 8002648:	2100      	movs	r1, #0
 800264a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2221      	movs	r2, #33	@ 0x21
 8002650:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002652:	f7fe fc01 	bl	8000e58 <HAL_GetTick>
 8002656:	0003      	movs	r3, r0
 8002658:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	1dba      	adds	r2, r7, #6
 800265e:	2150      	movs	r1, #80	@ 0x50
 8002660:	8812      	ldrh	r2, [r2, #0]
 8002662:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	1dba      	adds	r2, r7, #6
 8002668:	2152      	movs	r1, #82	@ 0x52
 800266a:	8812      	ldrh	r2, [r2, #0]
 800266c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	689a      	ldr	r2, [r3, #8]
 8002672:	2380      	movs	r3, #128	@ 0x80
 8002674:	015b      	lsls	r3, r3, #5
 8002676:	429a      	cmp	r2, r3
 8002678:	d108      	bne.n	800268c <HAL_UART_Transmit+0x94>
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d104      	bne.n	800268c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8002682:	2300      	movs	r3, #0
 8002684:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	61bb      	str	r3, [r7, #24]
 800268a:	e003      	b.n	8002694 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002690:	2300      	movs	r3, #0
 8002692:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002694:	e02f      	b.n	80026f6 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	9300      	str	r3, [sp, #0]
 800269e:	0013      	movs	r3, r2
 80026a0:	2200      	movs	r2, #0
 80026a2:	2180      	movs	r1, #128	@ 0x80
 80026a4:	f000 fc28 	bl	8002ef8 <UART_WaitOnFlagUntilTimeout>
 80026a8:	1e03      	subs	r3, r0, #0
 80026aa:	d004      	beq.n	80026b6 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2220      	movs	r2, #32
 80026b0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e03b      	b.n	800272e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d10b      	bne.n	80026d4 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	881b      	ldrh	r3, [r3, #0]
 80026c0:	001a      	movs	r2, r3
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	05d2      	lsls	r2, r2, #23
 80026c8:	0dd2      	lsrs	r2, r2, #23
 80026ca:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	3302      	adds	r3, #2
 80026d0:	61bb      	str	r3, [r7, #24]
 80026d2:	e007      	b.n	80026e4 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	781a      	ldrb	r2, [r3, #0]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	3301      	adds	r3, #1
 80026e2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2252      	movs	r2, #82	@ 0x52
 80026e8:	5a9b      	ldrh	r3, [r3, r2]
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	3b01      	subs	r3, #1
 80026ee:	b299      	uxth	r1, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2252      	movs	r2, #82	@ 0x52
 80026f4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2252      	movs	r2, #82	@ 0x52
 80026fa:	5a9b      	ldrh	r3, [r3, r2]
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1c9      	bne.n	8002696 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	68f8      	ldr	r0, [r7, #12]
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	0013      	movs	r3, r2
 800270c:	2200      	movs	r2, #0
 800270e:	2140      	movs	r1, #64	@ 0x40
 8002710:	f000 fbf2 	bl	8002ef8 <UART_WaitOnFlagUntilTimeout>
 8002714:	1e03      	subs	r3, r0, #0
 8002716:	d004      	beq.n	8002722 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2220      	movs	r2, #32
 800271c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e005      	b.n	800272e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2220      	movs	r2, #32
 8002726:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002728:	2300      	movs	r3, #0
 800272a:	e000      	b.n	800272e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 800272c:	2302      	movs	r3, #2
  }
}
 800272e:	0018      	movs	r0, r3
 8002730:	46bd      	mov	sp, r7
 8002732:	b008      	add	sp, #32
 8002734:	bd80      	pop	{r7, pc}
	...

08002738 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002738:	b5b0      	push	{r4, r5, r7, lr}
 800273a:	b08e      	sub	sp, #56	@ 0x38
 800273c:	af00      	add	r7, sp, #0
 800273e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002740:	231a      	movs	r3, #26
 8002742:	2218      	movs	r2, #24
 8002744:	189b      	adds	r3, r3, r2
 8002746:	19db      	adds	r3, r3, r7
 8002748:	2200      	movs	r2, #0
 800274a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	689a      	ldr	r2, [r3, #8]
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	431a      	orrs	r2, r3
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	431a      	orrs	r2, r3
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	69db      	ldr	r3, [r3, #28]
 8002760:	4313      	orrs	r3, r2
 8002762:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4ac6      	ldr	r2, [pc, #792]	@ (8002a84 <UART_SetConfig+0x34c>)
 800276c:	4013      	ands	r3, r2
 800276e:	0019      	movs	r1, r3
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002776:	430a      	orrs	r2, r1
 8002778:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	4ac1      	ldr	r2, [pc, #772]	@ (8002a88 <UART_SetConfig+0x350>)
 8002782:	4013      	ands	r3, r2
 8002784:	0019      	movs	r1, r3
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	68da      	ldr	r2, [r3, #12]
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	430a      	orrs	r2, r1
 8002790:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4abb      	ldr	r2, [pc, #748]	@ (8002a8c <UART_SetConfig+0x354>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d004      	beq.n	80027ac <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80027a8:	4313      	orrs	r3, r2
 80027aa:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	4ab7      	ldr	r2, [pc, #732]	@ (8002a90 <UART_SetConfig+0x358>)
 80027b4:	4013      	ands	r3, r2
 80027b6:	0019      	movs	r1, r3
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80027be:	430a      	orrs	r2, r1
 80027c0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4ab3      	ldr	r2, [pc, #716]	@ (8002a94 <UART_SetConfig+0x35c>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d131      	bne.n	8002830 <UART_SetConfig+0xf8>
 80027cc:	4bb2      	ldr	r3, [pc, #712]	@ (8002a98 <UART_SetConfig+0x360>)
 80027ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027d0:	2203      	movs	r2, #3
 80027d2:	4013      	ands	r3, r2
 80027d4:	2b03      	cmp	r3, #3
 80027d6:	d01d      	beq.n	8002814 <UART_SetConfig+0xdc>
 80027d8:	d823      	bhi.n	8002822 <UART_SetConfig+0xea>
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d00c      	beq.n	80027f8 <UART_SetConfig+0xc0>
 80027de:	d820      	bhi.n	8002822 <UART_SetConfig+0xea>
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d002      	beq.n	80027ea <UART_SetConfig+0xb2>
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d00e      	beq.n	8002806 <UART_SetConfig+0xce>
 80027e8:	e01b      	b.n	8002822 <UART_SetConfig+0xea>
 80027ea:	231b      	movs	r3, #27
 80027ec:	2218      	movs	r2, #24
 80027ee:	189b      	adds	r3, r3, r2
 80027f0:	19db      	adds	r3, r3, r7
 80027f2:	2201      	movs	r2, #1
 80027f4:	701a      	strb	r2, [r3, #0]
 80027f6:	e09c      	b.n	8002932 <UART_SetConfig+0x1fa>
 80027f8:	231b      	movs	r3, #27
 80027fa:	2218      	movs	r2, #24
 80027fc:	189b      	adds	r3, r3, r2
 80027fe:	19db      	adds	r3, r3, r7
 8002800:	2202      	movs	r2, #2
 8002802:	701a      	strb	r2, [r3, #0]
 8002804:	e095      	b.n	8002932 <UART_SetConfig+0x1fa>
 8002806:	231b      	movs	r3, #27
 8002808:	2218      	movs	r2, #24
 800280a:	189b      	adds	r3, r3, r2
 800280c:	19db      	adds	r3, r3, r7
 800280e:	2204      	movs	r2, #4
 8002810:	701a      	strb	r2, [r3, #0]
 8002812:	e08e      	b.n	8002932 <UART_SetConfig+0x1fa>
 8002814:	231b      	movs	r3, #27
 8002816:	2218      	movs	r2, #24
 8002818:	189b      	adds	r3, r3, r2
 800281a:	19db      	adds	r3, r3, r7
 800281c:	2208      	movs	r2, #8
 800281e:	701a      	strb	r2, [r3, #0]
 8002820:	e087      	b.n	8002932 <UART_SetConfig+0x1fa>
 8002822:	231b      	movs	r3, #27
 8002824:	2218      	movs	r2, #24
 8002826:	189b      	adds	r3, r3, r2
 8002828:	19db      	adds	r3, r3, r7
 800282a:	2210      	movs	r2, #16
 800282c:	701a      	strb	r2, [r3, #0]
 800282e:	e080      	b.n	8002932 <UART_SetConfig+0x1fa>
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a99      	ldr	r2, [pc, #612]	@ (8002a9c <UART_SetConfig+0x364>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d131      	bne.n	800289e <UART_SetConfig+0x166>
 800283a:	4b97      	ldr	r3, [pc, #604]	@ (8002a98 <UART_SetConfig+0x360>)
 800283c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800283e:	220c      	movs	r2, #12
 8002840:	4013      	ands	r3, r2
 8002842:	2b0c      	cmp	r3, #12
 8002844:	d01d      	beq.n	8002882 <UART_SetConfig+0x14a>
 8002846:	d823      	bhi.n	8002890 <UART_SetConfig+0x158>
 8002848:	2b08      	cmp	r3, #8
 800284a:	d00c      	beq.n	8002866 <UART_SetConfig+0x12e>
 800284c:	d820      	bhi.n	8002890 <UART_SetConfig+0x158>
 800284e:	2b00      	cmp	r3, #0
 8002850:	d002      	beq.n	8002858 <UART_SetConfig+0x120>
 8002852:	2b04      	cmp	r3, #4
 8002854:	d00e      	beq.n	8002874 <UART_SetConfig+0x13c>
 8002856:	e01b      	b.n	8002890 <UART_SetConfig+0x158>
 8002858:	231b      	movs	r3, #27
 800285a:	2218      	movs	r2, #24
 800285c:	189b      	adds	r3, r3, r2
 800285e:	19db      	adds	r3, r3, r7
 8002860:	2200      	movs	r2, #0
 8002862:	701a      	strb	r2, [r3, #0]
 8002864:	e065      	b.n	8002932 <UART_SetConfig+0x1fa>
 8002866:	231b      	movs	r3, #27
 8002868:	2218      	movs	r2, #24
 800286a:	189b      	adds	r3, r3, r2
 800286c:	19db      	adds	r3, r3, r7
 800286e:	2202      	movs	r2, #2
 8002870:	701a      	strb	r2, [r3, #0]
 8002872:	e05e      	b.n	8002932 <UART_SetConfig+0x1fa>
 8002874:	231b      	movs	r3, #27
 8002876:	2218      	movs	r2, #24
 8002878:	189b      	adds	r3, r3, r2
 800287a:	19db      	adds	r3, r3, r7
 800287c:	2204      	movs	r2, #4
 800287e:	701a      	strb	r2, [r3, #0]
 8002880:	e057      	b.n	8002932 <UART_SetConfig+0x1fa>
 8002882:	231b      	movs	r3, #27
 8002884:	2218      	movs	r2, #24
 8002886:	189b      	adds	r3, r3, r2
 8002888:	19db      	adds	r3, r3, r7
 800288a:	2208      	movs	r2, #8
 800288c:	701a      	strb	r2, [r3, #0]
 800288e:	e050      	b.n	8002932 <UART_SetConfig+0x1fa>
 8002890:	231b      	movs	r3, #27
 8002892:	2218      	movs	r2, #24
 8002894:	189b      	adds	r3, r3, r2
 8002896:	19db      	adds	r3, r3, r7
 8002898:	2210      	movs	r2, #16
 800289a:	701a      	strb	r2, [r3, #0]
 800289c:	e049      	b.n	8002932 <UART_SetConfig+0x1fa>
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a7a      	ldr	r2, [pc, #488]	@ (8002a8c <UART_SetConfig+0x354>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d13e      	bne.n	8002926 <UART_SetConfig+0x1ee>
 80028a8:	4b7b      	ldr	r3, [pc, #492]	@ (8002a98 <UART_SetConfig+0x360>)
 80028aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80028ac:	23c0      	movs	r3, #192	@ 0xc0
 80028ae:	011b      	lsls	r3, r3, #4
 80028b0:	4013      	ands	r3, r2
 80028b2:	22c0      	movs	r2, #192	@ 0xc0
 80028b4:	0112      	lsls	r2, r2, #4
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d027      	beq.n	800290a <UART_SetConfig+0x1d2>
 80028ba:	22c0      	movs	r2, #192	@ 0xc0
 80028bc:	0112      	lsls	r2, r2, #4
 80028be:	4293      	cmp	r3, r2
 80028c0:	d82a      	bhi.n	8002918 <UART_SetConfig+0x1e0>
 80028c2:	2280      	movs	r2, #128	@ 0x80
 80028c4:	0112      	lsls	r2, r2, #4
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d011      	beq.n	80028ee <UART_SetConfig+0x1b6>
 80028ca:	2280      	movs	r2, #128	@ 0x80
 80028cc:	0112      	lsls	r2, r2, #4
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d822      	bhi.n	8002918 <UART_SetConfig+0x1e0>
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d004      	beq.n	80028e0 <UART_SetConfig+0x1a8>
 80028d6:	2280      	movs	r2, #128	@ 0x80
 80028d8:	00d2      	lsls	r2, r2, #3
 80028da:	4293      	cmp	r3, r2
 80028dc:	d00e      	beq.n	80028fc <UART_SetConfig+0x1c4>
 80028de:	e01b      	b.n	8002918 <UART_SetConfig+0x1e0>
 80028e0:	231b      	movs	r3, #27
 80028e2:	2218      	movs	r2, #24
 80028e4:	189b      	adds	r3, r3, r2
 80028e6:	19db      	adds	r3, r3, r7
 80028e8:	2200      	movs	r2, #0
 80028ea:	701a      	strb	r2, [r3, #0]
 80028ec:	e021      	b.n	8002932 <UART_SetConfig+0x1fa>
 80028ee:	231b      	movs	r3, #27
 80028f0:	2218      	movs	r2, #24
 80028f2:	189b      	adds	r3, r3, r2
 80028f4:	19db      	adds	r3, r3, r7
 80028f6:	2202      	movs	r2, #2
 80028f8:	701a      	strb	r2, [r3, #0]
 80028fa:	e01a      	b.n	8002932 <UART_SetConfig+0x1fa>
 80028fc:	231b      	movs	r3, #27
 80028fe:	2218      	movs	r2, #24
 8002900:	189b      	adds	r3, r3, r2
 8002902:	19db      	adds	r3, r3, r7
 8002904:	2204      	movs	r2, #4
 8002906:	701a      	strb	r2, [r3, #0]
 8002908:	e013      	b.n	8002932 <UART_SetConfig+0x1fa>
 800290a:	231b      	movs	r3, #27
 800290c:	2218      	movs	r2, #24
 800290e:	189b      	adds	r3, r3, r2
 8002910:	19db      	adds	r3, r3, r7
 8002912:	2208      	movs	r2, #8
 8002914:	701a      	strb	r2, [r3, #0]
 8002916:	e00c      	b.n	8002932 <UART_SetConfig+0x1fa>
 8002918:	231b      	movs	r3, #27
 800291a:	2218      	movs	r2, #24
 800291c:	189b      	adds	r3, r3, r2
 800291e:	19db      	adds	r3, r3, r7
 8002920:	2210      	movs	r2, #16
 8002922:	701a      	strb	r2, [r3, #0]
 8002924:	e005      	b.n	8002932 <UART_SetConfig+0x1fa>
 8002926:	231b      	movs	r3, #27
 8002928:	2218      	movs	r2, #24
 800292a:	189b      	adds	r3, r3, r2
 800292c:	19db      	adds	r3, r3, r7
 800292e:	2210      	movs	r2, #16
 8002930:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a55      	ldr	r2, [pc, #340]	@ (8002a8c <UART_SetConfig+0x354>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d000      	beq.n	800293e <UART_SetConfig+0x206>
 800293c:	e084      	b.n	8002a48 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800293e:	231b      	movs	r3, #27
 8002940:	2218      	movs	r2, #24
 8002942:	189b      	adds	r3, r3, r2
 8002944:	19db      	adds	r3, r3, r7
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	2b08      	cmp	r3, #8
 800294a:	d01d      	beq.n	8002988 <UART_SetConfig+0x250>
 800294c:	dc20      	bgt.n	8002990 <UART_SetConfig+0x258>
 800294e:	2b04      	cmp	r3, #4
 8002950:	d015      	beq.n	800297e <UART_SetConfig+0x246>
 8002952:	dc1d      	bgt.n	8002990 <UART_SetConfig+0x258>
 8002954:	2b00      	cmp	r3, #0
 8002956:	d002      	beq.n	800295e <UART_SetConfig+0x226>
 8002958:	2b02      	cmp	r3, #2
 800295a:	d005      	beq.n	8002968 <UART_SetConfig+0x230>
 800295c:	e018      	b.n	8002990 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800295e:	f7ff fc3d 	bl	80021dc <HAL_RCC_GetPCLK1Freq>
 8002962:	0003      	movs	r3, r0
 8002964:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002966:	e01c      	b.n	80029a2 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002968:	4b4b      	ldr	r3, [pc, #300]	@ (8002a98 <UART_SetConfig+0x360>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2210      	movs	r2, #16
 800296e:	4013      	ands	r3, r2
 8002970:	d002      	beq.n	8002978 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002972:	4b4b      	ldr	r3, [pc, #300]	@ (8002aa0 <UART_SetConfig+0x368>)
 8002974:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002976:	e014      	b.n	80029a2 <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8002978:	4b4a      	ldr	r3, [pc, #296]	@ (8002aa4 <UART_SetConfig+0x36c>)
 800297a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800297c:	e011      	b.n	80029a2 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800297e:	f7ff fb7d 	bl	800207c <HAL_RCC_GetSysClockFreq>
 8002982:	0003      	movs	r3, r0
 8002984:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002986:	e00c      	b.n	80029a2 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002988:	2380      	movs	r3, #128	@ 0x80
 800298a:	021b      	lsls	r3, r3, #8
 800298c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800298e:	e008      	b.n	80029a2 <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8002990:	2300      	movs	r3, #0
 8002992:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8002994:	231a      	movs	r3, #26
 8002996:	2218      	movs	r2, #24
 8002998:	189b      	adds	r3, r3, r2
 800299a:	19db      	adds	r3, r3, r7
 800299c:	2201      	movs	r2, #1
 800299e:	701a      	strb	r2, [r3, #0]
        break;
 80029a0:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80029a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d100      	bne.n	80029aa <UART_SetConfig+0x272>
 80029a8:	e132      	b.n	8002c10 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	685a      	ldr	r2, [r3, #4]
 80029ae:	0013      	movs	r3, r2
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	189b      	adds	r3, r3, r2
 80029b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d305      	bcc.n	80029c6 <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80029c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d906      	bls.n	80029d4 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 80029c6:	231a      	movs	r3, #26
 80029c8:	2218      	movs	r2, #24
 80029ca:	189b      	adds	r3, r3, r2
 80029cc:	19db      	adds	r3, r3, r7
 80029ce:	2201      	movs	r2, #1
 80029d0:	701a      	strb	r2, [r3, #0]
 80029d2:	e11d      	b.n	8002c10 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80029d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029d6:	613b      	str	r3, [r7, #16]
 80029d8:	2300      	movs	r3, #0
 80029da:	617b      	str	r3, [r7, #20]
 80029dc:	6939      	ldr	r1, [r7, #16]
 80029de:	697a      	ldr	r2, [r7, #20]
 80029e0:	000b      	movs	r3, r1
 80029e2:	0e1b      	lsrs	r3, r3, #24
 80029e4:	0010      	movs	r0, r2
 80029e6:	0205      	lsls	r5, r0, #8
 80029e8:	431d      	orrs	r5, r3
 80029ea:	000b      	movs	r3, r1
 80029ec:	021c      	lsls	r4, r3, #8
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	085b      	lsrs	r3, r3, #1
 80029f4:	60bb      	str	r3, [r7, #8]
 80029f6:	2300      	movs	r3, #0
 80029f8:	60fb      	str	r3, [r7, #12]
 80029fa:	68b8      	ldr	r0, [r7, #8]
 80029fc:	68f9      	ldr	r1, [r7, #12]
 80029fe:	1900      	adds	r0, r0, r4
 8002a00:	4169      	adcs	r1, r5
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	603b      	str	r3, [r7, #0]
 8002a08:	2300      	movs	r3, #0
 8002a0a:	607b      	str	r3, [r7, #4]
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f7fd fc10 	bl	8000234 <__aeabi_uldivmod>
 8002a14:	0002      	movs	r2, r0
 8002a16:	000b      	movs	r3, r1
 8002a18:	0013      	movs	r3, r2
 8002a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002a1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a1e:	23c0      	movs	r3, #192	@ 0xc0
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d309      	bcc.n	8002a3a <UART_SetConfig+0x302>
 8002a26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a28:	2380      	movs	r3, #128	@ 0x80
 8002a2a:	035b      	lsls	r3, r3, #13
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d204      	bcs.n	8002a3a <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a36:	60da      	str	r2, [r3, #12]
 8002a38:	e0ea      	b.n	8002c10 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8002a3a:	231a      	movs	r3, #26
 8002a3c:	2218      	movs	r2, #24
 8002a3e:	189b      	adds	r3, r3, r2
 8002a40:	19db      	adds	r3, r3, r7
 8002a42:	2201      	movs	r2, #1
 8002a44:	701a      	strb	r2, [r3, #0]
 8002a46:	e0e3      	b.n	8002c10 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	69da      	ldr	r2, [r3, #28]
 8002a4c:	2380      	movs	r3, #128	@ 0x80
 8002a4e:	021b      	lsls	r3, r3, #8
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d000      	beq.n	8002a56 <UART_SetConfig+0x31e>
 8002a54:	e085      	b.n	8002b62 <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 8002a56:	231b      	movs	r3, #27
 8002a58:	2218      	movs	r2, #24
 8002a5a:	189b      	adds	r3, r3, r2
 8002a5c:	19db      	adds	r3, r3, r7
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	2b08      	cmp	r3, #8
 8002a62:	d837      	bhi.n	8002ad4 <UART_SetConfig+0x39c>
 8002a64:	009a      	lsls	r2, r3, #2
 8002a66:	4b10      	ldr	r3, [pc, #64]	@ (8002aa8 <UART_SetConfig+0x370>)
 8002a68:	18d3      	adds	r3, r2, r3
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a6e:	f7ff fbb5 	bl	80021dc <HAL_RCC_GetPCLK1Freq>
 8002a72:	0003      	movs	r3, r0
 8002a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002a76:	e036      	b.n	8002ae6 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a78:	f7ff fbc6 	bl	8002208 <HAL_RCC_GetPCLK2Freq>
 8002a7c:	0003      	movs	r3, r0
 8002a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002a80:	e031      	b.n	8002ae6 <UART_SetConfig+0x3ae>
 8002a82:	46c0      	nop			@ (mov r8, r8)
 8002a84:	efff69f3 	.word	0xefff69f3
 8002a88:	ffffcfff 	.word	0xffffcfff
 8002a8c:	40004800 	.word	0x40004800
 8002a90:	fffff4ff 	.word	0xfffff4ff
 8002a94:	40013800 	.word	0x40013800
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	40004400 	.word	0x40004400
 8002aa0:	003d0900 	.word	0x003d0900
 8002aa4:	00f42400 	.word	0x00f42400
 8002aa8:	080040ec 	.word	0x080040ec
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002aac:	4b60      	ldr	r3, [pc, #384]	@ (8002c30 <UART_SetConfig+0x4f8>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2210      	movs	r2, #16
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	d002      	beq.n	8002abc <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002ab6:	4b5f      	ldr	r3, [pc, #380]	@ (8002c34 <UART_SetConfig+0x4fc>)
 8002ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002aba:	e014      	b.n	8002ae6 <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8002abc:	4b5e      	ldr	r3, [pc, #376]	@ (8002c38 <UART_SetConfig+0x500>)
 8002abe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002ac0:	e011      	b.n	8002ae6 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ac2:	f7ff fadb 	bl	800207c <HAL_RCC_GetSysClockFreq>
 8002ac6:	0003      	movs	r3, r0
 8002ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002aca:	e00c      	b.n	8002ae6 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002acc:	2380      	movs	r3, #128	@ 0x80
 8002ace:	021b      	lsls	r3, r3, #8
 8002ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002ad2:	e008      	b.n	8002ae6 <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8002ad8:	231a      	movs	r3, #26
 8002ada:	2218      	movs	r2, #24
 8002adc:	189b      	adds	r3, r3, r2
 8002ade:	19db      	adds	r3, r3, r7
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	701a      	strb	r2, [r3, #0]
        break;
 8002ae4:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d100      	bne.n	8002aee <UART_SetConfig+0x3b6>
 8002aec:	e090      	b.n	8002c10 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002aee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002af0:	005a      	lsls	r2, r3, #1
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	085b      	lsrs	r3, r3, #1
 8002af8:	18d2      	adds	r2, r2, r3
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	0019      	movs	r1, r3
 8002b00:	0010      	movs	r0, r2
 8002b02:	f7fd fb0b 	bl	800011c <__udivsi3>
 8002b06:	0003      	movs	r3, r0
 8002b08:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b0c:	2b0f      	cmp	r3, #15
 8002b0e:	d921      	bls.n	8002b54 <UART_SetConfig+0x41c>
 8002b10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b12:	2380      	movs	r3, #128	@ 0x80
 8002b14:	025b      	lsls	r3, r3, #9
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d21c      	bcs.n	8002b54 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	200e      	movs	r0, #14
 8002b20:	2418      	movs	r4, #24
 8002b22:	1903      	adds	r3, r0, r4
 8002b24:	19db      	adds	r3, r3, r7
 8002b26:	210f      	movs	r1, #15
 8002b28:	438a      	bics	r2, r1
 8002b2a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b2e:	085b      	lsrs	r3, r3, #1
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	2207      	movs	r2, #7
 8002b34:	4013      	ands	r3, r2
 8002b36:	b299      	uxth	r1, r3
 8002b38:	1903      	adds	r3, r0, r4
 8002b3a:	19db      	adds	r3, r3, r7
 8002b3c:	1902      	adds	r2, r0, r4
 8002b3e:	19d2      	adds	r2, r2, r7
 8002b40:	8812      	ldrh	r2, [r2, #0]
 8002b42:	430a      	orrs	r2, r1
 8002b44:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	1902      	adds	r2, r0, r4
 8002b4c:	19d2      	adds	r2, r2, r7
 8002b4e:	8812      	ldrh	r2, [r2, #0]
 8002b50:	60da      	str	r2, [r3, #12]
 8002b52:	e05d      	b.n	8002c10 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8002b54:	231a      	movs	r3, #26
 8002b56:	2218      	movs	r2, #24
 8002b58:	189b      	adds	r3, r3, r2
 8002b5a:	19db      	adds	r3, r3, r7
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	701a      	strb	r2, [r3, #0]
 8002b60:	e056      	b.n	8002c10 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002b62:	231b      	movs	r3, #27
 8002b64:	2218      	movs	r2, #24
 8002b66:	189b      	adds	r3, r3, r2
 8002b68:	19db      	adds	r3, r3, r7
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	2b08      	cmp	r3, #8
 8002b6e:	d822      	bhi.n	8002bb6 <UART_SetConfig+0x47e>
 8002b70:	009a      	lsls	r2, r3, #2
 8002b72:	4b32      	ldr	r3, [pc, #200]	@ (8002c3c <UART_SetConfig+0x504>)
 8002b74:	18d3      	adds	r3, r2, r3
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b7a:	f7ff fb2f 	bl	80021dc <HAL_RCC_GetPCLK1Freq>
 8002b7e:	0003      	movs	r3, r0
 8002b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002b82:	e021      	b.n	8002bc8 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b84:	f7ff fb40 	bl	8002208 <HAL_RCC_GetPCLK2Freq>
 8002b88:	0003      	movs	r3, r0
 8002b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002b8c:	e01c      	b.n	8002bc8 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b8e:	4b28      	ldr	r3, [pc, #160]	@ (8002c30 <UART_SetConfig+0x4f8>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2210      	movs	r2, #16
 8002b94:	4013      	ands	r3, r2
 8002b96:	d002      	beq.n	8002b9e <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002b98:	4b26      	ldr	r3, [pc, #152]	@ (8002c34 <UART_SetConfig+0x4fc>)
 8002b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002b9c:	e014      	b.n	8002bc8 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8002b9e:	4b26      	ldr	r3, [pc, #152]	@ (8002c38 <UART_SetConfig+0x500>)
 8002ba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002ba2:	e011      	b.n	8002bc8 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ba4:	f7ff fa6a 	bl	800207c <HAL_RCC_GetSysClockFreq>
 8002ba8:	0003      	movs	r3, r0
 8002baa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002bac:	e00c      	b.n	8002bc8 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bae:	2380      	movs	r3, #128	@ 0x80
 8002bb0:	021b      	lsls	r3, r3, #8
 8002bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002bb4:	e008      	b.n	8002bc8 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8002bba:	231a      	movs	r3, #26
 8002bbc:	2218      	movs	r2, #24
 8002bbe:	189b      	adds	r3, r3, r2
 8002bc0:	19db      	adds	r3, r3, r7
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	701a      	strb	r2, [r3, #0]
        break;
 8002bc6:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d020      	beq.n	8002c10 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	085a      	lsrs	r2, r3, #1
 8002bd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bd6:	18d2      	adds	r2, r2, r3
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	0019      	movs	r1, r3
 8002bde:	0010      	movs	r0, r2
 8002be0:	f7fd fa9c 	bl	800011c <__udivsi3>
 8002be4:	0003      	movs	r3, r0
 8002be6:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bea:	2b0f      	cmp	r3, #15
 8002bec:	d90a      	bls.n	8002c04 <UART_SetConfig+0x4cc>
 8002bee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002bf0:	2380      	movs	r3, #128	@ 0x80
 8002bf2:	025b      	lsls	r3, r3, #9
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d205      	bcs.n	8002c04 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	60da      	str	r2, [r3, #12]
 8002c02:	e005      	b.n	8002c10 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8002c04:	231a      	movs	r3, #26
 8002c06:	2218      	movs	r2, #24
 8002c08:	189b      	adds	r3, r3, r2
 8002c0a:	19db      	adds	r3, r3, r7
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	2200      	movs	r2, #0
 8002c14:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002c1c:	231a      	movs	r3, #26
 8002c1e:	2218      	movs	r2, #24
 8002c20:	189b      	adds	r3, r3, r2
 8002c22:	19db      	adds	r3, r3, r7
 8002c24:	781b      	ldrb	r3, [r3, #0]
}
 8002c26:	0018      	movs	r0, r3
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	b00e      	add	sp, #56	@ 0x38
 8002c2c:	bdb0      	pop	{r4, r5, r7, pc}
 8002c2e:	46c0      	nop			@ (mov r8, r8)
 8002c30:	40021000 	.word	0x40021000
 8002c34:	003d0900 	.word	0x003d0900
 8002c38:	00f42400 	.word	0x00f42400
 8002c3c:	08004110 	.word	0x08004110

08002c40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	4013      	ands	r3, r2
 8002c50:	d00b      	beq.n	8002c6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	4a4a      	ldr	r2, [pc, #296]	@ (8002d84 <UART_AdvFeatureConfig+0x144>)
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	0019      	movs	r1, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	430a      	orrs	r2, r1
 8002c68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c6e:	2202      	movs	r2, #2
 8002c70:	4013      	ands	r3, r2
 8002c72:	d00b      	beq.n	8002c8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	4a43      	ldr	r2, [pc, #268]	@ (8002d88 <UART_AdvFeatureConfig+0x148>)
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	0019      	movs	r1, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c90:	2204      	movs	r2, #4
 8002c92:	4013      	ands	r3, r2
 8002c94:	d00b      	beq.n	8002cae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	4a3b      	ldr	r2, [pc, #236]	@ (8002d8c <UART_AdvFeatureConfig+0x14c>)
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	0019      	movs	r1, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	430a      	orrs	r2, r1
 8002cac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb2:	2208      	movs	r2, #8
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	d00b      	beq.n	8002cd0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	4a34      	ldr	r2, [pc, #208]	@ (8002d90 <UART_AdvFeatureConfig+0x150>)
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	0019      	movs	r1, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd4:	2210      	movs	r2, #16
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	d00b      	beq.n	8002cf2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	4a2c      	ldr	r2, [pc, #176]	@ (8002d94 <UART_AdvFeatureConfig+0x154>)
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	0019      	movs	r1, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	d00b      	beq.n	8002d14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	4a25      	ldr	r2, [pc, #148]	@ (8002d98 <UART_AdvFeatureConfig+0x158>)
 8002d04:	4013      	ands	r3, r2
 8002d06:	0019      	movs	r1, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	430a      	orrs	r2, r1
 8002d12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d18:	2240      	movs	r2, #64	@ 0x40
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	d01d      	beq.n	8002d5a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	4a1d      	ldr	r2, [pc, #116]	@ (8002d9c <UART_AdvFeatureConfig+0x15c>)
 8002d26:	4013      	ands	r3, r2
 8002d28:	0019      	movs	r1, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d3a:	2380      	movs	r3, #128	@ 0x80
 8002d3c:	035b      	lsls	r3, r3, #13
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d10b      	bne.n	8002d5a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	4a15      	ldr	r2, [pc, #84]	@ (8002da0 <UART_AdvFeatureConfig+0x160>)
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	0019      	movs	r1, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d5e:	2280      	movs	r2, #128	@ 0x80
 8002d60:	4013      	ands	r3, r2
 8002d62:	d00b      	beq.n	8002d7c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	4a0e      	ldr	r2, [pc, #56]	@ (8002da4 <UART_AdvFeatureConfig+0x164>)
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	0019      	movs	r1, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	605a      	str	r2, [r3, #4]
  }
}
 8002d7c:	46c0      	nop			@ (mov r8, r8)
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	b002      	add	sp, #8
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	fffdffff 	.word	0xfffdffff
 8002d88:	fffeffff 	.word	0xfffeffff
 8002d8c:	fffbffff 	.word	0xfffbffff
 8002d90:	ffff7fff 	.word	0xffff7fff
 8002d94:	ffffefff 	.word	0xffffefff
 8002d98:	ffffdfff 	.word	0xffffdfff
 8002d9c:	ffefffff 	.word	0xffefffff
 8002da0:	ff9fffff 	.word	0xff9fffff
 8002da4:	fff7ffff 	.word	0xfff7ffff

08002da8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b092      	sub	sp, #72	@ 0x48
 8002dac:	af02      	add	r7, sp, #8
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2284      	movs	r2, #132	@ 0x84
 8002db4:	2100      	movs	r1, #0
 8002db6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002db8:	f7fe f84e 	bl	8000e58 <HAL_GetTick>
 8002dbc:	0003      	movs	r3, r0
 8002dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2208      	movs	r2, #8
 8002dc8:	4013      	ands	r3, r2
 8002dca:	2b08      	cmp	r3, #8
 8002dcc:	d12c      	bne.n	8002e28 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002dce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dd0:	2280      	movs	r2, #128	@ 0x80
 8002dd2:	0391      	lsls	r1, r2, #14
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	4a46      	ldr	r2, [pc, #280]	@ (8002ef0 <UART_CheckIdleState+0x148>)
 8002dd8:	9200      	str	r2, [sp, #0]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f000 f88c 	bl	8002ef8 <UART_WaitOnFlagUntilTimeout>
 8002de0:	1e03      	subs	r3, r0, #0
 8002de2:	d021      	beq.n	8002e28 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002de4:	f3ef 8310 	mrs	r3, PRIMASK
 8002de8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002dec:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002dee:	2301      	movs	r3, #1
 8002df0:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002df4:	f383 8810 	msr	PRIMASK, r3
}
 8002df8:	46c0      	nop			@ (mov r8, r8)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2180      	movs	r1, #128	@ 0x80
 8002e06:	438a      	bics	r2, r1
 8002e08:	601a      	str	r2, [r3, #0]
 8002e0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e10:	f383 8810 	msr	PRIMASK, r3
}
 8002e14:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2220      	movs	r2, #32
 8002e1a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2278      	movs	r2, #120	@ 0x78
 8002e20:	2100      	movs	r1, #0
 8002e22:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e05f      	b.n	8002ee8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2204      	movs	r2, #4
 8002e30:	4013      	ands	r3, r2
 8002e32:	2b04      	cmp	r3, #4
 8002e34:	d146      	bne.n	8002ec4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e38:	2280      	movs	r2, #128	@ 0x80
 8002e3a:	03d1      	lsls	r1, r2, #15
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	4a2c      	ldr	r2, [pc, #176]	@ (8002ef0 <UART_CheckIdleState+0x148>)
 8002e40:	9200      	str	r2, [sp, #0]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f000 f858 	bl	8002ef8 <UART_WaitOnFlagUntilTimeout>
 8002e48:	1e03      	subs	r3, r0, #0
 8002e4a:	d03b      	beq.n	8002ec4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e4c:	f3ef 8310 	mrs	r3, PRIMASK
 8002e50:	60fb      	str	r3, [r7, #12]
  return(result);
 8002e52:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e54:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e56:	2301      	movs	r3, #1
 8002e58:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	f383 8810 	msr	PRIMASK, r3
}
 8002e60:	46c0      	nop			@ (mov r8, r8)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4921      	ldr	r1, [pc, #132]	@ (8002ef4 <UART_CheckIdleState+0x14c>)
 8002e6e:	400a      	ands	r2, r1
 8002e70:	601a      	str	r2, [r3, #0]
 8002e72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e74:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	f383 8810 	msr	PRIMASK, r3
}
 8002e7c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e7e:	f3ef 8310 	mrs	r3, PRIMASK
 8002e82:	61bb      	str	r3, [r7, #24]
  return(result);
 8002e84:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e86:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e88:	2301      	movs	r3, #1
 8002e8a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	f383 8810 	msr	PRIMASK, r3
}
 8002e92:	46c0      	nop			@ (mov r8, r8)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	689a      	ldr	r2, [r3, #8]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2101      	movs	r1, #1
 8002ea0:	438a      	bics	r2, r1
 8002ea2:	609a      	str	r2, [r3, #8]
 8002ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ea6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ea8:	6a3b      	ldr	r3, [r7, #32]
 8002eaa:	f383 8810 	msr	PRIMASK, r3
}
 8002eae:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2280      	movs	r2, #128	@ 0x80
 8002eb4:	2120      	movs	r1, #32
 8002eb6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2278      	movs	r2, #120	@ 0x78
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e011      	b.n	8002ee8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2220      	movs	r2, #32
 8002ec8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2280      	movs	r2, #128	@ 0x80
 8002ece:	2120      	movs	r1, #32
 8002ed0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2278      	movs	r2, #120	@ 0x78
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	0018      	movs	r0, r3
 8002eea:	46bd      	mov	sp, r7
 8002eec:	b010      	add	sp, #64	@ 0x40
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	01ffffff 	.word	0x01ffffff
 8002ef4:	fffffedf 	.word	0xfffffedf

08002ef8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	603b      	str	r3, [r7, #0]
 8002f04:	1dfb      	adds	r3, r7, #7
 8002f06:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f08:	e04b      	b.n	8002fa2 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	d048      	beq.n	8002fa2 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f10:	f7fd ffa2 	bl	8000e58 <HAL_GetTick>
 8002f14:	0002      	movs	r2, r0
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	69ba      	ldr	r2, [r7, #24]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d302      	bcc.n	8002f26 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e04b      	b.n	8002fc2 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2204      	movs	r2, #4
 8002f32:	4013      	ands	r3, r2
 8002f34:	d035      	beq.n	8002fa2 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	69db      	ldr	r3, [r3, #28]
 8002f3c:	2208      	movs	r2, #8
 8002f3e:	4013      	ands	r3, r2
 8002f40:	2b08      	cmp	r3, #8
 8002f42:	d111      	bne.n	8002f68 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2208      	movs	r2, #8
 8002f4a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	0018      	movs	r0, r3
 8002f50:	f000 f83c 	bl	8002fcc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2284      	movs	r2, #132	@ 0x84
 8002f58:	2108      	movs	r1, #8
 8002f5a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2278      	movs	r2, #120	@ 0x78
 8002f60:	2100      	movs	r1, #0
 8002f62:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e02c      	b.n	8002fc2 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	69da      	ldr	r2, [r3, #28]
 8002f6e:	2380      	movs	r3, #128	@ 0x80
 8002f70:	011b      	lsls	r3, r3, #4
 8002f72:	401a      	ands	r2, r3
 8002f74:	2380      	movs	r3, #128	@ 0x80
 8002f76:	011b      	lsls	r3, r3, #4
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d112      	bne.n	8002fa2 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2280      	movs	r2, #128	@ 0x80
 8002f82:	0112      	lsls	r2, r2, #4
 8002f84:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	0018      	movs	r0, r3
 8002f8a:	f000 f81f 	bl	8002fcc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2284      	movs	r2, #132	@ 0x84
 8002f92:	2120      	movs	r1, #32
 8002f94:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2278      	movs	r2, #120	@ 0x78
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e00f      	b.n	8002fc2 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	69db      	ldr	r3, [r3, #28]
 8002fa8:	68ba      	ldr	r2, [r7, #8]
 8002faa:	4013      	ands	r3, r2
 8002fac:	68ba      	ldr	r2, [r7, #8]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	425a      	negs	r2, r3
 8002fb2:	4153      	adcs	r3, r2
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	001a      	movs	r2, r3
 8002fb8:	1dfb      	adds	r3, r7, #7
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d0a4      	beq.n	8002f0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	0018      	movs	r0, r3
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	b004      	add	sp, #16
 8002fc8:	bd80      	pop	{r7, pc}
	...

08002fcc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b08e      	sub	sp, #56	@ 0x38
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fd4:	f3ef 8310 	mrs	r3, PRIMASK
 8002fd8:	617b      	str	r3, [r7, #20]
  return(result);
 8002fda:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fde:	2301      	movs	r3, #1
 8002fe0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	f383 8810 	msr	PRIMASK, r3
}
 8002fe8:	46c0      	nop			@ (mov r8, r8)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4926      	ldr	r1, [pc, #152]	@ (8003090 <UART_EndRxTransfer+0xc4>)
 8002ff6:	400a      	ands	r2, r1
 8002ff8:	601a      	str	r2, [r3, #0]
 8002ffa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ffc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	f383 8810 	msr	PRIMASK, r3
}
 8003004:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003006:	f3ef 8310 	mrs	r3, PRIMASK
 800300a:	623b      	str	r3, [r7, #32]
  return(result);
 800300c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800300e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003010:	2301      	movs	r3, #1
 8003012:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003016:	f383 8810 	msr	PRIMASK, r3
}
 800301a:	46c0      	nop			@ (mov r8, r8)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689a      	ldr	r2, [r3, #8]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2101      	movs	r1, #1
 8003028:	438a      	bics	r2, r1
 800302a:	609a      	str	r2, [r3, #8]
 800302c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800302e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003032:	f383 8810 	msr	PRIMASK, r3
}
 8003036:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800303c:	2b01      	cmp	r3, #1
 800303e:	d118      	bne.n	8003072 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003040:	f3ef 8310 	mrs	r3, PRIMASK
 8003044:	60bb      	str	r3, [r7, #8]
  return(result);
 8003046:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003048:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800304a:	2301      	movs	r3, #1
 800304c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f383 8810 	msr	PRIMASK, r3
}
 8003054:	46c0      	nop			@ (mov r8, r8)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2110      	movs	r1, #16
 8003062:	438a      	bics	r2, r1
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003068:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	f383 8810 	msr	PRIMASK, r3
}
 8003070:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2280      	movs	r2, #128	@ 0x80
 8003076:	2120      	movs	r1, #32
 8003078:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003086:	46c0      	nop			@ (mov r8, r8)
 8003088:	46bd      	mov	sp, r7
 800308a:	b00e      	add	sp, #56	@ 0x38
 800308c:	bd80      	pop	{r7, pc}
 800308e:	46c0      	nop			@ (mov r8, r8)
 8003090:	fffffedf 	.word	0xfffffedf

08003094 <std>:
 8003094:	2300      	movs	r3, #0
 8003096:	b510      	push	{r4, lr}
 8003098:	0004      	movs	r4, r0
 800309a:	6003      	str	r3, [r0, #0]
 800309c:	6043      	str	r3, [r0, #4]
 800309e:	6083      	str	r3, [r0, #8]
 80030a0:	8181      	strh	r1, [r0, #12]
 80030a2:	6643      	str	r3, [r0, #100]	@ 0x64
 80030a4:	81c2      	strh	r2, [r0, #14]
 80030a6:	6103      	str	r3, [r0, #16]
 80030a8:	6143      	str	r3, [r0, #20]
 80030aa:	6183      	str	r3, [r0, #24]
 80030ac:	0019      	movs	r1, r3
 80030ae:	2208      	movs	r2, #8
 80030b0:	305c      	adds	r0, #92	@ 0x5c
 80030b2:	f000 fa0f 	bl	80034d4 <memset>
 80030b6:	4b0b      	ldr	r3, [pc, #44]	@ (80030e4 <std+0x50>)
 80030b8:	6224      	str	r4, [r4, #32]
 80030ba:	6263      	str	r3, [r4, #36]	@ 0x24
 80030bc:	4b0a      	ldr	r3, [pc, #40]	@ (80030e8 <std+0x54>)
 80030be:	62a3      	str	r3, [r4, #40]	@ 0x28
 80030c0:	4b0a      	ldr	r3, [pc, #40]	@ (80030ec <std+0x58>)
 80030c2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80030c4:	4b0a      	ldr	r3, [pc, #40]	@ (80030f0 <std+0x5c>)
 80030c6:	6323      	str	r3, [r4, #48]	@ 0x30
 80030c8:	4b0a      	ldr	r3, [pc, #40]	@ (80030f4 <std+0x60>)
 80030ca:	429c      	cmp	r4, r3
 80030cc:	d005      	beq.n	80030da <std+0x46>
 80030ce:	4b0a      	ldr	r3, [pc, #40]	@ (80030f8 <std+0x64>)
 80030d0:	429c      	cmp	r4, r3
 80030d2:	d002      	beq.n	80030da <std+0x46>
 80030d4:	4b09      	ldr	r3, [pc, #36]	@ (80030fc <std+0x68>)
 80030d6:	429c      	cmp	r4, r3
 80030d8:	d103      	bne.n	80030e2 <std+0x4e>
 80030da:	0020      	movs	r0, r4
 80030dc:	3058      	adds	r0, #88	@ 0x58
 80030de:	f000 fa79 	bl	80035d4 <__retarget_lock_init_recursive>
 80030e2:	bd10      	pop	{r4, pc}
 80030e4:	080032fd 	.word	0x080032fd
 80030e8:	08003325 	.word	0x08003325
 80030ec:	0800335d 	.word	0x0800335d
 80030f0:	08003389 	.word	0x08003389
 80030f4:	20000190 	.word	0x20000190
 80030f8:	200001f8 	.word	0x200001f8
 80030fc:	20000260 	.word	0x20000260

08003100 <stdio_exit_handler>:
 8003100:	b510      	push	{r4, lr}
 8003102:	4a03      	ldr	r2, [pc, #12]	@ (8003110 <stdio_exit_handler+0x10>)
 8003104:	4903      	ldr	r1, [pc, #12]	@ (8003114 <stdio_exit_handler+0x14>)
 8003106:	4804      	ldr	r0, [pc, #16]	@ (8003118 <stdio_exit_handler+0x18>)
 8003108:	f000 f86c 	bl	80031e4 <_fwalk_sglue>
 800310c:	bd10      	pop	{r4, pc}
 800310e:	46c0      	nop			@ (mov r8, r8)
 8003110:	2000000c 	.word	0x2000000c
 8003114:	08003e65 	.word	0x08003e65
 8003118:	2000001c 	.word	0x2000001c

0800311c <cleanup_stdio>:
 800311c:	6841      	ldr	r1, [r0, #4]
 800311e:	4b0b      	ldr	r3, [pc, #44]	@ (800314c <cleanup_stdio+0x30>)
 8003120:	b510      	push	{r4, lr}
 8003122:	0004      	movs	r4, r0
 8003124:	4299      	cmp	r1, r3
 8003126:	d001      	beq.n	800312c <cleanup_stdio+0x10>
 8003128:	f000 fe9c 	bl	8003e64 <_fflush_r>
 800312c:	68a1      	ldr	r1, [r4, #8]
 800312e:	4b08      	ldr	r3, [pc, #32]	@ (8003150 <cleanup_stdio+0x34>)
 8003130:	4299      	cmp	r1, r3
 8003132:	d002      	beq.n	800313a <cleanup_stdio+0x1e>
 8003134:	0020      	movs	r0, r4
 8003136:	f000 fe95 	bl	8003e64 <_fflush_r>
 800313a:	68e1      	ldr	r1, [r4, #12]
 800313c:	4b05      	ldr	r3, [pc, #20]	@ (8003154 <cleanup_stdio+0x38>)
 800313e:	4299      	cmp	r1, r3
 8003140:	d002      	beq.n	8003148 <cleanup_stdio+0x2c>
 8003142:	0020      	movs	r0, r4
 8003144:	f000 fe8e 	bl	8003e64 <_fflush_r>
 8003148:	bd10      	pop	{r4, pc}
 800314a:	46c0      	nop			@ (mov r8, r8)
 800314c:	20000190 	.word	0x20000190
 8003150:	200001f8 	.word	0x200001f8
 8003154:	20000260 	.word	0x20000260

08003158 <global_stdio_init.part.0>:
 8003158:	b510      	push	{r4, lr}
 800315a:	4b09      	ldr	r3, [pc, #36]	@ (8003180 <global_stdio_init.part.0+0x28>)
 800315c:	4a09      	ldr	r2, [pc, #36]	@ (8003184 <global_stdio_init.part.0+0x2c>)
 800315e:	2104      	movs	r1, #4
 8003160:	601a      	str	r2, [r3, #0]
 8003162:	4809      	ldr	r0, [pc, #36]	@ (8003188 <global_stdio_init.part.0+0x30>)
 8003164:	2200      	movs	r2, #0
 8003166:	f7ff ff95 	bl	8003094 <std>
 800316a:	2201      	movs	r2, #1
 800316c:	2109      	movs	r1, #9
 800316e:	4807      	ldr	r0, [pc, #28]	@ (800318c <global_stdio_init.part.0+0x34>)
 8003170:	f7ff ff90 	bl	8003094 <std>
 8003174:	2202      	movs	r2, #2
 8003176:	2112      	movs	r1, #18
 8003178:	4805      	ldr	r0, [pc, #20]	@ (8003190 <global_stdio_init.part.0+0x38>)
 800317a:	f7ff ff8b 	bl	8003094 <std>
 800317e:	bd10      	pop	{r4, pc}
 8003180:	200002c8 	.word	0x200002c8
 8003184:	08003101 	.word	0x08003101
 8003188:	20000190 	.word	0x20000190
 800318c:	200001f8 	.word	0x200001f8
 8003190:	20000260 	.word	0x20000260

08003194 <__sfp_lock_acquire>:
 8003194:	b510      	push	{r4, lr}
 8003196:	4802      	ldr	r0, [pc, #8]	@ (80031a0 <__sfp_lock_acquire+0xc>)
 8003198:	f000 fa1d 	bl	80035d6 <__retarget_lock_acquire_recursive>
 800319c:	bd10      	pop	{r4, pc}
 800319e:	46c0      	nop			@ (mov r8, r8)
 80031a0:	200002d1 	.word	0x200002d1

080031a4 <__sfp_lock_release>:
 80031a4:	b510      	push	{r4, lr}
 80031a6:	4802      	ldr	r0, [pc, #8]	@ (80031b0 <__sfp_lock_release+0xc>)
 80031a8:	f000 fa16 	bl	80035d8 <__retarget_lock_release_recursive>
 80031ac:	bd10      	pop	{r4, pc}
 80031ae:	46c0      	nop			@ (mov r8, r8)
 80031b0:	200002d1 	.word	0x200002d1

080031b4 <__sinit>:
 80031b4:	b510      	push	{r4, lr}
 80031b6:	0004      	movs	r4, r0
 80031b8:	f7ff ffec 	bl	8003194 <__sfp_lock_acquire>
 80031bc:	6a23      	ldr	r3, [r4, #32]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d002      	beq.n	80031c8 <__sinit+0x14>
 80031c2:	f7ff ffef 	bl	80031a4 <__sfp_lock_release>
 80031c6:	bd10      	pop	{r4, pc}
 80031c8:	4b04      	ldr	r3, [pc, #16]	@ (80031dc <__sinit+0x28>)
 80031ca:	6223      	str	r3, [r4, #32]
 80031cc:	4b04      	ldr	r3, [pc, #16]	@ (80031e0 <__sinit+0x2c>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1f6      	bne.n	80031c2 <__sinit+0xe>
 80031d4:	f7ff ffc0 	bl	8003158 <global_stdio_init.part.0>
 80031d8:	e7f3      	b.n	80031c2 <__sinit+0xe>
 80031da:	46c0      	nop			@ (mov r8, r8)
 80031dc:	0800311d 	.word	0x0800311d
 80031e0:	200002c8 	.word	0x200002c8

080031e4 <_fwalk_sglue>:
 80031e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80031e6:	0014      	movs	r4, r2
 80031e8:	2600      	movs	r6, #0
 80031ea:	9000      	str	r0, [sp, #0]
 80031ec:	9101      	str	r1, [sp, #4]
 80031ee:	68a5      	ldr	r5, [r4, #8]
 80031f0:	6867      	ldr	r7, [r4, #4]
 80031f2:	3f01      	subs	r7, #1
 80031f4:	d504      	bpl.n	8003200 <_fwalk_sglue+0x1c>
 80031f6:	6824      	ldr	r4, [r4, #0]
 80031f8:	2c00      	cmp	r4, #0
 80031fa:	d1f8      	bne.n	80031ee <_fwalk_sglue+0xa>
 80031fc:	0030      	movs	r0, r6
 80031fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003200:	89ab      	ldrh	r3, [r5, #12]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d908      	bls.n	8003218 <_fwalk_sglue+0x34>
 8003206:	220e      	movs	r2, #14
 8003208:	5eab      	ldrsh	r3, [r5, r2]
 800320a:	3301      	adds	r3, #1
 800320c:	d004      	beq.n	8003218 <_fwalk_sglue+0x34>
 800320e:	0029      	movs	r1, r5
 8003210:	9800      	ldr	r0, [sp, #0]
 8003212:	9b01      	ldr	r3, [sp, #4]
 8003214:	4798      	blx	r3
 8003216:	4306      	orrs	r6, r0
 8003218:	3568      	adds	r5, #104	@ 0x68
 800321a:	e7ea      	b.n	80031f2 <_fwalk_sglue+0xe>

0800321c <iprintf>:
 800321c:	b40f      	push	{r0, r1, r2, r3}
 800321e:	b507      	push	{r0, r1, r2, lr}
 8003220:	4905      	ldr	r1, [pc, #20]	@ (8003238 <iprintf+0x1c>)
 8003222:	ab04      	add	r3, sp, #16
 8003224:	6808      	ldr	r0, [r1, #0]
 8003226:	cb04      	ldmia	r3!, {r2}
 8003228:	6881      	ldr	r1, [r0, #8]
 800322a:	9301      	str	r3, [sp, #4]
 800322c:	f000 fafa 	bl	8003824 <_vfiprintf_r>
 8003230:	b003      	add	sp, #12
 8003232:	bc08      	pop	{r3}
 8003234:	b004      	add	sp, #16
 8003236:	4718      	bx	r3
 8003238:	20000018 	.word	0x20000018

0800323c <_puts_r>:
 800323c:	6a03      	ldr	r3, [r0, #32]
 800323e:	b570      	push	{r4, r5, r6, lr}
 8003240:	0005      	movs	r5, r0
 8003242:	000e      	movs	r6, r1
 8003244:	6884      	ldr	r4, [r0, #8]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d101      	bne.n	800324e <_puts_r+0x12>
 800324a:	f7ff ffb3 	bl	80031b4 <__sinit>
 800324e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003250:	07db      	lsls	r3, r3, #31
 8003252:	d405      	bmi.n	8003260 <_puts_r+0x24>
 8003254:	89a3      	ldrh	r3, [r4, #12]
 8003256:	059b      	lsls	r3, r3, #22
 8003258:	d402      	bmi.n	8003260 <_puts_r+0x24>
 800325a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800325c:	f000 f9bb 	bl	80035d6 <__retarget_lock_acquire_recursive>
 8003260:	89a3      	ldrh	r3, [r4, #12]
 8003262:	071b      	lsls	r3, r3, #28
 8003264:	d502      	bpl.n	800326c <_puts_r+0x30>
 8003266:	6923      	ldr	r3, [r4, #16]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d11f      	bne.n	80032ac <_puts_r+0x70>
 800326c:	0021      	movs	r1, r4
 800326e:	0028      	movs	r0, r5
 8003270:	f000 f8d2 	bl	8003418 <__swsetup_r>
 8003274:	2800      	cmp	r0, #0
 8003276:	d019      	beq.n	80032ac <_puts_r+0x70>
 8003278:	2501      	movs	r5, #1
 800327a:	426d      	negs	r5, r5
 800327c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800327e:	07db      	lsls	r3, r3, #31
 8003280:	d405      	bmi.n	800328e <_puts_r+0x52>
 8003282:	89a3      	ldrh	r3, [r4, #12]
 8003284:	059b      	lsls	r3, r3, #22
 8003286:	d402      	bmi.n	800328e <_puts_r+0x52>
 8003288:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800328a:	f000 f9a5 	bl	80035d8 <__retarget_lock_release_recursive>
 800328e:	0028      	movs	r0, r5
 8003290:	bd70      	pop	{r4, r5, r6, pc}
 8003292:	3601      	adds	r6, #1
 8003294:	60a3      	str	r3, [r4, #8]
 8003296:	2b00      	cmp	r3, #0
 8003298:	da04      	bge.n	80032a4 <_puts_r+0x68>
 800329a:	69a2      	ldr	r2, [r4, #24]
 800329c:	429a      	cmp	r2, r3
 800329e:	dc16      	bgt.n	80032ce <_puts_r+0x92>
 80032a0:	290a      	cmp	r1, #10
 80032a2:	d014      	beq.n	80032ce <_puts_r+0x92>
 80032a4:	6823      	ldr	r3, [r4, #0]
 80032a6:	1c5a      	adds	r2, r3, #1
 80032a8:	6022      	str	r2, [r4, #0]
 80032aa:	7019      	strb	r1, [r3, #0]
 80032ac:	68a3      	ldr	r3, [r4, #8]
 80032ae:	7831      	ldrb	r1, [r6, #0]
 80032b0:	3b01      	subs	r3, #1
 80032b2:	2900      	cmp	r1, #0
 80032b4:	d1ed      	bne.n	8003292 <_puts_r+0x56>
 80032b6:	60a3      	str	r3, [r4, #8]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	da0f      	bge.n	80032dc <_puts_r+0xa0>
 80032bc:	0022      	movs	r2, r4
 80032be:	0028      	movs	r0, r5
 80032c0:	310a      	adds	r1, #10
 80032c2:	f000 f867 	bl	8003394 <__swbuf_r>
 80032c6:	3001      	adds	r0, #1
 80032c8:	d0d6      	beq.n	8003278 <_puts_r+0x3c>
 80032ca:	250a      	movs	r5, #10
 80032cc:	e7d6      	b.n	800327c <_puts_r+0x40>
 80032ce:	0022      	movs	r2, r4
 80032d0:	0028      	movs	r0, r5
 80032d2:	f000 f85f 	bl	8003394 <__swbuf_r>
 80032d6:	3001      	adds	r0, #1
 80032d8:	d1e8      	bne.n	80032ac <_puts_r+0x70>
 80032da:	e7cd      	b.n	8003278 <_puts_r+0x3c>
 80032dc:	6823      	ldr	r3, [r4, #0]
 80032de:	1c5a      	adds	r2, r3, #1
 80032e0:	6022      	str	r2, [r4, #0]
 80032e2:	220a      	movs	r2, #10
 80032e4:	701a      	strb	r2, [r3, #0]
 80032e6:	e7f0      	b.n	80032ca <_puts_r+0x8e>

080032e8 <puts>:
 80032e8:	b510      	push	{r4, lr}
 80032ea:	4b03      	ldr	r3, [pc, #12]	@ (80032f8 <puts+0x10>)
 80032ec:	0001      	movs	r1, r0
 80032ee:	6818      	ldr	r0, [r3, #0]
 80032f0:	f7ff ffa4 	bl	800323c <_puts_r>
 80032f4:	bd10      	pop	{r4, pc}
 80032f6:	46c0      	nop			@ (mov r8, r8)
 80032f8:	20000018 	.word	0x20000018

080032fc <__sread>:
 80032fc:	b570      	push	{r4, r5, r6, lr}
 80032fe:	000c      	movs	r4, r1
 8003300:	250e      	movs	r5, #14
 8003302:	5f49      	ldrsh	r1, [r1, r5]
 8003304:	f000 f914 	bl	8003530 <_read_r>
 8003308:	2800      	cmp	r0, #0
 800330a:	db03      	blt.n	8003314 <__sread+0x18>
 800330c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800330e:	181b      	adds	r3, r3, r0
 8003310:	6563      	str	r3, [r4, #84]	@ 0x54
 8003312:	bd70      	pop	{r4, r5, r6, pc}
 8003314:	89a3      	ldrh	r3, [r4, #12]
 8003316:	4a02      	ldr	r2, [pc, #8]	@ (8003320 <__sread+0x24>)
 8003318:	4013      	ands	r3, r2
 800331a:	81a3      	strh	r3, [r4, #12]
 800331c:	e7f9      	b.n	8003312 <__sread+0x16>
 800331e:	46c0      	nop			@ (mov r8, r8)
 8003320:	ffffefff 	.word	0xffffefff

08003324 <__swrite>:
 8003324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003326:	001f      	movs	r7, r3
 8003328:	898b      	ldrh	r3, [r1, #12]
 800332a:	0005      	movs	r5, r0
 800332c:	000c      	movs	r4, r1
 800332e:	0016      	movs	r6, r2
 8003330:	05db      	lsls	r3, r3, #23
 8003332:	d505      	bpl.n	8003340 <__swrite+0x1c>
 8003334:	230e      	movs	r3, #14
 8003336:	5ec9      	ldrsh	r1, [r1, r3]
 8003338:	2200      	movs	r2, #0
 800333a:	2302      	movs	r3, #2
 800333c:	f000 f8e4 	bl	8003508 <_lseek_r>
 8003340:	89a3      	ldrh	r3, [r4, #12]
 8003342:	4a05      	ldr	r2, [pc, #20]	@ (8003358 <__swrite+0x34>)
 8003344:	0028      	movs	r0, r5
 8003346:	4013      	ands	r3, r2
 8003348:	81a3      	strh	r3, [r4, #12]
 800334a:	0032      	movs	r2, r6
 800334c:	230e      	movs	r3, #14
 800334e:	5ee1      	ldrsh	r1, [r4, r3]
 8003350:	003b      	movs	r3, r7
 8003352:	f000 f901 	bl	8003558 <_write_r>
 8003356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003358:	ffffefff 	.word	0xffffefff

0800335c <__sseek>:
 800335c:	b570      	push	{r4, r5, r6, lr}
 800335e:	000c      	movs	r4, r1
 8003360:	250e      	movs	r5, #14
 8003362:	5f49      	ldrsh	r1, [r1, r5]
 8003364:	f000 f8d0 	bl	8003508 <_lseek_r>
 8003368:	89a3      	ldrh	r3, [r4, #12]
 800336a:	1c42      	adds	r2, r0, #1
 800336c:	d103      	bne.n	8003376 <__sseek+0x1a>
 800336e:	4a05      	ldr	r2, [pc, #20]	@ (8003384 <__sseek+0x28>)
 8003370:	4013      	ands	r3, r2
 8003372:	81a3      	strh	r3, [r4, #12]
 8003374:	bd70      	pop	{r4, r5, r6, pc}
 8003376:	2280      	movs	r2, #128	@ 0x80
 8003378:	0152      	lsls	r2, r2, #5
 800337a:	4313      	orrs	r3, r2
 800337c:	81a3      	strh	r3, [r4, #12]
 800337e:	6560      	str	r0, [r4, #84]	@ 0x54
 8003380:	e7f8      	b.n	8003374 <__sseek+0x18>
 8003382:	46c0      	nop			@ (mov r8, r8)
 8003384:	ffffefff 	.word	0xffffefff

08003388 <__sclose>:
 8003388:	b510      	push	{r4, lr}
 800338a:	230e      	movs	r3, #14
 800338c:	5ec9      	ldrsh	r1, [r1, r3]
 800338e:	f000 f8a9 	bl	80034e4 <_close_r>
 8003392:	bd10      	pop	{r4, pc}

08003394 <__swbuf_r>:
 8003394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003396:	0006      	movs	r6, r0
 8003398:	000d      	movs	r5, r1
 800339a:	0014      	movs	r4, r2
 800339c:	2800      	cmp	r0, #0
 800339e:	d004      	beq.n	80033aa <__swbuf_r+0x16>
 80033a0:	6a03      	ldr	r3, [r0, #32]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <__swbuf_r+0x16>
 80033a6:	f7ff ff05 	bl	80031b4 <__sinit>
 80033aa:	69a3      	ldr	r3, [r4, #24]
 80033ac:	60a3      	str	r3, [r4, #8]
 80033ae:	89a3      	ldrh	r3, [r4, #12]
 80033b0:	071b      	lsls	r3, r3, #28
 80033b2:	d502      	bpl.n	80033ba <__swbuf_r+0x26>
 80033b4:	6923      	ldr	r3, [r4, #16]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d109      	bne.n	80033ce <__swbuf_r+0x3a>
 80033ba:	0021      	movs	r1, r4
 80033bc:	0030      	movs	r0, r6
 80033be:	f000 f82b 	bl	8003418 <__swsetup_r>
 80033c2:	2800      	cmp	r0, #0
 80033c4:	d003      	beq.n	80033ce <__swbuf_r+0x3a>
 80033c6:	2501      	movs	r5, #1
 80033c8:	426d      	negs	r5, r5
 80033ca:	0028      	movs	r0, r5
 80033cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033ce:	6923      	ldr	r3, [r4, #16]
 80033d0:	6820      	ldr	r0, [r4, #0]
 80033d2:	b2ef      	uxtb	r7, r5
 80033d4:	1ac0      	subs	r0, r0, r3
 80033d6:	6963      	ldr	r3, [r4, #20]
 80033d8:	b2ed      	uxtb	r5, r5
 80033da:	4283      	cmp	r3, r0
 80033dc:	dc05      	bgt.n	80033ea <__swbuf_r+0x56>
 80033de:	0021      	movs	r1, r4
 80033e0:	0030      	movs	r0, r6
 80033e2:	f000 fd3f 	bl	8003e64 <_fflush_r>
 80033e6:	2800      	cmp	r0, #0
 80033e8:	d1ed      	bne.n	80033c6 <__swbuf_r+0x32>
 80033ea:	68a3      	ldr	r3, [r4, #8]
 80033ec:	3001      	adds	r0, #1
 80033ee:	3b01      	subs	r3, #1
 80033f0:	60a3      	str	r3, [r4, #8]
 80033f2:	6823      	ldr	r3, [r4, #0]
 80033f4:	1c5a      	adds	r2, r3, #1
 80033f6:	6022      	str	r2, [r4, #0]
 80033f8:	701f      	strb	r7, [r3, #0]
 80033fa:	6963      	ldr	r3, [r4, #20]
 80033fc:	4283      	cmp	r3, r0
 80033fe:	d004      	beq.n	800340a <__swbuf_r+0x76>
 8003400:	89a3      	ldrh	r3, [r4, #12]
 8003402:	07db      	lsls	r3, r3, #31
 8003404:	d5e1      	bpl.n	80033ca <__swbuf_r+0x36>
 8003406:	2d0a      	cmp	r5, #10
 8003408:	d1df      	bne.n	80033ca <__swbuf_r+0x36>
 800340a:	0021      	movs	r1, r4
 800340c:	0030      	movs	r0, r6
 800340e:	f000 fd29 	bl	8003e64 <_fflush_r>
 8003412:	2800      	cmp	r0, #0
 8003414:	d0d9      	beq.n	80033ca <__swbuf_r+0x36>
 8003416:	e7d6      	b.n	80033c6 <__swbuf_r+0x32>

08003418 <__swsetup_r>:
 8003418:	4b2d      	ldr	r3, [pc, #180]	@ (80034d0 <__swsetup_r+0xb8>)
 800341a:	b570      	push	{r4, r5, r6, lr}
 800341c:	0005      	movs	r5, r0
 800341e:	6818      	ldr	r0, [r3, #0]
 8003420:	000c      	movs	r4, r1
 8003422:	2800      	cmp	r0, #0
 8003424:	d004      	beq.n	8003430 <__swsetup_r+0x18>
 8003426:	6a03      	ldr	r3, [r0, #32]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d101      	bne.n	8003430 <__swsetup_r+0x18>
 800342c:	f7ff fec2 	bl	80031b4 <__sinit>
 8003430:	230c      	movs	r3, #12
 8003432:	5ee2      	ldrsh	r2, [r4, r3]
 8003434:	0713      	lsls	r3, r2, #28
 8003436:	d423      	bmi.n	8003480 <__swsetup_r+0x68>
 8003438:	06d3      	lsls	r3, r2, #27
 800343a:	d407      	bmi.n	800344c <__swsetup_r+0x34>
 800343c:	2309      	movs	r3, #9
 800343e:	602b      	str	r3, [r5, #0]
 8003440:	2340      	movs	r3, #64	@ 0x40
 8003442:	2001      	movs	r0, #1
 8003444:	4313      	orrs	r3, r2
 8003446:	81a3      	strh	r3, [r4, #12]
 8003448:	4240      	negs	r0, r0
 800344a:	e03a      	b.n	80034c2 <__swsetup_r+0xaa>
 800344c:	0752      	lsls	r2, r2, #29
 800344e:	d513      	bpl.n	8003478 <__swsetup_r+0x60>
 8003450:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003452:	2900      	cmp	r1, #0
 8003454:	d008      	beq.n	8003468 <__swsetup_r+0x50>
 8003456:	0023      	movs	r3, r4
 8003458:	3344      	adds	r3, #68	@ 0x44
 800345a:	4299      	cmp	r1, r3
 800345c:	d002      	beq.n	8003464 <__swsetup_r+0x4c>
 800345e:	0028      	movs	r0, r5
 8003460:	f000 f8bc 	bl	80035dc <_free_r>
 8003464:	2300      	movs	r3, #0
 8003466:	6363      	str	r3, [r4, #52]	@ 0x34
 8003468:	2224      	movs	r2, #36	@ 0x24
 800346a:	89a3      	ldrh	r3, [r4, #12]
 800346c:	4393      	bics	r3, r2
 800346e:	81a3      	strh	r3, [r4, #12]
 8003470:	2300      	movs	r3, #0
 8003472:	6063      	str	r3, [r4, #4]
 8003474:	6923      	ldr	r3, [r4, #16]
 8003476:	6023      	str	r3, [r4, #0]
 8003478:	2308      	movs	r3, #8
 800347a:	89a2      	ldrh	r2, [r4, #12]
 800347c:	4313      	orrs	r3, r2
 800347e:	81a3      	strh	r3, [r4, #12]
 8003480:	6923      	ldr	r3, [r4, #16]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10b      	bne.n	800349e <__swsetup_r+0x86>
 8003486:	21a0      	movs	r1, #160	@ 0xa0
 8003488:	2280      	movs	r2, #128	@ 0x80
 800348a:	89a3      	ldrh	r3, [r4, #12]
 800348c:	0089      	lsls	r1, r1, #2
 800348e:	0092      	lsls	r2, r2, #2
 8003490:	400b      	ands	r3, r1
 8003492:	4293      	cmp	r3, r2
 8003494:	d003      	beq.n	800349e <__swsetup_r+0x86>
 8003496:	0021      	movs	r1, r4
 8003498:	0028      	movs	r0, r5
 800349a:	f000 fd39 	bl	8003f10 <__smakebuf_r>
 800349e:	230c      	movs	r3, #12
 80034a0:	5ee2      	ldrsh	r2, [r4, r3]
 80034a2:	2101      	movs	r1, #1
 80034a4:	0013      	movs	r3, r2
 80034a6:	400b      	ands	r3, r1
 80034a8:	420a      	tst	r2, r1
 80034aa:	d00b      	beq.n	80034c4 <__swsetup_r+0xac>
 80034ac:	2300      	movs	r3, #0
 80034ae:	60a3      	str	r3, [r4, #8]
 80034b0:	6963      	ldr	r3, [r4, #20]
 80034b2:	425b      	negs	r3, r3
 80034b4:	61a3      	str	r3, [r4, #24]
 80034b6:	2000      	movs	r0, #0
 80034b8:	6923      	ldr	r3, [r4, #16]
 80034ba:	4283      	cmp	r3, r0
 80034bc:	d101      	bne.n	80034c2 <__swsetup_r+0xaa>
 80034be:	0613      	lsls	r3, r2, #24
 80034c0:	d4be      	bmi.n	8003440 <__swsetup_r+0x28>
 80034c2:	bd70      	pop	{r4, r5, r6, pc}
 80034c4:	0791      	lsls	r1, r2, #30
 80034c6:	d400      	bmi.n	80034ca <__swsetup_r+0xb2>
 80034c8:	6963      	ldr	r3, [r4, #20]
 80034ca:	60a3      	str	r3, [r4, #8]
 80034cc:	e7f3      	b.n	80034b6 <__swsetup_r+0x9e>
 80034ce:	46c0      	nop			@ (mov r8, r8)
 80034d0:	20000018 	.word	0x20000018

080034d4 <memset>:
 80034d4:	0003      	movs	r3, r0
 80034d6:	1882      	adds	r2, r0, r2
 80034d8:	4293      	cmp	r3, r2
 80034da:	d100      	bne.n	80034de <memset+0xa>
 80034dc:	4770      	bx	lr
 80034de:	7019      	strb	r1, [r3, #0]
 80034e0:	3301      	adds	r3, #1
 80034e2:	e7f9      	b.n	80034d8 <memset+0x4>

080034e4 <_close_r>:
 80034e4:	2300      	movs	r3, #0
 80034e6:	b570      	push	{r4, r5, r6, lr}
 80034e8:	4d06      	ldr	r5, [pc, #24]	@ (8003504 <_close_r+0x20>)
 80034ea:	0004      	movs	r4, r0
 80034ec:	0008      	movs	r0, r1
 80034ee:	602b      	str	r3, [r5, #0]
 80034f0:	f7fd fbba 	bl	8000c68 <_close>
 80034f4:	1c43      	adds	r3, r0, #1
 80034f6:	d103      	bne.n	8003500 <_close_r+0x1c>
 80034f8:	682b      	ldr	r3, [r5, #0]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d000      	beq.n	8003500 <_close_r+0x1c>
 80034fe:	6023      	str	r3, [r4, #0]
 8003500:	bd70      	pop	{r4, r5, r6, pc}
 8003502:	46c0      	nop			@ (mov r8, r8)
 8003504:	200002cc 	.word	0x200002cc

08003508 <_lseek_r>:
 8003508:	b570      	push	{r4, r5, r6, lr}
 800350a:	0004      	movs	r4, r0
 800350c:	0008      	movs	r0, r1
 800350e:	0011      	movs	r1, r2
 8003510:	001a      	movs	r2, r3
 8003512:	2300      	movs	r3, #0
 8003514:	4d05      	ldr	r5, [pc, #20]	@ (800352c <_lseek_r+0x24>)
 8003516:	602b      	str	r3, [r5, #0]
 8003518:	f7fd fbc7 	bl	8000caa <_lseek>
 800351c:	1c43      	adds	r3, r0, #1
 800351e:	d103      	bne.n	8003528 <_lseek_r+0x20>
 8003520:	682b      	ldr	r3, [r5, #0]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d000      	beq.n	8003528 <_lseek_r+0x20>
 8003526:	6023      	str	r3, [r4, #0]
 8003528:	bd70      	pop	{r4, r5, r6, pc}
 800352a:	46c0      	nop			@ (mov r8, r8)
 800352c:	200002cc 	.word	0x200002cc

08003530 <_read_r>:
 8003530:	b570      	push	{r4, r5, r6, lr}
 8003532:	0004      	movs	r4, r0
 8003534:	0008      	movs	r0, r1
 8003536:	0011      	movs	r1, r2
 8003538:	001a      	movs	r2, r3
 800353a:	2300      	movs	r3, #0
 800353c:	4d05      	ldr	r5, [pc, #20]	@ (8003554 <_read_r+0x24>)
 800353e:	602b      	str	r3, [r5, #0]
 8003540:	f7fd fb59 	bl	8000bf6 <_read>
 8003544:	1c43      	adds	r3, r0, #1
 8003546:	d103      	bne.n	8003550 <_read_r+0x20>
 8003548:	682b      	ldr	r3, [r5, #0]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d000      	beq.n	8003550 <_read_r+0x20>
 800354e:	6023      	str	r3, [r4, #0]
 8003550:	bd70      	pop	{r4, r5, r6, pc}
 8003552:	46c0      	nop			@ (mov r8, r8)
 8003554:	200002cc 	.word	0x200002cc

08003558 <_write_r>:
 8003558:	b570      	push	{r4, r5, r6, lr}
 800355a:	0004      	movs	r4, r0
 800355c:	0008      	movs	r0, r1
 800355e:	0011      	movs	r1, r2
 8003560:	001a      	movs	r2, r3
 8003562:	2300      	movs	r3, #0
 8003564:	4d05      	ldr	r5, [pc, #20]	@ (800357c <_write_r+0x24>)
 8003566:	602b      	str	r3, [r5, #0]
 8003568:	f7fd fb62 	bl	8000c30 <_write>
 800356c:	1c43      	adds	r3, r0, #1
 800356e:	d103      	bne.n	8003578 <_write_r+0x20>
 8003570:	682b      	ldr	r3, [r5, #0]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d000      	beq.n	8003578 <_write_r+0x20>
 8003576:	6023      	str	r3, [r4, #0]
 8003578:	bd70      	pop	{r4, r5, r6, pc}
 800357a:	46c0      	nop			@ (mov r8, r8)
 800357c:	200002cc 	.word	0x200002cc

08003580 <__errno>:
 8003580:	4b01      	ldr	r3, [pc, #4]	@ (8003588 <__errno+0x8>)
 8003582:	6818      	ldr	r0, [r3, #0]
 8003584:	4770      	bx	lr
 8003586:	46c0      	nop			@ (mov r8, r8)
 8003588:	20000018 	.word	0x20000018

0800358c <__libc_init_array>:
 800358c:	b570      	push	{r4, r5, r6, lr}
 800358e:	2600      	movs	r6, #0
 8003590:	4c0c      	ldr	r4, [pc, #48]	@ (80035c4 <__libc_init_array+0x38>)
 8003592:	4d0d      	ldr	r5, [pc, #52]	@ (80035c8 <__libc_init_array+0x3c>)
 8003594:	1b64      	subs	r4, r4, r5
 8003596:	10a4      	asrs	r4, r4, #2
 8003598:	42a6      	cmp	r6, r4
 800359a:	d109      	bne.n	80035b0 <__libc_init_array+0x24>
 800359c:	2600      	movs	r6, #0
 800359e:	f000 fd3b 	bl	8004018 <_init>
 80035a2:	4c0a      	ldr	r4, [pc, #40]	@ (80035cc <__libc_init_array+0x40>)
 80035a4:	4d0a      	ldr	r5, [pc, #40]	@ (80035d0 <__libc_init_array+0x44>)
 80035a6:	1b64      	subs	r4, r4, r5
 80035a8:	10a4      	asrs	r4, r4, #2
 80035aa:	42a6      	cmp	r6, r4
 80035ac:	d105      	bne.n	80035ba <__libc_init_array+0x2e>
 80035ae:	bd70      	pop	{r4, r5, r6, pc}
 80035b0:	00b3      	lsls	r3, r6, #2
 80035b2:	58eb      	ldr	r3, [r5, r3]
 80035b4:	4798      	blx	r3
 80035b6:	3601      	adds	r6, #1
 80035b8:	e7ee      	b.n	8003598 <__libc_init_array+0xc>
 80035ba:	00b3      	lsls	r3, r6, #2
 80035bc:	58eb      	ldr	r3, [r5, r3]
 80035be:	4798      	blx	r3
 80035c0:	3601      	adds	r6, #1
 80035c2:	e7f2      	b.n	80035aa <__libc_init_array+0x1e>
 80035c4:	08004170 	.word	0x08004170
 80035c8:	08004170 	.word	0x08004170
 80035cc:	08004174 	.word	0x08004174
 80035d0:	08004170 	.word	0x08004170

080035d4 <__retarget_lock_init_recursive>:
 80035d4:	4770      	bx	lr

080035d6 <__retarget_lock_acquire_recursive>:
 80035d6:	4770      	bx	lr

080035d8 <__retarget_lock_release_recursive>:
 80035d8:	4770      	bx	lr
	...

080035dc <_free_r>:
 80035dc:	b570      	push	{r4, r5, r6, lr}
 80035de:	0005      	movs	r5, r0
 80035e0:	1e0c      	subs	r4, r1, #0
 80035e2:	d010      	beq.n	8003606 <_free_r+0x2a>
 80035e4:	3c04      	subs	r4, #4
 80035e6:	6823      	ldr	r3, [r4, #0]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	da00      	bge.n	80035ee <_free_r+0x12>
 80035ec:	18e4      	adds	r4, r4, r3
 80035ee:	0028      	movs	r0, r5
 80035f0:	f000 f8e0 	bl	80037b4 <__malloc_lock>
 80035f4:	4a1d      	ldr	r2, [pc, #116]	@ (800366c <_free_r+0x90>)
 80035f6:	6813      	ldr	r3, [r2, #0]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d105      	bne.n	8003608 <_free_r+0x2c>
 80035fc:	6063      	str	r3, [r4, #4]
 80035fe:	6014      	str	r4, [r2, #0]
 8003600:	0028      	movs	r0, r5
 8003602:	f000 f8df 	bl	80037c4 <__malloc_unlock>
 8003606:	bd70      	pop	{r4, r5, r6, pc}
 8003608:	42a3      	cmp	r3, r4
 800360a:	d908      	bls.n	800361e <_free_r+0x42>
 800360c:	6820      	ldr	r0, [r4, #0]
 800360e:	1821      	adds	r1, r4, r0
 8003610:	428b      	cmp	r3, r1
 8003612:	d1f3      	bne.n	80035fc <_free_r+0x20>
 8003614:	6819      	ldr	r1, [r3, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	1809      	adds	r1, r1, r0
 800361a:	6021      	str	r1, [r4, #0]
 800361c:	e7ee      	b.n	80035fc <_free_r+0x20>
 800361e:	001a      	movs	r2, r3
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <_free_r+0x4e>
 8003626:	42a3      	cmp	r3, r4
 8003628:	d9f9      	bls.n	800361e <_free_r+0x42>
 800362a:	6811      	ldr	r1, [r2, #0]
 800362c:	1850      	adds	r0, r2, r1
 800362e:	42a0      	cmp	r0, r4
 8003630:	d10b      	bne.n	800364a <_free_r+0x6e>
 8003632:	6820      	ldr	r0, [r4, #0]
 8003634:	1809      	adds	r1, r1, r0
 8003636:	1850      	adds	r0, r2, r1
 8003638:	6011      	str	r1, [r2, #0]
 800363a:	4283      	cmp	r3, r0
 800363c:	d1e0      	bne.n	8003600 <_free_r+0x24>
 800363e:	6818      	ldr	r0, [r3, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	1841      	adds	r1, r0, r1
 8003644:	6011      	str	r1, [r2, #0]
 8003646:	6053      	str	r3, [r2, #4]
 8003648:	e7da      	b.n	8003600 <_free_r+0x24>
 800364a:	42a0      	cmp	r0, r4
 800364c:	d902      	bls.n	8003654 <_free_r+0x78>
 800364e:	230c      	movs	r3, #12
 8003650:	602b      	str	r3, [r5, #0]
 8003652:	e7d5      	b.n	8003600 <_free_r+0x24>
 8003654:	6820      	ldr	r0, [r4, #0]
 8003656:	1821      	adds	r1, r4, r0
 8003658:	428b      	cmp	r3, r1
 800365a:	d103      	bne.n	8003664 <_free_r+0x88>
 800365c:	6819      	ldr	r1, [r3, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	1809      	adds	r1, r1, r0
 8003662:	6021      	str	r1, [r4, #0]
 8003664:	6063      	str	r3, [r4, #4]
 8003666:	6054      	str	r4, [r2, #4]
 8003668:	e7ca      	b.n	8003600 <_free_r+0x24>
 800366a:	46c0      	nop			@ (mov r8, r8)
 800366c:	200002d8 	.word	0x200002d8

08003670 <sbrk_aligned>:
 8003670:	b570      	push	{r4, r5, r6, lr}
 8003672:	4e0f      	ldr	r6, [pc, #60]	@ (80036b0 <sbrk_aligned+0x40>)
 8003674:	000d      	movs	r5, r1
 8003676:	6831      	ldr	r1, [r6, #0]
 8003678:	0004      	movs	r4, r0
 800367a:	2900      	cmp	r1, #0
 800367c:	d102      	bne.n	8003684 <sbrk_aligned+0x14>
 800367e:	f000 fcad 	bl	8003fdc <_sbrk_r>
 8003682:	6030      	str	r0, [r6, #0]
 8003684:	0029      	movs	r1, r5
 8003686:	0020      	movs	r0, r4
 8003688:	f000 fca8 	bl	8003fdc <_sbrk_r>
 800368c:	1c43      	adds	r3, r0, #1
 800368e:	d103      	bne.n	8003698 <sbrk_aligned+0x28>
 8003690:	2501      	movs	r5, #1
 8003692:	426d      	negs	r5, r5
 8003694:	0028      	movs	r0, r5
 8003696:	bd70      	pop	{r4, r5, r6, pc}
 8003698:	2303      	movs	r3, #3
 800369a:	1cc5      	adds	r5, r0, #3
 800369c:	439d      	bics	r5, r3
 800369e:	42a8      	cmp	r0, r5
 80036a0:	d0f8      	beq.n	8003694 <sbrk_aligned+0x24>
 80036a2:	1a29      	subs	r1, r5, r0
 80036a4:	0020      	movs	r0, r4
 80036a6:	f000 fc99 	bl	8003fdc <_sbrk_r>
 80036aa:	3001      	adds	r0, #1
 80036ac:	d1f2      	bne.n	8003694 <sbrk_aligned+0x24>
 80036ae:	e7ef      	b.n	8003690 <sbrk_aligned+0x20>
 80036b0:	200002d4 	.word	0x200002d4

080036b4 <_malloc_r>:
 80036b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80036b6:	2203      	movs	r2, #3
 80036b8:	1ccb      	adds	r3, r1, #3
 80036ba:	4393      	bics	r3, r2
 80036bc:	3308      	adds	r3, #8
 80036be:	0005      	movs	r5, r0
 80036c0:	001f      	movs	r7, r3
 80036c2:	2b0c      	cmp	r3, #12
 80036c4:	d234      	bcs.n	8003730 <_malloc_r+0x7c>
 80036c6:	270c      	movs	r7, #12
 80036c8:	42b9      	cmp	r1, r7
 80036ca:	d833      	bhi.n	8003734 <_malloc_r+0x80>
 80036cc:	0028      	movs	r0, r5
 80036ce:	f000 f871 	bl	80037b4 <__malloc_lock>
 80036d2:	4e37      	ldr	r6, [pc, #220]	@ (80037b0 <_malloc_r+0xfc>)
 80036d4:	6833      	ldr	r3, [r6, #0]
 80036d6:	001c      	movs	r4, r3
 80036d8:	2c00      	cmp	r4, #0
 80036da:	d12f      	bne.n	800373c <_malloc_r+0x88>
 80036dc:	0039      	movs	r1, r7
 80036de:	0028      	movs	r0, r5
 80036e0:	f7ff ffc6 	bl	8003670 <sbrk_aligned>
 80036e4:	0004      	movs	r4, r0
 80036e6:	1c43      	adds	r3, r0, #1
 80036e8:	d15f      	bne.n	80037aa <_malloc_r+0xf6>
 80036ea:	6834      	ldr	r4, [r6, #0]
 80036ec:	9400      	str	r4, [sp, #0]
 80036ee:	9b00      	ldr	r3, [sp, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d14a      	bne.n	800378a <_malloc_r+0xd6>
 80036f4:	2c00      	cmp	r4, #0
 80036f6:	d052      	beq.n	800379e <_malloc_r+0xea>
 80036f8:	6823      	ldr	r3, [r4, #0]
 80036fa:	0028      	movs	r0, r5
 80036fc:	18e3      	adds	r3, r4, r3
 80036fe:	9900      	ldr	r1, [sp, #0]
 8003700:	9301      	str	r3, [sp, #4]
 8003702:	f000 fc6b 	bl	8003fdc <_sbrk_r>
 8003706:	9b01      	ldr	r3, [sp, #4]
 8003708:	4283      	cmp	r3, r0
 800370a:	d148      	bne.n	800379e <_malloc_r+0xea>
 800370c:	6823      	ldr	r3, [r4, #0]
 800370e:	0028      	movs	r0, r5
 8003710:	1aff      	subs	r7, r7, r3
 8003712:	0039      	movs	r1, r7
 8003714:	f7ff ffac 	bl	8003670 <sbrk_aligned>
 8003718:	3001      	adds	r0, #1
 800371a:	d040      	beq.n	800379e <_malloc_r+0xea>
 800371c:	6823      	ldr	r3, [r4, #0]
 800371e:	19db      	adds	r3, r3, r7
 8003720:	6023      	str	r3, [r4, #0]
 8003722:	6833      	ldr	r3, [r6, #0]
 8003724:	685a      	ldr	r2, [r3, #4]
 8003726:	2a00      	cmp	r2, #0
 8003728:	d133      	bne.n	8003792 <_malloc_r+0xde>
 800372a:	9b00      	ldr	r3, [sp, #0]
 800372c:	6033      	str	r3, [r6, #0]
 800372e:	e019      	b.n	8003764 <_malloc_r+0xb0>
 8003730:	2b00      	cmp	r3, #0
 8003732:	dac9      	bge.n	80036c8 <_malloc_r+0x14>
 8003734:	230c      	movs	r3, #12
 8003736:	602b      	str	r3, [r5, #0]
 8003738:	2000      	movs	r0, #0
 800373a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800373c:	6821      	ldr	r1, [r4, #0]
 800373e:	1bc9      	subs	r1, r1, r7
 8003740:	d420      	bmi.n	8003784 <_malloc_r+0xd0>
 8003742:	290b      	cmp	r1, #11
 8003744:	d90a      	bls.n	800375c <_malloc_r+0xa8>
 8003746:	19e2      	adds	r2, r4, r7
 8003748:	6027      	str	r7, [r4, #0]
 800374a:	42a3      	cmp	r3, r4
 800374c:	d104      	bne.n	8003758 <_malloc_r+0xa4>
 800374e:	6032      	str	r2, [r6, #0]
 8003750:	6863      	ldr	r3, [r4, #4]
 8003752:	6011      	str	r1, [r2, #0]
 8003754:	6053      	str	r3, [r2, #4]
 8003756:	e005      	b.n	8003764 <_malloc_r+0xb0>
 8003758:	605a      	str	r2, [r3, #4]
 800375a:	e7f9      	b.n	8003750 <_malloc_r+0x9c>
 800375c:	6862      	ldr	r2, [r4, #4]
 800375e:	42a3      	cmp	r3, r4
 8003760:	d10e      	bne.n	8003780 <_malloc_r+0xcc>
 8003762:	6032      	str	r2, [r6, #0]
 8003764:	0028      	movs	r0, r5
 8003766:	f000 f82d 	bl	80037c4 <__malloc_unlock>
 800376a:	0020      	movs	r0, r4
 800376c:	2207      	movs	r2, #7
 800376e:	300b      	adds	r0, #11
 8003770:	1d23      	adds	r3, r4, #4
 8003772:	4390      	bics	r0, r2
 8003774:	1ac2      	subs	r2, r0, r3
 8003776:	4298      	cmp	r0, r3
 8003778:	d0df      	beq.n	800373a <_malloc_r+0x86>
 800377a:	1a1b      	subs	r3, r3, r0
 800377c:	50a3      	str	r3, [r4, r2]
 800377e:	e7dc      	b.n	800373a <_malloc_r+0x86>
 8003780:	605a      	str	r2, [r3, #4]
 8003782:	e7ef      	b.n	8003764 <_malloc_r+0xb0>
 8003784:	0023      	movs	r3, r4
 8003786:	6864      	ldr	r4, [r4, #4]
 8003788:	e7a6      	b.n	80036d8 <_malloc_r+0x24>
 800378a:	9c00      	ldr	r4, [sp, #0]
 800378c:	6863      	ldr	r3, [r4, #4]
 800378e:	9300      	str	r3, [sp, #0]
 8003790:	e7ad      	b.n	80036ee <_malloc_r+0x3a>
 8003792:	001a      	movs	r2, r3
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	42a3      	cmp	r3, r4
 8003798:	d1fb      	bne.n	8003792 <_malloc_r+0xde>
 800379a:	2300      	movs	r3, #0
 800379c:	e7da      	b.n	8003754 <_malloc_r+0xa0>
 800379e:	230c      	movs	r3, #12
 80037a0:	0028      	movs	r0, r5
 80037a2:	602b      	str	r3, [r5, #0]
 80037a4:	f000 f80e 	bl	80037c4 <__malloc_unlock>
 80037a8:	e7c6      	b.n	8003738 <_malloc_r+0x84>
 80037aa:	6007      	str	r7, [r0, #0]
 80037ac:	e7da      	b.n	8003764 <_malloc_r+0xb0>
 80037ae:	46c0      	nop			@ (mov r8, r8)
 80037b0:	200002d8 	.word	0x200002d8

080037b4 <__malloc_lock>:
 80037b4:	b510      	push	{r4, lr}
 80037b6:	4802      	ldr	r0, [pc, #8]	@ (80037c0 <__malloc_lock+0xc>)
 80037b8:	f7ff ff0d 	bl	80035d6 <__retarget_lock_acquire_recursive>
 80037bc:	bd10      	pop	{r4, pc}
 80037be:	46c0      	nop			@ (mov r8, r8)
 80037c0:	200002d0 	.word	0x200002d0

080037c4 <__malloc_unlock>:
 80037c4:	b510      	push	{r4, lr}
 80037c6:	4802      	ldr	r0, [pc, #8]	@ (80037d0 <__malloc_unlock+0xc>)
 80037c8:	f7ff ff06 	bl	80035d8 <__retarget_lock_release_recursive>
 80037cc:	bd10      	pop	{r4, pc}
 80037ce:	46c0      	nop			@ (mov r8, r8)
 80037d0:	200002d0 	.word	0x200002d0

080037d4 <__sfputc_r>:
 80037d4:	6893      	ldr	r3, [r2, #8]
 80037d6:	b510      	push	{r4, lr}
 80037d8:	3b01      	subs	r3, #1
 80037da:	6093      	str	r3, [r2, #8]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	da04      	bge.n	80037ea <__sfputc_r+0x16>
 80037e0:	6994      	ldr	r4, [r2, #24]
 80037e2:	42a3      	cmp	r3, r4
 80037e4:	db07      	blt.n	80037f6 <__sfputc_r+0x22>
 80037e6:	290a      	cmp	r1, #10
 80037e8:	d005      	beq.n	80037f6 <__sfputc_r+0x22>
 80037ea:	6813      	ldr	r3, [r2, #0]
 80037ec:	1c58      	adds	r0, r3, #1
 80037ee:	6010      	str	r0, [r2, #0]
 80037f0:	7019      	strb	r1, [r3, #0]
 80037f2:	0008      	movs	r0, r1
 80037f4:	bd10      	pop	{r4, pc}
 80037f6:	f7ff fdcd 	bl	8003394 <__swbuf_r>
 80037fa:	0001      	movs	r1, r0
 80037fc:	e7f9      	b.n	80037f2 <__sfputc_r+0x1e>

080037fe <__sfputs_r>:
 80037fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003800:	0006      	movs	r6, r0
 8003802:	000f      	movs	r7, r1
 8003804:	0014      	movs	r4, r2
 8003806:	18d5      	adds	r5, r2, r3
 8003808:	42ac      	cmp	r4, r5
 800380a:	d101      	bne.n	8003810 <__sfputs_r+0x12>
 800380c:	2000      	movs	r0, #0
 800380e:	e007      	b.n	8003820 <__sfputs_r+0x22>
 8003810:	7821      	ldrb	r1, [r4, #0]
 8003812:	003a      	movs	r2, r7
 8003814:	0030      	movs	r0, r6
 8003816:	f7ff ffdd 	bl	80037d4 <__sfputc_r>
 800381a:	3401      	adds	r4, #1
 800381c:	1c43      	adds	r3, r0, #1
 800381e:	d1f3      	bne.n	8003808 <__sfputs_r+0xa>
 8003820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003824 <_vfiprintf_r>:
 8003824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003826:	b0a1      	sub	sp, #132	@ 0x84
 8003828:	000f      	movs	r7, r1
 800382a:	0015      	movs	r5, r2
 800382c:	001e      	movs	r6, r3
 800382e:	9003      	str	r0, [sp, #12]
 8003830:	2800      	cmp	r0, #0
 8003832:	d004      	beq.n	800383e <_vfiprintf_r+0x1a>
 8003834:	6a03      	ldr	r3, [r0, #32]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d101      	bne.n	800383e <_vfiprintf_r+0x1a>
 800383a:	f7ff fcbb 	bl	80031b4 <__sinit>
 800383e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003840:	07db      	lsls	r3, r3, #31
 8003842:	d405      	bmi.n	8003850 <_vfiprintf_r+0x2c>
 8003844:	89bb      	ldrh	r3, [r7, #12]
 8003846:	059b      	lsls	r3, r3, #22
 8003848:	d402      	bmi.n	8003850 <_vfiprintf_r+0x2c>
 800384a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800384c:	f7ff fec3 	bl	80035d6 <__retarget_lock_acquire_recursive>
 8003850:	89bb      	ldrh	r3, [r7, #12]
 8003852:	071b      	lsls	r3, r3, #28
 8003854:	d502      	bpl.n	800385c <_vfiprintf_r+0x38>
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d113      	bne.n	8003884 <_vfiprintf_r+0x60>
 800385c:	0039      	movs	r1, r7
 800385e:	9803      	ldr	r0, [sp, #12]
 8003860:	f7ff fdda 	bl	8003418 <__swsetup_r>
 8003864:	2800      	cmp	r0, #0
 8003866:	d00d      	beq.n	8003884 <_vfiprintf_r+0x60>
 8003868:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800386a:	07db      	lsls	r3, r3, #31
 800386c:	d503      	bpl.n	8003876 <_vfiprintf_r+0x52>
 800386e:	2001      	movs	r0, #1
 8003870:	4240      	negs	r0, r0
 8003872:	b021      	add	sp, #132	@ 0x84
 8003874:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003876:	89bb      	ldrh	r3, [r7, #12]
 8003878:	059b      	lsls	r3, r3, #22
 800387a:	d4f8      	bmi.n	800386e <_vfiprintf_r+0x4a>
 800387c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800387e:	f7ff feab 	bl	80035d8 <__retarget_lock_release_recursive>
 8003882:	e7f4      	b.n	800386e <_vfiprintf_r+0x4a>
 8003884:	2300      	movs	r3, #0
 8003886:	ac08      	add	r4, sp, #32
 8003888:	6163      	str	r3, [r4, #20]
 800388a:	3320      	adds	r3, #32
 800388c:	7663      	strb	r3, [r4, #25]
 800388e:	3310      	adds	r3, #16
 8003890:	76a3      	strb	r3, [r4, #26]
 8003892:	9607      	str	r6, [sp, #28]
 8003894:	002e      	movs	r6, r5
 8003896:	7833      	ldrb	r3, [r6, #0]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d001      	beq.n	80038a0 <_vfiprintf_r+0x7c>
 800389c:	2b25      	cmp	r3, #37	@ 0x25
 800389e:	d148      	bne.n	8003932 <_vfiprintf_r+0x10e>
 80038a0:	1b73      	subs	r3, r6, r5
 80038a2:	9305      	str	r3, [sp, #20]
 80038a4:	42ae      	cmp	r6, r5
 80038a6:	d00b      	beq.n	80038c0 <_vfiprintf_r+0x9c>
 80038a8:	002a      	movs	r2, r5
 80038aa:	0039      	movs	r1, r7
 80038ac:	9803      	ldr	r0, [sp, #12]
 80038ae:	f7ff ffa6 	bl	80037fe <__sfputs_r>
 80038b2:	3001      	adds	r0, #1
 80038b4:	d100      	bne.n	80038b8 <_vfiprintf_r+0x94>
 80038b6:	e0ae      	b.n	8003a16 <_vfiprintf_r+0x1f2>
 80038b8:	6963      	ldr	r3, [r4, #20]
 80038ba:	9a05      	ldr	r2, [sp, #20]
 80038bc:	189b      	adds	r3, r3, r2
 80038be:	6163      	str	r3, [r4, #20]
 80038c0:	7833      	ldrb	r3, [r6, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d100      	bne.n	80038c8 <_vfiprintf_r+0xa4>
 80038c6:	e0a6      	b.n	8003a16 <_vfiprintf_r+0x1f2>
 80038c8:	2201      	movs	r2, #1
 80038ca:	2300      	movs	r3, #0
 80038cc:	4252      	negs	r2, r2
 80038ce:	6062      	str	r2, [r4, #4]
 80038d0:	a904      	add	r1, sp, #16
 80038d2:	3254      	adds	r2, #84	@ 0x54
 80038d4:	1852      	adds	r2, r2, r1
 80038d6:	1c75      	adds	r5, r6, #1
 80038d8:	6023      	str	r3, [r4, #0]
 80038da:	60e3      	str	r3, [r4, #12]
 80038dc:	60a3      	str	r3, [r4, #8]
 80038de:	7013      	strb	r3, [r2, #0]
 80038e0:	65a3      	str	r3, [r4, #88]	@ 0x58
 80038e2:	4b59      	ldr	r3, [pc, #356]	@ (8003a48 <_vfiprintf_r+0x224>)
 80038e4:	2205      	movs	r2, #5
 80038e6:	0018      	movs	r0, r3
 80038e8:	7829      	ldrb	r1, [r5, #0]
 80038ea:	9305      	str	r3, [sp, #20]
 80038ec:	f000 fb88 	bl	8004000 <memchr>
 80038f0:	1c6e      	adds	r6, r5, #1
 80038f2:	2800      	cmp	r0, #0
 80038f4:	d11f      	bne.n	8003936 <_vfiprintf_r+0x112>
 80038f6:	6822      	ldr	r2, [r4, #0]
 80038f8:	06d3      	lsls	r3, r2, #27
 80038fa:	d504      	bpl.n	8003906 <_vfiprintf_r+0xe2>
 80038fc:	2353      	movs	r3, #83	@ 0x53
 80038fe:	a904      	add	r1, sp, #16
 8003900:	185b      	adds	r3, r3, r1
 8003902:	2120      	movs	r1, #32
 8003904:	7019      	strb	r1, [r3, #0]
 8003906:	0713      	lsls	r3, r2, #28
 8003908:	d504      	bpl.n	8003914 <_vfiprintf_r+0xf0>
 800390a:	2353      	movs	r3, #83	@ 0x53
 800390c:	a904      	add	r1, sp, #16
 800390e:	185b      	adds	r3, r3, r1
 8003910:	212b      	movs	r1, #43	@ 0x2b
 8003912:	7019      	strb	r1, [r3, #0]
 8003914:	782b      	ldrb	r3, [r5, #0]
 8003916:	2b2a      	cmp	r3, #42	@ 0x2a
 8003918:	d016      	beq.n	8003948 <_vfiprintf_r+0x124>
 800391a:	002e      	movs	r6, r5
 800391c:	2100      	movs	r1, #0
 800391e:	200a      	movs	r0, #10
 8003920:	68e3      	ldr	r3, [r4, #12]
 8003922:	7832      	ldrb	r2, [r6, #0]
 8003924:	1c75      	adds	r5, r6, #1
 8003926:	3a30      	subs	r2, #48	@ 0x30
 8003928:	2a09      	cmp	r2, #9
 800392a:	d950      	bls.n	80039ce <_vfiprintf_r+0x1aa>
 800392c:	2900      	cmp	r1, #0
 800392e:	d111      	bne.n	8003954 <_vfiprintf_r+0x130>
 8003930:	e017      	b.n	8003962 <_vfiprintf_r+0x13e>
 8003932:	3601      	adds	r6, #1
 8003934:	e7af      	b.n	8003896 <_vfiprintf_r+0x72>
 8003936:	9b05      	ldr	r3, [sp, #20]
 8003938:	6822      	ldr	r2, [r4, #0]
 800393a:	1ac0      	subs	r0, r0, r3
 800393c:	2301      	movs	r3, #1
 800393e:	4083      	lsls	r3, r0
 8003940:	4313      	orrs	r3, r2
 8003942:	0035      	movs	r5, r6
 8003944:	6023      	str	r3, [r4, #0]
 8003946:	e7cc      	b.n	80038e2 <_vfiprintf_r+0xbe>
 8003948:	9b07      	ldr	r3, [sp, #28]
 800394a:	1d19      	adds	r1, r3, #4
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	9107      	str	r1, [sp, #28]
 8003950:	2b00      	cmp	r3, #0
 8003952:	db01      	blt.n	8003958 <_vfiprintf_r+0x134>
 8003954:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003956:	e004      	b.n	8003962 <_vfiprintf_r+0x13e>
 8003958:	425b      	negs	r3, r3
 800395a:	60e3      	str	r3, [r4, #12]
 800395c:	2302      	movs	r3, #2
 800395e:	4313      	orrs	r3, r2
 8003960:	6023      	str	r3, [r4, #0]
 8003962:	7833      	ldrb	r3, [r6, #0]
 8003964:	2b2e      	cmp	r3, #46	@ 0x2e
 8003966:	d10c      	bne.n	8003982 <_vfiprintf_r+0x15e>
 8003968:	7873      	ldrb	r3, [r6, #1]
 800396a:	2b2a      	cmp	r3, #42	@ 0x2a
 800396c:	d134      	bne.n	80039d8 <_vfiprintf_r+0x1b4>
 800396e:	9b07      	ldr	r3, [sp, #28]
 8003970:	3602      	adds	r6, #2
 8003972:	1d1a      	adds	r2, r3, #4
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	9207      	str	r2, [sp, #28]
 8003978:	2b00      	cmp	r3, #0
 800397a:	da01      	bge.n	8003980 <_vfiprintf_r+0x15c>
 800397c:	2301      	movs	r3, #1
 800397e:	425b      	negs	r3, r3
 8003980:	9309      	str	r3, [sp, #36]	@ 0x24
 8003982:	4d32      	ldr	r5, [pc, #200]	@ (8003a4c <_vfiprintf_r+0x228>)
 8003984:	2203      	movs	r2, #3
 8003986:	0028      	movs	r0, r5
 8003988:	7831      	ldrb	r1, [r6, #0]
 800398a:	f000 fb39 	bl	8004000 <memchr>
 800398e:	2800      	cmp	r0, #0
 8003990:	d006      	beq.n	80039a0 <_vfiprintf_r+0x17c>
 8003992:	2340      	movs	r3, #64	@ 0x40
 8003994:	1b40      	subs	r0, r0, r5
 8003996:	4083      	lsls	r3, r0
 8003998:	6822      	ldr	r2, [r4, #0]
 800399a:	3601      	adds	r6, #1
 800399c:	4313      	orrs	r3, r2
 800399e:	6023      	str	r3, [r4, #0]
 80039a0:	7831      	ldrb	r1, [r6, #0]
 80039a2:	2206      	movs	r2, #6
 80039a4:	482a      	ldr	r0, [pc, #168]	@ (8003a50 <_vfiprintf_r+0x22c>)
 80039a6:	1c75      	adds	r5, r6, #1
 80039a8:	7621      	strb	r1, [r4, #24]
 80039aa:	f000 fb29 	bl	8004000 <memchr>
 80039ae:	2800      	cmp	r0, #0
 80039b0:	d040      	beq.n	8003a34 <_vfiprintf_r+0x210>
 80039b2:	4b28      	ldr	r3, [pc, #160]	@ (8003a54 <_vfiprintf_r+0x230>)
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d122      	bne.n	80039fe <_vfiprintf_r+0x1da>
 80039b8:	2207      	movs	r2, #7
 80039ba:	9b07      	ldr	r3, [sp, #28]
 80039bc:	3307      	adds	r3, #7
 80039be:	4393      	bics	r3, r2
 80039c0:	3308      	adds	r3, #8
 80039c2:	9307      	str	r3, [sp, #28]
 80039c4:	6963      	ldr	r3, [r4, #20]
 80039c6:	9a04      	ldr	r2, [sp, #16]
 80039c8:	189b      	adds	r3, r3, r2
 80039ca:	6163      	str	r3, [r4, #20]
 80039cc:	e762      	b.n	8003894 <_vfiprintf_r+0x70>
 80039ce:	4343      	muls	r3, r0
 80039d0:	002e      	movs	r6, r5
 80039d2:	2101      	movs	r1, #1
 80039d4:	189b      	adds	r3, r3, r2
 80039d6:	e7a4      	b.n	8003922 <_vfiprintf_r+0xfe>
 80039d8:	2300      	movs	r3, #0
 80039da:	200a      	movs	r0, #10
 80039dc:	0019      	movs	r1, r3
 80039de:	3601      	adds	r6, #1
 80039e0:	6063      	str	r3, [r4, #4]
 80039e2:	7832      	ldrb	r2, [r6, #0]
 80039e4:	1c75      	adds	r5, r6, #1
 80039e6:	3a30      	subs	r2, #48	@ 0x30
 80039e8:	2a09      	cmp	r2, #9
 80039ea:	d903      	bls.n	80039f4 <_vfiprintf_r+0x1d0>
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d0c8      	beq.n	8003982 <_vfiprintf_r+0x15e>
 80039f0:	9109      	str	r1, [sp, #36]	@ 0x24
 80039f2:	e7c6      	b.n	8003982 <_vfiprintf_r+0x15e>
 80039f4:	4341      	muls	r1, r0
 80039f6:	002e      	movs	r6, r5
 80039f8:	2301      	movs	r3, #1
 80039fa:	1889      	adds	r1, r1, r2
 80039fc:	e7f1      	b.n	80039e2 <_vfiprintf_r+0x1be>
 80039fe:	aa07      	add	r2, sp, #28
 8003a00:	9200      	str	r2, [sp, #0]
 8003a02:	0021      	movs	r1, r4
 8003a04:	003a      	movs	r2, r7
 8003a06:	4b14      	ldr	r3, [pc, #80]	@ (8003a58 <_vfiprintf_r+0x234>)
 8003a08:	9803      	ldr	r0, [sp, #12]
 8003a0a:	e000      	b.n	8003a0e <_vfiprintf_r+0x1ea>
 8003a0c:	bf00      	nop
 8003a0e:	9004      	str	r0, [sp, #16]
 8003a10:	9b04      	ldr	r3, [sp, #16]
 8003a12:	3301      	adds	r3, #1
 8003a14:	d1d6      	bne.n	80039c4 <_vfiprintf_r+0x1a0>
 8003a16:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a18:	07db      	lsls	r3, r3, #31
 8003a1a:	d405      	bmi.n	8003a28 <_vfiprintf_r+0x204>
 8003a1c:	89bb      	ldrh	r3, [r7, #12]
 8003a1e:	059b      	lsls	r3, r3, #22
 8003a20:	d402      	bmi.n	8003a28 <_vfiprintf_r+0x204>
 8003a22:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003a24:	f7ff fdd8 	bl	80035d8 <__retarget_lock_release_recursive>
 8003a28:	89bb      	ldrh	r3, [r7, #12]
 8003a2a:	065b      	lsls	r3, r3, #25
 8003a2c:	d500      	bpl.n	8003a30 <_vfiprintf_r+0x20c>
 8003a2e:	e71e      	b.n	800386e <_vfiprintf_r+0x4a>
 8003a30:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003a32:	e71e      	b.n	8003872 <_vfiprintf_r+0x4e>
 8003a34:	aa07      	add	r2, sp, #28
 8003a36:	9200      	str	r2, [sp, #0]
 8003a38:	0021      	movs	r1, r4
 8003a3a:	003a      	movs	r2, r7
 8003a3c:	4b06      	ldr	r3, [pc, #24]	@ (8003a58 <_vfiprintf_r+0x234>)
 8003a3e:	9803      	ldr	r0, [sp, #12]
 8003a40:	f000 f87c 	bl	8003b3c <_printf_i>
 8003a44:	e7e3      	b.n	8003a0e <_vfiprintf_r+0x1ea>
 8003a46:	46c0      	nop			@ (mov r8, r8)
 8003a48:	08004134 	.word	0x08004134
 8003a4c:	0800413a 	.word	0x0800413a
 8003a50:	0800413e 	.word	0x0800413e
 8003a54:	00000000 	.word	0x00000000
 8003a58:	080037ff 	.word	0x080037ff

08003a5c <_printf_common>:
 8003a5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a5e:	0016      	movs	r6, r2
 8003a60:	9301      	str	r3, [sp, #4]
 8003a62:	688a      	ldr	r2, [r1, #8]
 8003a64:	690b      	ldr	r3, [r1, #16]
 8003a66:	000c      	movs	r4, r1
 8003a68:	9000      	str	r0, [sp, #0]
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	da00      	bge.n	8003a70 <_printf_common+0x14>
 8003a6e:	0013      	movs	r3, r2
 8003a70:	0022      	movs	r2, r4
 8003a72:	6033      	str	r3, [r6, #0]
 8003a74:	3243      	adds	r2, #67	@ 0x43
 8003a76:	7812      	ldrb	r2, [r2, #0]
 8003a78:	2a00      	cmp	r2, #0
 8003a7a:	d001      	beq.n	8003a80 <_printf_common+0x24>
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	6033      	str	r3, [r6, #0]
 8003a80:	6823      	ldr	r3, [r4, #0]
 8003a82:	069b      	lsls	r3, r3, #26
 8003a84:	d502      	bpl.n	8003a8c <_printf_common+0x30>
 8003a86:	6833      	ldr	r3, [r6, #0]
 8003a88:	3302      	adds	r3, #2
 8003a8a:	6033      	str	r3, [r6, #0]
 8003a8c:	6822      	ldr	r2, [r4, #0]
 8003a8e:	2306      	movs	r3, #6
 8003a90:	0015      	movs	r5, r2
 8003a92:	401d      	ands	r5, r3
 8003a94:	421a      	tst	r2, r3
 8003a96:	d027      	beq.n	8003ae8 <_printf_common+0x8c>
 8003a98:	0023      	movs	r3, r4
 8003a9a:	3343      	adds	r3, #67	@ 0x43
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	1e5a      	subs	r2, r3, #1
 8003aa0:	4193      	sbcs	r3, r2
 8003aa2:	6822      	ldr	r2, [r4, #0]
 8003aa4:	0692      	lsls	r2, r2, #26
 8003aa6:	d430      	bmi.n	8003b0a <_printf_common+0xae>
 8003aa8:	0022      	movs	r2, r4
 8003aaa:	9901      	ldr	r1, [sp, #4]
 8003aac:	9800      	ldr	r0, [sp, #0]
 8003aae:	9d08      	ldr	r5, [sp, #32]
 8003ab0:	3243      	adds	r2, #67	@ 0x43
 8003ab2:	47a8      	blx	r5
 8003ab4:	3001      	adds	r0, #1
 8003ab6:	d025      	beq.n	8003b04 <_printf_common+0xa8>
 8003ab8:	2206      	movs	r2, #6
 8003aba:	6823      	ldr	r3, [r4, #0]
 8003abc:	2500      	movs	r5, #0
 8003abe:	4013      	ands	r3, r2
 8003ac0:	2b04      	cmp	r3, #4
 8003ac2:	d105      	bne.n	8003ad0 <_printf_common+0x74>
 8003ac4:	6833      	ldr	r3, [r6, #0]
 8003ac6:	68e5      	ldr	r5, [r4, #12]
 8003ac8:	1aed      	subs	r5, r5, r3
 8003aca:	43eb      	mvns	r3, r5
 8003acc:	17db      	asrs	r3, r3, #31
 8003ace:	401d      	ands	r5, r3
 8003ad0:	68a3      	ldr	r3, [r4, #8]
 8003ad2:	6922      	ldr	r2, [r4, #16]
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	dd01      	ble.n	8003adc <_printf_common+0x80>
 8003ad8:	1a9b      	subs	r3, r3, r2
 8003ada:	18ed      	adds	r5, r5, r3
 8003adc:	2600      	movs	r6, #0
 8003ade:	42b5      	cmp	r5, r6
 8003ae0:	d120      	bne.n	8003b24 <_printf_common+0xc8>
 8003ae2:	2000      	movs	r0, #0
 8003ae4:	e010      	b.n	8003b08 <_printf_common+0xac>
 8003ae6:	3501      	adds	r5, #1
 8003ae8:	68e3      	ldr	r3, [r4, #12]
 8003aea:	6832      	ldr	r2, [r6, #0]
 8003aec:	1a9b      	subs	r3, r3, r2
 8003aee:	42ab      	cmp	r3, r5
 8003af0:	ddd2      	ble.n	8003a98 <_printf_common+0x3c>
 8003af2:	0022      	movs	r2, r4
 8003af4:	2301      	movs	r3, #1
 8003af6:	9901      	ldr	r1, [sp, #4]
 8003af8:	9800      	ldr	r0, [sp, #0]
 8003afa:	9f08      	ldr	r7, [sp, #32]
 8003afc:	3219      	adds	r2, #25
 8003afe:	47b8      	blx	r7
 8003b00:	3001      	adds	r0, #1
 8003b02:	d1f0      	bne.n	8003ae6 <_printf_common+0x8a>
 8003b04:	2001      	movs	r0, #1
 8003b06:	4240      	negs	r0, r0
 8003b08:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003b0a:	2030      	movs	r0, #48	@ 0x30
 8003b0c:	18e1      	adds	r1, r4, r3
 8003b0e:	3143      	adds	r1, #67	@ 0x43
 8003b10:	7008      	strb	r0, [r1, #0]
 8003b12:	0021      	movs	r1, r4
 8003b14:	1c5a      	adds	r2, r3, #1
 8003b16:	3145      	adds	r1, #69	@ 0x45
 8003b18:	7809      	ldrb	r1, [r1, #0]
 8003b1a:	18a2      	adds	r2, r4, r2
 8003b1c:	3243      	adds	r2, #67	@ 0x43
 8003b1e:	3302      	adds	r3, #2
 8003b20:	7011      	strb	r1, [r2, #0]
 8003b22:	e7c1      	b.n	8003aa8 <_printf_common+0x4c>
 8003b24:	0022      	movs	r2, r4
 8003b26:	2301      	movs	r3, #1
 8003b28:	9901      	ldr	r1, [sp, #4]
 8003b2a:	9800      	ldr	r0, [sp, #0]
 8003b2c:	9f08      	ldr	r7, [sp, #32]
 8003b2e:	321a      	adds	r2, #26
 8003b30:	47b8      	blx	r7
 8003b32:	3001      	adds	r0, #1
 8003b34:	d0e6      	beq.n	8003b04 <_printf_common+0xa8>
 8003b36:	3601      	adds	r6, #1
 8003b38:	e7d1      	b.n	8003ade <_printf_common+0x82>
	...

08003b3c <_printf_i>:
 8003b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b3e:	b08b      	sub	sp, #44	@ 0x2c
 8003b40:	9206      	str	r2, [sp, #24]
 8003b42:	000a      	movs	r2, r1
 8003b44:	3243      	adds	r2, #67	@ 0x43
 8003b46:	9307      	str	r3, [sp, #28]
 8003b48:	9005      	str	r0, [sp, #20]
 8003b4a:	9203      	str	r2, [sp, #12]
 8003b4c:	7e0a      	ldrb	r2, [r1, #24]
 8003b4e:	000c      	movs	r4, r1
 8003b50:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003b52:	2a78      	cmp	r2, #120	@ 0x78
 8003b54:	d809      	bhi.n	8003b6a <_printf_i+0x2e>
 8003b56:	2a62      	cmp	r2, #98	@ 0x62
 8003b58:	d80b      	bhi.n	8003b72 <_printf_i+0x36>
 8003b5a:	2a00      	cmp	r2, #0
 8003b5c:	d100      	bne.n	8003b60 <_printf_i+0x24>
 8003b5e:	e0bc      	b.n	8003cda <_printf_i+0x19e>
 8003b60:	497b      	ldr	r1, [pc, #492]	@ (8003d50 <_printf_i+0x214>)
 8003b62:	9104      	str	r1, [sp, #16]
 8003b64:	2a58      	cmp	r2, #88	@ 0x58
 8003b66:	d100      	bne.n	8003b6a <_printf_i+0x2e>
 8003b68:	e090      	b.n	8003c8c <_printf_i+0x150>
 8003b6a:	0025      	movs	r5, r4
 8003b6c:	3542      	adds	r5, #66	@ 0x42
 8003b6e:	702a      	strb	r2, [r5, #0]
 8003b70:	e022      	b.n	8003bb8 <_printf_i+0x7c>
 8003b72:	0010      	movs	r0, r2
 8003b74:	3863      	subs	r0, #99	@ 0x63
 8003b76:	2815      	cmp	r0, #21
 8003b78:	d8f7      	bhi.n	8003b6a <_printf_i+0x2e>
 8003b7a:	f7fc fac5 	bl	8000108 <__gnu_thumb1_case_shi>
 8003b7e:	0016      	.short	0x0016
 8003b80:	fff6001f 	.word	0xfff6001f
 8003b84:	fff6fff6 	.word	0xfff6fff6
 8003b88:	001ffff6 	.word	0x001ffff6
 8003b8c:	fff6fff6 	.word	0xfff6fff6
 8003b90:	fff6fff6 	.word	0xfff6fff6
 8003b94:	003600a1 	.word	0x003600a1
 8003b98:	fff60080 	.word	0xfff60080
 8003b9c:	00b2fff6 	.word	0x00b2fff6
 8003ba0:	0036fff6 	.word	0x0036fff6
 8003ba4:	fff6fff6 	.word	0xfff6fff6
 8003ba8:	0084      	.short	0x0084
 8003baa:	0025      	movs	r5, r4
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	3542      	adds	r5, #66	@ 0x42
 8003bb0:	1d11      	adds	r1, r2, #4
 8003bb2:	6019      	str	r1, [r3, #0]
 8003bb4:	6813      	ldr	r3, [r2, #0]
 8003bb6:	702b      	strb	r3, [r5, #0]
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e0a0      	b.n	8003cfe <_printf_i+0x1c2>
 8003bbc:	6818      	ldr	r0, [r3, #0]
 8003bbe:	6809      	ldr	r1, [r1, #0]
 8003bc0:	1d02      	adds	r2, r0, #4
 8003bc2:	060d      	lsls	r5, r1, #24
 8003bc4:	d50b      	bpl.n	8003bde <_printf_i+0xa2>
 8003bc6:	6806      	ldr	r6, [r0, #0]
 8003bc8:	601a      	str	r2, [r3, #0]
 8003bca:	2e00      	cmp	r6, #0
 8003bcc:	da03      	bge.n	8003bd6 <_printf_i+0x9a>
 8003bce:	232d      	movs	r3, #45	@ 0x2d
 8003bd0:	9a03      	ldr	r2, [sp, #12]
 8003bd2:	4276      	negs	r6, r6
 8003bd4:	7013      	strb	r3, [r2, #0]
 8003bd6:	4b5e      	ldr	r3, [pc, #376]	@ (8003d50 <_printf_i+0x214>)
 8003bd8:	270a      	movs	r7, #10
 8003bda:	9304      	str	r3, [sp, #16]
 8003bdc:	e018      	b.n	8003c10 <_printf_i+0xd4>
 8003bde:	6806      	ldr	r6, [r0, #0]
 8003be0:	601a      	str	r2, [r3, #0]
 8003be2:	0649      	lsls	r1, r1, #25
 8003be4:	d5f1      	bpl.n	8003bca <_printf_i+0x8e>
 8003be6:	b236      	sxth	r6, r6
 8003be8:	e7ef      	b.n	8003bca <_printf_i+0x8e>
 8003bea:	6808      	ldr	r0, [r1, #0]
 8003bec:	6819      	ldr	r1, [r3, #0]
 8003bee:	c940      	ldmia	r1!, {r6}
 8003bf0:	0605      	lsls	r5, r0, #24
 8003bf2:	d402      	bmi.n	8003bfa <_printf_i+0xbe>
 8003bf4:	0640      	lsls	r0, r0, #25
 8003bf6:	d500      	bpl.n	8003bfa <_printf_i+0xbe>
 8003bf8:	b2b6      	uxth	r6, r6
 8003bfa:	6019      	str	r1, [r3, #0]
 8003bfc:	4b54      	ldr	r3, [pc, #336]	@ (8003d50 <_printf_i+0x214>)
 8003bfe:	270a      	movs	r7, #10
 8003c00:	9304      	str	r3, [sp, #16]
 8003c02:	2a6f      	cmp	r2, #111	@ 0x6f
 8003c04:	d100      	bne.n	8003c08 <_printf_i+0xcc>
 8003c06:	3f02      	subs	r7, #2
 8003c08:	0023      	movs	r3, r4
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	3343      	adds	r3, #67	@ 0x43
 8003c0e:	701a      	strb	r2, [r3, #0]
 8003c10:	6863      	ldr	r3, [r4, #4]
 8003c12:	60a3      	str	r3, [r4, #8]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	db03      	blt.n	8003c20 <_printf_i+0xe4>
 8003c18:	2104      	movs	r1, #4
 8003c1a:	6822      	ldr	r2, [r4, #0]
 8003c1c:	438a      	bics	r2, r1
 8003c1e:	6022      	str	r2, [r4, #0]
 8003c20:	2e00      	cmp	r6, #0
 8003c22:	d102      	bne.n	8003c2a <_printf_i+0xee>
 8003c24:	9d03      	ldr	r5, [sp, #12]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00c      	beq.n	8003c44 <_printf_i+0x108>
 8003c2a:	9d03      	ldr	r5, [sp, #12]
 8003c2c:	0030      	movs	r0, r6
 8003c2e:	0039      	movs	r1, r7
 8003c30:	f7fc fafa 	bl	8000228 <__aeabi_uidivmod>
 8003c34:	9b04      	ldr	r3, [sp, #16]
 8003c36:	3d01      	subs	r5, #1
 8003c38:	5c5b      	ldrb	r3, [r3, r1]
 8003c3a:	702b      	strb	r3, [r5, #0]
 8003c3c:	0033      	movs	r3, r6
 8003c3e:	0006      	movs	r6, r0
 8003c40:	429f      	cmp	r7, r3
 8003c42:	d9f3      	bls.n	8003c2c <_printf_i+0xf0>
 8003c44:	2f08      	cmp	r7, #8
 8003c46:	d109      	bne.n	8003c5c <_printf_i+0x120>
 8003c48:	6823      	ldr	r3, [r4, #0]
 8003c4a:	07db      	lsls	r3, r3, #31
 8003c4c:	d506      	bpl.n	8003c5c <_printf_i+0x120>
 8003c4e:	6862      	ldr	r2, [r4, #4]
 8003c50:	6923      	ldr	r3, [r4, #16]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	dc02      	bgt.n	8003c5c <_printf_i+0x120>
 8003c56:	2330      	movs	r3, #48	@ 0x30
 8003c58:	3d01      	subs	r5, #1
 8003c5a:	702b      	strb	r3, [r5, #0]
 8003c5c:	9b03      	ldr	r3, [sp, #12]
 8003c5e:	1b5b      	subs	r3, r3, r5
 8003c60:	6123      	str	r3, [r4, #16]
 8003c62:	9b07      	ldr	r3, [sp, #28]
 8003c64:	0021      	movs	r1, r4
 8003c66:	9300      	str	r3, [sp, #0]
 8003c68:	9805      	ldr	r0, [sp, #20]
 8003c6a:	9b06      	ldr	r3, [sp, #24]
 8003c6c:	aa09      	add	r2, sp, #36	@ 0x24
 8003c6e:	f7ff fef5 	bl	8003a5c <_printf_common>
 8003c72:	3001      	adds	r0, #1
 8003c74:	d148      	bne.n	8003d08 <_printf_i+0x1cc>
 8003c76:	2001      	movs	r0, #1
 8003c78:	4240      	negs	r0, r0
 8003c7a:	b00b      	add	sp, #44	@ 0x2c
 8003c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c7e:	2220      	movs	r2, #32
 8003c80:	6809      	ldr	r1, [r1, #0]
 8003c82:	430a      	orrs	r2, r1
 8003c84:	6022      	str	r2, [r4, #0]
 8003c86:	2278      	movs	r2, #120	@ 0x78
 8003c88:	4932      	ldr	r1, [pc, #200]	@ (8003d54 <_printf_i+0x218>)
 8003c8a:	9104      	str	r1, [sp, #16]
 8003c8c:	0021      	movs	r1, r4
 8003c8e:	3145      	adds	r1, #69	@ 0x45
 8003c90:	700a      	strb	r2, [r1, #0]
 8003c92:	6819      	ldr	r1, [r3, #0]
 8003c94:	6822      	ldr	r2, [r4, #0]
 8003c96:	c940      	ldmia	r1!, {r6}
 8003c98:	0610      	lsls	r0, r2, #24
 8003c9a:	d402      	bmi.n	8003ca2 <_printf_i+0x166>
 8003c9c:	0650      	lsls	r0, r2, #25
 8003c9e:	d500      	bpl.n	8003ca2 <_printf_i+0x166>
 8003ca0:	b2b6      	uxth	r6, r6
 8003ca2:	6019      	str	r1, [r3, #0]
 8003ca4:	07d3      	lsls	r3, r2, #31
 8003ca6:	d502      	bpl.n	8003cae <_printf_i+0x172>
 8003ca8:	2320      	movs	r3, #32
 8003caa:	4313      	orrs	r3, r2
 8003cac:	6023      	str	r3, [r4, #0]
 8003cae:	2e00      	cmp	r6, #0
 8003cb0:	d001      	beq.n	8003cb6 <_printf_i+0x17a>
 8003cb2:	2710      	movs	r7, #16
 8003cb4:	e7a8      	b.n	8003c08 <_printf_i+0xcc>
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	6823      	ldr	r3, [r4, #0]
 8003cba:	4393      	bics	r3, r2
 8003cbc:	6023      	str	r3, [r4, #0]
 8003cbe:	e7f8      	b.n	8003cb2 <_printf_i+0x176>
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	680d      	ldr	r5, [r1, #0]
 8003cc4:	1d10      	adds	r0, r2, #4
 8003cc6:	6949      	ldr	r1, [r1, #20]
 8003cc8:	6018      	str	r0, [r3, #0]
 8003cca:	6813      	ldr	r3, [r2, #0]
 8003ccc:	062e      	lsls	r6, r5, #24
 8003cce:	d501      	bpl.n	8003cd4 <_printf_i+0x198>
 8003cd0:	6019      	str	r1, [r3, #0]
 8003cd2:	e002      	b.n	8003cda <_printf_i+0x19e>
 8003cd4:	066d      	lsls	r5, r5, #25
 8003cd6:	d5fb      	bpl.n	8003cd0 <_printf_i+0x194>
 8003cd8:	8019      	strh	r1, [r3, #0]
 8003cda:	2300      	movs	r3, #0
 8003cdc:	9d03      	ldr	r5, [sp, #12]
 8003cde:	6123      	str	r3, [r4, #16]
 8003ce0:	e7bf      	b.n	8003c62 <_printf_i+0x126>
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	1d11      	adds	r1, r2, #4
 8003ce6:	6019      	str	r1, [r3, #0]
 8003ce8:	6815      	ldr	r5, [r2, #0]
 8003cea:	2100      	movs	r1, #0
 8003cec:	0028      	movs	r0, r5
 8003cee:	6862      	ldr	r2, [r4, #4]
 8003cf0:	f000 f986 	bl	8004000 <memchr>
 8003cf4:	2800      	cmp	r0, #0
 8003cf6:	d001      	beq.n	8003cfc <_printf_i+0x1c0>
 8003cf8:	1b40      	subs	r0, r0, r5
 8003cfa:	6060      	str	r0, [r4, #4]
 8003cfc:	6863      	ldr	r3, [r4, #4]
 8003cfe:	6123      	str	r3, [r4, #16]
 8003d00:	2300      	movs	r3, #0
 8003d02:	9a03      	ldr	r2, [sp, #12]
 8003d04:	7013      	strb	r3, [r2, #0]
 8003d06:	e7ac      	b.n	8003c62 <_printf_i+0x126>
 8003d08:	002a      	movs	r2, r5
 8003d0a:	6923      	ldr	r3, [r4, #16]
 8003d0c:	9906      	ldr	r1, [sp, #24]
 8003d0e:	9805      	ldr	r0, [sp, #20]
 8003d10:	9d07      	ldr	r5, [sp, #28]
 8003d12:	47a8      	blx	r5
 8003d14:	3001      	adds	r0, #1
 8003d16:	d0ae      	beq.n	8003c76 <_printf_i+0x13a>
 8003d18:	6823      	ldr	r3, [r4, #0]
 8003d1a:	079b      	lsls	r3, r3, #30
 8003d1c:	d415      	bmi.n	8003d4a <_printf_i+0x20e>
 8003d1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d20:	68e0      	ldr	r0, [r4, #12]
 8003d22:	4298      	cmp	r0, r3
 8003d24:	daa9      	bge.n	8003c7a <_printf_i+0x13e>
 8003d26:	0018      	movs	r0, r3
 8003d28:	e7a7      	b.n	8003c7a <_printf_i+0x13e>
 8003d2a:	0022      	movs	r2, r4
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	9906      	ldr	r1, [sp, #24]
 8003d30:	9805      	ldr	r0, [sp, #20]
 8003d32:	9e07      	ldr	r6, [sp, #28]
 8003d34:	3219      	adds	r2, #25
 8003d36:	47b0      	blx	r6
 8003d38:	3001      	adds	r0, #1
 8003d3a:	d09c      	beq.n	8003c76 <_printf_i+0x13a>
 8003d3c:	3501      	adds	r5, #1
 8003d3e:	68e3      	ldr	r3, [r4, #12]
 8003d40:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003d42:	1a9b      	subs	r3, r3, r2
 8003d44:	42ab      	cmp	r3, r5
 8003d46:	dcf0      	bgt.n	8003d2a <_printf_i+0x1ee>
 8003d48:	e7e9      	b.n	8003d1e <_printf_i+0x1e2>
 8003d4a:	2500      	movs	r5, #0
 8003d4c:	e7f7      	b.n	8003d3e <_printf_i+0x202>
 8003d4e:	46c0      	nop			@ (mov r8, r8)
 8003d50:	08004145 	.word	0x08004145
 8003d54:	08004156 	.word	0x08004156

08003d58 <__sflush_r>:
 8003d58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d5a:	220c      	movs	r2, #12
 8003d5c:	5e8b      	ldrsh	r3, [r1, r2]
 8003d5e:	0005      	movs	r5, r0
 8003d60:	000c      	movs	r4, r1
 8003d62:	071a      	lsls	r2, r3, #28
 8003d64:	d456      	bmi.n	8003e14 <__sflush_r+0xbc>
 8003d66:	684a      	ldr	r2, [r1, #4]
 8003d68:	2a00      	cmp	r2, #0
 8003d6a:	dc02      	bgt.n	8003d72 <__sflush_r+0x1a>
 8003d6c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8003d6e:	2a00      	cmp	r2, #0
 8003d70:	dd4e      	ble.n	8003e10 <__sflush_r+0xb8>
 8003d72:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8003d74:	2f00      	cmp	r7, #0
 8003d76:	d04b      	beq.n	8003e10 <__sflush_r+0xb8>
 8003d78:	2200      	movs	r2, #0
 8003d7a:	2080      	movs	r0, #128	@ 0x80
 8003d7c:	682e      	ldr	r6, [r5, #0]
 8003d7e:	602a      	str	r2, [r5, #0]
 8003d80:	001a      	movs	r2, r3
 8003d82:	0140      	lsls	r0, r0, #5
 8003d84:	6a21      	ldr	r1, [r4, #32]
 8003d86:	4002      	ands	r2, r0
 8003d88:	4203      	tst	r3, r0
 8003d8a:	d033      	beq.n	8003df4 <__sflush_r+0x9c>
 8003d8c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003d8e:	89a3      	ldrh	r3, [r4, #12]
 8003d90:	075b      	lsls	r3, r3, #29
 8003d92:	d506      	bpl.n	8003da2 <__sflush_r+0x4a>
 8003d94:	6863      	ldr	r3, [r4, #4]
 8003d96:	1ad2      	subs	r2, r2, r3
 8003d98:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d001      	beq.n	8003da2 <__sflush_r+0x4a>
 8003d9e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003da0:	1ad2      	subs	r2, r2, r3
 8003da2:	2300      	movs	r3, #0
 8003da4:	0028      	movs	r0, r5
 8003da6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8003da8:	6a21      	ldr	r1, [r4, #32]
 8003daa:	47b8      	blx	r7
 8003dac:	89a2      	ldrh	r2, [r4, #12]
 8003dae:	1c43      	adds	r3, r0, #1
 8003db0:	d106      	bne.n	8003dc0 <__sflush_r+0x68>
 8003db2:	6829      	ldr	r1, [r5, #0]
 8003db4:	291d      	cmp	r1, #29
 8003db6:	d846      	bhi.n	8003e46 <__sflush_r+0xee>
 8003db8:	4b29      	ldr	r3, [pc, #164]	@ (8003e60 <__sflush_r+0x108>)
 8003dba:	410b      	asrs	r3, r1
 8003dbc:	07db      	lsls	r3, r3, #31
 8003dbe:	d442      	bmi.n	8003e46 <__sflush_r+0xee>
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	6063      	str	r3, [r4, #4]
 8003dc4:	6923      	ldr	r3, [r4, #16]
 8003dc6:	6023      	str	r3, [r4, #0]
 8003dc8:	04d2      	lsls	r2, r2, #19
 8003dca:	d505      	bpl.n	8003dd8 <__sflush_r+0x80>
 8003dcc:	1c43      	adds	r3, r0, #1
 8003dce:	d102      	bne.n	8003dd6 <__sflush_r+0x7e>
 8003dd0:	682b      	ldr	r3, [r5, #0]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d100      	bne.n	8003dd8 <__sflush_r+0x80>
 8003dd6:	6560      	str	r0, [r4, #84]	@ 0x54
 8003dd8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003dda:	602e      	str	r6, [r5, #0]
 8003ddc:	2900      	cmp	r1, #0
 8003dde:	d017      	beq.n	8003e10 <__sflush_r+0xb8>
 8003de0:	0023      	movs	r3, r4
 8003de2:	3344      	adds	r3, #68	@ 0x44
 8003de4:	4299      	cmp	r1, r3
 8003de6:	d002      	beq.n	8003dee <__sflush_r+0x96>
 8003de8:	0028      	movs	r0, r5
 8003dea:	f7ff fbf7 	bl	80035dc <_free_r>
 8003dee:	2300      	movs	r3, #0
 8003df0:	6363      	str	r3, [r4, #52]	@ 0x34
 8003df2:	e00d      	b.n	8003e10 <__sflush_r+0xb8>
 8003df4:	2301      	movs	r3, #1
 8003df6:	0028      	movs	r0, r5
 8003df8:	47b8      	blx	r7
 8003dfa:	0002      	movs	r2, r0
 8003dfc:	1c43      	adds	r3, r0, #1
 8003dfe:	d1c6      	bne.n	8003d8e <__sflush_r+0x36>
 8003e00:	682b      	ldr	r3, [r5, #0]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d0c3      	beq.n	8003d8e <__sflush_r+0x36>
 8003e06:	2b1d      	cmp	r3, #29
 8003e08:	d001      	beq.n	8003e0e <__sflush_r+0xb6>
 8003e0a:	2b16      	cmp	r3, #22
 8003e0c:	d11a      	bne.n	8003e44 <__sflush_r+0xec>
 8003e0e:	602e      	str	r6, [r5, #0]
 8003e10:	2000      	movs	r0, #0
 8003e12:	e01e      	b.n	8003e52 <__sflush_r+0xfa>
 8003e14:	690e      	ldr	r6, [r1, #16]
 8003e16:	2e00      	cmp	r6, #0
 8003e18:	d0fa      	beq.n	8003e10 <__sflush_r+0xb8>
 8003e1a:	680f      	ldr	r7, [r1, #0]
 8003e1c:	600e      	str	r6, [r1, #0]
 8003e1e:	1bba      	subs	r2, r7, r6
 8003e20:	9201      	str	r2, [sp, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	079b      	lsls	r3, r3, #30
 8003e26:	d100      	bne.n	8003e2a <__sflush_r+0xd2>
 8003e28:	694a      	ldr	r2, [r1, #20]
 8003e2a:	60a2      	str	r2, [r4, #8]
 8003e2c:	9b01      	ldr	r3, [sp, #4]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	ddee      	ble.n	8003e10 <__sflush_r+0xb8>
 8003e32:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003e34:	0032      	movs	r2, r6
 8003e36:	001f      	movs	r7, r3
 8003e38:	0028      	movs	r0, r5
 8003e3a:	9b01      	ldr	r3, [sp, #4]
 8003e3c:	6a21      	ldr	r1, [r4, #32]
 8003e3e:	47b8      	blx	r7
 8003e40:	2800      	cmp	r0, #0
 8003e42:	dc07      	bgt.n	8003e54 <__sflush_r+0xfc>
 8003e44:	89a2      	ldrh	r2, [r4, #12]
 8003e46:	2340      	movs	r3, #64	@ 0x40
 8003e48:	2001      	movs	r0, #1
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	b21b      	sxth	r3, r3
 8003e4e:	81a3      	strh	r3, [r4, #12]
 8003e50:	4240      	negs	r0, r0
 8003e52:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003e54:	9b01      	ldr	r3, [sp, #4]
 8003e56:	1836      	adds	r6, r6, r0
 8003e58:	1a1b      	subs	r3, r3, r0
 8003e5a:	9301      	str	r3, [sp, #4]
 8003e5c:	e7e6      	b.n	8003e2c <__sflush_r+0xd4>
 8003e5e:	46c0      	nop			@ (mov r8, r8)
 8003e60:	dfbffffe 	.word	0xdfbffffe

08003e64 <_fflush_r>:
 8003e64:	690b      	ldr	r3, [r1, #16]
 8003e66:	b570      	push	{r4, r5, r6, lr}
 8003e68:	0005      	movs	r5, r0
 8003e6a:	000c      	movs	r4, r1
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d102      	bne.n	8003e76 <_fflush_r+0x12>
 8003e70:	2500      	movs	r5, #0
 8003e72:	0028      	movs	r0, r5
 8003e74:	bd70      	pop	{r4, r5, r6, pc}
 8003e76:	2800      	cmp	r0, #0
 8003e78:	d004      	beq.n	8003e84 <_fflush_r+0x20>
 8003e7a:	6a03      	ldr	r3, [r0, #32]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d101      	bne.n	8003e84 <_fflush_r+0x20>
 8003e80:	f7ff f998 	bl	80031b4 <__sinit>
 8003e84:	220c      	movs	r2, #12
 8003e86:	5ea3      	ldrsh	r3, [r4, r2]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d0f1      	beq.n	8003e70 <_fflush_r+0xc>
 8003e8c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003e8e:	07d2      	lsls	r2, r2, #31
 8003e90:	d404      	bmi.n	8003e9c <_fflush_r+0x38>
 8003e92:	059b      	lsls	r3, r3, #22
 8003e94:	d402      	bmi.n	8003e9c <_fflush_r+0x38>
 8003e96:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003e98:	f7ff fb9d 	bl	80035d6 <__retarget_lock_acquire_recursive>
 8003e9c:	0028      	movs	r0, r5
 8003e9e:	0021      	movs	r1, r4
 8003ea0:	f7ff ff5a 	bl	8003d58 <__sflush_r>
 8003ea4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003ea6:	0005      	movs	r5, r0
 8003ea8:	07db      	lsls	r3, r3, #31
 8003eaa:	d4e2      	bmi.n	8003e72 <_fflush_r+0xe>
 8003eac:	89a3      	ldrh	r3, [r4, #12]
 8003eae:	059b      	lsls	r3, r3, #22
 8003eb0:	d4df      	bmi.n	8003e72 <_fflush_r+0xe>
 8003eb2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003eb4:	f7ff fb90 	bl	80035d8 <__retarget_lock_release_recursive>
 8003eb8:	e7db      	b.n	8003e72 <_fflush_r+0xe>
	...

08003ebc <__swhatbuf_r>:
 8003ebc:	b570      	push	{r4, r5, r6, lr}
 8003ebe:	000e      	movs	r6, r1
 8003ec0:	001d      	movs	r5, r3
 8003ec2:	230e      	movs	r3, #14
 8003ec4:	5ec9      	ldrsh	r1, [r1, r3]
 8003ec6:	0014      	movs	r4, r2
 8003ec8:	b096      	sub	sp, #88	@ 0x58
 8003eca:	2900      	cmp	r1, #0
 8003ecc:	da0c      	bge.n	8003ee8 <__swhatbuf_r+0x2c>
 8003ece:	89b2      	ldrh	r2, [r6, #12]
 8003ed0:	2380      	movs	r3, #128	@ 0x80
 8003ed2:	0011      	movs	r1, r2
 8003ed4:	4019      	ands	r1, r3
 8003ed6:	421a      	tst	r2, r3
 8003ed8:	d114      	bne.n	8003f04 <__swhatbuf_r+0x48>
 8003eda:	2380      	movs	r3, #128	@ 0x80
 8003edc:	00db      	lsls	r3, r3, #3
 8003ede:	2000      	movs	r0, #0
 8003ee0:	6029      	str	r1, [r5, #0]
 8003ee2:	6023      	str	r3, [r4, #0]
 8003ee4:	b016      	add	sp, #88	@ 0x58
 8003ee6:	bd70      	pop	{r4, r5, r6, pc}
 8003ee8:	466a      	mov	r2, sp
 8003eea:	f000 f853 	bl	8003f94 <_fstat_r>
 8003eee:	2800      	cmp	r0, #0
 8003ef0:	dbed      	blt.n	8003ece <__swhatbuf_r+0x12>
 8003ef2:	23f0      	movs	r3, #240	@ 0xf0
 8003ef4:	9901      	ldr	r1, [sp, #4]
 8003ef6:	021b      	lsls	r3, r3, #8
 8003ef8:	4019      	ands	r1, r3
 8003efa:	4b04      	ldr	r3, [pc, #16]	@ (8003f0c <__swhatbuf_r+0x50>)
 8003efc:	18c9      	adds	r1, r1, r3
 8003efe:	424b      	negs	r3, r1
 8003f00:	4159      	adcs	r1, r3
 8003f02:	e7ea      	b.n	8003eda <__swhatbuf_r+0x1e>
 8003f04:	2100      	movs	r1, #0
 8003f06:	2340      	movs	r3, #64	@ 0x40
 8003f08:	e7e9      	b.n	8003ede <__swhatbuf_r+0x22>
 8003f0a:	46c0      	nop			@ (mov r8, r8)
 8003f0c:	ffffe000 	.word	0xffffe000

08003f10 <__smakebuf_r>:
 8003f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f12:	2602      	movs	r6, #2
 8003f14:	898b      	ldrh	r3, [r1, #12]
 8003f16:	0005      	movs	r5, r0
 8003f18:	000c      	movs	r4, r1
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	4233      	tst	r3, r6
 8003f1e:	d007      	beq.n	8003f30 <__smakebuf_r+0x20>
 8003f20:	0023      	movs	r3, r4
 8003f22:	3347      	adds	r3, #71	@ 0x47
 8003f24:	6023      	str	r3, [r4, #0]
 8003f26:	6123      	str	r3, [r4, #16]
 8003f28:	2301      	movs	r3, #1
 8003f2a:	6163      	str	r3, [r4, #20]
 8003f2c:	b005      	add	sp, #20
 8003f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f30:	ab03      	add	r3, sp, #12
 8003f32:	aa02      	add	r2, sp, #8
 8003f34:	f7ff ffc2 	bl	8003ebc <__swhatbuf_r>
 8003f38:	9f02      	ldr	r7, [sp, #8]
 8003f3a:	9001      	str	r0, [sp, #4]
 8003f3c:	0039      	movs	r1, r7
 8003f3e:	0028      	movs	r0, r5
 8003f40:	f7ff fbb8 	bl	80036b4 <_malloc_r>
 8003f44:	2800      	cmp	r0, #0
 8003f46:	d108      	bne.n	8003f5a <__smakebuf_r+0x4a>
 8003f48:	220c      	movs	r2, #12
 8003f4a:	5ea3      	ldrsh	r3, [r4, r2]
 8003f4c:	059a      	lsls	r2, r3, #22
 8003f4e:	d4ed      	bmi.n	8003f2c <__smakebuf_r+0x1c>
 8003f50:	2203      	movs	r2, #3
 8003f52:	4393      	bics	r3, r2
 8003f54:	431e      	orrs	r6, r3
 8003f56:	81a6      	strh	r6, [r4, #12]
 8003f58:	e7e2      	b.n	8003f20 <__smakebuf_r+0x10>
 8003f5a:	2380      	movs	r3, #128	@ 0x80
 8003f5c:	89a2      	ldrh	r2, [r4, #12]
 8003f5e:	6020      	str	r0, [r4, #0]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	81a3      	strh	r3, [r4, #12]
 8003f64:	9b03      	ldr	r3, [sp, #12]
 8003f66:	6120      	str	r0, [r4, #16]
 8003f68:	6167      	str	r7, [r4, #20]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00c      	beq.n	8003f88 <__smakebuf_r+0x78>
 8003f6e:	0028      	movs	r0, r5
 8003f70:	230e      	movs	r3, #14
 8003f72:	5ee1      	ldrsh	r1, [r4, r3]
 8003f74:	f000 f820 	bl	8003fb8 <_isatty_r>
 8003f78:	2800      	cmp	r0, #0
 8003f7a:	d005      	beq.n	8003f88 <__smakebuf_r+0x78>
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	89a2      	ldrh	r2, [r4, #12]
 8003f80:	439a      	bics	r2, r3
 8003f82:	3b02      	subs	r3, #2
 8003f84:	4313      	orrs	r3, r2
 8003f86:	81a3      	strh	r3, [r4, #12]
 8003f88:	89a3      	ldrh	r3, [r4, #12]
 8003f8a:	9a01      	ldr	r2, [sp, #4]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	81a3      	strh	r3, [r4, #12]
 8003f90:	e7cc      	b.n	8003f2c <__smakebuf_r+0x1c>
	...

08003f94 <_fstat_r>:
 8003f94:	2300      	movs	r3, #0
 8003f96:	b570      	push	{r4, r5, r6, lr}
 8003f98:	4d06      	ldr	r5, [pc, #24]	@ (8003fb4 <_fstat_r+0x20>)
 8003f9a:	0004      	movs	r4, r0
 8003f9c:	0008      	movs	r0, r1
 8003f9e:	0011      	movs	r1, r2
 8003fa0:	602b      	str	r3, [r5, #0]
 8003fa2:	f7fc fe6b 	bl	8000c7c <_fstat>
 8003fa6:	1c43      	adds	r3, r0, #1
 8003fa8:	d103      	bne.n	8003fb2 <_fstat_r+0x1e>
 8003faa:	682b      	ldr	r3, [r5, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d000      	beq.n	8003fb2 <_fstat_r+0x1e>
 8003fb0:	6023      	str	r3, [r4, #0]
 8003fb2:	bd70      	pop	{r4, r5, r6, pc}
 8003fb4:	200002cc 	.word	0x200002cc

08003fb8 <_isatty_r>:
 8003fb8:	2300      	movs	r3, #0
 8003fba:	b570      	push	{r4, r5, r6, lr}
 8003fbc:	4d06      	ldr	r5, [pc, #24]	@ (8003fd8 <_isatty_r+0x20>)
 8003fbe:	0004      	movs	r4, r0
 8003fc0:	0008      	movs	r0, r1
 8003fc2:	602b      	str	r3, [r5, #0]
 8003fc4:	f7fc fe68 	bl	8000c98 <_isatty>
 8003fc8:	1c43      	adds	r3, r0, #1
 8003fca:	d103      	bne.n	8003fd4 <_isatty_r+0x1c>
 8003fcc:	682b      	ldr	r3, [r5, #0]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d000      	beq.n	8003fd4 <_isatty_r+0x1c>
 8003fd2:	6023      	str	r3, [r4, #0]
 8003fd4:	bd70      	pop	{r4, r5, r6, pc}
 8003fd6:	46c0      	nop			@ (mov r8, r8)
 8003fd8:	200002cc 	.word	0x200002cc

08003fdc <_sbrk_r>:
 8003fdc:	2300      	movs	r3, #0
 8003fde:	b570      	push	{r4, r5, r6, lr}
 8003fe0:	4d06      	ldr	r5, [pc, #24]	@ (8003ffc <_sbrk_r+0x20>)
 8003fe2:	0004      	movs	r4, r0
 8003fe4:	0008      	movs	r0, r1
 8003fe6:	602b      	str	r3, [r5, #0]
 8003fe8:	f7fc fe6a 	bl	8000cc0 <_sbrk>
 8003fec:	1c43      	adds	r3, r0, #1
 8003fee:	d103      	bne.n	8003ff8 <_sbrk_r+0x1c>
 8003ff0:	682b      	ldr	r3, [r5, #0]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d000      	beq.n	8003ff8 <_sbrk_r+0x1c>
 8003ff6:	6023      	str	r3, [r4, #0]
 8003ff8:	bd70      	pop	{r4, r5, r6, pc}
 8003ffa:	46c0      	nop			@ (mov r8, r8)
 8003ffc:	200002cc 	.word	0x200002cc

08004000 <memchr>:
 8004000:	b2c9      	uxtb	r1, r1
 8004002:	1882      	adds	r2, r0, r2
 8004004:	4290      	cmp	r0, r2
 8004006:	d101      	bne.n	800400c <memchr+0xc>
 8004008:	2000      	movs	r0, #0
 800400a:	4770      	bx	lr
 800400c:	7803      	ldrb	r3, [r0, #0]
 800400e:	428b      	cmp	r3, r1
 8004010:	d0fb      	beq.n	800400a <memchr+0xa>
 8004012:	3001      	adds	r0, #1
 8004014:	e7f6      	b.n	8004004 <memchr+0x4>
	...

08004018 <_init>:
 8004018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800401a:	46c0      	nop			@ (mov r8, r8)
 800401c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800401e:	bc08      	pop	{r3}
 8004020:	469e      	mov	lr, r3
 8004022:	4770      	bx	lr

08004024 <_fini>:
 8004024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004026:	46c0      	nop			@ (mov r8, r8)
 8004028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800402a:	bc08      	pop	{r3}
 800402c:	469e      	mov	lr, r3
 800402e:	4770      	bx	lr
